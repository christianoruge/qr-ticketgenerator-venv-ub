from typing import List, Optional, Dict, Iterable
import aspose.pycore
import aspose.pydrawing
import aspose.slides
import aspose.slides.animation
import aspose.slides.charts
import aspose.slides.dom.ole
import aspose.slides.effects
import aspose.slides.export
import aspose.slides.export.web
import aspose.slides.export.xaml
import aspose.slides.importing
import aspose.slides.ink
import aspose.slides.lowcode
import aspose.slides.mathtext
import aspose.slides.slideshow
import aspose.slides.smartart
import aspose.slides.spreadsheet
import aspose.slides.theme
import aspose.slides.util
import aspose.slides.vba
import aspose.slides.warnings

class AdjustValue:
    '''Represents a geometry shape's adjustment value.
                These values affect shape's form.'''
    @property
    def raw_value(self) -> int:
        ...

    @raw_value.setter
    def raw_value(self, value: int):
        ...

    @property
    def angle_value(self) -> float:
        ...

    @angle_value.setter
    def angle_value(self, value: float):
        ...

    @property
    def name(self) -> str:
        '''Returns a name of this adjustment value.
                    Read-only :py:class:`str`.'''
        ...

    @property
    def type(self) -> ShapeAdjustmentType:
        '''Returns the type of the shape adjustment.
                    Read-only :py:enum:`aspose.slides.ShapeAdjustmentType`.'''
        ...

    ...

class AdjustValueCollection:
    '''Reprasents a collection of shape's adjustments.'''
    @property
    def as_i_collection(self) -> list:
        ...

    @property
    def as_i_enumerable(self) -> collections.abc.Iterable:
        ...

    def __getitem__(self, key: int) -> IAdjustValue
        ...

    ...

class Audio:
    '''Represents an embedded audio file.'''
    def get_stream(self) -> io.RawIOBase:
        '''Returns Stream stream for reading.
                    Use 'using' or close stream after using.
        :returns: Stream for reading.'''
        ...

    @property
    def content_type(self) -> str:
        ...

    @content_type.setter
    def content_type(self, value: str):
        ...

    @property
    def binary_data(self) -> bytes:
        ...

    ...

class AudioCollection:
    '''Represents a collection of embedded audio files.'''
    @overload
    def add_audio(self, audio: IAudio) -> IAudio:
        '''Adds a copy of an audio file from an another presentation.
        :param audio: Source audio.
        :returns: Added audio.'''
        ...

    @overload
    def add_audio(self, stream: io.RawIOBase) -> IAudio:
        '''Creates and adds a audio to a presentation from stream.
        :param stream: Stream to add audio from.
        :returns: Added audio.'''
        ...

    @overload
    def add_audio(self, stream: io.RawIOBase, loading_stream_behavior: LoadingStreamBehavior) -> IAudio:
        '''Creates and adds a audio to a presentation from stream.
        :param stream: Stream to add video audio from.
        :param loading_stream_behavior: The behavior which will be applied to the stream.
        :returns: Added audio.'''
        ...

    @overload
    def add_audio(self, audio_data: bytes) -> IAudio:
        '''Creates and adds a audio to a presentation from byte array.
        :param audio_data: Audio bytes.
        :returns: Added audio.'''
        ...

    @property
    def as_i_collection(self) -> list:
        ...

    @property
    def as_i_enumerable(self) -> collections.abc.Iterable:
        ...

    def __getitem__(self, key: int) -> IAudio
        ...

    ...

class AudioFrame(PictureFrame):
    '''Represents an audio clip on a slide.'''
    @overload
    def get_thumbnail(self) -> aspose.pydrawing.Bitmap:
        '''Returns shape thumbnail.
                    ShapeThumbnailBounds.Shape shape thumbnail bounds type is used by default.
        :returns: Shape thumbnail.'''
        ...

    @overload
    def get_thumbnail(self, bounds: ShapeThumbnailBounds, scale_x: float, scale_y: float) -> aspose.pydrawing.Bitmap:
        '''Returns shape thumbnail.
        :param bounds: Shape thumbnail bounds type.
        :param scale_x: X scale
        :param scale_y: Y scale
        :returns: Shape thumbnail or None in case when ShapeThumbnailBounds.Appearance is used and a shape doesn't have visible elements.'''
        ...

    @overload
    def get_image(self) -> IImage:
        '''Returns shape thumbnail.
                    ShapeThumbnailBounds.Shape shape thumbnail bounds type is used by default.
        :returns: Shape thumbnail.'''
        ...

    @overload
    def get_image(self, bounds: ShapeThumbnailBounds, scale_x: float, scale_y: float) -> IImage:
        '''Returns shape thumbnail.
        :param bounds: Shape thumbnail bounds type.
        :param scale_x: X scale
        :param scale_y: Y scale
        :returns: Shape thumbnail or None in case when ShapeThumbnailBounds.Appearance is used and a shape doesn't have visible elements.'''
        ...

    @overload
    def write_as_svg(self, stream: io.RawIOBase) -> None:
        '''Saves content of Shape as SVG file.
        :param stream: Target stream'''
        ...

    @overload
    def write_as_svg(self, stream: io.RawIOBase, svg_options: aspose.slides.export.ISVGOptions) -> None:
        '''Saves content of Shape as SVG file.
        :param stream: Target stream
        :param svg_options: SVG generation options'''
        ...

    def remove_placeholder(self) -> None:
        '''Defines that this shape isn't a placeholder.'''
        ...

    def add_placeholder(self, placeholder_to_copy_from: IPlaceholder) -> IPlaceholder:
        '''Adds a new placeholder if there is no and sets placeholder properties to a specified one.
        :param placeholder_to_copy_from: Placeholder to copy content from.
        :returns: New :py:attr:`aspose.slides.Shape.placeholder`.'''
        ...

    def get_base_placeholder(self) -> IShape:
        '''Returns a basic placeholder shape (shape from the layout and/or master slide that the current shape is inherited from).'''
        ...

    def get_geometry_paths(self) -> List[IGeometryPath]:
        '''Returns the copy of path of the geometry shape. Coordinates are relative to the left top corner of the shape.
        :returns: Array of :py:class:`aspose.slides.IGeometryPath`'''
        ...

    def set_geometry_path(self, geometry_path: IGeometryPath) -> None:
        '''Updates shape geometry from :py:class:`aspose.slides.IGeometryPath` object. Coordinates must be relative to the left
                     top corner of the shape.
                     Changes the type of the shape (:py:attr:`aspose.slides.GeometryShape.shape_type`) to :py:attr:`aspose.slides.ShapeType.CUSTOM`.
        :param geometry_path: Geometry path'''
        ...

    def set_geometry_paths(self, geometry_paths: List[IGeometryPath]) -> None:
        '''Updates shape geometry from array of :py:class:`aspose.slides.IGeometryPath`. Coordinates must be relative to the left
                     top corner of the shape.
                     Changes the type of the shape (:py:attr:`aspose.slides.GeometryShape.shape_type`) to :py:attr:`aspose.slides.ShapeType.CUSTOM`.
        :param geometry_paths: Array geometry paths'''
        ...

    def create_shape_elements(self) -> List[IShapeElement]:
        '''Creates and returns array of shape's elements.
        :returns: Array of :py:class:`aspose.slides.ShapeElement`'''
        ...

    @property
    def is_text_holder(self) -> bool:
        ...

    @property
    def placeholder(self) -> IPlaceholder:
        '''Returns the placeholder for a shape. Returns None if the shape has no placeholder.
                    Read-only :py:class:`aspose.slides.IPlaceholder`.'''
        ...

    @property
    def custom_data(self) -> ICustomData:
        ...

    @property
    def raw_frame(self) -> IShapeFrame:
        ...

    @raw_frame.setter
    def raw_frame(self, value: IShapeFrame):
        ...

    @property
    def frame(self) -> IShapeFrame:
        '''Returns or sets the shape frame's properties.
                    Read/write :py:class:`aspose.slides.IShapeFrame`.'''
        ...

    @frame.setter
    def frame(self, value: IShapeFrame):
        '''Returns or sets the shape frame's properties.
                    Read/write :py:class:`aspose.slides.IShapeFrame`.'''
        ...

    @property
    def line_format(self) -> ILineFormat:
        ...

    @property
    def three_d_format(self) -> IThreeDFormat:
        ...

    @property
    def effect_format(self) -> IEffectFormat:
        ...

    @property
    def fill_format(self) -> IFillFormat:
        ...

    @property
    def hyperlink_click(self) -> IHyperlink:
        ...

    @hyperlink_click.setter
    def hyperlink_click(self, value: IHyperlink):
        ...

    @property
    def hyperlink_mouse_over(self) -> IHyperlink:
        ...

    @hyperlink_mouse_over.setter
    def hyperlink_mouse_over(self, value: IHyperlink):
        ...

    @property
    def hyperlink_manager(self) -> IHyperlinkManager:
        ...

    @property
    def hidden(self) -> bool:
        '''Determines whether the shape is hidden.
                    Read/write :py:class:`bool`.'''
        ...

    @hidden.setter
    def hidden(self, value: bool):
        '''Determines whether the shape is hidden.
                    Read/write :py:class:`bool`.'''
        ...

    @property
    def z_order_position(self) -> int:
        ...

    @property
    def connection_site_count(self) -> int:
        ...

    @property
    def rotation(self) -> float:
        '''Returns or sets the number of degrees the specified shape is rotated around
                    the z-axis. A positive value indicates clockwise rotation; a negative value
                    indicates counterclockwise rotation.
                    Read/write :py:class:`float`.'''
        ...

    @rotation.setter
    def rotation(self, value: float):
        '''Returns or sets the number of degrees the specified shape is rotated around
                    the z-axis. A positive value indicates clockwise rotation; a negative value
                    indicates counterclockwise rotation.
                    Read/write :py:class:`float`.'''
        ...

    @property
    def x(self) -> float:
        '''Returns or sets the x-coordinate of the upper-left corner of the shape.
                    Read/write :py:class:`float`.'''
        ...

    @x.setter
    def x(self, value: float):
        '''Returns or sets the x-coordinate of the upper-left corner of the shape.
                    Read/write :py:class:`float`.'''
        ...

    @property
    def y(self) -> float:
        '''Returns or sets the y-coordinate of the upper-left corner of the shape.
                    Read/write :py:class:`float`.'''
        ...

    @y.setter
    def y(self, value: float):
        '''Returns or sets the y-coordinate of the upper-left corner of the shape.
                    Read/write :py:class:`float`.'''
        ...

    @property
    def width(self) -> float:
        '''Returns or sets the width of the shape.
                    Read/write :py:class:`float`.'''
        ...

    @width.setter
    def width(self, value: float):
        '''Returns or sets the width of the shape.
                    Read/write :py:class:`float`.'''
        ...

    @property
    def height(self) -> float:
        '''Returns or sets the height of the shape.
                    Read/write :py:class:`float`.'''
        ...

    @height.setter
    def height(self, value: float):
        '''Returns or sets the height of the shape.
                    Read/write :py:class:`float`.'''
        ...

    @property
    def black_white_mode(self) -> BlackWhiteMode:
        ...

    @black_white_mode.setter
    def black_white_mode(self, value: BlackWhiteMode):
        ...

    @property
    def unique_id(self) -> int:
        ...

    @property
    def office_interop_shape_id(self) -> int:
        ...

    @property
    def alternative_text(self) -> str:
        ...

    @alternative_text.setter
    def alternative_text(self, value: str):
        ...

    @property
    def alternative_text_title(self) -> str:
        ...

    @alternative_text_title.setter
    def alternative_text_title(self, value: str):
        ...

    @property
    def name(self) -> str:
        '''Returns or sets the name of a shape.
                    Must be not None. Use empty string value if needed.
                    Read/write :py:class:`str`.'''
        ...

    @name.setter
    def name(self, value: str):
        '''Returns or sets the name of a shape.
                    Must be not None. Use empty string value if needed.
                    Read/write :py:class:`str`.'''
        ...

    @property
    def is_decorative(self) -> bool:
        ...

    @is_decorative.setter
    def is_decorative(self, value: bool):
        ...

    @property
    def shape_lock(self) -> IPictureFrameLock:
        ...

    @property
    def is_grouped(self) -> bool:
        ...

    @property
    def parent_group(self) -> IGroupShape:
        ...

    @property
    def slide(self) -> IBaseSlide:
        '''Returns the parent slide of a shape.
                    Read-only :py:class:`aspose.slides.IBaseSlide`.'''
        ...

    @property
    def presentation(self) -> IPresentation:
        '''Returns the parent presentation of a slide.
                    Read-only :py:class:`aspose.slides.IPresentation`.'''
        ...

    @property
    def shape_style(self) -> IShapeStyle:
        ...

    @property
    def shape_type(self) -> ShapeType:
        ...

    @shape_type.setter
    def shape_type(self, value: ShapeType):
        ...

    @property
    def adjustments(self) -> IAdjustValueCollection:
        '''Returns a collection of shape's adjustment values.
                    Read-only :py:class:`aspose.slides.IAdjustValueCollection`.'''
        ...

    @property
    def picture_frame_lock(self) -> IPictureFrameLock:
        ...

    @property
    def picture_format(self) -> IPictureFillFormat:
        ...

    @property
    def relative_scale_height(self) -> float:
        ...

    @relative_scale_height.setter
    def relative_scale_height(self, value: float):
        ...

    @property
    def relative_scale_width(self) -> float:
        ...

    @relative_scale_width.setter
    def relative_scale_width(self, value: float):
        ...

    @property
    def is_cameo(self) -> bool:
        ...

    @property
    def audio_cd_start_track(self) -> int:
        ...

    @audio_cd_start_track.setter
    def audio_cd_start_track(self, value: int):
        ...

    @property
    def audio_cd_start_track_time(self) -> int:
        ...

    @audio_cd_start_track_time.setter
    def audio_cd_start_track_time(self, value: int):
        ...

    @property
    def audio_cd_end_track(self) -> int:
        ...

    @audio_cd_end_track.setter
    def audio_cd_end_track(self, value: int):
        ...

    @property
    def audio_cd_end_track_time(self) -> int:
        ...

    @audio_cd_end_track_time.setter
    def audio_cd_end_track_time(self, value: int):
        ...

    @property
    def volume(self) -> AudioVolumeMode:
        '''Returns or sets the audio volume.
                    Read/write :py:enum:`aspose.slides.AudioVolumeMode`.'''
        ...

    @volume.setter
    def volume(self, value: AudioVolumeMode):
        '''Returns or sets the audio volume.
                    Read/write :py:enum:`aspose.slides.AudioVolumeMode`.'''
        ...

    @property
    def play_mode(self) -> AudioPlayModePreset:
        ...

    @play_mode.setter
    def play_mode(self, value: AudioPlayModePreset):
        ...

    @property
    def hide_at_showing(self) -> bool:
        ...

    @hide_at_showing.setter
    def hide_at_showing(self, value: bool):
        ...

    @property
    def play_loop_mode(self) -> bool:
        ...

    @play_loop_mode.setter
    def play_loop_mode(self, value: bool):
        ...

    @property
    def play_across_slides(self) -> bool:
        ...

    @play_across_slides.setter
    def play_across_slides(self, value: bool):
        ...

    @property
    def rewind_audio(self) -> bool:
        ...

    @rewind_audio.setter
    def rewind_audio(self, value: bool):
        ...

    @property
    def embedded(self) -> bool:
        '''Determines whether a sound is embedded to a presentation.
                    Read-only :py:class:`bool`.'''
        ...

    @property
    def link_path_long(self) -> str:
        ...

    @link_path_long.setter
    def link_path_long(self, value: str):
        ...

    @property
    def embedded_audio(self) -> IAudio:
        ...

    @embedded_audio.setter
    def embedded_audio(self, value: IAudio):
        ...

    @property
    def fade_in_duration(self) -> float:
        ...

    @fade_in_duration.setter
    def fade_in_duration(self, value: float):
        ...

    @property
    def fade_out_duration(self) -> float:
        ...

    @fade_out_duration.setter
    def fade_out_duration(self, value: float):
        ...

    @property
    def volume_value(self) -> float:
        ...

    @volume_value.setter
    def volume_value(self, value: float):
        ...

    @property
    def trim_from_start(self) -> float:
        ...

    @trim_from_start.setter
    def trim_from_start(self, value: float):
        ...

    @property
    def trim_from_end(self) -> float:
        ...

    @trim_from_end.setter
    def trim_from_end(self, value: float):
        ...

    @property
    def as_i_hyperlink_container(self) -> IHyperlinkContainer:
        ...

    @property
    def as_i_slide_component(self) -> ISlideComponent:
        ...

    @property
    def as_i_presentation_component(self) -> IPresentationComponent:
        ...

    @property
    def as_i_shape(self) -> IShape:
        ...

    @property
    def as_i_geometry_shape(self) -> IGeometryShape:
        ...

    @property
    def as_i_picture_frame(self) -> IPictureFrame:
        ...

    ...

class AutoShape(GeometryShape):
    '''Represents an AutoShape.'''
    @overload
    def get_thumbnail(self) -> aspose.pydrawing.Bitmap:
        '''Returns shape thumbnail.
                    ShapeThumbnailBounds.Shape shape thumbnail bounds type is used by default.
        :returns: Shape thumbnail.'''
        ...

    @overload
    def get_thumbnail(self, bounds: ShapeThumbnailBounds, scale_x: float, scale_y: float) -> aspose.pydrawing.Bitmap:
        '''Returns shape thumbnail.
        :param bounds: Shape thumbnail bounds type.
        :param scale_x: X scale
        :param scale_y: Y scale
        :returns: Shape thumbnail or None in case when ShapeThumbnailBounds.Appearance is used and a shape doesn't have visible elements.'''
        ...

    @overload
    def get_image(self) -> IImage:
        '''Returns shape thumbnail.
                    ShapeThumbnailBounds.Shape shape thumbnail bounds type is used by default.
        :returns: Shape thumbnail.'''
        ...

    @overload
    def get_image(self, bounds: ShapeThumbnailBounds, scale_x: float, scale_y: float) -> IImage:
        '''Returns shape thumbnail.
        :param bounds: Shape thumbnail bounds type.
        :param scale_x: X scale
        :param scale_y: Y scale
        :returns: Shape thumbnail or None in case when ShapeThumbnailBounds.Appearance is used and a shape doesn't have visible elements.'''
        ...

    @overload
    def write_as_svg(self, stream: io.RawIOBase) -> None:
        '''Saves content of Shape as SVG file.
        :param stream: Target stream'''
        ...

    @overload
    def write_as_svg(self, stream: io.RawIOBase, svg_options: aspose.slides.export.ISVGOptions) -> None:
        '''Saves content of Shape as SVG file.
        :param stream: Target stream
        :param svg_options: SVG generation options'''
        ...

    def remove_placeholder(self) -> None:
        '''Defines that this shape isn't a placeholder.'''
        ...

    def add_placeholder(self, placeholder_to_copy_from: IPlaceholder) -> IPlaceholder:
        '''Adds a new placeholder if there is no and sets placeholder properties to a specified one.
        :param placeholder_to_copy_from: Placeholder to copy content from.
        :returns: New :py:attr:`aspose.slides.Shape.placeholder`.'''
        ...

    def get_base_placeholder(self) -> IShape:
        '''Returns a basic placeholder shape (shape from the layout and/or master slide that the current shape is inherited from).'''
        ...

    def get_geometry_paths(self) -> List[IGeometryPath]:
        '''Returns the copy of path of the geometry shape. Coordinates are relative to the left top corner of the shape.
        :returns: Array of :py:class:`aspose.slides.IGeometryPath`'''
        ...

    def set_geometry_path(self, geometry_path: IGeometryPath) -> None:
        '''Updates shape geometry from :py:class:`aspose.slides.IGeometryPath` object. Coordinates must be relative to the left
                     top corner of the shape.
                     Changes the type of the shape (:py:attr:`aspose.slides.GeometryShape.shape_type`) to :py:attr:`aspose.slides.ShapeType.CUSTOM`.
        :param geometry_path: Geometry path'''
        ...

    def set_geometry_paths(self, geometry_paths: List[IGeometryPath]) -> None:
        '''Updates shape geometry from array of :py:class:`aspose.slides.IGeometryPath`. Coordinates must be relative to the left
                     top corner of the shape.
                     Changes the type of the shape (:py:attr:`aspose.slides.GeometryShape.shape_type`) to :py:attr:`aspose.slides.ShapeType.CUSTOM`.
        :param geometry_paths: Array geometry paths'''
        ...

    def create_shape_elements(self) -> List[IShapeElement]:
        '''Creates and returns array of shape's elements.
        :returns: Array of :py:class:`aspose.slides.ShapeElement`'''
        ...

    def add_text_frame(self, text: str) -> ITextFrame:
        '''Adds a new TextFrame to a shape.
                    If shape already has TextFrame then simply changes its text.
        :param text: Default text for a new TextFrame.'''
        ...

    @property
    def is_text_holder(self) -> bool:
        ...

    @property
    def placeholder(self) -> IPlaceholder:
        '''Returns the placeholder for a shape. Returns None if the shape has no placeholder.
                    Read-only :py:class:`aspose.slides.IPlaceholder`.'''
        ...

    @property
    def custom_data(self) -> ICustomData:
        ...

    @property
    def raw_frame(self) -> IShapeFrame:
        ...

    @raw_frame.setter
    def raw_frame(self, value: IShapeFrame):
        ...

    @property
    def frame(self) -> IShapeFrame:
        '''Returns or sets the shape frame's properties.
                    Read/write :py:class:`aspose.slides.IShapeFrame`.'''
        ...

    @frame.setter
    def frame(self, value: IShapeFrame):
        '''Returns or sets the shape frame's properties.
                    Read/write :py:class:`aspose.slides.IShapeFrame`.'''
        ...

    @property
    def line_format(self) -> ILineFormat:
        ...

    @property
    def three_d_format(self) -> IThreeDFormat:
        ...

    @property
    def effect_format(self) -> IEffectFormat:
        ...

    @property
    def fill_format(self) -> IFillFormat:
        ...

    @property
    def hyperlink_click(self) -> IHyperlink:
        ...

    @hyperlink_click.setter
    def hyperlink_click(self, value: IHyperlink):
        ...

    @property
    def hyperlink_mouse_over(self) -> IHyperlink:
        ...

    @hyperlink_mouse_over.setter
    def hyperlink_mouse_over(self, value: IHyperlink):
        ...

    @property
    def hyperlink_manager(self) -> IHyperlinkManager:
        ...

    @property
    def hidden(self) -> bool:
        '''Determines whether the shape is hidden.
                    Read/write :py:class:`bool`.'''
        ...

    @hidden.setter
    def hidden(self, value: bool):
        '''Determines whether the shape is hidden.
                    Read/write :py:class:`bool`.'''
        ...

    @property
    def z_order_position(self) -> int:
        ...

    @property
    def connection_site_count(self) -> int:
        ...

    @property
    def rotation(self) -> float:
        '''Returns or sets the number of degrees the specified shape is rotated around
                    the z-axis. A positive value indicates clockwise rotation; a negative value
                    indicates counterclockwise rotation.
                    Read/write :py:class:`float`.'''
        ...

    @rotation.setter
    def rotation(self, value: float):
        '''Returns or sets the number of degrees the specified shape is rotated around
                    the z-axis. A positive value indicates clockwise rotation; a negative value
                    indicates counterclockwise rotation.
                    Read/write :py:class:`float`.'''
        ...

    @property
    def x(self) -> float:
        '''Returns or sets the x-coordinate of the upper-left corner of the shape.
                    Read/write :py:class:`float`.'''
        ...

    @x.setter
    def x(self, value: float):
        '''Returns or sets the x-coordinate of the upper-left corner of the shape.
                    Read/write :py:class:`float`.'''
        ...

    @property
    def y(self) -> float:
        '''Returns or sets the y-coordinate of the upper-left corner of the shape.
                    Read/write :py:class:`float`.'''
        ...

    @y.setter
    def y(self, value: float):
        '''Returns or sets the y-coordinate of the upper-left corner of the shape.
                    Read/write :py:class:`float`.'''
        ...

    @property
    def width(self) -> float:
        '''Returns or sets the width of the shape.
                    Read/write :py:class:`float`.'''
        ...

    @width.setter
    def width(self, value: float):
        '''Returns or sets the width of the shape.
                    Read/write :py:class:`float`.'''
        ...

    @property
    def height(self) -> float:
        '''Returns or sets the height of the shape.
                    Read/write :py:class:`float`.'''
        ...

    @height.setter
    def height(self, value: float):
        '''Returns or sets the height of the shape.
                    Read/write :py:class:`float`.'''
        ...

    @property
    def black_white_mode(self) -> BlackWhiteMode:
        ...

    @black_white_mode.setter
    def black_white_mode(self, value: BlackWhiteMode):
        ...

    @property
    def unique_id(self) -> int:
        ...

    @property
    def office_interop_shape_id(self) -> int:
        ...

    @property
    def alternative_text(self) -> str:
        ...

    @alternative_text.setter
    def alternative_text(self, value: str):
        ...

    @property
    def alternative_text_title(self) -> str:
        ...

    @alternative_text_title.setter
    def alternative_text_title(self, value: str):
        ...

    @property
    def name(self) -> str:
        '''Returns or sets the name of a shape.
                    Must be not None. Use empty string value if needed.
                    Read/write :py:class:`str`.'''
        ...

    @name.setter
    def name(self, value: str):
        '''Returns or sets the name of a shape.
                    Must be not None. Use empty string value if needed.
                    Read/write :py:class:`str`.'''
        ...

    @property
    def is_decorative(self) -> bool:
        ...

    @is_decorative.setter
    def is_decorative(self, value: bool):
        ...

    @property
    def shape_lock(self) -> IAutoShapeLock:
        ...

    @property
    def is_grouped(self) -> bool:
        ...

    @property
    def parent_group(self) -> IGroupShape:
        ...

    @property
    def slide(self) -> IBaseSlide:
        '''Returns the parent slide of a shape.
                    Read-only :py:class:`aspose.slides.IBaseSlide`.'''
        ...

    @property
    def presentation(self) -> IPresentation:
        '''Returns the parent presentation of a slide.
                    Read-only :py:class:`aspose.slides.IPresentation`.'''
        ...

    @property
    def shape_style(self) -> IShapeStyle:
        ...

    @property
    def shape_type(self) -> ShapeType:
        ...

    @shape_type.setter
    def shape_type(self, value: ShapeType):
        ...

    @property
    def adjustments(self) -> IAdjustValueCollection:
        '''Returns a collection of shape's adjustment values.
                    Read-only :py:class:`aspose.slides.IAdjustValueCollection`.'''
        ...

    @property
    def auto_shape_lock(self) -> IAutoShapeLock:
        ...

    @property
    def text_frame(self) -> ITextFrame:
        ...

    @property
    def use_background_fill(self) -> bool:
        ...

    @use_background_fill.setter
    def use_background_fill(self, value: bool):
        ...

    @property
    def is_text_box(self) -> bool:
        ...

    @property
    def as_i_hyperlink_container(self) -> IHyperlinkContainer:
        ...

    @property
    def as_i_slide_component(self) -> ISlideComponent:
        ...

    @property
    def as_i_presentation_component(self) -> IPresentationComponent:
        ...

    @property
    def as_i_shape(self) -> IShape:
        ...

    @property
    def as_i_geometry_shape(self) -> IGeometryShape:
        ...

    ...

class AutoShapeLock(BaseShapeLock):
    '''Determines which operations are disabled on the parent AutoshapeEx.'''
    @property
    def no_locks(self) -> bool:
        ...

    @property
    def grouping_locked(self) -> bool:
        ...

    @grouping_locked.setter
    def grouping_locked(self, value: bool):
        ...

    @property
    def select_locked(self) -> bool:
        ...

    @select_locked.setter
    def select_locked(self, value: bool):
        ...

    @property
    def rotate_locked(self) -> bool:
        ...

    @rotate_locked.setter
    def rotate_locked(self, value: bool):
        ...

    @property
    def aspect_ratio_locked(self) -> bool:
        ...

    @aspect_ratio_locked.setter
    def aspect_ratio_locked(self, value: bool):
        ...

    @property
    def position_locked(self) -> bool:
        ...

    @position_locked.setter
    def position_locked(self, value: bool):
        ...

    @property
    def size_locked(self) -> bool:
        ...

    @size_locked.setter
    def size_locked(self, value: bool):
        ...

    @property
    def edit_points_locked(self) -> bool:
        ...

    @edit_points_locked.setter
    def edit_points_locked(self, value: bool):
        ...

    @property
    def adjust_handles_locked(self) -> bool:
        ...

    @adjust_handles_locked.setter
    def adjust_handles_locked(self, value: bool):
        ...

    @property
    def arrowheads_locked(self) -> bool:
        ...

    @arrowheads_locked.setter
    def arrowheads_locked(self, value: bool):
        ...

    @property
    def shape_type_locked(self) -> bool:
        ...

    @shape_type_locked.setter
    def shape_type_locked(self, value: bool):
        ...

    @property
    def text_locked(self) -> bool:
        ...

    @text_locked.setter
    def text_locked(self, value: bool):
        ...

    @property
    def as_i_base_shape_lock(self) -> IBaseShapeLock:
        ...

    ...

class Backdrop3DScene(PVIObject):
    '''Defines a plane in which effects, such as glow and shadow, are applied in relation to the shape they are being applied to.'''
    @property
    def as_i_presentation_component(self) -> IPresentationComponent:
        ...

    @property
    def normal_vector(self) -> List[float]:
        ...

    @normal_vector.setter
    def normal_vector(self, value: List[float]):
        ...

    @property
    def anchor_point(self) -> List[float]:
        ...

    @anchor_point.setter
    def anchor_point(self, value: List[float]):
        ...

    @property
    def up_vector(self) -> List[float]:
        ...

    @up_vector.setter
    def up_vector(self, value: List[float]):
        ...

    @property
    def slide(self) -> IBaseSlide:
        ...

    @property
    def presentation(self) -> IPresentation:
        ...

    ...

class Background(PVIObject):
    '''Represents background of a slide.'''
    def get_effective(self) -> IBackgroundEffectiveData:
        '''Gets effective background data with the inheritance applied.
        :returns: A :py:class:`aspose.slides.IBackgroundEffectiveData`.'''
        ...

    @property
    def as_i_presentation_component(self) -> IPresentationComponent:
        ...

    @property
    def type(self) -> BackgroundType:
        '''Returns a type of background fill.
                    Read/write :py:enum:`aspose.slides.BackgroundType`.'''
        ...

    @type.setter
    def type(self, value: BackgroundType):
        '''Returns a type of background fill.
                    Read/write :py:enum:`aspose.slides.BackgroundType`.'''
        ...

    @property
    def fill_format(self) -> IFillFormat:
        ...

    @property
    def effect_format(self) -> IEffectFormat:
        ...

    @property
    def style_color(self) -> IColorFormat:
        ...

    @property
    def style_index(self) -> int:
        ...

    @style_index.setter
    def style_index(self, value: int):
        ...

    @property
    def slide(self) -> IBaseSlide:
        '''Returns the parent slide of a shape.
                    Read-only :py:class:`aspose.slides.IBaseSlide`.'''
        ...

    @property
    def presentation(self) -> IPresentation:
        '''Returns the parent presentation of a slide.
                    Read-only :py:class:`aspose.slides.IPresentation`.'''
        ...

    @property
    def as_i_slide_component(self) -> ISlideComponent:
        ...

    @property
    def as_i_fill_param_source(self) -> IFillParamSource:
        ...

    ...

class BaseHandoutNotesSlideHeaderFooterManager(BaseSlideHeaderFooterManager):
    '''Represents manager which holds behavior of the placeholders, including header placeholder for all types handout and notes slides.'''
    def set_footer_visibility(self, is_visible: bool) -> None:
        '''Changes slide footer placeholder visibility.
        :param is_visible: true - makes a footer placeholder visible, otherwise - hides it.'''
        ...

    def set_slide_number_visibility(self, is_visible: bool) -> None:
        '''Changes slide page number placeholder visibility.
        :param is_visible: true - makes a page number placeholder visible, otherwise - hides it.'''
        ...

    def set_date_time_visibility(self, is_visible: bool) -> None:
        '''Changes slide date-time placeholder visibility.
        :param is_visible: true - makes a date-time placeholder visible, otherwise - hides it.'''
        ...

    def set_footer_text(self, text: str) -> None:
        '''Sets text to slide footer placeholder.
        :param text: Text to set.'''
        ...

    def set_date_time_text(self, text: str) -> None:
        '''Sets text to slide date-time placeholder.
        :param text: Text to set.'''
        ...

    def set_header_visibility(self, is_visible: bool) -> None:
        '''Changes slide header placeholder visibility.
        :param is_visible: true - makes a header placeholder visible, otherwise - hides it.'''
        ...

    def set_header_text(self, text: str) -> None:
        '''Sets text to slide header placeholder.
        :param text: Text to set.'''
        ...

    @property
    def is_footer_visible(self) -> bool:
        ...

    @property
    def is_slide_number_visible(self) -> bool:
        ...

    @property
    def is_date_time_visible(self) -> bool:
        ...

    @property
    def is_header_visible(self) -> bool:
        ...

    @property
    def as_i_base_slide_header_footer_manager(self) -> IBaseSlideHeaderFooterManager:
        ...

    @property
    def as_i_base_header_footer_manager(self) -> IBaseHeaderFooterManager:
        ...

    ...

class BaseHeaderFooterManager:
    '''Represents manager which holds behavior of the footer, date-time, page number placeholders for all slide types.'''
    ...

class BasePortionFormat(PVIObject):
    '''Common text portion formatting properties.'''
    @property
    def as_i_presentation_component(self) -> IPresentationComponent:
        ...

    @property
    def line_format(self) -> ILineFormat:
        ...

    @property
    def fill_format(self) -> IFillFormat:
        ...

    @property
    def effect_format(self) -> IEffectFormat:
        ...

    @property
    def highlight_color(self) -> IColorFormat:
        ...

    @property
    def underline_line_format(self) -> ILineFormat:
        ...

    @property
    def underline_fill_format(self) -> IFillFormat:
        ...

    @property
    def font_bold(self) -> NullableBool:
        ...

    @font_bold.setter
    def font_bold(self, value: NullableBool):
        ...

    @property
    def font_italic(self) -> NullableBool:
        ...

    @font_italic.setter
    def font_italic(self, value: NullableBool):
        ...

    @property
    def kumimoji(self) -> NullableBool:
        '''Determines whether the numbers should ignore text eastern language-specific vertical text layout. No inheritance applied.
                    Read/write :py:enum:`aspose.slides.NullableBool`.'''
        ...

    @kumimoji.setter
    def kumimoji(self, value: NullableBool):
        '''Determines whether the numbers should ignore text eastern language-specific vertical text layout. No inheritance applied.
                    Read/write :py:enum:`aspose.slides.NullableBool`.'''
        ...

    @property
    def normalise_height(self) -> NullableBool:
        ...

    @normalise_height.setter
    def normalise_height(self, value: NullableBool):
        ...

    @property
    def proof_disabled(self) -> NullableBool:
        ...

    @proof_disabled.setter
    def proof_disabled(self, value: NullableBool):
        ...

    @property
    def font_underline(self) -> TextUnderlineType:
        ...

    @font_underline.setter
    def font_underline(self, value: TextUnderlineType):
        ...

    @property
    def text_cap_type(self) -> TextCapType:
        ...

    @text_cap_type.setter
    def text_cap_type(self, value: TextCapType):
        ...

    @property
    def strikethrough_type(self) -> TextStrikethroughType:
        ...

    @strikethrough_type.setter
    def strikethrough_type(self, value: TextStrikethroughType):
        ...

    @property
    def is_hard_underline_line(self) -> NullableBool:
        ...

    @is_hard_underline_line.setter
    def is_hard_underline_line(self, value: NullableBool):
        ...

    @property
    def is_hard_underline_fill(self) -> NullableBool:
        ...

    @is_hard_underline_fill.setter
    def is_hard_underline_fill(self, value: NullableBool):
        ...

    @property
    def font_height(self) -> float:
        ...

    @font_height.setter
    def font_height(self, value: float):
        ...

    @property
    def latin_font(self) -> IFontData:
        ...

    @latin_font.setter
    def latin_font(self, value: IFontData):
        ...

    @property
    def east_asian_font(self) -> IFontData:
        ...

    @east_asian_font.setter
    def east_asian_font(self, value: IFontData):
        ...

    @property
    def complex_script_font(self) -> IFontData:
        ...

    @complex_script_font.setter
    def complex_script_font(self, value: IFontData):
        ...

    @property
    def symbol_font(self) -> IFontData:
        ...

    @symbol_font.setter
    def symbol_font(self, value: IFontData):
        ...

    @property
    def escapement(self) -> float:
        '''Returns or sets the superscript or subscript text.
                    Value from -100% (subscript) to 100% (superscript).
                    **float.NaN** means value is undefined and should be inherited from the Master.
                    Read/write :py:class:`float`.'''
        ...

    @escapement.setter
    def escapement(self, value: float):
        '''Returns or sets the superscript or subscript text.
                    Value from -100% (subscript) to 100% (superscript).
                    **float.NaN** means value is undefined and should be inherited from the Master.
                    Read/write :py:class:`float`.'''
        ...

    @property
    def kerning_minimal_size(self) -> float:
        ...

    @kerning_minimal_size.setter
    def kerning_minimal_size(self, value: float):
        ...

    @property
    def language_id(self) -> str:
        ...

    @language_id.setter
    def language_id(self, value: str):
        ...

    @property
    def alternative_language_id(self) -> str:
        ...

    @alternative_language_id.setter
    def alternative_language_id(self, value: str):
        ...

    @property
    def spacing(self) -> float:
        '''Returns or sets the intercharacter spacing increment.
                    **float.NaN** means value is undefined and should be inherited from the Master.
                    Read/write :py:class:`float`.'''
        ...

    @spacing.setter
    def spacing(self, value: float):
        '''Returns or sets the intercharacter spacing increment.
                    **float.NaN** means value is undefined and should be inherited from the Master.
                    Read/write :py:class:`float`.'''
        ...

    @property
    def slide(self) -> IBaseSlide:
        ...

    @property
    def presentation(self) -> IPresentation:
        ...

    ...

class BaseShapeLock:
    '''Represents a base class for locks (disabled operation).'''
    @property
    def no_locks(self) -> bool:
        ...

    ...

class BaseSlide:
    '''Represents common data for all slide types.'''
    @overload
    def join_portions_with_same_formatting(self) -> None:
        '''Joins runs with same formatting in all paragraphs all acceptable shapes.'''
        ...

    @overload
    def join_portions_with_same_formatting(self, collection: IShapeCollection) -> None:
        '''Joins runs with same formatting in all paragraphs in all acceptable shapes.'''
        ...

    def equals(self, slide: IBaseSlide) -> bool:
        '''Determines whether the two IBaseSlide instances are equal.
                    Returning value is calculated based on slide's structure and static content.
                    Two slides are equal if all shapes, styles, texts, animation and other settings. etc. are equal. The comparison doesn't take into account unique identifier values, e.g. SlideId and dynamic content, e.g. current date value in Date Placeholder.
        :param slide: The IBaseSlide to compare with the current IBaseSlide.
        :returns: **true** if the specified IBaseSlide is equal to the current IBaseSlide; 
                    otherwise, **false**.'''
        ...

    def create_theme_effective(self) -> aspose.slides.theme.IThemeEffectiveData:
        '''Returns an effective theme for this slide.'''
        ...

    def find_shape_by_alt_text(self, alt_text: str) -> IShape:
        '''Finds first occurrence of a shape with the specified alternative text.
        :param alt_text: Alternative text.
        :returns: Shape object or None.'''
        ...

    @property
    def shapes(self) -> IShapeCollection:
        '''Returns the shapes of a slide.
                    Read-only :py:class:`aspose.slides.IShapeCollection`.'''
        ...

    @property
    def controls(self) -> IControlCollection:
        '''Returns the collection of ActiveX controls on a slide.
                    Read-only :py:class:`aspose.slides.IControlCollection`.'''
        ...

    @property
    def name(self) -> str:
        '''Returns or sets the name of a slide.
                    Read/write :py:class:`str`.'''
        ...

    @name.setter
    def name(self, value: str):
        '''Returns or sets the name of a slide.
                    Read/write :py:class:`str`.'''
        ...

    @property
    def slide_id(self) -> int:
        ...

    @property
    def custom_data(self) -> ICustomData:
        ...

    @property
    def timeline(self) -> IAnimationTimeLine:
        '''Returns animation timeline object.
                    Read-only :py:class:`aspose.slides.IAnimationTimeLine`.'''
        ...

    @property
    def slide_show_transition(self) -> ISlideShowTransition:
        ...

    @property
    def background(self) -> IBackground:
        '''Returns slide's background.
                    Read-only :py:class:`aspose.slides.IBackground`.'''
        ...

    @property
    def hyperlink_queries(self) -> IHyperlinkQueries:
        ...

    @property
    def show_master_shapes(self) -> bool:
        ...

    @show_master_shapes.setter
    def show_master_shapes(self, value: bool):
        ...

    @property
    def presentation(self) -> IPresentation:
        '''Returns IPresentation interface.
                    Read-only :py:class:`aspose.slides.IPresentation`.'''
        ...

    @property
    def as_i_themeable(self) -> aspose.slides.theme.IThemeable:
        ...

    @property
    def as_i_slide_component(self) -> ISlideComponent:
        ...

    @property
    def slide(self) -> IBaseSlide:
        ...

    @property
    def as_i_presentation_component(self) -> IPresentationComponent:
        ...

    ...

class BaseSlideHeaderFooterManager(BaseHeaderFooterManager):
    '''Represents manager which holds behavior of the footer, date-time, page number placeholders for all slide types.'''
    def set_footer_visibility(self, is_visible: bool) -> None:
        '''Changes slide footer placeholder visibility.
        :param is_visible: true - makes a footer placeholder visible, otherwise - hides it.'''
        ...

    def set_slide_number_visibility(self, is_visible: bool) -> None:
        '''Changes slide page number placeholder visibility.
        :param is_visible: true - makes a page number placeholder visible, otherwise - hides it.'''
        ...

    def set_date_time_visibility(self, is_visible: bool) -> None:
        '''Changes slide date-time placeholder visibility.
        :param is_visible: true - makes a date-time placeholder visible, otherwise - hides it.'''
        ...

    def set_footer_text(self, text: str) -> None:
        '''Sets text to slide footer placeholder.
        :param text: Text to set.'''
        ...

    def set_date_time_text(self, text: str) -> None:
        '''Sets text to slide date-time placeholder.
        :param text: Text to set.'''
        ...

    @property
    def is_footer_visible(self) -> bool:
        ...

    @property
    def is_slide_number_visible(self) -> bool:
        ...

    @property
    def is_date_time_visible(self) -> bool:
        ...

    ...

class BlobManagementOptions:
    '''Represents options which can be used to manage BLOB handling rules and other BLOB settings.'''
    def __init__(self):
        '''Creates new default blob management options.'''
        ...

    @property
    def presentation_locking_behavior(self) -> PresentationLockingBehavior:
        ...

    @presentation_locking_behavior.setter
    def presentation_locking_behavior(self, value: PresentationLockingBehavior):
        ...

    @property
    def is_temporary_files_allowed(self) -> bool:
        ...

    @is_temporary_files_allowed.setter
    def is_temporary_files_allowed(self, value: bool):
        ...

    @property
    def temp_files_root_path(self) -> str:
        ...

    @temp_files_root_path.setter
    def temp_files_root_path(self, value: str):
        ...

    @property
    def max_blobs_bytes_in_memory(self) -> int:
        ...

    @max_blobs_bytes_in_memory.setter
    def max_blobs_bytes_in_memory(self, value: int):
        ...

    ...

class BrowsedAtKiosk(SlideShowType):
    '''Browsed at a kiosk (full screen)'''
    def __init__(self):
        '''Initializes a new instance of the BrowsedAtKiosk class.'''
        ...

    ...

class BrowsedByIndividual(SlideShowType):
    '''Browsed by individual (window)'''
    def __init__(self):
        '''Initializes a new instance of the BrowsedByIndividual class.'''
        ...

    @property
    def show_scrollbar(self) -> bool:
        ...

    @show_scrollbar.setter
    def show_scrollbar(self, value: bool):
        ...

    ...

class BuildVersionInfo:
    '''Contains information about version of Aspose.Slides.'''
    @classmethod
    @property
    def ASSEMBLY_VERSION(cls) -> str:
        ...

    @classmethod
    @property
    def FILE_VERSION(cls) -> str:
        ...

    @classmethod
    @property
    def PRODUCT(cls) -> str:
        '''Product name of Aspose.Slides'''
        ...

    @classmethod
    @property
    def PRODUCT_MAJOR(cls) -> int:
        ...

    @classmethod
    @property
    def PRODUCT_MINOR(cls) -> int:
        ...

    @classmethod
    @property
    def RELEASE_DATE(cls) -> DateTime:
        ...

    ...

class BulletFormat(PVIObject):
    '''Represents paragraph bullet formatting properties.'''
    def apply_default_paragraph_indents_shifts(self) -> None:
        '''Sets default non-zero shifts for effective paragraph Indent and MarginLeft when bullets is enabled (like PowerPoint do if enable paragraph bullets/numbering in it). If bullets is disabled then just reset paragraph Indent and MarginLeft (like PowerPoint do if disable paragraph bullets/numbering in it). Indents shifts are applied in regard to current bullet context - IBulletFormat.Type, .NumberedBulletStyle and FontHeight of first portion. Non-zero indents shifts are applied to effective Indent and MarginLeft of current paragraph (make result values to be local values).'''
        ...

    def get_effective(self) -> IBulletFormatEffectiveData:
        '''Gets effective bullet formatting data with the inheritance applied.
        :returns: A :py:class:`aspose.slides.IBulletFormatEffectiveData`.'''
        ...

    @property
    def as_i_presentation_component(self) -> IPresentationComponent:
        ...

    @property
    def type(self) -> BulletType:
        '''Returns or sets the bullet type of a paragraph with no inheritance.
                    Read/write :py:enum:`aspose.slides.BulletType`.'''
        ...

    @type.setter
    def type(self, value: BulletType):
        '''Returns or sets the bullet type of a paragraph with no inheritance.
                    Read/write :py:enum:`aspose.slides.BulletType`.'''
        ...

    @property
    def char(self) -> char:
        '''Returns or sets the bullet char of a paragraph with no inheritance.
                    Read/write :py:class:`System.Char`.'''
        ...

    @char.setter
    def char(self, value: char):
        '''Returns or sets the bullet char of a paragraph with no inheritance.
                    Read/write :py:class:`System.Char`.'''
        ...

    @property
    def font(self) -> IFontData:
        '''Returns or sets the bullet font of a paragraph with no inheritance.
                    Read/write :py:class:`aspose.slides.IFontData`.'''
        ...

    @font.setter
    def font(self, value: IFontData):
        '''Returns or sets the bullet font of a paragraph with no inheritance.
                    Read/write :py:class:`aspose.slides.IFontData`.'''
        ...

    @property
    def height(self) -> float:
        '''Returns or sets the bullet height of a paragraph with no inheritance.
                    Value float.NaN determines that bullet inherits height from the first portion in the paragraph.
                    Read/write :py:class:`float`.'''
        ...

    @height.setter
    def height(self, value: float):
        '''Returns or sets the bullet height of a paragraph with no inheritance.
                    Value float.NaN determines that bullet inherits height from the first portion in the paragraph.
                    Read/write :py:class:`float`.'''
        ...

    @property
    def color(self) -> IColorFormat:
        '''Returns the color format of a bullet of a paragraph with no inheritance.
                    Read-only :py:class:`aspose.slides.IColorFormat`.'''
        ...

    @property
    def numbered_bullet_start_with(self) -> int:
        ...

    @numbered_bullet_start_with.setter
    def numbered_bullet_start_with(self, value: int):
        ...

    @property
    def numbered_bullet_style(self) -> NumberedBulletStyle:
        ...

    @numbered_bullet_style.setter
    def numbered_bullet_style(self, value: NumberedBulletStyle):
        ...

    @property
    def is_bullet_hard_color(self) -> NullableBool:
        ...

    @is_bullet_hard_color.setter
    def is_bullet_hard_color(self, value: NullableBool):
        ...

    @property
    def is_bullet_hard_font(self) -> NullableBool:
        ...

    @is_bullet_hard_font.setter
    def is_bullet_hard_font(self, value: NullableBool):
        ...

    @property
    def picture(self) -> ISlidesPicture:
        '''Returns the picture used as a bullet in a paragraph with no inheritance.
                    Read-only :py:class:`aspose.slides.ISlidesPicture`.'''
        ...

    @property
    def slide(self) -> IBaseSlide:
        ...

    @property
    def presentation(self) -> IPresentation:
        ...

    ...

class Camera(PVIObject):
    '''Represents Camera.'''
    def set_rotation(self, latitude: float, longitude: float, revolution: float) -> None:
        '''A rotation is defined through the use of a latitude
                    coordinate, a longitude coordinate, and a revolution about the axis 
                    as the latitude and longitude coordinates.
                    If any of coordinate value is float.NaN, all rotation is undefined.'''
        ...

    def get_rotation(self) -> List[float]:
        '''A rotation is defined through the use of a latitude
                    coordinate, a longitude coordinate, and a revolution about the axis 
                    as the latitude and longitude coordinates.
                    first element in return array - latitude, second - longitude, third - revolution.
                    Returns None if no rotation defined.'''
        ...

    @property
    def as_i_presentation_component(self) -> IPresentationComponent:
        ...

    @property
    def camera_type(self) -> CameraPresetType:
        ...

    @camera_type.setter
    def camera_type(self, value: CameraPresetType):
        ...

    @property
    def field_of_view_angle(self) -> float:
        ...

    @field_of_view_angle.setter
    def field_of_view_angle(self, value: float):
        ...

    @property
    def zoom(self) -> float:
        '''Camera zoom (positive value in percentage).
                    Read/write :py:class:`float`.'''
        ...

    @zoom.setter
    def zoom(self, value: float):
        '''Camera zoom (positive value in percentage).
                    Read/write :py:class:`float`.'''
        ...

    @property
    def slide(self) -> IBaseSlide:
        ...

    @property
    def presentation(self) -> IPresentation:
        ...

    ...

class Captions:
    '''Represents the WebVTT closed captions.'''
    @property
    def caption_id(self) -> Guid:
        ...

    @property
    def label(self) -> str:
        '''Returns or sets the label of the closed captions.
                    Read/write :py:class:`str`.'''
        ...

    @label.setter
    def label(self, value: str):
        '''Returns or sets the label of the closed captions.
                    Read/write :py:class:`str`.'''
        ...

    @property
    def binary_data(self) -> bytes:
        ...

    @property
    def data_as_string(self) -> str:
        ...

    ...

class CaptionsCollection:
    '''Represents a collection of the closed captions.'''
    @overload
    def add(self, label: str, file_path: str) -> ICaptions:
        '''Adds WebVTT closed captions to the end of the collection.
        :param label: The label of the closed captions.
        :param file_path: The path to the WebVTT file.
        :returns: The added :py:class:`aspose.slides.ICaptions` instance.'''
        ...

    @overload
    def add(self, label: str, stream: io.RawIOBase) -> ICaptions:
        '''Adds WebVTT closed captions to the end of the collection from a stream.
        :param label: The label of the closed captions.
        :param stream: The input stream containing data in WebVTT format.
        :returns: The added :py:class:`aspose.slides.ICaptions` instance.'''
        ...

    def remove(self, captions: ICaptions) -> None:
        '''Removes the specified closed captions from the collection.
        :param captions: The closed captions to remove.'''
        ...

    def remove_at(self, index: int) -> None:
        '''Removes the closed captions at the specified index.
        :param index: The index of the closed captions to remove.'''
        ...

    def clear(self) -> None:
        '''Removes all closed captions from the collection.'''
        ...

    @property
    def count(self) -> int:
        '''Returns the number of elements in the collection.
                    Read-only :py:class:`int`.'''
        ...

    def __getitem__(self, key: int) -> ICaptions
        ...

    ...

class Cell:
    '''Represents a cell of a table.'''
    def split_by_col_span(self, index: int) -> None:
        '''Splits the cell to two cells by index of column.
        :param index: Index of column.'''
        ...

    def split_by_row_span(self, index: int) -> None:
        '''Splits the cell to two cells by index of row.
        :param index: Index of row.'''
        ...

    def split_by_height(self, height: float) -> None:
        '''Splits the cell by height.
        :param height: Height of a row.'''
        ...

    def split_by_width(self, width: float) -> None:
        '''Splits the cell by width.
        :param width: Width of a column.'''
        ...

    @property
    def offset_x(self) -> float:
        ...

    @property
    def offset_y(self) -> float:
        ...

    @property
    def first_row_index(self) -> int:
        ...

    @property
    def first_column_index(self) -> int:
        ...

    @property
    def width(self) -> float:
        '''Returns the width of the cell.
                    Read-only :py:class:`float`.'''
        ...

    @property
    def height(self) -> float:
        '''Returns the height of the cell.
                    Read-only :py:class:`float`.'''
        ...

    @property
    def minimal_height(self) -> float:
        ...

    @property
    def margin_left(self) -> float:
        ...

    @margin_left.setter
    def margin_left(self, value: float):
        ...

    @property
    def margin_right(self) -> float:
        ...

    @margin_right.setter
    def margin_right(self, value: float):
        ...

    @property
    def margin_top(self) -> float:
        ...

    @margin_top.setter
    def margin_top(self, value: float):
        ...

    @property
    def margin_bottom(self) -> float:
        ...

    @margin_bottom.setter
    def margin_bottom(self, value: float):
        ...

    @property
    def text_vertical_type(self) -> TextVerticalType:
        ...

    @text_vertical_type.setter
    def text_vertical_type(self, value: TextVerticalType):
        ...

    @property
    def text_anchor_type(self) -> TextAnchorType:
        ...

    @text_anchor_type.setter
    def text_anchor_type(self, value: TextAnchorType):
        ...

    @property
    def anchor_center(self) -> bool:
        ...

    @anchor_center.setter
    def anchor_center(self, value: bool):
        ...

    @property
    def first_row(self) -> IRow:
        ...

    @property
    def first_column(self) -> IColumn:
        ...

    @property
    def col_span(self) -> int:
        ...

    @property
    def row_span(self) -> int:
        ...

    @property
    def text_frame(self) -> ITextFrame:
        ...

    @property
    def table(self) -> ITable:
        '''Returns the parent Table object for a cell.
                    Read-only :py:class:`aspose.slides.ITable`.'''
        ...

    @property
    def is_merged_cell(self) -> bool:
        ...

    @property
    def cell_format(self) -> ICellFormat:
        ...

    @property
    def slide(self) -> IBaseSlide:
        '''Returns the parent slide of a cell.
                    Read-only :py:class:`aspose.slides.IBaseSlide`.'''
        ...

    @property
    def presentation(self) -> IPresentation:
        '''Returns the parent presentation of a cell.
                    Read-only :py:class:`aspose.slides.IPresentation`.'''
        ...

    @property
    def as_i_slide_component(self) -> ISlideComponent:
        ...

    @property
    def as_i_presentation_component(self) -> IPresentationComponent:
        ...

    ...

class CellCollection:
    '''Represents a collection of cells.'''
    @property
    def slide(self) -> IBaseSlide:
        '''Returns the parent slide of a CellCollection.
                    Read-only :py:class:`aspose.slides.IBaseSlide`.'''
        ...

    @property
    def presentation(self) -> IPresentation:
        '''Returns the parent presentation of a CellCollection.
                    Read-only :py:class:`aspose.slides.IPresentation`.'''
        ...

    @property
    def as_i_slide_component(self) -> ISlideComponent:
        ...

    @property
    def as_i_presentation_component(self) -> IPresentationComponent:
        ...

    @property
    def as_i_collection(self) -> list:
        ...

    @property
    def as_i_enumerable(self) -> collections.abc.Iterable:
        ...

    def __getitem__(self, key: int) -> ICell
        ...

    ...

class CellFormat(PVIObject):
    '''Represents format of a table cell.'''
    def get_effective(self) -> ICellFormatEffectiveData:
        '''Gets effective table cell formatting properties with inheritance and table styles applied.
        :returns: A :py:class:`aspose.slides.ICellFormatEffectiveData`.'''
        ...

    @property
    def as_i_presentation_component(self) -> IPresentationComponent:
        ...

    @property
    def fill_format(self) -> IFillFormat:
        ...

    @property
    def border_left(self) -> ILineFormat:
        ...

    @property
    def border_top(self) -> ILineFormat:
        ...

    @property
    def border_right(self) -> ILineFormat:
        ...

    @property
    def border_bottom(self) -> ILineFormat:
        ...

    @property
    def border_diagonal_down(self) -> ILineFormat:
        ...

    @property
    def border_diagonal_up(self) -> ILineFormat:
        ...

    @property
    def transparency(self) -> float:
        '''Gets or sets the transparency of the fill color.
                    Read/write :py:class:`float`.'''
        ...

    @transparency.setter
    def transparency(self, value: float):
        '''Gets or sets the transparency of the fill color.
                    Read/write :py:class:`float`.'''
        ...

    @property
    def slide(self) -> IBaseSlide:
        ...

    @property
    def presentation(self) -> IPresentation:
        ...

    ...

class ColorFormat(PVIObject):
    '''Represents a color used in a presentation.'''
    def to_string(self, format: ColorStringFormat) -> str:
        '''Returns a :py:class:`str` that represents the current color format.
        :param format: A type of color string format.
        :returns: A string that represents the current color format.'''
        ...

    def copy_from(self, color: IColorFormat) -> None:
        '''Copy color format from "color".'''
        ...

    @property
    def as_i_presentation_component(self) -> IPresentationComponent:
        ...

    @property
    def color_type(self) -> ColorType:
        ...

    @color_type.setter
    def color_type(self, value: ColorType):
        ...

    @property
    def color(self) -> aspose.pydrawing.Color:
        '''Returns resulting color (with all color transformations applied).
                    Sets RGB colors and clears all color transformations.
                    Read/write :py:class:`aspose.pydrawing.Color`.'''
        ...

    @color.setter
    def color(self, value: aspose.pydrawing.Color):
        '''Returns resulting color (with all color transformations applied).
                    Sets RGB colors and clears all color transformations.
                    Read/write :py:class:`aspose.pydrawing.Color`.'''
        ...

    @property
    def preset_color(self) -> PresetColor:
        ...

    @preset_color.setter
    def preset_color(self, value: PresetColor):
        ...

    @property
    def system_color(self) -> SystemColor:
        ...

    @system_color.setter
    def system_color(self, value: SystemColor):
        ...

    @property
    def scheme_color(self) -> SchemeColor:
        ...

    @scheme_color.setter
    def scheme_color(self, value: SchemeColor):
        ...

    @property
    def r(self) -> int:
        '''Returns or sets the red component of a color. All color transformations are ignored.
                    Read/write :py:class:`int`.'''
        ...

    @r.setter
    def r(self, value: int):
        '''Returns or sets the red component of a color. All color transformations are ignored.
                    Read/write :py:class:`int`.'''
        ...

    @property
    def g(self) -> int:
        '''Returns or sets the green component of a color. All color transformations are ignored.'''
        ...

    @g.setter
    def g(self, value: int):
        '''Returns or sets the green component of a color. All color transformations are ignored.'''
        ...

    @property
    def b(self) -> int:
        '''Returns or sets the blue component of a color. All color transformations are ignored.
                    Read/write :py:class:`int`.'''
        ...

    @b.setter
    def b(self, value: int):
        '''Returns or sets the blue component of a color. All color transformations are ignored.
                    Read/write :py:class:`int`.'''
        ...

    @property
    def float_r(self) -> float:
        ...

    @float_r.setter
    def float_r(self, value: float):
        ...

    @property
    def float_g(self) -> float:
        ...

    @float_g.setter
    def float_g(self, value: float):
        ...

    @property
    def float_b(self) -> float:
        ...

    @float_b.setter
    def float_b(self, value: float):
        ...

    @property
    def hue(self) -> float:
        '''Returns or sets the hue component of a color in HSL representation.
                    All color transformations are ignored.
                    Read/write :py:class:`float`.'''
        ...

    @hue.setter
    def hue(self, value: float):
        '''Returns or sets the hue component of a color in HSL representation.
                    All color transformations are ignored.
                    Read/write :py:class:`float`.'''
        ...

    @property
    def saturation(self) -> float:
        '''Returns or sets the saturation component of a color in HSL representation.
                    All color transformations are ignored.
                    Read/write :py:class:`float`.'''
        ...

    @saturation.setter
    def saturation(self, value: float):
        '''Returns or sets the saturation component of a color in HSL representation.
                    All color transformations are ignored.
                    Read/write :py:class:`float`.'''
        ...

    @property
    def luminance(self) -> float:
        '''Returns or sets the luminance component of a color in HSL representation.
                    All color transformations are ignored.
                    Read/write :py:class:`float`.'''
        ...

    @luminance.setter
    def luminance(self, value: float):
        '''Returns or sets the luminance component of a color in HSL representation.
                    All color transformations are ignored.
                    Read/write :py:class:`float`.'''
        ...

    @property
    def color_transform(self) -> IColorOperationCollection:
        ...

    @property
    def slide(self) -> IBaseSlide:
        ...

    @property
    def presentation(self) -> IPresentation:
        ...

    @property
    def as_i_fill_param_source(self) -> IFillParamSource:
        ...

    ...

class ColorOperation:
    '''Represents different color operations used for color transformations.
                Immutable object.'''
    def __init__(self, op: ColorTransformOperation):
        '''Creates new color transform operation.
        :param op: Operation type.'''
        ...

    def __init__(self, op: ColorTransformOperation, parameter: float):
        '''Creates new color transform operation.
        :param op: Operation type.
        :param parameter: Operation parameter.'''
        ...

    @property
    def operation_type(self) -> ColorTransformOperation:
        ...

    @property
    def parameter(self) -> float:
        '''Returns a parameter of an operation.
                    Read-only :py:class:`float`.'''
        ...

    ...

class ColorOperationCollection:
    '''Represents a collection of color transform operations.'''
    @overload
    def add(self, operation: ColorTransformOperation, parameter: float) -> IColorOperation:
        '''Adds a new operation to the end of collection.
        :param operation: Operation type.
        :param parameter: Operation's parameter.
        :returns: Added operation.'''
        ...

    @overload
    def add(self, operation: ColorTransformOperation) -> IColorOperation:
        '''Adds a new operation to the end of collection.
        :param operation: Operation type.
        :returns: Added operation.'''
        ...

    @overload
    def insert(self, position: int, operation: ColorTransformOperation, parameter: float) -> IColorOperation:
        '''Inserts the new operation to a collection.
        :param position: The index at which the operation will be inserted.
        :param operation: Operation type.
        :param parameter: Operation's parameter.
        :returns: Inserted operation.'''
        ...

    @overload
    def insert(self, position: int, operation: ColorTransformOperation) -> IColorOperation:
        '''Inserts the new operation to a collection.
        :param position: The index at which the operation will be inserted.
        :param operation: Operation type.
        :returns: Inserted operation.'''
        ...

    def remove_at(self, index: int) -> None:
        '''Removes the color operation from a collection.
        :param index: Index of a color operation to remove.'''
        ...

    def clear(self) -> None:
        '''Removes all color operations.'''
        ...

    def clone(self) -> any:
        '''Creates a copy of a ColorOperationCollection collection.
        :returns: New :py:class:`aspose.slides.ColorOperationCollection` collection.'''
        ...

    def clone_t(self) -> IColorOperationCollection:
        '''Clones current object
        :returns: Clone'''
        ...

    @property
    def as_i_collection(self) -> list:
        ...

    @property
    def as_i_enumerable(self) -> collections.abc.Iterable:
        ...

    def __getitem__(self, key: int) -> IColorOperation
        ...

    def __setitem__(self, key: int, value: IColorOperation
        ...

    ...

class Column(CellCollection):
    '''Represents a column in a table.'''
    @overload
    def set_text_format(self, source: IPortionFormat) -> None:
        '''Sets defined portion format properties to all column cells' portions.
        :param source: IPortionFormat object with necessary properties set.'''
        ...

    @overload
    def set_text_format(self, source: IParagraphFormat) -> None:
        '''Sets defined paragraph format properties to all column cells' paragraphs.
        :param source: IParagraphFormat object with necessary properties set.'''
        ...

    @overload
    def set_text_format(self, source: ITextFrameFormat) -> None:
        '''Sets defined text frame format properties to all column cells' text frames.
        :param source: ITextFrameFormat object with necessary properties set.'''
        ...

    @property
    def slide(self) -> IBaseSlide:
        '''Returns the parent slide of a CellCollection.
                    Read-only :py:class:`aspose.slides.IBaseSlide`.'''
        ...

    @property
    def presentation(self) -> IPresentation:
        '''Returns the parent presentation of a CellCollection.
                    Read-only :py:class:`aspose.slides.IPresentation`.'''
        ...

    @property
    def width(self) -> float:
        '''Returns or sets the width of a column.
                    Read/write :py:class:`float`.'''
        ...

    @width.setter
    def width(self, value: float):
        '''Returns or sets the width of a column.
                    Read/write :py:class:`float`.'''
        ...

    @property
    def column_format(self) -> IColumnFormat:
        ...

    @property
    def as_i_slide_component(self) -> ISlideComponent:
        ...

    @property
    def as_i_presentation_component(self) -> IPresentationComponent:
        ...

    @property
    def as_i_collection(self) -> list:
        ...

    @property
    def as_i_enumerable(self) -> collections.abc.Iterable:
        ...

    @property
    def as_i_cell_collection(self) -> ICellCollection:
        ...

    @property
    def as_i_bulk_text_formattable(self) -> IBulkTextFormattable:
        ...

    def __getitem__(self, key: int) -> ICell
        ...

    ...

class ColumnCollection:
    '''Represents collection of columns in a table.'''
    def add_clone(self, templ: IColumn, with_attached_columns: bool) -> List[IColumn]:
        '''Creates a copy of the specified template row and inserts it at the bottom of a table.
        :param templ: Column which is used as a template.
        :param with_attached_columns: True to copy also all columns attached to the template row.
        :returns: Added columns.'''
        ...

    def insert_clone(self, index: int, templ: IColumn, with_attached_columns: bool) -> List[IColumn]:
        '''Creates a copy of the specified template column and insert it at the specified position in a table.
        :param index: Index of a new column.
        :param templ: Column which is used as a template.
        :param with_attached_columns: True to copy also all columns attached to the template column.
        :returns: Inserted columns.'''
        ...

    def remove_at(self, first_column_index: int, with_attached_rows: bool) -> None:
        '''Removes a column at the specified position from a table.
        :param first_column_index: Index of a column to delete.
        :param with_attached_rows: True to delete also all attached columns.'''
        ...

    @property
    def as_i_collection(self) -> list:
        ...

    @property
    def as_i_enumerable(self) -> collections.abc.Iterable:
        ...

    def __getitem__(self, key: int) -> IColumn
        ...

    ...

class ColumnFormat:
    '''Represents format of a table column.'''
    def get_effective(self) -> IColumnFormatEffectiveData:
        '''Gets effective table column formatting properties with inheritance and table styles applied.
        :returns: A :py:class:`aspose.slides.IColumnFormatEffectiveData`.'''
        ...

    ...

class Comment:
    '''Represents a comment on a slide.'''
    def remove(self) -> None:
        '''Removes comment and all its replies from the parent collection.'''
        ...

    @property
    def text(self) -> str:
        '''Returns or sets the plain text of a slide comment.
                    Read/write :py:class:`str`.'''
        ...

    @text.setter
    def text(self, value: str):
        '''Returns or sets the plain text of a slide comment.
                    Read/write :py:class:`str`.'''
        ...

    @property
    def created_time(self) -> DateTime:
        ...

    @created_time.setter
    def created_time(self, value: DateTime):
        ...

    @property
    def slide(self) -> ISlide:
        '''Returns or sets the parent slide of a comment.
                    Read-only :py:class:`aspose.slides.ISlide`.'''
        ...

    @property
    def author(self) -> ICommentAuthor:
        '''Returns the author of a comment.
                    Read-only :py:class:`aspose.slides.ICommentAuthor`.'''
        ...

    @property
    def position(self) -> aspose.pydrawing.PointF:
        '''Returns or sets the position of a comment on a slide.
                    Read/write :py:class:`aspose.pydrawing.PointF`.'''
        ...

    @position.setter
    def position(self, value: aspose.pydrawing.PointF):
        '''Returns or sets the position of a comment on a slide.
                    Read/write :py:class:`aspose.pydrawing.PointF`.'''
        ...

    @property
    def parent_comment(self) -> IComment:
        ...

    @parent_comment.setter
    def parent_comment(self, value: IComment):
        ...

    ...

class CommentAuthor:
    '''Represents an author of comments.'''
    def remove(self) -> None:
        '''Removes the author from the parent collection.'''
        ...

    @property
    def name(self) -> str:
        '''Returns or sets the author's name.
                    Read/write :py:class:`str`.'''
        ...

    @name.setter
    def name(self, value: str):
        '''Returns or sets the author's name.
                    Read/write :py:class:`str`.'''
        ...

    @property
    def initials(self) -> str:
        '''Returns or sets the authors initials.
                    Read/write :py:class:`str`.'''
        ...

    @initials.setter
    def initials(self, value: str):
        '''Returns or sets the authors initials.
                    Read/write :py:class:`str`.'''
        ...

    @property
    def comments(self) -> ICommentCollection:
        '''Returns the collection of comments made by this author.
                    Read-only :py:class:`aspose.slides.ICommentCollection`.'''
        ...

    ...

class CommentAuthorCollection:
    '''Represents a collection of comment authors.'''
    def add_author(self, name: str, initials: str) -> ICommentAuthor:
        '''Add new author at the end of a collection.
        :param name: Name of a new author.
        :param initials: Initials of a new author.
        :returns: New :py:class:`aspose.slides.ICommentAuthor` object.'''
        ...

    def to_array(self) -> List[ICommentAuthor]:
        '''Creates and returns an array with all authors.
        :returns: Array of :py:class:`aspose.slides.ICommentAuthor`'''
        ...

    def find_by_name(self, name: str) -> List[ICommentAuthor]:
        '''Find author in a collection by name.
        :param name: Name of an author to find.
        :returns: Author or None.'''
        ...

    def find_by_name_and_initials(self, name: str, initials: str) -> List[ICommentAuthor]:
        '''Find author in a collection by name and initials.
        :param name: Name of an author to find.
        :param initials: Initials of an author to find.
        :returns: Author or None.'''
        ...

    def remove_at(self, index: int) -> None:
        '''Removes the author at the specified index of the collection.
        :param index: The zero-based index of the element to remove.'''
        ...

    def remove(self, author: ICommentAuthor) -> None:
        '''Removes the first occurrence of the specified author in a collection.
        :param author: The author to remove from a collection.'''
        ...

    def clear(self) -> None:
        '''Removes all authors from a collection.'''
        ...

    @property
    def as_i_collection(self) -> list:
        ...

    @property
    def as_i_enumerable(self) -> collections.abc.Iterable:
        ...

    def __getitem__(self, key: int) -> ICommentAuthor
        ...

    ...

class CommentCollection:
    '''Represents a collection of comments of one author.'''
    @overload
    def to_array(self) -> List[IComment]:
        '''Creates and returns an array with all comments.
        :returns: Array of :py:class:`aspose.slides.Comment`.'''
        ...

    @overload
    def to_array(self, start_index: int, count: int) -> List[IComment]:
        '''Creates and returns an array with all comments from the specified range.
        :param start_index: An index of a first comment to return.
        :param count: A number of comments to return.
        :returns: Array of :py:class:`aspose.slides.Comment`.'''
        ...

    def add_comment(self, text: str, slide: ISlide, position: aspose.pydrawing.PointF, creation_time: DateTime) -> IComment:
        '''Add new comment at the end of a collection.
        :param text: Plain text of a new comment.
        :param slide: Slide in a presentation where to add a new comment.
        :param position: Position on a slide where to add a new comment.
        :param creation_time: Time of a comment creation.
        :returns: Added comment.'''
        ...

    def add_modern_comment(self, text: str, slide: ISlide, shape: IShape, position: aspose.pydrawing.PointF, creation_time: DateTime) -> IModernComment:
        '''Add new modern comment at the end of a collection.
        :param text: Plain text of a new modern comment.
        :param slide: Slide in a presentation where to add a new modern comment.
        :param shape: Shape on a slide to which a new modern comment is associated.
        :param position: Position on a slide where to add a new modern comment.
        :param creation_time: Time of a modern comment creation.
        :returns: Added modern comment.'''
        ...

    def insert_comment(self, index: int, text: str, slide: ISlide, position: aspose.pydrawing.PointF, creation_time: DateTime) -> IComment:
        '''Insert new comment to a collection at the specified index.
        :param index: Index of the element in a collection at which comment should be inserted.
        :param text: Plain text of a new comment.
        :param slide: Slide in a presentation where to add a new comment.
        :param position: Position on a slide where to add a new comment.
        :param creation_time: Time of a comment creation.
        :returns: Inserted comment.'''
        ...

    def insert_modern_comment(self, index: int, text: str, slide: ISlide, shape: IShape, position: aspose.pydrawing.PointF, creation_time: DateTime) -> IModernComment:
        '''Insert new modern comment to a collection at the specified index.
        :param index: Index of the element in a collection at which modern comment should be inserted.
        :param text: Plain text of a new modern comment.
        :param slide: Slide in a presentation where to add a new modern comment.
        :param shape: Shape on a slide to which a new modern comment is associated.
        :param position: Position on a slide where to add a new modern comment.
        :param creation_time: Time of a modern comment creation.
        :returns: Inserted modern comment.'''
        ...

    def remove_at(self, index: int) -> None:
        '''Removes the element at the specified index in a collection.
        :param index: The zero-based index of the element to remove.'''
        ...

    def remove(self, comment: IComment) -> None:
        '''Removes the first occurrence of the specified comment in a collection.
        :param comment: The comment to remove from a collection.'''
        ...

    def clear(self) -> None:
        '''Removes all comments from a collection.'''
        ...

    def find_comment_by_idx(self, idx: int) -> IComment:
        '''Finds a comment in the collection by index.
        :param idx: Unique index of a comment to find :py:class:`int`.
        :returns: Found comment or None :py:class:`aspose.slides.IComment`.'''
        ...

    @property
    def as_i_collection(self) -> list:
        ...

    @property
    def as_i_enumerable(self) -> collections.abc.Iterable:
        ...

    def __getitem__(self, key: int) -> IComment
        ...

    ...

class CommonSlideViewProperties:
    '''Represents common slide view properties.'''
    @property
    def scale(self) -> int:
        '''Specifies the view scaling ratio in percentages.
                    Read/write :py:class:`int`.'''
        ...

    @scale.setter
    def scale(self, value: int):
        '''Specifies the view scaling ratio in percentages.
                    Read/write :py:class:`int`.'''
        ...

    @property
    def variable_scale(self) -> bool:
        ...

    @variable_scale.setter
    def variable_scale(self, value: bool):
        ...

    @property
    def drawing_guides(self) -> IDrawingGuidesCollection:
        ...

    ...

class Connector(GeometryShape):
    '''Represents a connector.'''
    @overload
    def get_thumbnail(self) -> aspose.pydrawing.Bitmap:
        '''Returns shape thumbnail.
                    ShapeThumbnailBounds.Shape shape thumbnail bounds type is used by default.
        :returns: Shape thumbnail.'''
        ...

    @overload
    def get_thumbnail(self, bounds: ShapeThumbnailBounds, scale_x: float, scale_y: float) -> aspose.pydrawing.Bitmap:
        '''Returns shape thumbnail.
        :param bounds: Shape thumbnail bounds type.
        :param scale_x: X scale
        :param scale_y: Y scale
        :returns: Shape thumbnail or None in case when ShapeThumbnailBounds.Appearance is used and a shape doesn't have visible elements.'''
        ...

    @overload
    def get_image(self) -> IImage:
        '''Returns shape thumbnail.
                    ShapeThumbnailBounds.Shape shape thumbnail bounds type is used by default.
        :returns: Shape thumbnail.'''
        ...

    @overload
    def get_image(self, bounds: ShapeThumbnailBounds, scale_x: float, scale_y: float) -> IImage:
        '''Returns shape thumbnail.
        :param bounds: Shape thumbnail bounds type.
        :param scale_x: X scale
        :param scale_y: Y scale
        :returns: Shape thumbnail or None in case when ShapeThumbnailBounds.Appearance is used and a shape doesn't have visible elements.'''
        ...

    @overload
    def write_as_svg(self, stream: io.RawIOBase) -> None:
        '''Saves content of Shape as SVG file.
        :param stream: Target stream'''
        ...

    @overload
    def write_as_svg(self, stream: io.RawIOBase, svg_options: aspose.slides.export.ISVGOptions) -> None:
        '''Saves content of Shape as SVG file.
        :param stream: Target stream
        :param svg_options: SVG generation options'''
        ...

    def remove_placeholder(self) -> None:
        '''Defines that this shape isn't a placeholder.'''
        ...

    def add_placeholder(self, placeholder_to_copy_from: IPlaceholder) -> IPlaceholder:
        '''Adds a new placeholder if there is no and sets placeholder properties to a specified one.
        :param placeholder_to_copy_from: Placeholder to copy content from.
        :returns: New :py:attr:`aspose.slides.Shape.placeholder`.'''
        ...

    def get_base_placeholder(self) -> IShape:
        '''Returns a basic placeholder shape (shape from the layout and/or master slide that the current shape is inherited from).'''
        ...

    def get_geometry_paths(self) -> List[IGeometryPath]:
        '''Returns the copy of path of the geometry shape. Coordinates are relative to the left top corner of the shape.
        :returns: Array of :py:class:`aspose.slides.IGeometryPath`'''
        ...

    def set_geometry_path(self, geometry_path: IGeometryPath) -> None:
        '''Updates shape geometry from :py:class:`aspose.slides.IGeometryPath` object. Coordinates must be relative to the left
                     top corner of the shape.
                     Changes the type of the shape (:py:attr:`aspose.slides.GeometryShape.shape_type`) to :py:attr:`aspose.slides.ShapeType.CUSTOM`.
        :param geometry_path: Geometry path'''
        ...

    def set_geometry_paths(self, geometry_paths: List[IGeometryPath]) -> None:
        '''Updates shape geometry from array of :py:class:`aspose.slides.IGeometryPath`. Coordinates must be relative to the left
                     top corner of the shape.
                     Changes the type of the shape (:py:attr:`aspose.slides.GeometryShape.shape_type`) to :py:attr:`aspose.slides.ShapeType.CUSTOM`.
        :param geometry_paths: Array geometry paths'''
        ...

    def create_shape_elements(self) -> List[IShapeElement]:
        '''Creates and returns array of shape's elements.
        :returns: Array of :py:class:`aspose.slides.ShapeElement`'''
        ...

    def reroute(self) -> None:
        '''Reroutes connector so that it take the shortest possible path between the shapes it connect.'''
        ...

    @property
    def is_text_holder(self) -> bool:
        ...

    @property
    def placeholder(self) -> IPlaceholder:
        '''Returns the placeholder for a shape. Returns None if the shape has no placeholder.
                    Read-only :py:class:`aspose.slides.IPlaceholder`.'''
        ...

    @property
    def custom_data(self) -> ICustomData:
        ...

    @property
    def raw_frame(self) -> IShapeFrame:
        ...

    @raw_frame.setter
    def raw_frame(self, value: IShapeFrame):
        ...

    @property
    def frame(self) -> IShapeFrame:
        '''Returns or sets the shape frame's properties.
                    Read/write :py:class:`aspose.slides.IShapeFrame`.'''
        ...

    @frame.setter
    def frame(self, value: IShapeFrame):
        '''Returns or sets the shape frame's properties.
                    Read/write :py:class:`aspose.slides.IShapeFrame`.'''
        ...

    @property
    def line_format(self) -> ILineFormat:
        ...

    @property
    def three_d_format(self) -> IThreeDFormat:
        ...

    @property
    def effect_format(self) -> IEffectFormat:
        ...

    @property
    def fill_format(self) -> IFillFormat:
        ...

    @property
    def hyperlink_click(self) -> IHyperlink:
        ...

    @hyperlink_click.setter
    def hyperlink_click(self, value: IHyperlink):
        ...

    @property
    def hyperlink_mouse_over(self) -> IHyperlink:
        ...

    @hyperlink_mouse_over.setter
    def hyperlink_mouse_over(self, value: IHyperlink):
        ...

    @property
    def hyperlink_manager(self) -> IHyperlinkManager:
        ...

    @property
    def hidden(self) -> bool:
        '''Determines whether the shape is hidden.
                    Read/write :py:class:`bool`.'''
        ...

    @hidden.setter
    def hidden(self, value: bool):
        '''Determines whether the shape is hidden.
                    Read/write :py:class:`bool`.'''
        ...

    @property
    def z_order_position(self) -> int:
        ...

    @property
    def connection_site_count(self) -> int:
        ...

    @property
    def rotation(self) -> float:
        '''Returns or sets the number of degrees the specified shape is rotated around
                    the z-axis. A positive value indicates clockwise rotation; a negative value
                    indicates counterclockwise rotation.
                    Read/write :py:class:`float`.'''
        ...

    @rotation.setter
    def rotation(self, value: float):
        '''Returns or sets the number of degrees the specified shape is rotated around
                    the z-axis. A positive value indicates clockwise rotation; a negative value
                    indicates counterclockwise rotation.
                    Read/write :py:class:`float`.'''
        ...

    @property
    def x(self) -> float:
        '''Returns or sets the x-coordinate of the upper-left corner of the shape.
                    Read/write :py:class:`float`.'''
        ...

    @x.setter
    def x(self, value: float):
        '''Returns or sets the x-coordinate of the upper-left corner of the shape.
                    Read/write :py:class:`float`.'''
        ...

    @property
    def y(self) -> float:
        '''Returns or sets the y-coordinate of the upper-left corner of the shape.
                    Read/write :py:class:`float`.'''
        ...

    @y.setter
    def y(self, value: float):
        '''Returns or sets the y-coordinate of the upper-left corner of the shape.
                    Read/write :py:class:`float`.'''
        ...

    @property
    def width(self) -> float:
        '''Returns or sets the width of the shape.
                    Read/write :py:class:`float`.'''
        ...

    @width.setter
    def width(self, value: float):
        '''Returns or sets the width of the shape.
                    Read/write :py:class:`float`.'''
        ...

    @property
    def height(self) -> float:
        '''Returns or sets the height of the shape.
                    Read/write :py:class:`float`.'''
        ...

    @height.setter
    def height(self, value: float):
        '''Returns or sets the height of the shape.
                    Read/write :py:class:`float`.'''
        ...

    @property
    def black_white_mode(self) -> BlackWhiteMode:
        ...

    @black_white_mode.setter
    def black_white_mode(self, value: BlackWhiteMode):
        ...

    @property
    def unique_id(self) -> int:
        ...

    @property
    def office_interop_shape_id(self) -> int:
        ...

    @property
    def alternative_text(self) -> str:
        ...

    @alternative_text.setter
    def alternative_text(self, value: str):
        ...

    @property
    def alternative_text_title(self) -> str:
        ...

    @alternative_text_title.setter
    def alternative_text_title(self, value: str):
        ...

    @property
    def name(self) -> str:
        '''Returns or sets the name of a shape.
                    Must be not None. Use empty string value if needed.
                    Read/write :py:class:`str`.'''
        ...

    @name.setter
    def name(self, value: str):
        '''Returns or sets the name of a shape.
                    Must be not None. Use empty string value if needed.
                    Read/write :py:class:`str`.'''
        ...

    @property
    def is_decorative(self) -> bool:
        ...

    @is_decorative.setter
    def is_decorative(self, value: bool):
        ...

    @property
    def shape_lock(self) -> IConnectorLock:
        ...

    @property
    def is_grouped(self) -> bool:
        ...

    @property
    def parent_group(self) -> IGroupShape:
        ...

    @property
    def slide(self) -> IBaseSlide:
        '''Returns the parent slide of a shape.
                    Read-only :py:class:`aspose.slides.IBaseSlide`.'''
        ...

    @property
    def presentation(self) -> IPresentation:
        '''Returns the parent presentation of a slide.
                    Read-only :py:class:`aspose.slides.IPresentation`.'''
        ...

    @property
    def shape_style(self) -> IShapeStyle:
        ...

    @property
    def shape_type(self) -> ShapeType:
        ...

    @shape_type.setter
    def shape_type(self, value: ShapeType):
        ...

    @property
    def adjustments(self) -> IAdjustValueCollection:
        '''Returns a collection of shape's adjustment values.
                    Read-only :py:class:`aspose.slides.IAdjustValueCollection`.'''
        ...

    @property
    def connector_lock(self) -> IConnectorLock:
        ...

    @property
    def start_shape_connected_to(self) -> IShape:
        ...

    @start_shape_connected_to.setter
    def start_shape_connected_to(self, value: IShape):
        ...

    @property
    def end_shape_connected_to(self) -> IShape:
        ...

    @end_shape_connected_to.setter
    def end_shape_connected_to(self, value: IShape):
        ...

    @property
    def start_shape_connection_site_index(self) -> int:
        ...

    @start_shape_connection_site_index.setter
    def start_shape_connection_site_index(self, value: int):
        ...

    @property
    def end_shape_connection_site_index(self) -> int:
        ...

    @end_shape_connection_site_index.setter
    def end_shape_connection_site_index(self, value: int):
        ...

    @property
    def as_i_hyperlink_container(self) -> IHyperlinkContainer:
        ...

    @property
    def as_i_slide_component(self) -> ISlideComponent:
        ...

    @property
    def as_i_presentation_component(self) -> IPresentationComponent:
        ...

    @property
    def as_i_shape(self) -> IShape:
        ...

    @property
    def as_i_geometry_shape(self) -> IGeometryShape:
        ...

    ...

class ConnectorLock(BaseShapeLock):
    '''Determines which operations are disabled on the parent Connector.'''
    @property
    def no_locks(self) -> bool:
        ...

    @property
    def grouping_locked(self) -> bool:
        ...

    @grouping_locked.setter
    def grouping_locked(self, value: bool):
        ...

    @property
    def select_locked(self) -> bool:
        ...

    @select_locked.setter
    def select_locked(self, value: bool):
        ...

    @property
    def rotate_locked(self) -> bool:
        ...

    @rotate_locked.setter
    def rotate_locked(self, value: bool):
        ...

    @property
    def aspect_ratio_locked(self) -> bool:
        ...

    @aspect_ratio_locked.setter
    def aspect_ratio_locked(self, value: bool):
        ...

    @property
    def position_move(self) -> bool:
        ...

    @position_move.setter
    def position_move(self, value: bool):
        ...

    @property
    def size_locked(self) -> bool:
        ...

    @size_locked.setter
    def size_locked(self, value: bool):
        ...

    @property
    def edit_points_locked(self) -> bool:
        ...

    @edit_points_locked.setter
    def edit_points_locked(self, value: bool):
        ...

    @property
    def adjust_handles_locked(self) -> bool:
        ...

    @adjust_handles_locked.setter
    def adjust_handles_locked(self, value: bool):
        ...

    @property
    def arrowheads_locked(self) -> bool:
        ...

    @arrowheads_locked.setter
    def arrowheads_locked(self, value: bool):
        ...

    @property
    def shape_type_locked(self) -> bool:
        ...

    @shape_type_locked.setter
    def shape_type_locked(self, value: bool):
        ...

    @property
    def as_i_base_shape_lock(self) -> IBaseShapeLock:
        ...

    ...

class Control:
    '''Represents an ActiveX control.'''
    @property
    def persistence(self) -> PersistenceType:
        '''Gets the method used to store properties of the ActiveX control.
                    Read only :py:enum:`aspose.slides.PersistenceType`.'''
        ...

    @property
    def name(self) -> str:
        '''Gets or sets the name of this control.
                    Read/write :py:class:`str`.'''
        ...

    @name.setter
    def name(self, value: str):
        '''Gets or sets the name of this control.
                    Read/write :py:class:`str`.'''
        ...

    @property
    def class_id(self) -> Guid:
        ...

    @class_id.setter
    def class_id(self, value: Guid):
        ...

    @property
    def substitute_picture_format(self) -> IPictureFillFormat:
        ...

    @property
    def frame(self) -> IShapeFrame:
        '''Returns or sets control's frame.
                    Read/write :py:class:`aspose.slides.IShapeFrame`.'''
        ...

    @frame.setter
    def frame(self, value: IShapeFrame):
        '''Returns or sets control's frame.
                    Read/write :py:class:`aspose.slides.IShapeFrame`.'''
        ...

    @property
    def properties(self) -> IControlPropertiesCollection:
        '''Returns a collection of ActiveX properties.
                    
                    Read-only :py:class:`aspose.slides.IControlPropertiesCollection`.'''
        ...

    @property
    def active_x_control_binary(self) -> bytes:
        ...

    @property
    def as_i_slide_component(self) -> ISlideComponent:
        ...

    @property
    def slide(self) -> IBaseSlide:
        ...

    @property
    def as_i_presentation_component(self) -> IPresentationComponent:
        ...

    @property
    def presentation(self) -> IPresentation:
        ...

    ...

class ControlCollection:
    '''A collection of ActiveX controls.'''
    def add_control(self, control_type: ControlType, x: float, y: float, width: float, height: float) -> IControl:
        '''Creates and adds a new control to the collection.
        :param control_type: Type of a control to add.
        :param x: The X-coordinate for a left side of shape's frame.
        :param y: The Y-coordinate for a top side of shape's frame.
        :param width: The width of shape's frame.
        :param height: The height of shape's frame.
        :returns: Created control.'''
        ...

    def remove(self, item: IControl) -> None:
        '''Removes an ActiveX control from the collection.
        :param item: A control to remove.'''
        ...

    def remove_at(self, index: int) -> None:
        '''Removes an ActiveX control stored at specified position from the collection.
        :param index: Index of a control to remove.'''
        ...

    def clear(self) -> None:
        '''Removes all controls from the collection.'''
        ...

    @property
    def as_i_collection(self) -> list:
        ...

    @property
    def as_i_enumerable(self) -> collections.abc.Iterable:
        ...

    def __getitem__(self, key: int) -> IControl
        ...

    ...

class ControlPropertiesCollection:
    '''A collection of AcitveX properties.'''
    def add(self, name: str, value: str) -> None:
        '''Adds a property to the collection.
        :param name: The name of the property.
        :param value: The alue of the property.'''
        ...

    def remove(self, name: str) -> None:
        '''Removes a property with the specified name.
        :param name: The name of property to remove.'''
        ...

    def clear(self) -> None:
        '''Removes all properties.'''
        ...

    @property
    def names_of_properties(self) -> list:
        ...

    @property
    def count(self) -> int:
        '''Returns a number of properties in the collection.
                    Read-only :py:class:`int`.'''
        ...

    @property
    def as_i_enumerable(self) -> collections.abc.Iterable:
        ...

    ...

class CustomData:
    '''Represents container for custom data.'''
    @property
    def tags(self) -> ITagCollection:
        '''Returns the Customer Data Tags collection.
                    Read-only :py:class:`aspose.slides.ITagCollection`.'''
        ...

    @property
    def custom_xml_parts(self) -> ICustomXmlPartCollection:
        ...

    ...

class CustomXmlPart:
    '''Represents custom xml part.'''
    def remove(self) -> None:
        '''Removes the custom xml part from the presentation.'''
        ...

    @property
    def xml_data(self) -> bytes:
        ...

    @xml_data.setter
    def xml_data(self, value: bytes):
        ...

    @property
    def xml_as_string(self) -> str:
        ...

    @xml_as_string.setter
    def xml_as_string(self, value: str):
        ...

    @property
    def item_id(self) -> Guid:
        ...

    @item_id.setter
    def item_id(self, value: Guid):
        ...

    @property
    def namespace_schemas(self) -> List[str]:
        ...

    ...

class CustomXmlPartCollection:
    '''Represents collection of custom xml parts.'''
    @overload
    def add(self, xml_string: str) -> ICustomXmlPart:
        '''Adds new custom xml part.
        :param xml_string: The xml string of new part to be added.
        :returns: Created custom xml part.'''
        ...

    @overload
    def add(self, xml_data: bytes) -> ICustomXmlPart:
        '''Adds new custom xml part.
        :param xml_data: The xml data of new part to be added.
        :returns: Created custom xml part.'''
        ...

    @overload
    def add(self, input_stream: io.RawIOBase) -> ICustomXmlPart:
        '''Adds new custom xml part.
        :param input_stream: The inputStream with xml data of new part to be added.
        :returns: Created custom xml part.'''
        ...

    def remove_at(self, index: int) -> None:
        '''Removes custom xml part at the specified index.
        :param index: The zero-based index of the element to remove.'''
        ...

    def remove(self, item: ICustomXmlPart) -> bool:
        '''Removes the first occurrence of a specific object from the collection.
        :param item: The custom xml part to remove.
        :returns: ``true`` if item is successfully removed; otherwise, ``false``.'''
        ...

    def clear(self) -> None:
        '''Removes all items from the collection.'''
        ...

    @property
    def as_i_collection(self) -> list:
        ...

    @property
    def as_i_enumerable(self) -> collections.abc.Iterable:
        ...

    def __getitem__(self, key: int) -> ICustomXmlPart
        ...

    ...

class DigitalSignature:
    '''Digital signature in signed file.'''
    def __init__(self, certificate: System.Security.Cryptography.X509Certificates.X509Certificate2):
        '''Creates a new DigitalSignature object with the specified certificate.
        :param certificate: Certificate that will be used to sign the presentation.'''
        ...

    def __init__(self, file_path: str, password: str):
        '''Creates a new DigitalSignature object with the specified certificate file path and password.
        :param file_path: Path to the file with certificate.
        :param password: Password required to access certificate.'''
        ...

    @property
    def certificate(self) -> System.Security.Cryptography.X509Certificates.X509Certificate2:
        '''Certificate object that was used to sign the document.
                    Read-only :py:class:`System.Security.Cryptography.X509Certificates.X509Certificate2`.'''
        ...

    @property
    def is_valid(self) -> bool:
        ...

    @property
    def sign_time(self) -> DateTime:
        ...

    @property
    def comments(self) -> str:
        '''The purpose of signature.
                    Read/write :py:class:`str`.'''
        ...

    @comments.setter
    def comments(self, value: str):
        '''The purpose of signature.
                    Read/write :py:class:`str`.'''
        ...

    ...

class DigitalSignatureCollection:
    '''Represents a collection of digital signatures attached to a document.'''
    def add(self, signature: IDigitalSignature) -> None:
        '''Adds the signature at the end of collection.
        :param signature: Signature to add.'''
        ...

    def remove_at(self, index: int) -> None:
        '''Removes the signature at the specified index.
        :param index: Index of the signature that should be deleted.'''
        ...

    def clear(self) -> None:
        '''Removes all signatures from collection.'''
        ...

    @property
    def as_i_collection(self) -> list:
        ...

    @property
    def as_i_enumerable(self) -> collections.abc.Iterable:
        ...

    def __getitem__(self, key: int) -> IDigitalSignature
        ...

    ...

class DocumentProperties:
    '''Represents properties of a presentation.'''
    def __init__(self):
        '''Initializes new instance of class :py:class:`aspose.slides.DocumentProperties`.'''
        ...

    @overload
    def get_custom_property_value(self, name: str, value: Any) -> None:
        '''Gets a named boolean value from the custom properties.
        :param name: Name of the custom property to get
        :param value: Custom property value'''
        ...

    @overload
    def get_custom_property_value(self, name: str, value: Any) -> None:
        '''Gets a named integer value from the custom properties.
        :param name: Name of the custom property to get
        :param value: Custom property value'''
        ...

    @overload
    def get_custom_property_value(self, name: str, value: Any) -> None:
        '''Gets a named DateTime value from the custom properties.
        :param name: Name of the custom property to get
        :param value: Custom property value'''
        ...

    @overload
    def get_custom_property_value(self, name: str, value: Any) -> None:
        ...

    @overload
    def get_custom_property_value(self, name: str, value: Any) -> None:
        ...

    @overload
    def get_custom_property_value(self, name: str, value: Any) -> None:
        ...

    @overload
    def set_custom_property_value(self, name: str, value: bool) -> None:
        '''Sets a named boolean custom property.
        :param name: Name of the custom property to set
        :param value: Custom property value'''
        ...

    @overload
    def set_custom_property_value(self, name: str, value: int) -> None:
        '''Sets a named integer custom property.
        :param name: Name of the custom property to set
        :param value: Custom property value'''
        ...

    @overload
    def set_custom_property_value(self, name: str, value: DateTime) -> None:
        '''Sets a named DateTime custom property.
        :param name: Name of the custom property to set
        :param value: Custom property value'''
        ...

    @overload
    def set_custom_property_value(self, name: str, value: str) -> None:
        '''Sets a named string custom property.
        :param name: Name of the custom property to set
        :param value: Custom property value'''
        ...

    @overload
    def set_custom_property_value(self, name: str, value: float) -> None:
        '''Sets a named float custom property.
        :param name: Name of the custom property to set
        :param value: Custom property value'''
        ...

    @overload
    def set_custom_property_value(self, name: str, value: float) -> None:
        '''Sets a named double custom property.
        :param name: Name of the custom property to set
        :param value: Custom property value'''
        ...

    def get_custom_property_name(self, index: int) -> str:
        '''Return a custom property name at the specified index.
        :param index: The zero-based index of a custom property to get.
        :returns: Custom property name at the specified index.'''
        ...

    def remove_custom_property(self, name: str) -> bool:
        '''Remove a custom property associated with a specified name.
        :param name: Name of a custom property to remove.
        :returns: Return true if a property was removed, false otherwise.'''
        ...

    def contains_custom_property(self, name: str) -> bool:
        '''Check presents of a custom property with a specified name.
        :param name: Name of a custom property to check.
        :returns: Return true if property exists, false otherwise.'''
        ...

    def clear_custom_properties(self) -> None:
        '''Removes all custom properties.'''
        ...

    def clear_built_in_properties(self) -> None:
        '''Clears and sets default values for all builtIn properties.'''
        ...

    def clone(self) -> any:
        '''Clones current object
        :returns: Clone'''
        ...

    def clone_t(self) -> IDocumentProperties:
        '''Clones current object
        :returns: Clone'''
        ...

    @property
    def app_version(self) -> str:
        ...

    @property
    def name_of_application(self) -> str:
        ...

    @name_of_application.setter
    def name_of_application(self, value: str):
        ...

    @property
    def company(self) -> str:
        '''Returns or sets the company property.
                    Read/write :py:class:`str`.'''
        ...

    @company.setter
    def company(self, value: str):
        '''Returns or sets the company property.
                    Read/write :py:class:`str`.'''
        ...

    @property
    def manager(self) -> str:
        '''Returns or sets the manager property.
                    Read/write :py:class:`str`.'''
        ...

    @manager.setter
    def manager(self, value: str):
        '''Returns or sets the manager property.
                    Read/write :py:class:`str`.'''
        ...

    @property
    def presentation_format(self) -> str:
        ...

    @presentation_format.setter
    def presentation_format(self, value: str):
        ...

    @property
    def shared_doc(self) -> bool:
        ...

    @shared_doc.setter
    def shared_doc(self, value: bool):
        ...

    @property
    def application_template(self) -> str:
        ...

    @application_template.setter
    def application_template(self, value: str):
        ...

    @property
    def total_editing_time(self) -> TimeSpan:
        ...

    @total_editing_time.setter
    def total_editing_time(self, value: TimeSpan):
        ...

    @property
    def title(self) -> str:
        '''Returns or sets the title of a presentation.
                    Read/write :py:class:`str`.'''
        ...

    @title.setter
    def title(self, value: str):
        '''Returns or sets the title of a presentation.
                    Read/write :py:class:`str`.'''
        ...

    @property
    def subject(self) -> str:
        '''Returns or sets the subject of a presentation.
                    Read/write :py:class:`str`.'''
        ...

    @subject.setter
    def subject(self, value: str):
        '''Returns or sets the subject of a presentation.
                    Read/write :py:class:`str`.'''
        ...

    @property
    def author(self) -> str:
        '''Returns or sets the author of a presentation.
                    Read/write :py:class:`str`.'''
        ...

    @author.setter
    def author(self, value: str):
        '''Returns or sets the author of a presentation.
                    Read/write :py:class:`str`.'''
        ...

    @property
    def keywords(self) -> str:
        '''Returns or sets the keywords of a presentation.
                    Read/write :py:class:`str`.'''
        ...

    @keywords.setter
    def keywords(self, value: str):
        '''Returns or sets the keywords of a presentation.
                    Read/write :py:class:`str`.'''
        ...

    @property
    def comments(self) -> str:
        '''Returns or sets the comments of a presentation.
                    Read/write :py:class:`str`.'''
        ...

    @comments.setter
    def comments(self, value: str):
        '''Returns or sets the comments of a presentation.
                    Read/write :py:class:`str`.'''
        ...

    @property
    def category(self) -> str:
        '''Returns or sets the category of a presentation.
                    Read/write :py:class:`str`.'''
        ...

    @category.setter
    def category(self, value: str):
        '''Returns or sets the category of a presentation.
                    Read/write :py:class:`str`.'''
        ...

    @property
    def created_time(self) -> DateTime:
        ...

    @created_time.setter
    def created_time(self, value: DateTime):
        ...

    @property
    def last_saved_time(self) -> DateTime:
        ...

    @last_saved_time.setter
    def last_saved_time(self, value: DateTime):
        ...

    @property
    def last_printed(self) -> DateTime:
        ...

    @last_printed.setter
    def last_printed(self, value: DateTime):
        ...

    @property
    def last_saved_by(self) -> str:
        ...

    @last_saved_by.setter
    def last_saved_by(self, value: str):
        ...

    @property
    def revision_number(self) -> int:
        ...

    @revision_number.setter
    def revision_number(self, value: int):
        ...

    @property
    def content_status(self) -> str:
        ...

    @content_status.setter
    def content_status(self, value: str):
        ...

    @property
    def content_type(self) -> str:
        ...

    @content_type.setter
    def content_type(self, value: str):
        ...

    @property
    def hyperlink_base(self) -> str:
        ...

    @hyperlink_base.setter
    def hyperlink_base(self, value: str):
        ...

    @property
    def count_of_custom_properties(self) -> int:
        ...

    @property
    def scale_crop(self) -> bool:
        ...

    @scale_crop.setter
    def scale_crop(self, value: bool):
        ...

    @property
    def links_up_to_date(self) -> bool:
        ...

    @links_up_to_date.setter
    def links_up_to_date(self, value: bool):
        ...

    @property
    def hyperlinks_changed(self) -> bool:
        ...

    @hyperlinks_changed.setter
    def hyperlinks_changed(self, value: bool):
        ...

    @property
    def slides(self) -> int:
        '''Returns the total number of slides in a presentation document.
                    Read-only :py:class:`int`.'''
        ...

    @property
    def hidden_slides(self) -> int:
        ...

    @property
    def notes(self) -> int:
        '''Returns the number of slides in a presentation containing notes.
                    Read-only :py:class:`int`.'''
        ...

    @property
    def paragraphs(self) -> int:
        '''Returns the total number of paragraphs found in a document if applicable.
                    Read-only :py:class:`int`.'''
        ...

    @property
    def words(self) -> int:
        '''Returns the total number of words contained in a document.
                    Read-only :py:class:`int`.'''
        ...

    @property
    def multimedia_clips(self) -> int:
        ...

    @property
    def titles_of_parts(self) -> List[str]:
        ...

    @property
    def heading_pairs(self) -> List[IHeadingPair]:
        ...

    ...

class DrawingGuide:
    '''Represents an adjustable drawing guide.'''
    @property
    def orientation(self) -> Orientation:
        '''Returns or sets orientation of the drawing guide.
                    Read/write :py:enum:`aspose.slides.Orientation`.'''
        ...

    @orientation.setter
    def orientation(self, value: Orientation):
        '''Returns or sets orientation of the drawing guide.
                    Read/write :py:enum:`aspose.slides.Orientation`.'''
        ...

    @property
    def position(self) -> float:
        '''Returns or sets position of the drawing guide in points from the top, left corner of the slide.
                    Read/write :py:class:`float`.'''
        ...

    @position.setter
    def position(self, value: float):
        '''Returns or sets position of the drawing guide in points from the top, left corner of the slide.
                    Read/write :py:class:`float`.'''
        ...

    ...

class DrawingGuidesCollection:
    '''Represents a collection of the adjustable drawing guides.'''
    def add(self, orientation: Orientation, position: float) -> IDrawingGuide:
        '''Adds the drawing guide at the end of the collection.
        :param orientation: Orientation of the drawing guide.
        :param position: Position of the the drawing guide in points.'''
        ...

    def remove_at(self, index: int) -> None:
        '''Removes the drawing guide at the specified index.
        :param index: Index of the drawing guide that should be deleted.'''
        ...

    def clear(self) -> None:
        '''Removes all elements from the collection.'''
        ...

    def copy_to(self, array: List[IDrawingGuide], index: int) -> None:
        '''Copies all elements from the collection to the specified array.
        :param array: Target array.
        :param index: Starting index in the target array.'''
        ...

    @property
    def count(self) -> int:
        '''Returns the number of elements in the collection.
                    Read-only :py:class:`int`.'''
        ...

    def __getitem__(self, key: int) -> IDrawingGuide
        ...

    ...

class EffectFormat(PVIObject):
    '''Represents effect properties of shape.'''
    def set_blur_effect(self, radius: float, grow: bool) -> None:
        '''Sets blur effect.
        :param radius: Radius.
        :param grow: Grow.'''
        ...

    def enable_fill_overlay_effect(self) -> None:
        '''Enables fill overlay effect.'''
        ...

    def enable_glow_effect(self) -> None:
        '''Enables glow effect.'''
        ...

    def enable_inner_shadow_effect(self) -> None:
        '''Enables inner shadow effect.'''
        ...

    def enable_outer_shadow_effect(self) -> None:
        '''Enables outer shadow effect.'''
        ...

    def enable_preset_shadow_effect(self) -> None:
        '''Enables preset shadows effect.'''
        ...

    def enable_reflection_effect(self) -> None:
        '''Enables reflection effect.'''
        ...

    def enable_soft_edge_effect(self) -> None:
        '''Enables soft edge effect.'''
        ...

    def disable_blur_effect(self) -> None:
        '''Disables blur effect.'''
        ...

    def disable_fill_overlay_effect(self) -> None:
        '''Disables fill overlay effect.'''
        ...

    def disable_glow_effect(self) -> None:
        '''Disable glow effect.'''
        ...

    def disable_inner_shadow_effect(self) -> None:
        '''Disables inner shadow effect.'''
        ...

    def disable_outer_shadow_effect(self) -> None:
        '''Disables outer shadow effect.'''
        ...

    def disable_preset_shadow_effect(self) -> None:
        '''Disables preset shadow effect.'''
        ...

    def disable_reflection_effect(self) -> None:
        '''Disables reflection effect.'''
        ...

    def disable_soft_edge_effect(self) -> None:
        '''Disables soft edge effect.'''
        ...

    def get_effective(self) -> IEffectFormatEffectiveData:
        '''Gets effective effect formatting data with the inheritance applied.
        :returns: A :py:class:`aspose.slides.IEffectFormatEffectiveData`.'''
        ...

    @property
    def as_i_presentation_component(self) -> IPresentationComponent:
        ...

    @property
    def is_no_effects(self) -> bool:
        ...

    @property
    def blur_effect(self) -> aspose.slides.effects.IBlur:
        ...

    @blur_effect.setter
    def blur_effect(self, value: aspose.slides.effects.IBlur):
        ...

    @property
    def fill_overlay_effect(self) -> aspose.slides.effects.IFillOverlay:
        ...

    @fill_overlay_effect.setter
    def fill_overlay_effect(self, value: aspose.slides.effects.IFillOverlay):
        ...

    @property
    def glow_effect(self) -> aspose.slides.effects.IGlow:
        ...

    @glow_effect.setter
    def glow_effect(self, value: aspose.slides.effects.IGlow):
        ...

    @property
    def inner_shadow_effect(self) -> aspose.slides.effects.IInnerShadow:
        ...

    @inner_shadow_effect.setter
    def inner_shadow_effect(self, value: aspose.slides.effects.IInnerShadow):
        ...

    @property
    def outer_shadow_effect(self) -> aspose.slides.effects.IOuterShadow:
        ...

    @outer_shadow_effect.setter
    def outer_shadow_effect(self, value: aspose.slides.effects.IOuterShadow):
        ...

    @property
    def preset_shadow_effect(self) -> aspose.slides.effects.IPresetShadow:
        ...

    @preset_shadow_effect.setter
    def preset_shadow_effect(self, value: aspose.slides.effects.IPresetShadow):
        ...

    @property
    def reflection_effect(self) -> aspose.slides.effects.IReflection:
        ...

    @reflection_effect.setter
    def reflection_effect(self, value: aspose.slides.effects.IReflection):
        ...

    @property
    def soft_edge_effect(self) -> aspose.slides.effects.ISoftEdge:
        ...

    @soft_edge_effect.setter
    def soft_edge_effect(self, value: aspose.slides.effects.ISoftEdge):
        ...

    @property
    def slide(self) -> IBaseSlide:
        ...

    @property
    def presentation(self) -> IPresentation:
        ...

    @property
    def as_i_effect_param_source(self) -> IEffectParamSource:
        ...

    ...

class Field:
    '''Represents a field.'''
    @property
    def type(self) -> IFieldType:
        '''Returns or sets field's type.
                    Read/write :py:class:`aspose.slides.IFieldType`.'''
        ...

    @type.setter
    def type(self, value: IFieldType):
        '''Returns or sets field's type.
                    Read/write :py:class:`aspose.slides.IFieldType`.'''
        ...

    @property
    def as_i_slide_component(self) -> ISlideComponent:
        ...

    @property
    def slide(self) -> IBaseSlide:
        ...

    @property
    def as_i_presentation_component(self) -> IPresentationComponent:
        ...

    @property
    def presentation(self) -> IPresentation:
        ...

    ...

class FieldType:
    '''Represents a type of field. 
                This value determines which text will be set to the field portion when it will be updated.'''
    def __init__(self, str: str):
        '''Initializes a new instance of FieldType class.'''
        ...

    @property
    def internal_string(self) -> str:
        ...

    @internal_string.setter
    def internal_string(self, value: str):
        ...

    @classmethod
    @property
    def slide_number(cls) -> FieldType:
        ...

    @classmethod
    @property
    def footer(cls) -> FieldType:
        '''Slide's footer.
                    Read-only :py:class:`aspose.slides.FieldType`.'''
        ...

    @classmethod
    @property
    def header(cls) -> FieldType:
        '''Slide's header.
                    Read-only :py:class:`aspose.slides.FieldType`.'''
        ...

    @classmethod
    @property
    def date_time(cls) -> FieldType:
        ...

    @classmethod
    @property
    def date_time1(cls) -> FieldType:
        ...

    @classmethod
    @property
    def date_time2(cls) -> FieldType:
        ...

    @classmethod
    @property
    def date_time3(cls) -> FieldType:
        ...

    @classmethod
    @property
    def date_time4(cls) -> FieldType:
        ...

    @classmethod
    @property
    def date_time5(cls) -> FieldType:
        ...

    @classmethod
    @property
    def date_time6(cls) -> FieldType:
        ...

    @classmethod
    @property
    def date_time7(cls) -> FieldType:
        ...

    @classmethod
    @property
    def date_time8(cls) -> FieldType:
        ...

    @classmethod
    @property
    def date_time9(cls) -> FieldType:
        ...

    @classmethod
    @property
    def date_time10(cls) -> FieldType:
        ...

    @classmethod
    @property
    def date_time11(cls) -> FieldType:
        ...

    @classmethod
    @property
    def date_time12(cls) -> FieldType:
        ...

    @classmethod
    @property
    def date_time13(cls) -> FieldType:
        ...

    ...

class FillFormat(PVIObject):
    '''Represents a fill formatting options.'''
    def get_effective(self) -> IFillFormatEffectiveData:
        '''Gets effective fill formatting data with the inheritance applied.
        :returns: A :py:class:`aspose.slides.IFillFormatEffectiveData`.'''
        ...

    @property
    def as_i_presentation_component(self) -> IPresentationComponent:
        ...

    @property
    def fill_type(self) -> FillType:
        ...

    @fill_type.setter
    def fill_type(self, value: FillType):
        ...

    @property
    def solid_fill_color(self) -> IColorFormat:
        ...

    @property
    def gradient_format(self) -> IGradientFormat:
        ...

    @property
    def pattern_format(self) -> IPatternFormat:
        ...

    @property
    def picture_fill_format(self) -> IPictureFillFormat:
        ...

    @property
    def rotate_with_shape(self) -> NullableBool:
        ...

    @rotate_with_shape.setter
    def rotate_with_shape(self, value: NullableBool):
        ...

    @property
    def slide(self) -> IBaseSlide:
        ...

    @property
    def presentation(self) -> IPresentation:
        ...

    @property
    def as_i_fill_param_source(self) -> IFillParamSource:
        ...

    ...

class FontData:
    '''Represents a font definition. Immutable.'''
    def __init__(self, font_name: str):
        '''Creates a new FontData object with the specified font name.
        :param font_name: Font name.'''
        ...

    def get_font_name(self, theme: aspose.slides.theme.IThemeEffectiveData) -> str:
        '''Returns the font name, replacing theme referrence with an actual font used.
        :param theme: Theme from which themed font name should be taken. Its up to caller to provide a correct value. See :py:func:`aspose.slides.theme.IThemeable.create_theme_effective`
        :returns: Font name.'''
        ...

    @property
    def font_name(self) -> str:
        ...

    ...

class FontDataFactory:
    '''FontData factory'''
    def __init__(self):
        ...

    def create_font_data(self, font_name: str) -> IFontData:
        '''Creates FontData with specified font name.
        :param font_name: Font name
        :returns: FontData'''
        ...

    ...

class FontFallBackRule:
    '''Represents font fallback rule'''
    def __init__(self, start_index: int, end_index: int, font_names: str):
        '''Creates new instance.
        :param start_index: Start index of unicode range
        :param end_index: End index of unicode range
        :param font_names: Font's name or names (delimited by comma) for FallBack'''
        ...

    def __init__(self, start_index: int, end_index: int, font_names: List[str]):
        '''Creates new instance.
        :param start_index: Start index of unicode range
        :param end_index: End index of unicode range
        :param font_names: Font's name or names (delimited by comma) for FallBack'''
        ...

    @overload
    def add_fall_back_fonts(self, font_name: str) -> None:
        '''Adds a new font(s) to the list of FallBack fonts.
        :param font_name: Font's name or names (delimited by comma) for FallBack'''
        ...

    @overload
    def add_fall_back_fonts(self, font_names: List[str]) -> None:
        '''Adds a new fonts to the list of FallBack fonts.
        :param font_names: Font's name or names (delimited by comma) for FallBack'''
        ...

    @overload
    def to_array(self) -> List[str]:
        '''Creates and returns an array with all FallBack fonts for this rule.
        :returns: Array of :py:class:`str`'''
        ...

    @overload
    def to_array(self, start_index: int, count: int) -> List[str]:
        '''Creates and returns an array with all FallBack fonts from the specified range in list.
        :param start_index: An index of a first font to add.
        :param count: A number of fonts to add.
        :returns: Array of :py:class:`str`'''
        ...

    def clear(self) -> None:
        '''Removes all fonts from the list.'''
        ...

    def remove(self, font_name: str) -> None:
        '''Removes the first occurrence of a specific FallBack font from the list.
        :param font_name: The font's name to remove from the list.'''
        ...

    def remove_at(self, index: int) -> None:
        '''Removes the FallBack font at the specified index of the list.
        :param index: The zero-based index of the font to remove.'''
        ...

    def index_of(self, font_name: str) -> int:
        '''Returns an index of the specified rule in the collection.
        :param font_name: Font's name to find.
        :returns: Index of a font or -1 if font not found in list.'''
        ...

    @property
    def range_start_index(self) -> int:
        ...

    @range_start_index.setter
    def range_start_index(self, value: int):
        ...

    @property
    def range_end_index(self) -> int:
        ...

    @range_end_index.setter
    def range_end_index(self, value: int):
        ...

    @property
    def count(self) -> int:
        '''Gets the number of fonts actually defined for range.
                    Read-only :py:class:`int`.'''
        ...

    def __getitem__(self, key: int) -> str
        ...

    ...

class FontFallBackRulesCollection:
    '''Represents a collection of FontFallBack rules, defined by user'''
    def __init__(self):
        ...

    def add(self, source_rule: IFontFallBackRule) -> None:
        '''Add a specified FallBack rule to the end of the collection.
        :param source_rule: Specified rule for adding'''
        ...

    def remove(self, target_rule: IFontFallBackRule) -> None:
        '''Removes the first occurrence of a specific FallBack rule from the collection.
        :param target_rule: The rule to remove from the collection.'''
        ...

    @property
    def as_i_collection(self) -> list:
        ...

    @property
    def as_i_enumerable(self) -> collections.abc.Iterable:
        ...

    def __getitem__(self, key: int) -> IFontFallBackRule
        ...

    ...

class FontSources:
    '''Provides file and memory sources for external fonts.'''
    def __init__(self):
        '''Creates new default font options.'''
        ...

    @property
    def font_folders(self) -> List[str]:
        ...

    @font_folders.setter
    def font_folders(self, value: List[str]):
        ...

    @property
    def memory_fonts(self) -> List[bytes]:
        ...

    @memory_fonts.setter
    def memory_fonts(self, value: List[bytes]):
        ...

    ...

class FontSubstRule:
    '''Represents font subtituition information'''
    def __init__(self, source_font: IFontData, dest_font: IFontData):
        '''Creates new instance.
        :param source_font: Source font.
        :param dest_font: Destination font.'''
        ...

    def __init__(self, source_font: IFontData, dest_font: IFontData, font_subst_rule: FontSubstCondition):
        '''Creates new instance.
        :param source_font: Source font.
        :param dest_font: Destination font.
        :param font_subst_rule: Font subst rule.'''
        ...

    @property
    def source_font(self) -> IFontData:
        ...

    @property
    def dest_font(self) -> IFontData:
        ...

    @property
    def replace_font_condition(self) -> FontSubstCondition:
        ...

    ...

class FontSubstRuleCollection:
    '''Represents collection of fonts substitution.'''
    def __init__(self):
        ...

    def add(self, value: IFontSubstRule) -> None:
        '''Adds the new font substitution rule to the collection'''
        ...

    def remove(self, value: IFontSubstRule) -> None:
        '''Removes the first occurrence of a specific object from the collection.
        :param value: The font substitution rule to remove from the collection.'''
        ...

    @property
    def as_i_collection(self) -> list:
        ...

    @property
    def as_i_enumerable(self) -> collections.abc.Iterable:
        ...

    def __getitem__(self, key: int) -> IFontSubstRule
        ...

    ...

class FontSubstitutionInfo:
    '''This structure represents the information about the font replacement when it will be rendered.'''
    def __init__(self, origin_font_name: str, subst_font_name: str):
        '''Creates an instance of :py:class:`aspose.slides.FontSubstitutionInfo` class.
        :param origin_font_name: Source font name in presentation :py:class:`str`
        :param subst_font_name: Replacement font name for the original font :py:class:`str`'''
        ...

    @property
    def original_font_name(self) -> str:
        ...

    @property
    def substituted_font_name(self) -> str:
        ...

    ...

class Fonts:
    '''Fonts collection.'''
    @property
    def latin_font(self) -> IFontData:
        ...

    @latin_font.setter
    def latin_font(self, value: IFontData):
        ...

    @property
    def east_asian_font(self) -> IFontData:
        ...

    @east_asian_font.setter
    def east_asian_font(self, value: IFontData):
        ...

    @property
    def complex_script_font(self) -> IFontData:
        ...

    @complex_script_font.setter
    def complex_script_font(self, value: IFontData):
        ...

    ...

class FontsLoader:
    '''Class for loading custom fonts defined by user.
                Should be used before creating any presentation objects.'''
    @staticmethod
    def load_external_fonts(directories: List[str]) -> None:
        '''Adds additional folders to seek fonts.
        :param directories: Directories to read additional fonts.'''
        ...

    @staticmethod
    def load_external_font(data: bytes) -> None:
        '''Adds font from the binary data
        :param data: Font's data'''
        ...

    @staticmethod
    def get_font_folders() -> List[str]:
        '''Gets font folders. Returns folders that have been added with LoadExternalFonts method as well as system font folders
        :returns: array containing folder names'''
        ...

    @staticmethod
    def clear_cache() -> None:
        '''Releases all custom fonts defined by user'''
        ...

    ...

class FontsManager:
    '''Manages fonts across the presentation.'''
    @overload
    def add_embedded_font(self, font_data: IFontData, embed_font_rule: aspose.slides.export.EmbedFontCharacters) -> None:
        '''Adds the embedded font'''
        ...

    @overload
    def add_embedded_font(self, font_data: bytes, embed_font_rule: aspose.slides.export.EmbedFontCharacters) -> None:
        '''Adds the embedded font'''
        ...

    @overload
    def replace_font(self, source_font: IFontData, dest_font: IFontData) -> None:
        '''Replace font in presentation
        :param source_font: Source font
        :param dest_font: Destination font'''
        ...

    @overload
    def replace_font(self, subst_rule: IFontSubstRule) -> None:
        '''Replace font in presentation using information provided in :py:class:`aspose.slides.FontSubstRule`
        :param subst_rule: Font substitution info'''
        ...

    @overload
    def replace_font(self, subst_rules: IFontSubstRuleCollection) -> None:
        '''Replace font in presentation using information provided in collection of :py:class:`aspose.slides.FontSubstRule`
        :param subst_rules: Font substitution rules collection'''
        ...

    def get_fonts(self) -> List[IFontData]:
        '''Returns the fonts used in the presentation
        :returns: An array of fonts'''
        ...

    def get_substitutions(self) -> Iterable[FontSubstitutionInfo]:
        '''Gets the information about fonts that will be replaced on the presentation's rendering.
        :returns: Collection of all fonts substitution :py:class:`aspose.slides.FontSubstitutionInfo`.'''
        ...

    def get_embedded_fonts(self) -> List[IFontData]:
        '''Returns the fonts embedded in the presentation'''
        ...

    def remove_embedded_font(self, font_data: IFontData) -> None:
        '''Removes the embedded font'''
        ...

    def get_font_bytes(self, font_data: IFontData, font_style: aspose.pydrawing.FontStyle) -> bytes:
        '''Retrieves the byte array representing the font data for a specified font style and font data.
        :param font_data: The font data object containing the information about the font :py:class:`aspose.slides.FontData`.
        :param font_style: The style of the font for which the data is to be retrieved :py:class:`aspose.pydrawing.FontStyle`.
        :returns: A byte array containing the font data for the specified font style. If the font data or style is not found, returns None.'''
        ...

    def get_font_embedding_level(self, font_bytes: bytes, font_name: str) -> EmbeddingLevel:
        '''Determines the embedding level of a font from the given byte array and font name.
        :param font_bytes: The byte array containing the font data.
        :param font_name: The name of the font.
        :returns: The embedding level of the specified font.'''
        ...

    @property
    def font_subst_rule_list(self) -> IFontSubstRuleCollection:
        ...

    @font_subst_rule_list.setter
    def font_subst_rule_list(self, value: IFontSubstRuleCollection):
        ...

    @property
    def font_fall_back_rules_collection(self) -> IFontFallBackRulesCollection:
        ...

    @font_fall_back_rules_collection.setter
    def font_fall_back_rules_collection(self, value: IFontFallBackRulesCollection):
        ...

    ...

class FormatFactory:
    '''Allows to create formats via COM interface.'''
    def __init__(self):
        ...

    def create_portion_format(self) -> IPortionFormat:
        '''Creates new :py:class:`aspose.slides.IPortionFormat`.
        :returns: New portion format.'''
        ...

    def create_paragraph_format(self) -> IParagraphFormat:
        '''Creates new :py:class:`aspose.slides.IParagraphFormat`.
        :returns: New paragraph format.'''
        ...

    def create_text_frame_format(self) -> ITextFrameFormat:
        '''Creates new :py:class:`aspose.slides.ITextFrameFormat`.
        :returns: New text frame format.'''
        ...

    @classmethod
    @property
    def instance(cls) -> FormatFactory:
        '''Format factory static instance.
                    Read-only :py:class:`aspose.slides.FormatFactory`.'''
        ...

    ...

class GeometryPath:
    '''Represents geometry path of GeometryShape'''
    def __init__(self):
        '''Creates instance of GeometryPath'''
        ...

    @overload
    def line_to(self, point: aspose.pydrawing.PointF) -> None:
        '''Adds line to the end of the path
        :param point: End point of the line'''
        ...

    @overload
    def line_to(self, x: float, y: float) -> None:
        '''Adds line to the end of the path
        :param x: X coordinate of the end point of the line
        :param y: Y coordinate of the end point of the line'''
        ...

    @overload
    def line_to(self, point: aspose.pydrawing.PointF, index: int) -> None:
        '''Adds line to the specified place of the path
        :param point: End point
        :param index: Index of segment in PathData'''
        ...

    @overload
    def line_to(self, x: float, y: float, index: int) -> None:
        '''Adds line to the specified place of the path
        :param x: X coordinate of the point
        :param y: Y coordinate of the point
        :param index: Index of segment in PathData'''
        ...

    @overload
    def cubic_bezier_to(self, point1: aspose.pydrawing.PointF, point2: aspose.pydrawing.PointF, point3: aspose.pydrawing.PointF) -> None:
        '''Adds cubic Bezier curve at the end the path
        :param point1: First direction point
        :param point2: Second direction point
        :param point3: End point'''
        ...

    @overload
    def cubic_bezier_to(self, x1: float, y1: float, x2: float, y2: float, x3: float, y3: float) -> None:
        '''Adds cubic Bezier curve at the end the path
        :param x1: X coordinate of first direction point
        :param y1: Y coordinate of first direction point
        :param x2: X coordinate of second direction point
        :param y2: Y coordinate of second direction point
        :param x3: X coordinate of end point
        :param y3: Y coordinate of end point'''
        ...

    @overload
    def cubic_bezier_to(self, point1: aspose.pydrawing.PointF, point2: aspose.pydrawing.PointF, point3: aspose.pydrawing.PointF, index: int) -> None:
        '''Adds cubic Bezier curve to the specified place of the path
        :param point1: First direction point
        :param point2: Second direction point
        :param point3: End point
        :param index: Index of segment in PathData'''
        ...

    @overload
    def cubic_bezier_to(self, x1: float, y1: float, x2: float, y2: float, x3: float, y3: float, index: int) -> None:
        '''Adds cubic Bezier curve to the specified place of the path
        :param x1: X coordinate of first direction point
        :param y1: Y coordinate of first direction point
        :param x2: X coordinate of second direction point
        :param y2: Y coordinate of second direction point
        :param x3: X coordinate of end point
        :param y3: Y coordinate of end point
        :param index: Index of segment in PathData'''
        ...

    @overload
    def quadratic_bezier_to(self, point1: aspose.pydrawing.PointF, point2: aspose.pydrawing.PointF) -> None:
        '''Adds quadratic Bezier curve at the end the path
        :param point1: Direction point
        :param point2: End point'''
        ...

    @overload
    def quadratic_bezier_to(self, x1: float, y1: float, x2: float, y2: float) -> None:
        '''Adds quadratic Bezier curve at the end the path
        :param x1: X coordinate of direction point
        :param y1: Y coordinate of direction point
        :param x2: X coordinate of end point
        :param y2: Y coordinate of end point'''
        ...

    @overload
    def quadratic_bezier_to(self, point1: aspose.pydrawing.PointF, point2: aspose.pydrawing.PointF, index: int) -> None:
        '''Adds quadratic Bezier curve to the specified place of the path
        :param point1: Direction point
        :param point2: End point
        :param index: Index of segment in PathData'''
        ...

    @overload
    def quadratic_bezier_to(self, x1: float, y1: float, x2: float, y2: float, index: int) -> None:
        '''Adds quadratic Bezier curve to the specified place of the path
        :param x1: X coordinate of direction point
        :param y1: Y coordinate of direction point
        :param x2: X coordinate of end point
        :param y2: Y coordinate of end point
        :param index: Index of segment in PathData'''
        ...

    @overload
    def move_to(self, point: aspose.pydrawing.PointF) -> None:
        '''Sets next point position.
        :param point: Point position'''
        ...

    @overload
    def move_to(self, x: float, y: float) -> None:
        '''Sets next point position.
        :param x: X coordinate of the point
        :param y: Y Coordinate of the point'''
        ...

    def remove_at(self, index: int) -> None:
        '''Removes segment at the specified index of the geometry path.'''
        ...

    def close_figure(self) -> None:
        '''Closes the current figure of this path'''
        ...

    def arc_to(self, width: float, heigth: float, start_angle: float, sweep_angle: float) -> None:
        '''Appends the specified arc to the path.
        :param width: Width of the rectangle
        :param heigth: Height of the rectangle
        :param start_angle: Start angle.
        :param sweep_angle: Sweep angle/'''
        ...

    @property
    def path_data(self) -> List[IPathSegment]:
        ...

    @property
    def fill_mode(self) -> PathFillModeType:
        ...

    @fill_mode.setter
    def fill_mode(self, value: PathFillModeType):
        ...

    @property
    def stroke(self) -> bool:
        '''Sets stroke appearance'''
        ...

    @stroke.setter
    def stroke(self, value: bool):
        '''Sets stroke appearance'''
        ...

    ...

class GeometryShape(Shape):
    '''Represents the parent class for all geometric shapes.'''
    @overload
    def get_thumbnail(self) -> aspose.pydrawing.Bitmap:
        '''Returns shape thumbnail.
                    ShapeThumbnailBounds.Shape shape thumbnail bounds type is used by default.
        :returns: Shape thumbnail.'''
        ...

    @overload
    def get_thumbnail(self, bounds: ShapeThumbnailBounds, scale_x: float, scale_y: float) -> aspose.pydrawing.Bitmap:
        '''Returns shape thumbnail.
        :param bounds: Shape thumbnail bounds type.
        :param scale_x: X scale
        :param scale_y: Y scale
        :returns: Shape thumbnail or None in case when ShapeThumbnailBounds.Appearance is used and a shape doesn't have visible elements.'''
        ...

    @overload
    def get_image(self) -> IImage:
        '''Returns shape thumbnail.
                    ShapeThumbnailBounds.Shape shape thumbnail bounds type is used by default.
        :returns: Shape thumbnail.'''
        ...

    @overload
    def get_image(self, bounds: ShapeThumbnailBounds, scale_x: float, scale_y: float) -> IImage:
        '''Returns shape thumbnail.
        :param bounds: Shape thumbnail bounds type.
        :param scale_x: X scale
        :param scale_y: Y scale
        :returns: Shape thumbnail or None in case when ShapeThumbnailBounds.Appearance is used and a shape doesn't have visible elements.'''
        ...

    @overload
    def write_as_svg(self, stream: io.RawIOBase) -> None:
        '''Saves content of Shape as SVG file.
        :param stream: Target stream'''
        ...

    @overload
    def write_as_svg(self, stream: io.RawIOBase, svg_options: aspose.slides.export.ISVGOptions) -> None:
        '''Saves content of Shape as SVG file.
        :param stream: Target stream
        :param svg_options: SVG generation options'''
        ...

    def remove_placeholder(self) -> None:
        '''Defines that this shape isn't a placeholder.'''
        ...

    def add_placeholder(self, placeholder_to_copy_from: IPlaceholder) -> IPlaceholder:
        '''Adds a new placeholder if there is no and sets placeholder properties to a specified one.
        :param placeholder_to_copy_from: Placeholder to copy content from.
        :returns: New :py:attr:`aspose.slides.Shape.placeholder`.'''
        ...

    def get_base_placeholder(self) -> IShape:
        '''Returns a basic placeholder shape (shape from the layout and/or master slide that the current shape is inherited from).'''
        ...

    def get_geometry_paths(self) -> List[IGeometryPath]:
        '''Returns the copy of path of the geometry shape. Coordinates are relative to the left top corner of the shape.
        :returns: Array of :py:class:`aspose.slides.IGeometryPath`'''
        ...

    def set_geometry_path(self, geometry_path: IGeometryPath) -> None:
        '''Updates shape geometry from :py:class:`aspose.slides.IGeometryPath` object. Coordinates must be relative to the left
                     top corner of the shape.
                     Changes the type of the shape (:py:attr:`aspose.slides.GeometryShape.shape_type`) to :py:attr:`aspose.slides.ShapeType.CUSTOM`.
        :param geometry_path: Geometry path'''
        ...

    def set_geometry_paths(self, geometry_paths: List[IGeometryPath]) -> None:
        '''Updates shape geometry from array of :py:class:`aspose.slides.IGeometryPath`. Coordinates must be relative to the left
                     top corner of the shape.
                     Changes the type of the shape (:py:attr:`aspose.slides.GeometryShape.shape_type`) to :py:attr:`aspose.slides.ShapeType.CUSTOM`.
        :param geometry_paths: Array geometry paths'''
        ...

    def create_shape_elements(self) -> List[IShapeElement]:
        '''Creates and returns array of shape's elements.
        :returns: Array of :py:class:`aspose.slides.ShapeElement`'''
        ...

    @property
    def is_text_holder(self) -> bool:
        ...

    @property
    def placeholder(self) -> IPlaceholder:
        '''Returns the placeholder for a shape. Returns None if the shape has no placeholder.
                    Read-only :py:class:`aspose.slides.IPlaceholder`.'''
        ...

    @property
    def custom_data(self) -> ICustomData:
        ...

    @property
    def raw_frame(self) -> IShapeFrame:
        ...

    @raw_frame.setter
    def raw_frame(self, value: IShapeFrame):
        ...

    @property
    def frame(self) -> IShapeFrame:
        '''Returns or sets the shape frame's properties.
                    Read/write :py:class:`aspose.slides.IShapeFrame`.'''
        ...

    @frame.setter
    def frame(self, value: IShapeFrame):
        '''Returns or sets the shape frame's properties.
                    Read/write :py:class:`aspose.slides.IShapeFrame`.'''
        ...

    @property
    def line_format(self) -> ILineFormat:
        ...

    @property
    def three_d_format(self) -> IThreeDFormat:
        ...

    @property
    def effect_format(self) -> IEffectFormat:
        ...

    @property
    def fill_format(self) -> IFillFormat:
        ...

    @property
    def hyperlink_click(self) -> IHyperlink:
        ...

    @hyperlink_click.setter
    def hyperlink_click(self, value: IHyperlink):
        ...

    @property
    def hyperlink_mouse_over(self) -> IHyperlink:
        ...

    @hyperlink_mouse_over.setter
    def hyperlink_mouse_over(self, value: IHyperlink):
        ...

    @property
    def hyperlink_manager(self) -> IHyperlinkManager:
        ...

    @property
    def hidden(self) -> bool:
        '''Determines whether the shape is hidden.
                    Read/write :py:class:`bool`.'''
        ...

    @hidden.setter
    def hidden(self, value: bool):
        '''Determines whether the shape is hidden.
                    Read/write :py:class:`bool`.'''
        ...

    @property
    def z_order_position(self) -> int:
        ...

    @property
    def connection_site_count(self) -> int:
        ...

    @property
    def rotation(self) -> float:
        '''Returns or sets the number of degrees the specified shape is rotated around
                    the z-axis. A positive value indicates clockwise rotation; a negative value
                    indicates counterclockwise rotation.
                    Read/write :py:class:`float`.'''
        ...

    @rotation.setter
    def rotation(self, value: float):
        '''Returns or sets the number of degrees the specified shape is rotated around
                    the z-axis. A positive value indicates clockwise rotation; a negative value
                    indicates counterclockwise rotation.
                    Read/write :py:class:`float`.'''
        ...

    @property
    def x(self) -> float:
        '''Returns or sets the x-coordinate of the upper-left corner of the shape.
                    Read/write :py:class:`float`.'''
        ...

    @x.setter
    def x(self, value: float):
        '''Returns or sets the x-coordinate of the upper-left corner of the shape.
                    Read/write :py:class:`float`.'''
        ...

    @property
    def y(self) -> float:
        '''Returns or sets the y-coordinate of the upper-left corner of the shape.
                    Read/write :py:class:`float`.'''
        ...

    @y.setter
    def y(self, value: float):
        '''Returns or sets the y-coordinate of the upper-left corner of the shape.
                    Read/write :py:class:`float`.'''
        ...

    @property
    def width(self) -> float:
        '''Returns or sets the width of the shape.
                    Read/write :py:class:`float`.'''
        ...

    @width.setter
    def width(self, value: float):
        '''Returns or sets the width of the shape.
                    Read/write :py:class:`float`.'''
        ...

    @property
    def height(self) -> float:
        '''Returns or sets the height of the shape.
                    Read/write :py:class:`float`.'''
        ...

    @height.setter
    def height(self, value: float):
        '''Returns or sets the height of the shape.
                    Read/write :py:class:`float`.'''
        ...

    @property
    def black_white_mode(self) -> BlackWhiteMode:
        ...

    @black_white_mode.setter
    def black_white_mode(self, value: BlackWhiteMode):
        ...

    @property
    def unique_id(self) -> int:
        ...

    @property
    def office_interop_shape_id(self) -> int:
        ...

    @property
    def alternative_text(self) -> str:
        ...

    @alternative_text.setter
    def alternative_text(self, value: str):
        ...

    @property
    def alternative_text_title(self) -> str:
        ...

    @alternative_text_title.setter
    def alternative_text_title(self, value: str):
        ...

    @property
    def name(self) -> str:
        '''Returns or sets the name of a shape.
                    Must be not None. Use empty string value if needed.
                    Read/write :py:class:`str`.'''
        ...

    @name.setter
    def name(self, value: str):
        '''Returns or sets the name of a shape.
                    Must be not None. Use empty string value if needed.
                    Read/write :py:class:`str`.'''
        ...

    @property
    def is_decorative(self) -> bool:
        ...

    @is_decorative.setter
    def is_decorative(self, value: bool):
        ...

    @property
    def shape_lock(self) -> IBaseShapeLock:
        ...

    @property
    def is_grouped(self) -> bool:
        ...

    @property
    def parent_group(self) -> IGroupShape:
        ...

    @property
    def slide(self) -> IBaseSlide:
        '''Returns the parent slide of a shape.
                    Read-only :py:class:`aspose.slides.IBaseSlide`.'''
        ...

    @property
    def presentation(self) -> IPresentation:
        '''Returns the parent presentation of a slide.
                    Read-only :py:class:`aspose.slides.IPresentation`.'''
        ...

    @property
    def shape_style(self) -> IShapeStyle:
        ...

    @property
    def shape_type(self) -> ShapeType:
        ...

    @shape_type.setter
    def shape_type(self, value: ShapeType):
        ...

    @property
    def adjustments(self) -> IAdjustValueCollection:
        '''Returns a collection of shape's adjustment values.
                    Read-only :py:class:`aspose.slides.IAdjustValueCollection`.'''
        ...

    @property
    def as_i_hyperlink_container(self) -> IHyperlinkContainer:
        ...

    @property
    def as_i_slide_component(self) -> ISlideComponent:
        ...

    @property
    def as_i_presentation_component(self) -> IPresentationComponent:
        ...

    @property
    def as_i_shape(self) -> IShape:
        ...

    ...

class GlobalLayoutSlideCollection(LayoutSlideCollection):
    '''Represents a collection of all layout slides in presentation.
                Extends LayoutSlideCollection class with methods for adding/cloning 
                layout slides in context of uniting of the individual collections of master's layout slides.'''
    @overload
    def add_clone(self, source_layout: ILayoutSlide) -> ILayoutSlide:
        '''Adds a copy of a specified layout slide to the presentation.
        :param source_layout: Slide to clone.
        :returns: Added slide.'''
        ...

    @overload
    def add_clone(self, source_layout: ILayoutSlide, dest_master: IMasterSlide) -> ILayoutSlide:
        '''Adds a copy of a specified layout slide to the presentation.
        :param source_layout: Slide to clone.
        :param dest_master: Master slide for a new layout.
        :returns: Added slide.'''
        ...

    def get_by_type(self, type: SlideLayoutType) -> ILayoutSlide:
        '''Returns the first layout slide of specified type.'''
        ...

    def remove(self, value: ILayoutSlide) -> None:
        '''Removes a layout from the collection.
        :param value: The layout slide to remove from the collection.'''
        ...

    def remove_unused(self) -> None:
        '''Removes unused layout slides (layout slides whose HasDependingSlides is false).'''
        ...

    def add(self, master: IMasterSlide, layout_type: SlideLayoutType, layout_name: str) -> ILayoutSlide:
        '''Adds a new layout slide to the presentation.
        :param master: Master slide for a new layout.
        :param layout_type: Layout type for a new layout.
                    Supported layout types: Title, TitleOnly, Blank, TitleAndObject, VerticalText, VerticalTitleAndText, TwoObjects, SectionHeader, TwoTextAndTwoObjects, TitleObjectAndCaption, PictureAndCaption, Custom.
                    Other layout types are not supported now: Text, TwoColumnText, Table, TextAndChart, ChartAndText, Diagram, Chart, TextAndClipArt, ClipArtAndText, TextAndObject, ObjectAndText, Object, TextAndMedia, MediaAndText, ObjectOverText, TextOverObject, TextAndTwoObjects, TwoObjectsAndText, TwoObjectsOverText, FourObjects, ClipArtAndVerticalText, VerticalTitleAndTextOverChart, ObjectAndTwoObject, TwoObjectsAndObject.
        :param layout_name: Name for a new layout. If passed name is already in use the ArgumentException will be thrown.
                    If None parameter is passed then name genarated atomatically in regards to passed layout type 
                    (for example "Title Slide" or "1_Title Slide", "2_..", etc.).
        :returns: Added slide.'''
        ...

    @property
    def as_i_collection(self) -> list:
        ...

    @property
    def as_i_enumerable(self) -> collections.abc.Iterable:
        ...

    @property
    def as_i_layout_slide_collection(self) -> ILayoutSlideCollection:
        ...

    def __getitem__(self, key: int) -> ILayoutSlide
        ...

    ...

class GradientFormat(PVIObject):
    '''Represent a gradient format.'''
    @property
    def as_i_presentation_component(self) -> IPresentationComponent:
        ...

    @property
    def tile_flip(self) -> TileFlip:
        ...

    @tile_flip.setter
    def tile_flip(self, value: TileFlip):
        ...

    @property
    def gradient_direction(self) -> GradientDirection:
        ...

    @gradient_direction.setter
    def gradient_direction(self, value: GradientDirection):
        ...

    @property
    def linear_gradient_angle(self) -> float:
        ...

    @linear_gradient_angle.setter
    def linear_gradient_angle(self, value: float):
        ...

    @property
    def linear_gradient_scaled(self) -> NullableBool:
        ...

    @linear_gradient_scaled.setter
    def linear_gradient_scaled(self, value: NullableBool):
        ...

    @property
    def gradient_shape(self) -> GradientShape:
        ...

    @gradient_shape.setter
    def gradient_shape(self, value: GradientShape):
        ...

    @property
    def gradient_stops(self) -> IGradientStopCollection:
        ...

    @property
    def slide(self) -> IBaseSlide:
        ...

    @property
    def presentation(self) -> IPresentation:
        ...

    @property
    def as_i_fill_param_source(self) -> IFillParamSource:
        ...

    ...

class GradientStop(PVIObject):
    '''Represents a gradient format.'''
    @property
    def as_i_presentation_component(self) -> IPresentationComponent:
        ...

    @property
    def position(self) -> float:
        '''Returns or sets the position (0..1) of a gradient stop.
                    Read/write :py:class:`float`.'''
        ...

    @position.setter
    def position(self, value: float):
        '''Returns or sets the position (0..1) of a gradient stop.
                    Read/write :py:class:`float`.'''
        ...

    @property
    def color(self) -> IColorFormat:
        '''Returns the color of a gradient stop.
                    Read-only :py:class:`aspose.slides.IColorFormat`.'''
        ...

    @property
    def slide(self) -> IBaseSlide:
        ...

    @property
    def presentation(self) -> IPresentation:
        ...

    ...

class GradientStopCollection(PVIObject):
    '''Represnts a collection of gradient stops.'''
    @overload
    def add(self, position: float, color: aspose.pydrawing.Color) -> IGradientStop:
        '''Creates the new gradient stop and adds it to the end of collection.
        :param position: Position of the new gradient stop.
        :param color: Color of the new radient stop.
        :returns: Index of the new gradient stop in the collection.'''
        ...

    @overload
    def add(self, position: float, preset_color: PresetColor) -> IGradientStop:
        '''Creates the new gradient stop and adds it to the end of collection.
        :param position: Position of the new gradient stop.
        :param preset_color: Color of the new radient stop.
        :returns: Index of the new gradient stop in the collection.'''
        ...

    @overload
    def add(self, position: float, scheme_color: SchemeColor) -> IGradientStop:
        '''Creates the new gradient stop and adds it to the end of collection.
        :param position: Position of the new gradient stop.
        :param scheme_color: Color of the new radient stop.
        :returns: Index of the new gradient stop in the collection.'''
        ...

    @overload
    def insert(self, index: int, position: float, color: aspose.pydrawing.Color) -> None:
        '''Creates the new gradient stop and inserts it at the specified index to the collection.
        :param index: Index in the collection where new gradient stop will be inserted.
        :param position: Position of the new gradient stop.
        :param color: Color of the new radient stop.'''
        ...

    @overload
    def insert(self, index: int, position: float, preset_color: PresetColor) -> None:
        '''Creates the new gradient stop and inserts it at the specified index to the collection.
        :param index: Index in the collection where new gradient stop will be inserted.
        :param position: Position of the new gradient stop.
        :param preset_color: Color of the new radient stop.'''
        ...

    @overload
    def insert(self, index: int, position: float, scheme_color: SchemeColor) -> None:
        '''Creates the new gradient stop and inserts it at the specified index to the collection.
        :param index: Index in the collection where new gradient stop will be inserted.
        :param position: Position of the new gradient stop.
        :param scheme_color: Color of the new radient stop.'''
        ...

    def remove_at(self, index: int) -> None:
        '''Removes a gradient stop at the specified index.
        :param index: Index of a gradient stop that should be deleted.'''
        ...

    def clear(self) -> None:
        '''Removes all gradient stops from a collection.'''
        ...

    @property
    def as_i_presentation_component(self) -> IPresentationComponent:
        ...

    @property
    def slide(self) -> IBaseSlide:
        ...

    @property
    def presentation(self) -> IPresentation:
        ...

    @property
    def as_i_collection(self) -> list:
        ...

    @property
    def as_i_enumerable(self) -> collections.abc.Iterable:
        ...

    def __getitem__(self, key: int) -> IGradientStop
        ...

    ...

class GradientStopCollectionEffectiveData:
    '''Represents a collection of GradientStopData objects.'''
    @property
    def as_i_collection(self) -> list:
        ...

    @property
    def as_i_enumerable(self) -> collections.abc.Iterable:
        ...

    def __getitem__(self, key: int) -> IGradientStopEffectiveData
        ...

    ...

class GradientStopEffectiveData:
    '''Immutable object which represents a gradient stop.'''
    @property
    def position(self) -> float:
        '''Returns the position (0..1) of a gradient stop.
                    Read-only :py:class:`float`.'''
        ...

    @property
    def color(self) -> aspose.pydrawing.Color:
        '''Returns the color of a gradient stop.
                    Read-only :py:class:`aspose.pydrawing.Color`.'''
        ...

    ...

class GraphicalObject(Shape):
    '''Represents abstract graphical object.'''
    @overload
    def get_thumbnail(self) -> aspose.pydrawing.Bitmap:
        '''Returns shape thumbnail.
                    ShapeThumbnailBounds.Shape shape thumbnail bounds type is used by default.
        :returns: Shape thumbnail.'''
        ...

    @overload
    def get_thumbnail(self, bounds: ShapeThumbnailBounds, scale_x: float, scale_y: float) -> aspose.pydrawing.Bitmap:
        '''Returns shape thumbnail.
        :param bounds: Shape thumbnail bounds type.
        :param scale_x: X scale
        :param scale_y: Y scale
        :returns: Shape thumbnail or None in case when ShapeThumbnailBounds.Appearance is used and a shape doesn't have visible elements.'''
        ...

    @overload
    def get_image(self) -> IImage:
        '''Returns shape thumbnail.
                    ShapeThumbnailBounds.Shape shape thumbnail bounds type is used by default.
        :returns: Shape thumbnail.'''
        ...

    @overload
    def get_image(self, bounds: ShapeThumbnailBounds, scale_x: float, scale_y: float) -> IImage:
        '''Returns shape thumbnail.
        :param bounds: Shape thumbnail bounds type.
        :param scale_x: X scale
        :param scale_y: Y scale
        :returns: Shape thumbnail or None in case when ShapeThumbnailBounds.Appearance is used and a shape doesn't have visible elements.'''
        ...

    @overload
    def write_as_svg(self, stream: io.RawIOBase) -> None:
        '''Saves content of Shape as SVG file.
        :param stream: Target stream'''
        ...

    @overload
    def write_as_svg(self, stream: io.RawIOBase, svg_options: aspose.slides.export.ISVGOptions) -> None:
        '''Saves content of Shape as SVG file.
        :param stream: Target stream
        :param svg_options: SVG generation options'''
        ...

    def remove_placeholder(self) -> None:
        '''Defines that this shape isn't a placeholder.'''
        ...

    def add_placeholder(self, placeholder_to_copy_from: IPlaceholder) -> IPlaceholder:
        '''Adds a new placeholder if there is no and sets placeholder properties to a specified one.
        :param placeholder_to_copy_from: Placeholder to copy content from.
        :returns: New :py:attr:`aspose.slides.Shape.placeholder`.'''
        ...

    def get_base_placeholder(self) -> IShape:
        '''Returns a basic placeholder shape (shape from the layout and/or master slide that the current shape is inherited from).'''
        ...

    @property
    def is_text_holder(self) -> bool:
        ...

    @property
    def placeholder(self) -> IPlaceholder:
        '''Returns the placeholder for a shape. Returns None if the shape has no placeholder.
                    Read-only :py:class:`aspose.slides.IPlaceholder`.'''
        ...

    @property
    def custom_data(self) -> ICustomData:
        ...

    @property
    def raw_frame(self) -> IShapeFrame:
        ...

    @raw_frame.setter
    def raw_frame(self, value: IShapeFrame):
        ...

    @property
    def frame(self) -> IShapeFrame:
        '''Returns or sets the shape frame's properties.
                    Read/write :py:class:`aspose.slides.IShapeFrame`.'''
        ...

    @frame.setter
    def frame(self, value: IShapeFrame):
        '''Returns or sets the shape frame's properties.
                    Read/write :py:class:`aspose.slides.IShapeFrame`.'''
        ...

    @property
    def line_format(self) -> ILineFormat:
        ...

    @property
    def three_d_format(self) -> IThreeDFormat:
        ...

    @property
    def effect_format(self) -> IEffectFormat:
        ...

    @property
    def fill_format(self) -> IFillFormat:
        ...

    @property
    def hyperlink_click(self) -> IHyperlink:
        ...

    @hyperlink_click.setter
    def hyperlink_click(self, value: IHyperlink):
        ...

    @property
    def hyperlink_mouse_over(self) -> IHyperlink:
        ...

    @hyperlink_mouse_over.setter
    def hyperlink_mouse_over(self, value: IHyperlink):
        ...

    @property
    def hyperlink_manager(self) -> IHyperlinkManager:
        ...

    @property
    def hidden(self) -> bool:
        '''Determines whether the shape is hidden.
                    Read/write :py:class:`bool`.'''
        ...

    @hidden.setter
    def hidden(self, value: bool):
        '''Determines whether the shape is hidden.
                    Read/write :py:class:`bool`.'''
        ...

    @property
    def z_order_position(self) -> int:
        ...

    @property
    def connection_site_count(self) -> int:
        ...

    @property
    def rotation(self) -> float:
        '''Returns or sets the number of degrees the specified shape is rotated around
                    the z-axis. A positive value indicates clockwise rotation; a negative value
                    indicates counterclockwise rotation.
                    Read/write :py:class:`float`.'''
        ...

    @rotation.setter
    def rotation(self, value: float):
        '''Returns or sets the number of degrees the specified shape is rotated around
                    the z-axis. A positive value indicates clockwise rotation; a negative value
                    indicates counterclockwise rotation.
                    Read/write :py:class:`float`.'''
        ...

    @property
    def x(self) -> float:
        '''Returns or sets the x-coordinate of the upper-left corner of the shape.
                    Read/write :py:class:`float`.'''
        ...

    @x.setter
    def x(self, value: float):
        '''Returns or sets the x-coordinate of the upper-left corner of the shape.
                    Read/write :py:class:`float`.'''
        ...

    @property
    def y(self) -> float:
        '''Returns or sets the y-coordinate of the upper-left corner of the shape.
                    Read/write :py:class:`float`.'''
        ...

    @y.setter
    def y(self, value: float):
        '''Returns or sets the y-coordinate of the upper-left corner of the shape.
                    Read/write :py:class:`float`.'''
        ...

    @property
    def width(self) -> float:
        '''Returns or sets the width of the shape.
                    Read/write :py:class:`float`.'''
        ...

    @width.setter
    def width(self, value: float):
        '''Returns or sets the width of the shape.
                    Read/write :py:class:`float`.'''
        ...

    @property
    def height(self) -> float:
        '''Returns or sets the height of the shape.
                    Read/write :py:class:`float`.'''
        ...

    @height.setter
    def height(self, value: float):
        '''Returns or sets the height of the shape.
                    Read/write :py:class:`float`.'''
        ...

    @property
    def black_white_mode(self) -> BlackWhiteMode:
        ...

    @black_white_mode.setter
    def black_white_mode(self, value: BlackWhiteMode):
        ...

    @property
    def unique_id(self) -> int:
        ...

    @property
    def office_interop_shape_id(self) -> int:
        ...

    @property
    def alternative_text(self) -> str:
        ...

    @alternative_text.setter
    def alternative_text(self, value: str):
        ...

    @property
    def alternative_text_title(self) -> str:
        ...

    @alternative_text_title.setter
    def alternative_text_title(self, value: str):
        ...

    @property
    def name(self) -> str:
        '''Returns or sets the name of a shape.
                    Must be not None. Use empty string value if needed.
                    Read/write :py:class:`str`.'''
        ...

    @name.setter
    def name(self, value: str):
        '''Returns or sets the name of a shape.
                    Must be not None. Use empty string value if needed.
                    Read/write :py:class:`str`.'''
        ...

    @property
    def is_decorative(self) -> bool:
        ...

    @is_decorative.setter
    def is_decorative(self, value: bool):
        ...

    @property
    def shape_lock(self) -> IGraphicalObjectLock:
        ...

    @property
    def is_grouped(self) -> bool:
        ...

    @property
    def parent_group(self) -> IGroupShape:
        ...

    @property
    def slide(self) -> IBaseSlide:
        '''Returns the parent slide of a shape.
                    Read-only :py:class:`aspose.slides.IBaseSlide`.'''
        ...

    @property
    def presentation(self) -> IPresentation:
        '''Returns the parent presentation of a slide.
                    Read-only :py:class:`aspose.slides.IPresentation`.'''
        ...

    @property
    def graphical_object_lock(self) -> IGraphicalObjectLock:
        ...

    @property
    def as_i_hyperlink_container(self) -> IHyperlinkContainer:
        ...

    @property
    def as_i_slide_component(self) -> ISlideComponent:
        ...

    @property
    def as_i_presentation_component(self) -> IPresentationComponent:
        ...

    @property
    def as_i_shape(self) -> IShape:
        ...

    ...

class GraphicalObjectLock(BaseShapeLock):
    '''Determines which operations are disabled on the parent GraphicalObject.'''
    @property
    def no_locks(self) -> bool:
        ...

    @property
    def grouping_locked(self) -> bool:
        ...

    @grouping_locked.setter
    def grouping_locked(self, value: bool):
        ...

    @property
    def drilldown_locked(self) -> bool:
        ...

    @drilldown_locked.setter
    def drilldown_locked(self, value: bool):
        ...

    @property
    def select_locked(self) -> bool:
        ...

    @select_locked.setter
    def select_locked(self, value: bool):
        ...

    @property
    def aspect_ratio_locked(self) -> bool:
        ...

    @aspect_ratio_locked.setter
    def aspect_ratio_locked(self, value: bool):
        ...

    @property
    def position_locked(self) -> bool:
        ...

    @position_locked.setter
    def position_locked(self, value: bool):
        ...

    @property
    def size_locked(self) -> bool:
        ...

    @size_locked.setter
    def size_locked(self, value: bool):
        ...

    @property
    def as_i_base_shape_lock(self) -> IBaseShapeLock:
        ...

    ...

class GroupShape(Shape):
    '''Represents a group of shapes on a slide.'''
    @overload
    def get_thumbnail(self) -> aspose.pydrawing.Bitmap:
        '''Returns shape thumbnail.
                    ShapeThumbnailBounds.Shape shape thumbnail bounds type is used by default.
        :returns: Shape thumbnail.'''
        ...

    @overload
    def get_thumbnail(self, bounds: ShapeThumbnailBounds, scale_x: float, scale_y: float) -> aspose.pydrawing.Bitmap:
        '''Returns shape thumbnail.
        :param bounds: Shape thumbnail bounds type.
        :param scale_x: X scale
        :param scale_y: Y scale
        :returns: Shape thumbnail or None in case when ShapeThumbnailBounds.Appearance is used and a shape doesn't have visible elements.'''
        ...

    @overload
    def get_image(self) -> IImage:
        '''Returns shape thumbnail.
                    ShapeThumbnailBounds.Shape shape thumbnail bounds type is used by default.
        :returns: Shape thumbnail.'''
        ...

    @overload
    def get_image(self, bounds: ShapeThumbnailBounds, scale_x: float, scale_y: float) -> IImage:
        '''Returns shape thumbnail.
        :param bounds: Shape thumbnail bounds type.
        :param scale_x: X scale
        :param scale_y: Y scale
        :returns: Shape thumbnail or None in case when ShapeThumbnailBounds.Appearance is used and a shape doesn't have visible elements.'''
        ...

    @overload
    def write_as_svg(self, stream: io.RawIOBase) -> None:
        '''Saves content of Shape as SVG file.
        :param stream: Target stream'''
        ...

    @overload
    def write_as_svg(self, stream: io.RawIOBase, svg_options: aspose.slides.export.ISVGOptions) -> None:
        '''Saves content of Shape as SVG file.
        :param stream: Target stream
        :param svg_options: SVG generation options'''
        ...

    def remove_placeholder(self) -> None:
        '''Defines that this shape isn't a placeholder.'''
        ...

    def add_placeholder(self, placeholder_to_copy_from: IPlaceholder) -> IPlaceholder:
        '''Adds a new placeholder if there is no and sets placeholder properties to a specified one.
        :param placeholder_to_copy_from: Placeholder to copy content from.
        :returns: New :py:attr:`aspose.slides.Shape.placeholder`.'''
        ...

    def get_base_placeholder(self) -> IShape:
        '''Returns a basic placeholder shape (shape from the layout and/or master slide that the current shape is inherited from).'''
        ...

    @property
    def is_text_holder(self) -> bool:
        ...

    @property
    def placeholder(self) -> IPlaceholder:
        '''Returns the placeholder for a shape. Returns None if the shape has no placeholder.
                    Read-only :py:class:`aspose.slides.IPlaceholder`.'''
        ...

    @property
    def custom_data(self) -> ICustomData:
        ...

    @property
    def raw_frame(self) -> IShapeFrame:
        ...

    @raw_frame.setter
    def raw_frame(self, value: IShapeFrame):
        ...

    @property
    def frame(self) -> IShapeFrame:
        '''Returns or sets the shape frame's properties.
                    Read/write :py:class:`aspose.slides.IShapeFrame`.'''
        ...

    @frame.setter
    def frame(self, value: IShapeFrame):
        '''Returns or sets the shape frame's properties.
                    Read/write :py:class:`aspose.slides.IShapeFrame`.'''
        ...

    @property
    def line_format(self) -> ILineFormat:
        ...

    @property
    def three_d_format(self) -> IThreeDFormat:
        ...

    @property
    def effect_format(self) -> IEffectFormat:
        ...

    @property
    def fill_format(self) -> IFillFormat:
        ...

    @property
    def hyperlink_click(self) -> IHyperlink:
        ...

    @hyperlink_click.setter
    def hyperlink_click(self, value: IHyperlink):
        ...

    @property
    def hyperlink_mouse_over(self) -> IHyperlink:
        ...

    @hyperlink_mouse_over.setter
    def hyperlink_mouse_over(self, value: IHyperlink):
        ...

    @property
    def hyperlink_manager(self) -> IHyperlinkManager:
        ...

    @property
    def hidden(self) -> bool:
        '''Determines whether the shape is hidden.
                    Read/write :py:class:`bool`.'''
        ...

    @hidden.setter
    def hidden(self, value: bool):
        '''Determines whether the shape is hidden.
                    Read/write :py:class:`bool`.'''
        ...

    @property
    def z_order_position(self) -> int:
        ...

    @property
    def connection_site_count(self) -> int:
        ...

    @property
    def rotation(self) -> float:
        '''Returns or sets the number of degrees the specified shape is rotated around
                    the z-axis. A positive value indicates clockwise rotation; a negative value
                    indicates counterclockwise rotation.
                    Read/write :py:class:`float`.'''
        ...

    @rotation.setter
    def rotation(self, value: float):
        '''Returns or sets the number of degrees the specified shape is rotated around
                    the z-axis. A positive value indicates clockwise rotation; a negative value
                    indicates counterclockwise rotation.
                    Read/write :py:class:`float`.'''
        ...

    @property
    def x(self) -> float:
        '''Returns or sets the x-coordinate of the upper-left corner of the shape.
                    Read/write :py:class:`float`.'''
        ...

    @x.setter
    def x(self, value: float):
        '''Returns or sets the x-coordinate of the upper-left corner of the shape.
                    Read/write :py:class:`float`.'''
        ...

    @property
    def y(self) -> float:
        '''Returns or sets the y-coordinate of the upper-left corner of the shape.
                    Read/write :py:class:`float`.'''
        ...

    @y.setter
    def y(self, value: float):
        '''Returns or sets the y-coordinate of the upper-left corner of the shape.
                    Read/write :py:class:`float`.'''
        ...

    @property
    def width(self) -> float:
        '''Returns or sets the width of the shape.
                    Read/write :py:class:`float`.'''
        ...

    @width.setter
    def width(self, value: float):
        '''Returns or sets the width of the shape.
                    Read/write :py:class:`float`.'''
        ...

    @property
    def height(self) -> float:
        '''Returns or sets the height of the shape.
                    Read/write :py:class:`float`.'''
        ...

    @height.setter
    def height(self, value: float):
        '''Returns or sets the height of the shape.
                    Read/write :py:class:`float`.'''
        ...

    @property
    def black_white_mode(self) -> BlackWhiteMode:
        ...

    @black_white_mode.setter
    def black_white_mode(self, value: BlackWhiteMode):
        ...

    @property
    def unique_id(self) -> int:
        ...

    @property
    def office_interop_shape_id(self) -> int:
        ...

    @property
    def alternative_text(self) -> str:
        ...

    @alternative_text.setter
    def alternative_text(self, value: str):
        ...

    @property
    def alternative_text_title(self) -> str:
        ...

    @alternative_text_title.setter
    def alternative_text_title(self, value: str):
        ...

    @property
    def name(self) -> str:
        '''Returns or sets the name of a shape.
                    Must be not None. Use empty string value if needed.
                    Read/write :py:class:`str`.'''
        ...

    @name.setter
    def name(self, value: str):
        '''Returns or sets the name of a shape.
                    Must be not None. Use empty string value if needed.
                    Read/write :py:class:`str`.'''
        ...

    @property
    def is_decorative(self) -> bool:
        ...

    @is_decorative.setter
    def is_decorative(self, value: bool):
        ...

    @property
    def shape_lock(self) -> IGroupShapeLock:
        ...

    @property
    def is_grouped(self) -> bool:
        ...

    @property
    def parent_group(self) -> IGroupShape:
        ...

    @property
    def slide(self) -> IBaseSlide:
        '''Returns the parent slide of a shape.
                    Read-only :py:class:`aspose.slides.IBaseSlide`.'''
        ...

    @property
    def presentation(self) -> IPresentation:
        '''Returns the parent presentation of a slide.
                    Read-only :py:class:`aspose.slides.IPresentation`.'''
        ...

    @property
    def group_shape_lock(self) -> IGroupShapeLock:
        ...

    @property
    def shapes(self) -> IShapeCollection:
        '''Returns the collection of shapes inside the group.
                    Read-only :py:class:`aspose.slides.IShapeCollection`.'''
        ...

    @property
    def as_i_shape(self) -> IShape:
        ...

    @property
    def as_i_hyperlink_container(self) -> IHyperlinkContainer:
        ...

    @property
    def as_i_slide_component(self) -> ISlideComponent:
        ...

    @property
    def as_i_presentation_component(self) -> IPresentationComponent:
        ...

    ...

class GroupShapeLock(BaseShapeLock):
    '''Determines which operations are disabled on the parent GroupShape.'''
    @property
    def no_locks(self) -> bool:
        ...

    @property
    def grouping_locked(self) -> bool:
        ...

    @grouping_locked.setter
    def grouping_locked(self, value: bool):
        ...

    @property
    def ungrouping_locked(self) -> bool:
        ...

    @ungrouping_locked.setter
    def ungrouping_locked(self, value: bool):
        ...

    @property
    def select_locked(self) -> bool:
        ...

    @select_locked.setter
    def select_locked(self, value: bool):
        ...

    @property
    def rotation_locked(self) -> bool:
        ...

    @rotation_locked.setter
    def rotation_locked(self, value: bool):
        ...

    @property
    def aspect_ratio_locked(self) -> bool:
        ...

    @aspect_ratio_locked.setter
    def aspect_ratio_locked(self, value: bool):
        ...

    @property
    def position_locked(self) -> bool:
        ...

    @position_locked.setter
    def position_locked(self, value: bool):
        ...

    @property
    def size_locked(self) -> bool:
        ...

    @size_locked.setter
    def size_locked(self, value: bool):
        ...

    @property
    def as_i_base_shape_lock(self) -> IBaseShapeLock:
        ...

    ...

class HeadingPair:
    '''Represents a 'Heading pair' property of the document. 
                It indicates the group name of document parts and the number of parts in group.'''
    @property
    def name(self) -> str:
        '''Returns the group name of document parts.
                    Read-only :py:class:`str`.'''
        ...

    @property
    def count(self) -> int:
        '''Returns the number of parts in group.
                    Read-only :py:class:`int`.'''
        ...

    ...

class Hyperlink(PVIObject):
    '''Represents a hyperlink.'''
    def __init__(self, url: str):
        '''Creates an instance of a hyperlink.
        :param url: Hyperlink URL.'''
        ...

    def __init__(self, slide: ISlide):
        '''Creates an instance of a hyperlink which points to specific slide.
                    Note: created hyperlink should be assigned to some object from the same presentation, otherwise link will be saved as NoAction.
        :param slide: Target slide.'''
        ...

    def __init__(self, source: Hyperlink, target_frame: str, tooltip: str, history: bool, stop_sounds_on_click: bool, highlight_click: bool):
        '''Creates an instance of a hyperlink using another hyperlink as source, overriding secondary properties.
        :param source: Source hyperlink
        :param target_frame: Target frame
        :param tooltip: Tooltip text'''
        ...

    def equals(self, hlink: IHyperlink) -> bool:
        '''Determines whether the two Hyperlink instances are equal.
        :param hlink: The Hyperlink to compare with the current Hyperlink.
        :returns: **true** if the specified Hyperlink is equal to the current Hyperlink; otherwise, **false**.'''
        ...

    @property
    def as_i_presentation_component(self) -> IPresentationComponent:
        ...

    @classmethod
    @property
    def no_action(cls) -> Hyperlink:
        ...

    @classmethod
    @property
    def media(cls) -> Hyperlink:
        '''Returns a special "play mediafile" hyperlink. Used in AudioFrame and VideoFrame.
                    Read-only :py:class:`aspose.slides.Hyperlink`.'''
        ...

    @classmethod
    @property
    def next_slide(cls) -> Hyperlink:
        ...

    @classmethod
    @property
    def previous_slide(cls) -> Hyperlink:
        ...

    @classmethod
    @property
    def first_slide(cls) -> Hyperlink:
        ...

    @classmethod
    @property
    def last_slide(cls) -> Hyperlink:
        ...

    @classmethod
    @property
    def last_vieved_slide(cls) -> Hyperlink:
        ...

    @classmethod
    @property
    def end_show(cls) -> Hyperlink:
        ...

    @property
    def action_type(self) -> HyperlinkActionType:
        ...

    @property
    def external_url(self) -> str:
        ...

    @property
    def target_slide(self) -> ISlide:
        ...

    @property
    def external_url_original(self) -> str:
        ...

    @property
    def target_frame(self) -> str:
        ...

    @target_frame.setter
    def target_frame(self, value: str):
        ...

    @property
    def tooltip(self) -> str:
        '''Returns the string which may be surfaced in a user interface
                    as associated with the parent hyperlink.
                    Read/write :py:class:`str`.'''
        ...

    @tooltip.setter
    def tooltip(self, value: str):
        '''Returns the string which may be surfaced in a user interface
                    as associated with the parent hyperlink.
                    Read/write :py:class:`str`.'''
        ...

    @property
    def history(self) -> bool:
        '''Determines whether the target of the parent hyperlink shall be added
                    to a list of viewed hyperlinks when it is invoked.
                    Read/write :py:class:`bool`.'''
        ...

    @history.setter
    def history(self, value: bool):
        '''Determines whether the target of the parent hyperlink shall be added
                    to a list of viewed hyperlinks when it is invoked.
                    Read/write :py:class:`bool`.'''
        ...

    @property
    def highlight_click(self) -> bool:
        ...

    @highlight_click.setter
    def highlight_click(self, value: bool):
        ...

    @property
    def stop_sound_on_click(self) -> bool:
        ...

    @stop_sound_on_click.setter
    def stop_sound_on_click(self, value: bool):
        ...

    @property
    def sound(self) -> IAudio:
        '''Represents the playing sound of the hyperlink.
                    Read/write :py:class:`aspose.slides.IAudio`.'''
        ...

    @sound.setter
    def sound(self, value: IAudio):
        '''Represents the playing sound of the hyperlink.
                    Read/write :py:class:`aspose.slides.IAudio`.'''
        ...

    @property
    def color_source(self) -> HyperlinkColorSource:
        ...

    @color_source.setter
    def color_source(self, value: HyperlinkColorSource):
        ...

    @property
    def slide(self) -> IBaseSlide:
        ...

    @property
    def presentation(self) -> IPresentation:
        ...

    ...

class HyperlinkManager:
    '''Provide hyperlinks management (adding, removing).'''
    def set_external_hyperlink_click(self, url: str) -> IHyperlink:
        '''Set external hyperlink on click.
        :param url: Hyperlink URL.'''
        ...

    def set_internal_hyperlink_click(self, target_slide: ISlide) -> IHyperlink:
        '''Sets internal hyperlink on click.
        :param target_slide: Target slide.
        :returns: Hyperlink.'''
        ...

    def remove_hyperlink_click(self) -> None:
        '''Removes hyperlink on click.'''
        ...

    def set_external_hyperlink_mouse_over(self, url: str) -> IHyperlink:
        '''Sets external hyperlink mouse over.
        :param url: Hyperlink URL.
        :returns: Hyperlink.'''
        ...

    def set_internal_hyperlink_mouse_over(self, target_slide: ISlide) -> IHyperlink:
        '''Sets internal hyperlink mouse over.
        :param target_slide: Target slide.
        :returns: Hyperlink.'''
        ...

    def remove_hyperlink_mouse_over(self) -> None:
        '''Removes hyperlink mouse over.'''
        ...

    def set_macro_hyperlink_click(self, macro_name: str) -> IHyperlink:
        '''Set Macro hyperlink on a click.
        :param macro_name: Name of the macro
        :returns: Hyperlink object :py:class:`aspose.slides.IHyperlink`'''
        ...

    ...

class HyperlinkQueries:
    '''Provide easy access to contained hyperlinks.'''
    def get_hyperlink_clicks(self) -> List[IHyperlinkContainer]:
        '''Get all IHyperlinkContainer subobjects that contain not None HyperlinkClick.
                    With given IHyperlinkContainer object you can manage its hyperlink (read, update or remove). See IHyperlinkContainer interface.'''
        ...

    def get_hyperlink_mouse_overs(self) -> List[IHyperlinkContainer]:
        '''Get all IHyperlinkContainer subobjects that contain not None HyperlinkMouseOver.
                    With given IHyperlinkContainer object you can manage its hyperlink (read, update or remove). See IHyperlinkContainer interface.'''
        ...

    def get_any_hyperlinks(self) -> List[IHyperlinkContainer]:
        '''Get all IHyperlinkContainer subobjects that contain not None HyperlinkMouseOver.
                    With given IHyperlinkContainer object you can manage its hyperlink (read, update or remove). See IHyperlinkContainer interface.'''
        ...

    def remove_all_hyperlinks(self) -> None:
        '''Removes all contained HyperlinkClick and HyperlinkMouseOver hyperlinks (in all IHyperlinkContainer subobjects).'''
        ...

    ...

class IAdjustValue:
    '''Represents a geometry shape's adjustment value.
                These values affect shape's form.'''
    @property
    def raw_value(self) -> int:
        ...

    @raw_value.setter
    def raw_value(self, value: int):
        ...

    @property
    def angle_value(self) -> float:
        ...

    @angle_value.setter
    def angle_value(self, value: float):
        ...

    @property
    def name(self) -> str:
        '''Returns a name of this adjustment value.
                    Read-only :py:class:`str`.'''
        ...

    @property
    def type(self) -> ShapeAdjustmentType:
        '''Returns the type of the shape adjustment.
                    Read-only :py:enum:`aspose.slides.ShapeAdjustmentType`.'''
        ...

    ...

class IAdjustValueCollection:
    '''Reprasents a collection of shape's adjustments.'''
    @property
    def as_i_collection(self) -> list:
        ...

    @property
    def as_i_enumerable(self) -> collections.abc.Iterable:
        ...

    def __getitem__(self, key: int) -> IAdjustValue
        ...

    ...

class IAnimationTimeLine:
    '''Represents timeline of animation.'''
    @property
    def interactive_sequences(self) -> aspose.slides.animation.ISequenceCollection:
        ...

    @property
    def main_sequence(self) -> aspose.slides.animation.ISequence:
        ...

    @property
    def text_animation_collection(self) -> aspose.slides.animation.ITextAnimationCollection:
        ...

    ...

class IAudio:
    '''Represents an embedded audio file.'''
    def get_stream(self) -> io.RawIOBase:
        '''Returns Stream stream for reading.
                    Use 'using' or close stream after using.
        :returns: Stream for reading.'''
        ...

    @property
    def content_type(self) -> str:
        ...

    @property
    def binary_data(self) -> bytes:
        ...

    ...

class IAudioCollection:
    '''Represents a collection of embedded audio files.'''
    @overload
    def add_audio(self, audio: IAudio) -> IAudio:
        '''Adds a copy of an audio file from an another presentation.
        :param audio: Source audio.
        :returns: Added audio.'''
        ...

    @overload
    def add_audio(self, stream: io.RawIOBase) -> IAudio:
        '''Creates and adds a audio to a presentation from stream.
        :param stream: Stream to add audio from.
        :returns: Added audio.'''
        ...

    @overload
    def add_audio(self, stream: io.RawIOBase, loading_stream_behavior: LoadingStreamBehavior) -> IAudio:
        '''Creates and adds a audio to a presentation from stream.
        :param stream: Stream to add video audio from.
        :param loading_stream_behavior: The behavior which will be applied to the stream.
        :returns: Added audio.'''
        ...

    @overload
    def add_audio(self, audio_data: bytes) -> IAudio:
        '''Creates and adds a audio to a presentation from byte array.
        :param audio_data: Audio bytes.
        :returns: Added audio.'''
        ...

    @property
    def as_i_collection(self) -> list:
        ...

    @property
    def as_i_enumerable(self) -> collections.abc.Iterable:
        ...

    def __getitem__(self, key: int) -> IAudio
        ...

    ...

class IAudioFrame:
    '''Represents an audio clip on a slide.'''
    @overload
    def get_thumbnail(self) -> aspose.pydrawing.Bitmap:
        ...

    @overload
    def get_thumbnail(self, bounds: ShapeThumbnailBounds, scale_x: float, scale_y: float) -> aspose.pydrawing.Bitmap:
        ...

    @overload
    def get_image(self) -> IImage:
        ...

    @overload
    def get_image(self, bounds: ShapeThumbnailBounds, scale_x: float, scale_y: float) -> IImage:
        ...

    @overload
    def write_as_svg(self, stream: io.RawIOBase) -> None:
        ...

    @overload
    def write_as_svg(self, stream: io.RawIOBase, svg_options: aspose.slides.export.ISVGOptions) -> None:
        ...

    def get_geometry_paths(self) -> List[IGeometryPath]:
        ...

    def set_geometry_path(self, geometry_path: IGeometryPath) -> None:
        ...

    def set_geometry_paths(self, geometry_paths: List[IGeometryPath]) -> None:
        ...

    def create_shape_elements(self) -> List[IShapeElement]:
        ...

    def add_placeholder(self, placeholder_to_copy_from: IPlaceholder) -> IPlaceholder:
        ...

    def remove_placeholder(self) -> None:
        ...

    def get_base_placeholder(self) -> IShape:
        ...

    @property
    def audio_cd_start_track(self) -> int:
        ...

    @audio_cd_start_track.setter
    def audio_cd_start_track(self, value: int):
        ...

    @property
    def audio_cd_start_track_time(self) -> int:
        ...

    @audio_cd_start_track_time.setter
    def audio_cd_start_track_time(self, value: int):
        ...

    @property
    def audio_cd_end_track(self) -> int:
        ...

    @audio_cd_end_track.setter
    def audio_cd_end_track(self, value: int):
        ...

    @property
    def audio_cd_end_track_time(self) -> int:
        ...

    @audio_cd_end_track_time.setter
    def audio_cd_end_track_time(self, value: int):
        ...

    @property
    def volume(self) -> AudioVolumeMode:
        '''Returns or sets the audio volume.
                    Read/write :py:enum:`aspose.slides.AudioVolumeMode`.'''
        ...

    @volume.setter
    def volume(self, value: AudioVolumeMode):
        '''Returns or sets the audio volume.
                    Read/write :py:enum:`aspose.slides.AudioVolumeMode`.'''
        ...

    @property
    def play_mode(self) -> AudioPlayModePreset:
        ...

    @play_mode.setter
    def play_mode(self, value: AudioPlayModePreset):
        ...

    @property
    def hide_at_showing(self) -> bool:
        ...

    @hide_at_showing.setter
    def hide_at_showing(self, value: bool):
        ...

    @property
    def play_loop_mode(self) -> bool:
        ...

    @play_loop_mode.setter
    def play_loop_mode(self, value: bool):
        ...

    @property
    def play_across_slides(self) -> bool:
        ...

    @play_across_slides.setter
    def play_across_slides(self, value: bool):
        ...

    @property
    def rewind_audio(self) -> bool:
        ...

    @rewind_audio.setter
    def rewind_audio(self, value: bool):
        ...

    @property
    def embedded(self) -> bool:
        '''Determines whether a sound is embedded to a presentation.
                    Read-only :py:class:`bool`.'''
        ...

    @property
    def link_path_long(self) -> str:
        ...

    @link_path_long.setter
    def link_path_long(self, value: str):
        ...

    @property
    def embedded_audio(self) -> IAudio:
        ...

    @embedded_audio.setter
    def embedded_audio(self, value: IAudio):
        ...

    @property
    def fade_in_duration(self) -> float:
        ...

    @fade_in_duration.setter
    def fade_in_duration(self, value: float):
        ...

    @property
    def fade_out_duration(self) -> float:
        ...

    @fade_out_duration.setter
    def fade_out_duration(self, value: float):
        ...

    @property
    def volume_value(self) -> float:
        ...

    @volume_value.setter
    def volume_value(self, value: float):
        ...

    @property
    def trim_from_start(self) -> float:
        ...

    @trim_from_start.setter
    def trim_from_start(self, value: float):
        ...

    @property
    def trim_from_end(self) -> float:
        ...

    @trim_from_end.setter
    def trim_from_end(self, value: float):
        ...

    @property
    def as_i_picture_frame(self) -> IPictureFrame:
        ...

    @property
    def shape_lock(self) -> IPictureFrameLock:
        ...

    @property
    def picture_frame_lock(self) -> IPictureFrameLock:
        ...

    @property
    def picture_format(self) -> IPictureFillFormat:
        ...

    @property
    def relative_scale_height(self) -> float:
        ...

    @relative_scale_height.setter
    def relative_scale_height(self, value: float):
        ...

    @property
    def relative_scale_width(self) -> float:
        ...

    @relative_scale_width.setter
    def relative_scale_width(self, value: float):
        ...

    @property
    def as_i_geometry_shape(self) -> IGeometryShape:
        ...

    @property
    def shape_style(self) -> IShapeStyle:
        ...

    @property
    def shape_type(self) -> ShapeType:
        ...

    @shape_type.setter
    def shape_type(self, value: ShapeType):
        ...

    @property
    def adjustments(self) -> IAdjustValueCollection:
        ...

    @property
    def as_i_shape(self) -> IShape:
        ...

    @property
    def is_text_holder(self) -> bool:
        ...

    @property
    def placeholder(self) -> IPlaceholder:
        ...

    @property
    def custom_data(self) -> ICustomData:
        ...

    @property
    def raw_frame(self) -> IShapeFrame:
        ...

    @raw_frame.setter
    def raw_frame(self, value: IShapeFrame):
        ...

    @property
    def frame(self) -> IShapeFrame:
        ...

    @frame.setter
    def frame(self, value: IShapeFrame):
        ...

    @property
    def line_format(self) -> ILineFormat:
        ...

    @property
    def three_d_format(self) -> IThreeDFormat:
        ...

    @property
    def effect_format(self) -> IEffectFormat:
        ...

    @property
    def fill_format(self) -> IFillFormat:
        ...

    @property
    def hidden(self) -> bool:
        ...

    @hidden.setter
    def hidden(self, value: bool):
        ...

    @property
    def z_order_position(self) -> int:
        ...

    @property
    def connection_site_count(self) -> int:
        ...

    @property
    def rotation(self) -> float:
        ...

    @rotation.setter
    def rotation(self, value: float):
        ...

    @property
    def x(self) -> float:
        ...

    @x.setter
    def x(self, value: float):
        ...

    @property
    def y(self) -> float:
        ...

    @y.setter
    def y(self, value: float):
        ...

    @property
    def width(self) -> float:
        ...

    @width.setter
    def width(self, value: float):
        ...

    @property
    def height(self) -> float:
        ...

    @height.setter
    def height(self, value: float):
        ...

    @property
    def alternative_text(self) -> str:
        ...

    @alternative_text.setter
    def alternative_text(self, value: str):
        ...

    @property
    def alternative_text_title(self) -> str:
        ...

    @alternative_text_title.setter
    def alternative_text_title(self, value: str):
        ...

    @property
    def name(self) -> str:
        ...

    @name.setter
    def name(self, value: str):
        ...

    @property
    def is_decorative(self) -> bool:
        ...

    @is_decorative.setter
    def is_decorative(self, value: bool):
        ...

    @property
    def unique_id(self) -> int:
        ...

    @property
    def office_interop_shape_id(self) -> int:
        ...

    @property
    def is_grouped(self) -> bool:
        ...

    @property
    def black_white_mode(self) -> BlackWhiteMode:
        ...

    @black_white_mode.setter
    def black_white_mode(self, value: BlackWhiteMode):
        ...

    @property
    def parent_group(self) -> IGroupShape:
        ...

    @property
    def as_i_hyperlink_container(self) -> IHyperlinkContainer:
        ...

    @property
    def as_i_slide_component(self) -> ISlideComponent:
        ...

    @property
    def slide(self) -> IBaseSlide:
        ...

    @property
    def as_i_presentation_component(self) -> IPresentationComponent:
        ...

    @property
    def presentation(self) -> IPresentation:
        ...

    @property
    def hyperlink_click(self) -> IHyperlink:
        ...

    @hyperlink_click.setter
    def hyperlink_click(self, value: IHyperlink):
        ...

    @property
    def hyperlink_mouse_over(self) -> IHyperlink:
        ...

    @hyperlink_mouse_over.setter
    def hyperlink_mouse_over(self, value: IHyperlink):
        ...

    @property
    def hyperlink_manager(self) -> IHyperlinkManager:
        ...

    ...

class IAutoShape:
    '''Represents an AutoShape.'''
    @overload
    def get_thumbnail(self) -> aspose.pydrawing.Bitmap:
        ...

    @overload
    def get_thumbnail(self, bounds: ShapeThumbnailBounds, scale_x: float, scale_y: float) -> aspose.pydrawing.Bitmap:
        ...

    @overload
    def get_image(self) -> IImage:
        ...

    @overload
    def get_image(self, bounds: ShapeThumbnailBounds, scale_x: float, scale_y: float) -> IImage:
        ...

    @overload
    def write_as_svg(self, stream: io.RawIOBase) -> None:
        ...

    @overload
    def write_as_svg(self, stream: io.RawIOBase, svg_options: aspose.slides.export.ISVGOptions) -> None:
        ...

    def add_text_frame(self, text: str) -> ITextFrame:
        '''Adds a new TextFrame to a shape.
                    If shape already has TextFrame then simply changes its text.
        :param text: Default text for a new TextFrame.
        :returns: New :py:class:`aspose.slides.ITextFrame` object.'''
        ...

    def get_geometry_paths(self) -> List[IGeometryPath]:
        ...

    def set_geometry_path(self, geometry_path: IGeometryPath) -> None:
        ...

    def set_geometry_paths(self, geometry_paths: List[IGeometryPath]) -> None:
        ...

    def create_shape_elements(self) -> List[IShapeElement]:
        ...

    def add_placeholder(self, placeholder_to_copy_from: IPlaceholder) -> IPlaceholder:
        ...

    def remove_placeholder(self) -> None:
        ...

    def get_base_placeholder(self) -> IShape:
        ...

    @property
    def shape_lock(self) -> IAutoShapeLock:
        ...

    @property
    def auto_shape_lock(self) -> IAutoShapeLock:
        ...

    @property
    def text_frame(self) -> ITextFrame:
        ...

    @property
    def use_background_fill(self) -> bool:
        ...

    @use_background_fill.setter
    def use_background_fill(self, value: bool):
        ...

    @property
    def is_text_box(self) -> bool:
        ...

    @property
    def as_i_geometry_shape(self) -> IGeometryShape:
        ...

    @property
    def shape_style(self) -> IShapeStyle:
        ...

    @property
    def shape_type(self) -> ShapeType:
        ...

    @shape_type.setter
    def shape_type(self, value: ShapeType):
        ...

    @property
    def adjustments(self) -> IAdjustValueCollection:
        ...

    @property
    def as_i_shape(self) -> IShape:
        ...

    @property
    def is_text_holder(self) -> bool:
        ...

    @property
    def placeholder(self) -> IPlaceholder:
        ...

    @property
    def custom_data(self) -> ICustomData:
        ...

    @property
    def raw_frame(self) -> IShapeFrame:
        ...

    @raw_frame.setter
    def raw_frame(self, value: IShapeFrame):
        ...

    @property
    def frame(self) -> IShapeFrame:
        ...

    @frame.setter
    def frame(self, value: IShapeFrame):
        ...

    @property
    def line_format(self) -> ILineFormat:
        ...

    @property
    def three_d_format(self) -> IThreeDFormat:
        ...

    @property
    def effect_format(self) -> IEffectFormat:
        ...

    @property
    def fill_format(self) -> IFillFormat:
        ...

    @property
    def hidden(self) -> bool:
        ...

    @hidden.setter
    def hidden(self, value: bool):
        ...

    @property
    def z_order_position(self) -> int:
        ...

    @property
    def connection_site_count(self) -> int:
        ...

    @property
    def rotation(self) -> float:
        ...

    @rotation.setter
    def rotation(self, value: float):
        ...

    @property
    def x(self) -> float:
        ...

    @x.setter
    def x(self, value: float):
        ...

    @property
    def y(self) -> float:
        ...

    @y.setter
    def y(self, value: float):
        ...

    @property
    def width(self) -> float:
        ...

    @width.setter
    def width(self, value: float):
        ...

    @property
    def height(self) -> float:
        ...

    @height.setter
    def height(self, value: float):
        ...

    @property
    def alternative_text(self) -> str:
        ...

    @alternative_text.setter
    def alternative_text(self, value: str):
        ...

    @property
    def alternative_text_title(self) -> str:
        ...

    @alternative_text_title.setter
    def alternative_text_title(self, value: str):
        ...

    @property
    def name(self) -> str:
        ...

    @name.setter
    def name(self, value: str):
        ...

    @property
    def is_decorative(self) -> bool:
        ...

    @is_decorative.setter
    def is_decorative(self, value: bool):
        ...

    @property
    def unique_id(self) -> int:
        ...

    @property
    def office_interop_shape_id(self) -> int:
        ...

    @property
    def is_grouped(self) -> bool:
        ...

    @property
    def black_white_mode(self) -> BlackWhiteMode:
        ...

    @black_white_mode.setter
    def black_white_mode(self, value: BlackWhiteMode):
        ...

    @property
    def parent_group(self) -> IGroupShape:
        ...

    @property
    def as_i_hyperlink_container(self) -> IHyperlinkContainer:
        ...

    @property
    def as_i_slide_component(self) -> ISlideComponent:
        ...

    @property
    def slide(self) -> IBaseSlide:
        ...

    @property
    def as_i_presentation_component(self) -> IPresentationComponent:
        ...

    @property
    def presentation(self) -> IPresentation:
        ...

    @property
    def hyperlink_click(self) -> IHyperlink:
        ...

    @hyperlink_click.setter
    def hyperlink_click(self, value: IHyperlink):
        ...

    @property
    def hyperlink_mouse_over(self) -> IHyperlink:
        ...

    @hyperlink_mouse_over.setter
    def hyperlink_mouse_over(self, value: IHyperlink):
        ...

    @property
    def hyperlink_manager(self) -> IHyperlinkManager:
        ...

    ...

class IAutoShapeLock:
    '''Determines which operations are disabled on the parent AutoshapeEx.'''
    @property
    def grouping_locked(self) -> bool:
        ...

    @grouping_locked.setter
    def grouping_locked(self, value: bool):
        ...

    @property
    def select_locked(self) -> bool:
        ...

    @select_locked.setter
    def select_locked(self, value: bool):
        ...

    @property
    def rotate_locked(self) -> bool:
        ...

    @rotate_locked.setter
    def rotate_locked(self, value: bool):
        ...

    @property
    def aspect_ratio_locked(self) -> bool:
        ...

    @aspect_ratio_locked.setter
    def aspect_ratio_locked(self, value: bool):
        ...

    @property
    def position_locked(self) -> bool:
        ...

    @position_locked.setter
    def position_locked(self, value: bool):
        ...

    @property
    def size_locked(self) -> bool:
        ...

    @size_locked.setter
    def size_locked(self, value: bool):
        ...

    @property
    def edit_points_locked(self) -> bool:
        ...

    @edit_points_locked.setter
    def edit_points_locked(self, value: bool):
        ...

    @property
    def adjust_handles_locked(self) -> bool:
        ...

    @adjust_handles_locked.setter
    def adjust_handles_locked(self, value: bool):
        ...

    @property
    def arrowheads_locked(self) -> bool:
        ...

    @arrowheads_locked.setter
    def arrowheads_locked(self, value: bool):
        ...

    @property
    def shape_type_locked(self) -> bool:
        ...

    @shape_type_locked.setter
    def shape_type_locked(self, value: bool):
        ...

    @property
    def text_locked(self) -> bool:
        ...

    @text_locked.setter
    def text_locked(self, value: bool):
        ...

    @property
    def as_i_base_shape_lock(self) -> IBaseShapeLock:
        ...

    @property
    def no_locks(self) -> bool:
        ...

    ...

class IBackdrop3DScene:
    '''Defines a plane in which effects, such as glow and shadow, are applied in relation to the shape they are being applied to.'''
    @property
    def normal_vector(self) -> List[float]:
        ...

    @normal_vector.setter
    def normal_vector(self, value: List[float]):
        ...

    @property
    def anchor_point(self) -> List[float]:
        ...

    @anchor_point.setter
    def anchor_point(self, value: List[float]):
        ...

    @property
    def up_vector(self) -> List[float]:
        ...

    @up_vector.setter
    def up_vector(self, value: List[float]):
        ...

    ...

class IBackground:
    '''Represents background of a slide.'''
    def get_effective(self) -> IBackgroundEffectiveData:
        '''Gets effective background data with the inheritance applied.
        :returns: A :py:class:`aspose.slides.IBackgroundEffectiveData`.'''
        ...

    @property
    def type(self) -> BackgroundType:
        '''Returns a type of background fill.
                    Read/write :py:enum:`aspose.slides.BackgroundType`.'''
        ...

    @type.setter
    def type(self, value: BackgroundType):
        '''Returns a type of background fill.
                    Read/write :py:enum:`aspose.slides.BackgroundType`.'''
        ...

    @property
    def fill_format(self) -> IFillFormat:
        ...

    @property
    def effect_format(self) -> IEffectFormat:
        ...

    @property
    def style_color(self) -> IColorFormat:
        ...

    @property
    def style_index(self) -> int:
        ...

    @style_index.setter
    def style_index(self, value: int):
        ...

    @property
    def as_i_slide_component(self) -> ISlideComponent:
        ...

    @property
    def as_i_fill_param_source(self) -> IFillParamSource:
        ...

    @property
    def slide(self) -> IBaseSlide:
        ...

    @property
    def as_i_presentation_component(self) -> IPresentationComponent:
        ...

    @property
    def presentation(self) -> IPresentation:
        ...

    ...

class IBackgroundEffectiveData:
    '''Immutable object which contains effective background properties.'''
    @property
    def fill_format(self) -> IFillFormatEffectiveData:
        ...

    @property
    def effect_format(self) -> IEffectFormatEffectiveData:
        ...

    @property
    def as_i_fill_param_source(self) -> IFillParamSource:
        ...

    ...

class IBaseHandoutNotesSlideHeaderFooterManag:
    '''Represents manager which holds behavior of the placeholders, including header placeholder for all types handout and notes slides.'''
    def set_header_visibility(self, is_visible: bool) -> None:
        '''Changes slide header placeholder visibility.
        :param is_visible: true - makes a header placeholder visible, otherwise - hides it.'''
        ...

    def set_header_text(self, text: str) -> None:
        '''Sets text to slide header placeholder.
        :param text: Text to set.'''
        ...

    def set_footer_visibility(self, is_visible: bool) -> None:
        ...

    def set_slide_number_visibility(self, is_visible: bool) -> None:
        ...

    def set_date_time_visibility(self, is_visible: bool) -> None:
        ...

    def set_footer_text(self, text: str) -> None:
        ...

    def set_date_time_text(self, text: str) -> None:
        ...

    @property
    def is_header_visible(self) -> bool:
        ...

    @property
    def as_i_base_slide_header_footer_manager(self) -> IBaseSlideHeaderFooterManager:
        ...

    @property
    def is_footer_visible(self) -> bool:
        ...

    @property
    def is_slide_number_visible(self) -> bool:
        ...

    @property
    def is_date_time_visible(self) -> bool:
        ...

    @property
    def as_i_base_header_footer_manager(self) -> IBaseHeaderFooterManager:
        ...

    ...

class IBaseHeaderFooterManager:
    '''Represents manager which holds behavior of the footer, date-time, page number placeholders for all slide types.'''
    ...

class IBasePortionFormat:
    '''This class contains the text portion formatting properties. Unlike :py:class:`aspose.slides.IPortionFormatEffectiveData`, all properties of this class are writeable.'''
    @property
    def line_format(self) -> ILineFormat:
        ...

    @property
    def fill_format(self) -> IFillFormat:
        ...

    @property
    def effect_format(self) -> IEffectFormat:
        ...

    @property
    def highlight_color(self) -> IColorFormat:
        ...

    @property
    def underline_line_format(self) -> ILineFormat:
        ...

    @property
    def underline_fill_format(self) -> IFillFormat:
        ...

    @property
    def font_bold(self) -> NullableBool:
        ...

    @font_bold.setter
    def font_bold(self, value: NullableBool):
        ...

    @property
    def font_italic(self) -> NullableBool:
        ...

    @font_italic.setter
    def font_italic(self, value: NullableBool):
        ...

    @property
    def kumimoji(self) -> NullableBool:
        '''Determines whether the numbers should ignore text eastern language-specific vertical text layout. No inheritance applied.
                    Read/write :py:enum:`aspose.slides.NullableBool`.'''
        ...

    @kumimoji.setter
    def kumimoji(self, value: NullableBool):
        '''Determines whether the numbers should ignore text eastern language-specific vertical text layout. No inheritance applied.
                    Read/write :py:enum:`aspose.slides.NullableBool`.'''
        ...

    @property
    def normalise_height(self) -> NullableBool:
        ...

    @normalise_height.setter
    def normalise_height(self, value: NullableBool):
        ...

    @property
    def proof_disabled(self) -> NullableBool:
        ...

    @proof_disabled.setter
    def proof_disabled(self, value: NullableBool):
        ...

    @property
    def font_underline(self) -> TextUnderlineType:
        ...

    @font_underline.setter
    def font_underline(self, value: TextUnderlineType):
        ...

    @property
    def text_cap_type(self) -> TextCapType:
        ...

    @text_cap_type.setter
    def text_cap_type(self, value: TextCapType):
        ...

    @property
    def strikethrough_type(self) -> TextStrikethroughType:
        ...

    @strikethrough_type.setter
    def strikethrough_type(self, value: TextStrikethroughType):
        ...

    @property
    def is_hard_underline_line(self) -> NullableBool:
        ...

    @is_hard_underline_line.setter
    def is_hard_underline_line(self, value: NullableBool):
        ...

    @property
    def is_hard_underline_fill(self) -> NullableBool:
        ...

    @is_hard_underline_fill.setter
    def is_hard_underline_fill(self, value: NullableBool):
        ...

    @property
    def font_height(self) -> float:
        ...

    @font_height.setter
    def font_height(self, value: float):
        ...

    @property
    def latin_font(self) -> IFontData:
        ...

    @latin_font.setter
    def latin_font(self, value: IFontData):
        ...

    @property
    def east_asian_font(self) -> IFontData:
        ...

    @east_asian_font.setter
    def east_asian_font(self, value: IFontData):
        ...

    @property
    def complex_script_font(self) -> IFontData:
        ...

    @complex_script_font.setter
    def complex_script_font(self, value: IFontData):
        ...

    @property
    def symbol_font(self) -> IFontData:
        ...

    @symbol_font.setter
    def symbol_font(self, value: IFontData):
        ...

    @property
    def escapement(self) -> float:
        '''Returns or sets the superscript or subscript text.
                    Value from -100% (subscript) to 100% (superscript).
                    **float.NaN** means value is undefined and should be inherited from the Master.
                    Read/write :py:class:`float`.'''
        ...

    @escapement.setter
    def escapement(self, value: float):
        '''Returns or sets the superscript or subscript text.
                    Value from -100% (subscript) to 100% (superscript).
                    **float.NaN** means value is undefined and should be inherited from the Master.
                    Read/write :py:class:`float`.'''
        ...

    @property
    def kerning_minimal_size(self) -> float:
        ...

    @kerning_minimal_size.setter
    def kerning_minimal_size(self, value: float):
        ...

    @property
    def language_id(self) -> str:
        ...

    @language_id.setter
    def language_id(self, value: str):
        ...

    @property
    def alternative_language_id(self) -> str:
        ...

    @alternative_language_id.setter
    def alternative_language_id(self, value: str):
        ...

    @property
    def spacing(self) -> float:
        '''Returns or sets the intercharacter spacing increment.
                    **float.NaN** means value is undefined and should be inherited from the Master.
                    Read/write :py:class:`float`.'''
        ...

    @spacing.setter
    def spacing(self, value: float):
        '''Returns or sets the intercharacter spacing increment.
                    **float.NaN** means value is undefined and should be inherited from the Master.
                    Read/write :py:class:`float`.'''
        ...

    ...

class IBasePortionFormatEffectiveData:
    '''Base interface for immutable objects which contain effective text portion formatting properties.'''
    @property
    def line_format(self) -> ILineFormatEffectiveData:
        ...

    @property
    def fill_format(self) -> IFillFormatEffectiveData:
        ...

    @property
    def effect_format(self) -> IEffectFormatEffectiveData:
        ...

    @property
    def highlight_color(self) -> aspose.pydrawing.Color:
        ...

    @property
    def underline_line_format(self) -> ILineFormatEffectiveData:
        ...

    @property
    def underline_fill_format(self) -> IFillFormatEffectiveData:
        ...

    @property
    def font_bold(self) -> bool:
        ...

    @property
    def font_italic(self) -> bool:
        ...

    @property
    def kumimoji(self) -> bool:
        '''Determines whether the numbers should ignore text eastern language-specific vertical text layout.
                    Read-only :py:class:`bool`.'''
        ...

    @property
    def normalise_height(self) -> bool:
        ...

    @property
    def proof_disabled(self) -> bool:
        ...

    @property
    def font_underline(self) -> TextUnderlineType:
        ...

    @property
    def text_cap_type(self) -> TextCapType:
        ...

    @property
    def strikethrough_type(self) -> TextStrikethroughType:
        ...

    @property
    def smart_tag_clean(self) -> bool:
        ...

    @property
    def is_hard_underline_line(self) -> bool:
        ...

    @property
    def is_hard_underline_fill(self) -> bool:
        ...

    @property
    def font_height(self) -> float:
        ...

    @property
    def latin_font(self) -> IFontData:
        ...

    @property
    def east_asian_font(self) -> IFontData:
        ...

    @property
    def complex_script_font(self) -> IFontData:
        ...

    @property
    def symbol_font(self) -> IFontData:
        ...

    @property
    def escapement(self) -> float:
        '''Returns the superscript or subscript text.
                    Value from -100% (subscript) to 100% (superscript).
                    Read-only :py:class:`float`.'''
        ...

    @property
    def kerning_minimal_size(self) -> float:
        ...

    @property
    def language_id(self) -> str:
        ...

    @property
    def alternative_language_id(self) -> str:
        ...

    @property
    def spacing(self) -> float:
        '''Returns the intercharacter spacing increment.
                    Read-only :py:class:`float`.'''
        ...

    ...

class IBaseShapeLock:
    '''Represents Shape lock (disabled operation).'''
    @property
    def no_locks(self) -> bool:
        ...

    ...

class IBaseSlide:
    '''Represents common data for all slide types.'''
    def find_shape_by_alt_text(self, alt_text: str) -> IShape:
        '''Finds first occurrence of a shape with the specified alternative text.
        :param alt_text: Alternative text.
        :returns: ShapeEx object or None.'''
        ...

    def join_portions_with_same_formatting(self) -> None:
        '''Joins runs with same formatting in all paragraphs in all acceptable shapes.'''
        ...

    def equals(self, slide: IBaseSlide) -> bool:
        '''Determines whether the two IBaseSlide instances are equal.
                    Returning value is calculated based on slide's structure and static content.
                    Two slides are equal if all shapes, styles, texts, animation and other settings. etc. are equal. The comparison doesn't take into account unique identifier values, e.g. SlideId and dynamic content, e.g. current date value in Date Placeholder.
        :param slide: The IBaseSlide to compare with the current IBaseSlide.
        :returns: **true** if the specified IBaseSlide is equal to the current IBaseSlide; 
                    otherwise, **false**.'''
        ...

    def create_theme_effective(self) -> aspose.slides.theme.IThemeEffectiveData:
        ...

    @property
    def shapes(self) -> IShapeCollection:
        '''Returns the shapes of a slide.
                    Read-only :py:class:`aspose.slides.IShapeCollection`.'''
        ...

    @property
    def controls(self) -> IControlCollection:
        '''Returns the collection of ActiveX controls on a slide.
                    Read-only :py:class:`aspose.slides.IControlCollection`.'''
        ...

    @property
    def name(self) -> str:
        '''Returns or sets the name of a slide.
                    Read/write :py:class:`str`.'''
        ...

    @name.setter
    def name(self, value: str):
        '''Returns or sets the name of a slide.
                    Read/write :py:class:`str`.'''
        ...

    @property
    def slide_id(self) -> int:
        ...

    @property
    def custom_data(self) -> ICustomData:
        ...

    @property
    def timeline(self) -> IAnimationTimeLine:
        '''Returns animation timeline object.
                    Read-only :py:class:`aspose.slides.IAnimationTimeLine`.'''
        ...

    @property
    def slide_show_transition(self) -> ISlideShowTransition:
        ...

    @property
    def background(self) -> IBackground:
        '''Returns slide's background.
                    Read-only :py:class:`aspose.slides.IBackground`.'''
        ...

    @property
    def hyperlink_queries(self) -> IHyperlinkQueries:
        ...

    @property
    def show_master_shapes(self) -> bool:
        ...

    @show_master_shapes.setter
    def show_master_shapes(self, value: bool):
        ...

    @property
    def as_i_themeable(self) -> aspose.slides.theme.IThemeable:
        ...

    @property
    def as_i_slide_component(self) -> ISlideComponent:
        ...

    @property
    def slide(self) -> IBaseSlide:
        ...

    @property
    def as_i_presentation_component(self) -> IPresentationComponent:
        ...

    @property
    def presentation(self) -> IPresentation:
        ...

    ...

class IBaseSlideHeaderFooterManager:
    '''Represents manager which holds behavior of the footer, date-time, page number placeholders for all slide types.'''
    def set_footer_visibility(self, is_visible: bool) -> None:
        '''Changes slide footer placeholder visibility.
        :param is_visible: true - makes a footer placeholder visible, otherwise - hides it.'''
        ...

    def set_slide_number_visibility(self, is_visible: bool) -> None:
        '''Changes slide page number placeholder visibility.
        :param is_visible: true - makes a page number placeholder visible, otherwise - hides it.'''
        ...

    def set_date_time_visibility(self, is_visible: bool) -> None:
        '''Changes slide date-time placeholder visibility.
        :param is_visible: true - makes a date-time placeholder visible, otherwise - hides it.'''
        ...

    def set_footer_text(self, text: str) -> None:
        '''Sets text to slide footer placeholder.
        :param text: Text to set.'''
        ...

    def set_date_time_text(self, text: str) -> None:
        '''Sets text to slide date-time placeholder.
        :param text: Text to set.'''
        ...

    @property
    def is_footer_visible(self) -> bool:
        ...

    @property
    def is_slide_number_visible(self) -> bool:
        ...

    @property
    def is_date_time_visible(self) -> bool:
        ...

    @property
    def as_i_base_header_footer_manager(self) -> IBaseHeaderFooterManager:
        ...

    ...

class IBaseTableFormatEffectiveData:
    '''Base interface for immutable objects which contain effective table formatting properties.'''
    @property
    def fill_format(self) -> IFillFormatEffectiveData:
        ...

    @property
    def border_left(self) -> ILineFormatEffectiveData:
        ...

    @property
    def border_top(self) -> ILineFormatEffectiveData:
        ...

    @property
    def border_right(self) -> ILineFormatEffectiveData:
        ...

    @property
    def border_bottom(self) -> ILineFormatEffectiveData:
        ...

    @property
    def border_diagonal_down(self) -> ILineFormatEffectiveData:
        ...

    @property
    def border_diagonal_up(self) -> ILineFormatEffectiveData:
        ...

    ...

class IBlobManagementOptions:
    '''A Binary Large Object (BLOB) is a binary data stored as a single entity - i.e. BLOB can be an 
                audio, video or presentation itself. A number of techniques are used to optimize memory consumption 
                while working with BLOBs - which was already stored in the presentation or be added later programmatically. 
                Using :py:class:`aspose.slides.IBlobManagementOptions` you can change a different behavior aspects regarding BLOBs 
                handling for the :py:class:`aspose.slides.IPresentation` instance lifetime.'''
    @property
    def presentation_locking_behavior(self) -> PresentationLockingBehavior:
        ...

    @presentation_locking_behavior.setter
    def presentation_locking_behavior(self, value: PresentationLockingBehavior):
        ...

    @property
    def is_temporary_files_allowed(self) -> bool:
        ...

    @is_temporary_files_allowed.setter
    def is_temporary_files_allowed(self, value: bool):
        ...

    @property
    def temp_files_root_path(self) -> str:
        ...

    @temp_files_root_path.setter
    def temp_files_root_path(self, value: str):
        ...

    @property
    def max_blobs_bytes_in_memory(self) -> int:
        ...

    @max_blobs_bytes_in_memory.setter
    def max_blobs_bytes_in_memory(self, value: int):
        ...

    ...

class IBulkTextFormattable:
    '''Represents an object with possibility of bulk setting child text elements' formats.'''
    @overload
    def set_text_format(self, source: IPortionFormat) -> None:
        '''Sets defined portion format properties to all element's portions.
        :param source: IPortionFormat object with necessary properties set.'''
        ...

    @overload
    def set_text_format(self, source: IParagraphFormat) -> None:
        '''Sets defined paragraph format properties to all element's paragraphs.
        :param source: IParagraphFormat object with necessary properties set.'''
        ...

    @overload
    def set_text_format(self, source: ITextFrameFormat) -> None:
        '''Sets defined text frame format properties to all element's text frames.
        :param source: ITextFrameFormat object with necessary properties set.'''
        ...

    ...

class IBulletFormat:
    '''Represents paragraph bullet formatting properties.'''
    def apply_default_paragraph_indents_shifts(self) -> None:
        '''Sets default non-zero shifts for effective paragraph Indent and MarginLeft when bullets is enabled (like PowerPoint do if enable paragraph bullets/numbering in it). If bullets is disabled then just reset paragraph Indent and MarginLeft (like PowerPoint do if disable paragraph bullets/numbering in it). Indents shifts are applied in regard to current bullet context - IBulletFormat.Type, .NumberedBulletStyle and FontHeight of first portion. Non-zero indents shifts are applied to effective Indent and MarginLeft of current paragraph (make result values to be local values).'''
        ...

    def get_effective(self) -> IBulletFormatEffectiveData:
        '''Gets effective bullet formatting data with the inheritance applied.
        :returns: A :py:class:`aspose.slides.IBulletFormatEffectiveData`.'''
        ...

    @property
    def type(self) -> BulletType:
        '''Returns or sets the bullet type of a paragraph with no inheritance.
                    Read/write :py:enum:`aspose.slides.BulletType`.'''
        ...

    @type.setter
    def type(self, value: BulletType):
        '''Returns or sets the bullet type of a paragraph with no inheritance.
                    Read/write :py:enum:`aspose.slides.BulletType`.'''
        ...

    @property
    def char(self) -> char:
        '''Returns or sets the bullet char of a paragraph with no inheritance.
                    Read/write :py:class:`System.Char`.'''
        ...

    @char.setter
    def char(self, value: char):
        '''Returns or sets the bullet char of a paragraph with no inheritance.
                    Read/write :py:class:`System.Char`.'''
        ...

    @property
    def font(self) -> IFontData:
        '''Returns or sets the bullet font of a paragraph with no inheritance.
                    Read/write :py:class:`aspose.slides.IFontData`.'''
        ...

    @font.setter
    def font(self, value: IFontData):
        '''Returns or sets the bullet font of a paragraph with no inheritance.
                    Read/write :py:class:`aspose.slides.IFontData`.'''
        ...

    @property
    def height(self) -> float:
        '''Returns or sets the bullet height of a paragraph with no inheritance.
                    Value float.NaN determines that bullet inherits height from the first portion in the paragraph.
                    Read/write :py:class:`float`.'''
        ...

    @height.setter
    def height(self, value: float):
        '''Returns or sets the bullet height of a paragraph with no inheritance.
                    Value float.NaN determines that bullet inherits height from the first portion in the paragraph.
                    Read/write :py:class:`float`.'''
        ...

    @property
    def color(self) -> IColorFormat:
        '''Returns the color format of a bullet of a paragraph with no inheritance.
                    Read-only :py:class:`aspose.slides.IColorFormat`.'''
        ...

    @property
    def picture(self) -> ISlidesPicture:
        '''Returns the picture used as a bullet in a paragraph with no inheritance.
                    Read-only :py:class:`aspose.slides.ISlidesPicture`.'''
        ...

    @property
    def numbered_bullet_start_with(self) -> int:
        ...

    @numbered_bullet_start_with.setter
    def numbered_bullet_start_with(self, value: int):
        ...

    @property
    def numbered_bullet_style(self) -> NumberedBulletStyle:
        ...

    @numbered_bullet_style.setter
    def numbered_bullet_style(self, value: NumberedBulletStyle):
        ...

    @property
    def is_bullet_hard_color(self) -> NullableBool:
        ...

    @is_bullet_hard_color.setter
    def is_bullet_hard_color(self, value: NullableBool):
        ...

    @property
    def is_bullet_hard_font(self) -> NullableBool:
        ...

    @is_bullet_hard_font.setter
    def is_bullet_hard_font(self, value: NullableBool):
        ...

    ...

class IBulletFormatEffectiveData:
    '''Immutable object which contains effective paragraph bullet formatting properties.'''
    @property
    def type(self) -> BulletType:
        '''Returns the bullet type of a paragraph.
                    Read-only :py:enum:`aspose.slides.BulletType`.'''
        ...

    @property
    def char(self) -> char:
        '''Returns the bullet char of a paragraph.
                    Read-only :py:class:`System.Char`.'''
        ...

    @property
    def actual_bullet_value(self) -> str:
        ...

    @property
    def font(self) -> IFontData:
        '''Returns the bullet font of a paragraph.
                    Read-only :py:class:`aspose.slides.IFontData`.'''
        ...

    @property
    def height(self) -> float:
        '''Returns the bullet height of a paragraph.
                    Read-only :py:class:`float`.'''
        ...

    @property
    def numbered_bullet_start_with(self) -> int:
        ...

    @property
    def numbered_bullet_style(self) -> NumberedBulletStyle:
        ...

    @property
    def is_bullet_hard_color(self) -> bool:
        ...

    @property
    def is_bullet_hard_font(self) -> bool:
        ...

    @property
    def picture(self) -> IPictureEffectiveData:
        '''Returns the picture used as a bullet in the paragraph.
                    Read-only :py:class:`aspose.slides.IPictureEffectiveData`.'''
        ...

    @property
    def fill_format(self) -> IFillFormatEffectiveData:
        ...

    ...

class ICamera:
    '''Represents Camera.'''
    def set_rotation(self, latitude: float, longitude: float, revolution: float) -> None:
        '''A rotation is defined through the use of a latitude
                    coordinate, a longitude coordinate, and a revolution about the axis 
                    as the latitude and longitude coordinates.
                    If any of coordinate value is float.NaN, all rotation is undefined.
        :param latitude: Latitude value :py:class:`float`
        :param longitude: Longitude value :py:class:`float`
        :param revolution: revolution valule :py:class:`float`'''
        ...

    def get_rotation(self) -> List[float]:
        '''A rotation is defined through the use of a latitude
                    coordinate, a longitude coordinate, and a revolution about the axis 
                    as the latitude and longitude coordinates.
                    first element in return array - latitude, second - longitude, third - revolution.
                    Returns None if no rotation defined.
        :returns: Array of rotation values as :py:class:`float`[].'''
        ...

    @property
    def camera_type(self) -> CameraPresetType:
        ...

    @camera_type.setter
    def camera_type(self, value: CameraPresetType):
        ...

    @property
    def field_of_view_angle(self) -> float:
        ...

    @field_of_view_angle.setter
    def field_of_view_angle(self, value: float):
        ...

    @property
    def zoom(self) -> float:
        '''Camera zoom (positive value in percentage)
                    Read/write :py:class:`float`.'''
        ...

    @zoom.setter
    def zoom(self, value: float):
        '''Camera zoom (positive value in percentage)
                    Read/write :py:class:`float`.'''
        ...

    ...

class ICameraEffectiveData:
    '''Immutable object which contains effective camera properties.'''
    def get_rotation(self) -> List[float]:
        '''A rotation is defined through the use of a latitude
                    coordinate, a longitude coordinate, and a revolution about the axis 
                    as the latitude and longitude coordinates.
                    first element in return array - latitude, second - longitude, third - revolution.
                    Returns None if no rotation defined.
        :returns: Array of rotation values as :py:class:`float`[].'''
        ...

    @property
    def camera_type(self) -> CameraPresetType:
        ...

    @property
    def field_of_view_angle(self) -> float:
        ...

    @property
    def zoom(self) -> float:
        '''Camera zoom (positive value in percentage).
                    Read-only :py:class:`float`.'''
        ...

    ...

class ICaptions:
    '''Represents the WebVTT closed captions.'''
    @property
    def caption_id(self) -> Guid:
        ...

    @property
    def label(self) -> str:
        '''Returns or sets the label of the closed captions.
                    Read/write :py:class:`str`.'''
        ...

    @label.setter
    def label(self, value: str):
        '''Returns or sets the label of the closed captions.
                    Read/write :py:class:`str`.'''
        ...

    @property
    def binary_data(self) -> bytes:
        ...

    @property
    def data_as_string(self) -> str:
        ...

    ...

class ICaptionsCollection:
    '''Represents a collection of the closed captions.'''
    @overload
    def add(self, label: str, file_path: str) -> ICaptions:
        '''Adds WebVTT closed captions to the end of the collection.
        :param label: The label of the closed captions.
        :param file_path: The path to the WebVTT file.
        :returns: The added :py:class:`aspose.slides.ICaptions` instance.'''
        ...

    @overload
    def add(self, label: str, stream: io.RawIOBase) -> ICaptions:
        '''Adds WebVTT closed captions to the end of the collection from a stream.
        :param label: The label of the closed captions.
        :param stream: The input stream containing data in WebVTT format.
        :returns: The added :py:class:`aspose.slides.ICaptions` instance.'''
        ...

    def remove(self, captions: ICaptions) -> None:
        '''Removes the specified closed captions from the collection.
        :param captions: The closed captions to remove.'''
        ...

    def remove_at(self, index: int) -> None:
        '''Removes the closed captions at the specified index.
        :param index: The index of the closed captions to remove.'''
        ...

    def clear(self) -> None:
        '''Removes all closed captions from the collection.'''
        ...

    @property
    def count(self) -> int:
        '''Returns the number of elements in the collection.
                    Read-only :py:class:`int`.'''
        ...

    def __getitem__(self, key: int) -> ICaptions
        ...

    ...

class ICell:
    '''Represents a cell in a table.'''
    def split_by_col_span(self, index: int) -> None:
        '''Splits the cell to two cells by index of column.
        :param index: Index of column.'''
        ...

    def split_by_row_span(self, index: int) -> None:
        '''Splits the cell to two cells by index of row.
        :param index: Index of row.'''
        ...

    def split_by_height(self, height: float) -> None:
        '''Splits the cell by height.
        :param height: Height of a row.'''
        ...

    def split_by_width(self, width: float) -> None:
        '''Splits the cell by width.
        :param width: Width of a column.'''
        ...

    @property
    def offset_x(self) -> float:
        ...

    @property
    def offset_y(self) -> float:
        ...

    @property
    def first_row_index(self) -> int:
        ...

    @property
    def first_column_index(self) -> int:
        ...

    @property
    def width(self) -> float:
        '''Returns the width of the cell.
                    Read-only :py:class:`float`.'''
        ...

    @property
    def height(self) -> float:
        '''Returns the height of the cell.
                    Read-only :py:class:`float`.'''
        ...

    @property
    def minimal_height(self) -> float:
        ...

    @property
    def margin_left(self) -> float:
        ...

    @margin_left.setter
    def margin_left(self, value: float):
        ...

    @property
    def margin_right(self) -> float:
        ...

    @margin_right.setter
    def margin_right(self, value: float):
        ...

    @property
    def margin_top(self) -> float:
        ...

    @margin_top.setter
    def margin_top(self, value: float):
        ...

    @property
    def margin_bottom(self) -> float:
        ...

    @margin_bottom.setter
    def margin_bottom(self, value: float):
        ...

    @property
    def text_vertical_type(self) -> TextVerticalType:
        ...

    @text_vertical_type.setter
    def text_vertical_type(self, value: TextVerticalType):
        ...

    @property
    def text_anchor_type(self) -> TextAnchorType:
        ...

    @text_anchor_type.setter
    def text_anchor_type(self, value: TextAnchorType):
        ...

    @property
    def anchor_center(self) -> bool:
        ...

    @anchor_center.setter
    def anchor_center(self, value: bool):
        ...

    @property
    def first_column(self) -> IColumn:
        ...

    @property
    def first_row(self) -> IRow:
        ...

    @property
    def col_span(self) -> int:
        ...

    @property
    def row_span(self) -> int:
        ...

    @property
    def text_frame(self) -> ITextFrame:
        ...

    @property
    def table(self) -> ITable:
        '''Returns the parent Table object for a cell.
                    Read-only :py:class:`aspose.slides.ITable`.'''
        ...

    @property
    def is_merged_cell(self) -> bool:
        ...

    @property
    def cell_format(self) -> ICellFormat:
        ...

    @property
    def as_i_slide_component(self) -> ISlideComponent:
        ...

    @property
    def slide(self) -> IBaseSlide:
        ...

    @property
    def as_i_presentation_component(self) -> IPresentationComponent:
        ...

    @property
    def presentation(self) -> IPresentation:
        ...

    ...

class ICellCollection:
    '''Represents a collection of cells.'''
    @property
    def as_i_slide_component(self) -> ISlideComponent:
        ...

    @property
    def slide(self) -> IBaseSlide:
        ...

    @property
    def as_i_presentation_component(self) -> IPresentationComponent:
        ...

    @property
    def presentation(self) -> IPresentation:
        ...

    @property
    def as_i_collection(self) -> list:
        ...

    @property
    def as_i_enumerable(self) -> collections.abc.Iterable:
        ...

    def __getitem__(self, key: int) -> ICell
        ...

    ...

class ICellFormat:
    '''Represents format of a table cell.'''
    def get_effective(self) -> ICellFormatEffectiveData:
        '''Gets effective table cell formatting properties with inheritance and table styles applied.
        :returns: A :py:class:`aspose.slides.ICellFormatEffectiveData`.'''
        ...

    @property
    def fill_format(self) -> IFillFormat:
        ...

    @property
    def border_left(self) -> ILineFormat:
        ...

    @property
    def border_top(self) -> ILineFormat:
        ...

    @property
    def border_right(self) -> ILineFormat:
        ...

    @property
    def border_bottom(self) -> ILineFormat:
        ...

    @property
    def border_diagonal_down(self) -> ILineFormat:
        ...

    @property
    def border_diagonal_up(self) -> ILineFormat:
        ...

    @property
    def transparency(self) -> float:
        '''Gets or sets the transparency of the fill color.
                    Read/write :py:class:`float`.'''
        ...

    @transparency.setter
    def transparency(self, value: float):
        '''Gets or sets the transparency of the fill color.
                    Read/write :py:class:`float`.'''
        ...

    ...

class ICellFormatEffectiveData:
    '''Immutable object which contains effective table cell formatting properties.'''
    @property
    def transparency(self) -> float:
        '''Gets the transparency of the fill color.
                    Read :py:class:`float`.'''
        ...

    @property
    def as_i_base_table_format_effective_data(self) -> IBaseTableFormatEffectiveData:
        ...

    @property
    def fill_format(self) -> IFillFormatEffectiveData:
        ...

    @property
    def border_left(self) -> ILineFormatEffectiveData:
        ...

    @property
    def border_top(self) -> ILineFormatEffectiveData:
        ...

    @property
    def border_right(self) -> ILineFormatEffectiveData:
        ...

    @property
    def border_bottom(self) -> ILineFormatEffectiveData:
        ...

    @property
    def border_diagonal_down(self) -> ILineFormatEffectiveData:
        ...

    @property
    def border_diagonal_up(self) -> ILineFormatEffectiveData:
        ...

    ...

class IColorFormat:
    '''Represents a color used in a presentation.'''
    def to_string(self, format: ColorStringFormat) -> str:
        '''Returns a :py:class:`str` that represents the current color format.
        :param format: A type of color string format.
        :returns: A string that represents the current color format.'''
        ...

    def copy_from(self, color: IColorFormat) -> None:
        '''Copy color format from "color".
        :param color: Color :py:class:`aspose.slides.IColorFormat`'''
        ...

    @property
    def color_type(self) -> ColorType:
        ...

    @color_type.setter
    def color_type(self, value: ColorType):
        ...

    @property
    def color(self) -> aspose.pydrawing.Color:
        '''Returns resulting color (with all color transformations applied).
                    Sets RGB colors and clears all color transformations.
                    Read/write :py:class:`aspose.pydrawing.Color`.'''
        ...

    @color.setter
    def color(self, value: aspose.pydrawing.Color):
        '''Returns resulting color (with all color transformations applied).
                    Sets RGB colors and clears all color transformations.
                    Read/write :py:class:`aspose.pydrawing.Color`.'''
        ...

    @property
    def preset_color(self) -> PresetColor:
        ...

    @preset_color.setter
    def preset_color(self, value: PresetColor):
        ...

    @property
    def system_color(self) -> SystemColor:
        ...

    @system_color.setter
    def system_color(self, value: SystemColor):
        ...

    @property
    def scheme_color(self) -> SchemeColor:
        ...

    @scheme_color.setter
    def scheme_color(self, value: SchemeColor):
        ...

    @property
    def r(self) -> int:
        '''Returns or sets the red component of a color. All color transformations are ignored.
                    Read/write :py:class:`int`.'''
        ...

    @r.setter
    def r(self, value: int):
        '''Returns or sets the red component of a color. All color transformations are ignored.
                    Read/write :py:class:`int`.'''
        ...

    @property
    def g(self) -> int:
        '''Returns or sets the green component of a color. All color transformations are ignored.
                    Read/write :py:class:`int`.'''
        ...

    @g.setter
    def g(self, value: int):
        '''Returns or sets the green component of a color. All color transformations are ignored.
                    Read/write :py:class:`int`.'''
        ...

    @property
    def b(self) -> int:
        '''Returns or sets the blue component of a color. All color transformations are ignored.
                    Read/write :py:class:`int`.'''
        ...

    @b.setter
    def b(self, value: int):
        '''Returns or sets the blue component of a color. All color transformations are ignored.
                    Read/write :py:class:`int`.'''
        ...

    @property
    def float_r(self) -> float:
        ...

    @float_r.setter
    def float_r(self, value: float):
        ...

    @property
    def float_g(self) -> float:
        ...

    @float_g.setter
    def float_g(self, value: float):
        ...

    @property
    def float_b(self) -> float:
        ...

    @float_b.setter
    def float_b(self, value: float):
        ...

    @property
    def hue(self) -> float:
        '''Returns or sets the hue component of a color in HSL representation.
                    All color transformations are ignored.
                    Read/write :py:class:`float`.'''
        ...

    @hue.setter
    def hue(self, value: float):
        '''Returns or sets the hue component of a color in HSL representation.
                    All color transformations are ignored.
                    Read/write :py:class:`float`.'''
        ...

    @property
    def saturation(self) -> float:
        '''Returns or sets the saturation component of a color in HSL representation.
                    All color transformations are ignored.
                    Read/write :py:class:`float`.'''
        ...

    @saturation.setter
    def saturation(self, value: float):
        '''Returns or sets the saturation component of a color in HSL representation.
                    All color transformations are ignored.
                    Read/write :py:class:`float`.'''
        ...

    @property
    def luminance(self) -> float:
        '''Returns or sets the luminance component of a color in HSL representation.
                    All color transformations are ignored.
                    Read/write :py:class:`float`.'''
        ...

    @luminance.setter
    def luminance(self, value: float):
        '''Returns or sets the luminance component of a color in HSL representation.
                    All color transformations are ignored.
                    Read/write :py:class:`float`.'''
        ...

    @property
    def color_transform(self) -> IColorOperationCollection:
        ...

    @property
    def as_i_fill_param_source(self) -> IFillParamSource:
        ...

    ...

class IColorOperation:
    '''Represents different color operations used for color transformations.'''
    @property
    def operation_type(self) -> ColorTransformOperation:
        ...

    @property
    def parameter(self) -> float:
        '''Returns a parameter of an operation.
                    Read-only :py:class:`float`.'''
        ...

    ...

class IColorOperationCollection:
    '''Represents a collection of color transform operations.'''
    @overload
    def add(self, operation: ColorTransformOperation, parameter: float) -> IColorOperation:
        '''Adds a new operation to the end of collection.
        :param operation: Operation type.
        :param parameter: Operation's parameter.
        :returns: Added operation.'''
        ...

    @overload
    def add(self, operation: ColorTransformOperation) -> IColorOperation:
        '''Adds a new operation to the end of collection.
        :param operation: Operation type.
        :returns: Added operation.'''
        ...

    @overload
    def insert(self, position: int, operation: ColorTransformOperation, parameter: float) -> IColorOperation:
        '''Inserts the new operation to a collection.
        :param position: The index at which the operation will be inserted.
        :param operation: Operation type.
        :param parameter: Operation's parameter.
        :returns: Inserted operation.'''
        ...

    @overload
    def insert(self, position: int, operation: ColorTransformOperation) -> IColorOperation:
        '''Inserts the new operation to a collection.
        :param position: The index at which the operation will be inserted.
        :param operation: Operation type.
        :returns: Inserted operation.'''
        ...

    def remove_at(self, index: int) -> None:
        '''Removes the color operation from a collection.
        :param index: Index of a color operation to remove.'''
        ...

    def clear(self) -> None:
        '''Removes all color operations.'''
        ...

    def clone_t(self) -> IColorOperationCollection:
        ...

    @property
    def as_i_collection(self) -> list:
        ...

    @property
    def as_i_enumerable(self) -> collections.abc.Iterable:
        ...

    def __getitem__(self, key: int) -> IColorOperation
        ...

    def __setitem__(self, key: int, value: IColorOperation
        ...

    ...

class IColumn:
    '''Represents a column in a table.'''
    @overload
    def set_text_format(self, source: IPortionFormat) -> None:
        ...

    @overload
    def set_text_format(self, source: IParagraphFormat) -> None:
        ...

    @overload
    def set_text_format(self, source: ITextFrameFormat) -> None:
        ...

    @property
    def width(self) -> float:
        '''Returns or sets the width of a column.
                    Read/write :py:class:`float`.'''
        ...

    @width.setter
    def width(self, value: float):
        '''Returns or sets the width of a column.
                    Read/write :py:class:`float`.'''
        ...

    @property
    def column_format(self) -> IColumnFormat:
        ...

    @property
    def as_i_cell_collection(self) -> ICellCollection:
        ...

    @property
    def as_i_bulk_text_formattable(self) -> IBulkTextFormattable:
        ...

    @property
    def as_i_slide_component(self) -> ISlideComponent:
        ...

    @property
    def slide(self) -> IBaseSlide:
        ...

    @property
    def as_i_presentation_component(self) -> IPresentationComponent:
        ...

    @property
    def presentation(self) -> IPresentation:
        ...

    @property
    def as_i_collection(self) -> list:
        ...

    @property
    def as_i_enumerable(self) -> collections.abc.Iterable:
        ...

    def __getitem__(self, key: int) -> ICell
        ...

    ...

class IColumnCollection:
    '''Represents collection of columns in a table.'''
    def add_clone(self, templ: IColumn, with_attached_columns: bool) -> List[IColumn]:
        '''Creates a copy of the specified template row and inserts it at the bottom of a table.
        :param templ: Column which is used as a template.
        :param with_attached_columns: True to copy also all columns attached to the template row.
        :returns: Added columns.'''
        ...

    def insert_clone(self, index: int, templ: IColumn, with_attached_columns: bool) -> List[IColumn]:
        '''Creates a copy of the specified template column and insert it at the specified position in a table.
        :param index: Index of a new column.
        :param templ: Column which is used as a template.
        :param with_attached_columns: True to copy also all columns attached to the template column.
        :returns: Inserted columns.'''
        ...

    def remove_at(self, first_column_index: int, with_attached_rows: bool) -> None:
        '''Removes a column at the specified position from a table.
        :param first_column_index: Index of a column to delete.
        :param with_attached_rows: True to delete also all attached columns.'''
        ...

    @property
    def as_i_collection(self) -> list:
        ...

    @property
    def as_i_enumerable(self) -> collections.abc.Iterable:
        ...

    def __getitem__(self, key: int) -> IColumn
        ...

    ...

class IColumnFormat:
    '''Represents format of a table column.'''
    def get_effective(self) -> IColumnFormatEffectiveData:
        '''Gets effective table column formatting properties with inheritance and table styles applied.
        :returns: A :py:class:`aspose.slides.IColumnFormatEffectiveData`.'''
        ...

    ...

class IColumnFormatEffectiveData:
    '''Immutable object which contains effective table column formatting properties.'''
    @property
    def as_i_base_table_format_effective_data(self) -> IBaseTableFormatEffectiveData:
        ...

    @property
    def fill_format(self) -> IFillFormatEffectiveData:
        ...

    @property
    def border_left(self) -> ILineFormatEffectiveData:
        ...

    @property
    def border_top(self) -> ILineFormatEffectiveData:
        ...

    @property
    def border_right(self) -> ILineFormatEffectiveData:
        ...

    @property
    def border_bottom(self) -> ILineFormatEffectiveData:
        ...

    @property
    def border_diagonal_down(self) -> ILineFormatEffectiveData:
        ...

    @property
    def border_diagonal_up(self) -> ILineFormatEffectiveData:
        ...

    ...

class IComment:
    '''Represents a comment on a slide.'''
    def remove(self) -> None:
        '''Removes comment and all its replies from the parent collection.'''
        ...

    @property
    def text(self) -> str:
        '''Returns or sets the plain text of a slide comment.
                    Read/write :py:class:`str`.'''
        ...

    @text.setter
    def text(self, value: str):
        '''Returns or sets the plain text of a slide comment.
                    Read/write :py:class:`str`.'''
        ...

    @property
    def created_time(self) -> DateTime:
        ...

    @created_time.setter
    def created_time(self, value: DateTime):
        ...

    @property
    def slide(self) -> ISlide:
        '''Returns or sets the parent slide of a comment.
                    Read-only :py:class:`aspose.slides.ISlide`.'''
        ...

    @property
    def author(self) -> ICommentAuthor:
        '''Returns the author of a comment.
                    Read-only :py:class:`aspose.slides.ICommentAuthor`.'''
        ...

    @property
    def position(self) -> aspose.pydrawing.PointF:
        '''Returns or sets the position of a comment on a slide.
                    Read/write :py:class:`aspose.pydrawing.PointF`.'''
        ...

    @position.setter
    def position(self, value: aspose.pydrawing.PointF):
        '''Returns or sets the position of a comment on a slide.
                    Read/write :py:class:`aspose.pydrawing.PointF`.'''
        ...

    @property
    def parent_comment(self) -> IComment:
        ...

    @parent_comment.setter
    def parent_comment(self, value: IComment):
        ...

    ...

class ICommentAuthor:
    '''Represents an author of comments.'''
    def remove(self) -> None:
        '''Removes the author from the parent collection.'''
        ...

    @property
    def name(self) -> str:
        '''Returns or sets the author's name.
                    Read/write :py:class:`str`.'''
        ...

    @name.setter
    def name(self, value: str):
        '''Returns or sets the author's name.
                    Read/write :py:class:`str`.'''
        ...

    @property
    def initials(self) -> str:
        '''Returns or sets the authors initials.
                    Read/write :py:class:`str`.'''
        ...

    @initials.setter
    def initials(self, value: str):
        '''Returns or sets the authors initials.
                    Read/write :py:class:`str`.'''
        ...

    @property
    def comments(self) -> ICommentCollection:
        '''Returns the collection of comments made by this author.
                    Read-only :py:class:`aspose.slides.ICommentCollection`.'''
        ...

    ...

class ICommentAuthorCollection:
    '''Represents a collection of comment authors.'''
    def add_author(self, name: str, initials: str) -> ICommentAuthor:
        '''Add new author at the end of a collection.
        :param name: Name of a new author.
        :param initials: Initials of a new author.
        :returns: New :py:class:`aspose.slides.ICommentAuthor` object.'''
        ...

    def to_array(self) -> List[ICommentAuthor]:
        '''Creates and returns an array with all authors.
        :returns: Array of :py:class:`aspose.slides.ICommentAuthor`'''
        ...

    def find_by_name(self, name: str) -> List[ICommentAuthor]:
        '''Find author in a collection by name.
        :param name: Name of an author to find.
        :returns: Author or None.'''
        ...

    def find_by_name_and_initials(self, name: str, initials: str) -> List[ICommentAuthor]:
        '''Find author in a collection by name and initials.
        :param name: Name of an author to find.
        :param initials: Initials of an author to find.
        :returns: Author or None.'''
        ...

    def remove_at(self, index: int) -> None:
        '''Removes the author at the specified index of the collection.
        :param index: The zero-based index of the element to remove.'''
        ...

    def remove(self, author: ICommentAuthor) -> None:
        '''Removes the first occurrence of the specified author in a collection.
        :param author: The author to remove from a collection.'''
        ...

    def clear(self) -> None:
        '''Removes all authors from a collection.'''
        ...

    @property
    def as_i_collection(self) -> list:
        ...

    @property
    def as_i_enumerable(self) -> collections.abc.Iterable:
        ...

    def __getitem__(self, key: int) -> ICommentAuthor
        ...

    ...

class ICommentCollection:
    '''Represents a collection of comments of one author.'''
    @overload
    def to_array(self) -> List[IComment]:
        '''Creates and returns an array with all comments.
        :returns: Array of :py:class:`aspose.slides.IComment`.'''
        ...

    @overload
    def to_array(self, start_index: int, count: int) -> List[IComment]:
        '''Creates and returns an array with all comments from the specified range.
        :param start_index: An index of a first comment to return.
        :param count: A number of comments to return.
        :returns: Array of :py:class:`aspose.slides.IComment`.'''
        ...

    def add_comment(self, text: str, slide: ISlide, position: aspose.pydrawing.PointF, creation_time: DateTime) -> IComment:
        '''Add new comment at the end of a collection.
        :param text: Plain text of a new comment.
        :param slide: Slide in a presentation where to add a new comment.
        :param position: Position on a slide where to add a new comment.
        :param creation_time: Time of a comment creation.
        :returns: Added comment.'''
        ...

    def add_modern_comment(self, text: str, slide: ISlide, shape: IShape, position: aspose.pydrawing.PointF, creation_time: DateTime) -> IModernComment:
        '''Add new modern comment at the end of a collection.
        :param text: Plain text of a new modern comment.
        :param slide: Slide in a presentation where to add a new modern comment.
        :param shape: Shape on a slide to which a new modern comment is associated.
        :param position: Position on a slide where to add a new modern comment.
        :param creation_time: Time of a modern comment creation.
        :returns: Added modern comment.'''
        ...

    def insert_comment(self, index: int, text: str, slide: ISlide, position: aspose.pydrawing.PointF, creation_time: DateTime) -> IComment:
        '''Insert new comment to a collection at the specified index.
        :param index: Index of the element in a collection at which comment should be inserted.
        :param text: Plain text of a new comment.
        :param slide: Slide in a presentation where to add a new comment.
        :param position: Position on a slide where to add a new comment.
        :param creation_time: Time of a comment creation.
        :returns: Inserted comment.'''
        ...

    def insert_modern_comment(self, index: int, text: str, slide: ISlide, shape: IShape, position: aspose.pydrawing.PointF, creation_time: DateTime) -> IModernComment:
        '''Insert new modern comment to a collection at the specified index.
        :param index: Index of the element in a collection at which modern comment should be inserted.
        :param text: Plain text of a new modern comment.
        :param slide: Slide in a presentation where to add a new modern comment.
        :param shape: Shape on a slide to which a new modern comment is associated.
        :param position: Position on a slide where to add a new modern comment.
        :param creation_time: Time of a modern comment creation.
        :returns: Inserted modern comment.'''
        ...

    def remove_at(self, index: int) -> None:
        '''Removes the element at the specified index in a collection.
        :param index: The zero-based index of the element to remove.'''
        ...

    def remove(self, comment: IComment) -> None:
        '''Removes the first occurrence of the specified comment in a collection.
        :param comment: The comment to remove from a collection.'''
        ...

    def clear(self) -> None:
        '''Removes all comments from a collection.'''
        ...

    @property
    def as_i_collection(self) -> list:
        ...

    @property
    def as_i_enumerable(self) -> collections.abc.Iterable:
        ...

    def __getitem__(self, key: int) -> IComment
        ...

    ...

class ICommonSlideViewProperties:
    '''Represents common slide view properties.'''
    @property
    def scale(self) -> int:
        '''Specifies the view scaling ratio in percentages.
                    Read/write :py:class:`int`.'''
        ...

    @scale.setter
    def scale(self, value: int):
        '''Specifies the view scaling ratio in percentages.
                    Read/write :py:class:`int`.'''
        ...

    @property
    def variable_scale(self) -> bool:
        ...

    @variable_scale.setter
    def variable_scale(self, value: bool):
        ...

    @property
    def drawing_guides(self) -> IDrawingGuidesCollection:
        ...

    ...

class IConnector:
    '''Represents a connector.'''
    @overload
    def get_thumbnail(self) -> aspose.pydrawing.Bitmap:
        ...

    @overload
    def get_thumbnail(self, bounds: ShapeThumbnailBounds, scale_x: float, scale_y: float) -> aspose.pydrawing.Bitmap:
        ...

    @overload
    def get_image(self) -> IImage:
        ...

    @overload
    def get_image(self, bounds: ShapeThumbnailBounds, scale_x: float, scale_y: float) -> IImage:
        ...

    @overload
    def write_as_svg(self, stream: io.RawIOBase) -> None:
        ...

    @overload
    def write_as_svg(self, stream: io.RawIOBase, svg_options: aspose.slides.export.ISVGOptions) -> None:
        ...

    def reroute(self) -> None:
        '''Reroutes connector so that it take the shortest possible path between the shapes it connect.'''
        ...

    def get_geometry_paths(self) -> List[IGeometryPath]:
        ...

    def set_geometry_path(self, geometry_path: IGeometryPath) -> None:
        ...

    def set_geometry_paths(self, geometry_paths: List[IGeometryPath]) -> None:
        ...

    def create_shape_elements(self) -> List[IShapeElement]:
        ...

    def add_placeholder(self, placeholder_to_copy_from: IPlaceholder) -> IPlaceholder:
        ...

    def remove_placeholder(self) -> None:
        ...

    def get_base_placeholder(self) -> IShape:
        ...

    @property
    def shape_lock(self) -> IConnectorLock:
        ...

    @property
    def connector_lock(self) -> IConnectorLock:
        ...

    @property
    def start_shape_connected_to(self) -> IShape:
        ...

    @start_shape_connected_to.setter
    def start_shape_connected_to(self, value: IShape):
        ...

    @property
    def end_shape_connected_to(self) -> IShape:
        ...

    @end_shape_connected_to.setter
    def end_shape_connected_to(self, value: IShape):
        ...

    @property
    def start_shape_connection_site_index(self) -> int:
        ...

    @start_shape_connection_site_index.setter
    def start_shape_connection_site_index(self, value: int):
        ...

    @property
    def end_shape_connection_site_index(self) -> int:
        ...

    @end_shape_connection_site_index.setter
    def end_shape_connection_site_index(self, value: int):
        ...

    @property
    def as_i_geometry_shape(self) -> IGeometryShape:
        ...

    @property
    def shape_style(self) -> IShapeStyle:
        ...

    @property
    def shape_type(self) -> ShapeType:
        ...

    @shape_type.setter
    def shape_type(self, value: ShapeType):
        ...

    @property
    def adjustments(self) -> IAdjustValueCollection:
        ...

    @property
    def as_i_shape(self) -> IShape:
        ...

    @property
    def is_text_holder(self) -> bool:
        ...

    @property
    def placeholder(self) -> IPlaceholder:
        ...

    @property
    def custom_data(self) -> ICustomData:
        ...

    @property
    def raw_frame(self) -> IShapeFrame:
        ...

    @raw_frame.setter
    def raw_frame(self, value: IShapeFrame):
        ...

    @property
    def frame(self) -> IShapeFrame:
        ...

    @frame.setter
    def frame(self, value: IShapeFrame):
        ...

    @property
    def line_format(self) -> ILineFormat:
        ...

    @property
    def three_d_format(self) -> IThreeDFormat:
        ...

    @property
    def effect_format(self) -> IEffectFormat:
        ...

    @property
    def fill_format(self) -> IFillFormat:
        ...

    @property
    def hidden(self) -> bool:
        ...

    @hidden.setter
    def hidden(self, value: bool):
        ...

    @property
    def z_order_position(self) -> int:
        ...

    @property
    def connection_site_count(self) -> int:
        ...

    @property
    def rotation(self) -> float:
        ...

    @rotation.setter
    def rotation(self, value: float):
        ...

    @property
    def x(self) -> float:
        ...

    @x.setter
    def x(self, value: float):
        ...

    @property
    def y(self) -> float:
        ...

    @y.setter
    def y(self, value: float):
        ...

    @property
    def width(self) -> float:
        ...

    @width.setter
    def width(self, value: float):
        ...

    @property
    def height(self) -> float:
        ...

    @height.setter
    def height(self, value: float):
        ...

    @property
    def alternative_text(self) -> str:
        ...

    @alternative_text.setter
    def alternative_text(self, value: str):
        ...

    @property
    def alternative_text_title(self) -> str:
        ...

    @alternative_text_title.setter
    def alternative_text_title(self, value: str):
        ...

    @property
    def name(self) -> str:
        ...

    @name.setter
    def name(self, value: str):
        ...

    @property
    def is_decorative(self) -> bool:
        ...

    @is_decorative.setter
    def is_decorative(self, value: bool):
        ...

    @property
    def unique_id(self) -> int:
        ...

    @property
    def office_interop_shape_id(self) -> int:
        ...

    @property
    def is_grouped(self) -> bool:
        ...

    @property
    def black_white_mode(self) -> BlackWhiteMode:
        ...

    @black_white_mode.setter
    def black_white_mode(self, value: BlackWhiteMode):
        ...

    @property
    def parent_group(self) -> IGroupShape:
        ...

    @property
    def as_i_hyperlink_container(self) -> IHyperlinkContainer:
        ...

    @property
    def as_i_slide_component(self) -> ISlideComponent:
        ...

    @property
    def slide(self) -> IBaseSlide:
        ...

    @property
    def as_i_presentation_component(self) -> IPresentationComponent:
        ...

    @property
    def presentation(self) -> IPresentation:
        ...

    @property
    def hyperlink_click(self) -> IHyperlink:
        ...

    @hyperlink_click.setter
    def hyperlink_click(self, value: IHyperlink):
        ...

    @property
    def hyperlink_mouse_over(self) -> IHyperlink:
        ...

    @hyperlink_mouse_over.setter
    def hyperlink_mouse_over(self, value: IHyperlink):
        ...

    @property
    def hyperlink_manager(self) -> IHyperlinkManager:
        ...

    ...

class IConnectorLock:
    '''Determines which operations are disabled on the parent Connector.'''
    @property
    def grouping_locked(self) -> bool:
        ...

    @grouping_locked.setter
    def grouping_locked(self, value: bool):
        ...

    @property
    def select_locked(self) -> bool:
        ...

    @select_locked.setter
    def select_locked(self, value: bool):
        ...

    @property
    def rotate_locked(self) -> bool:
        ...

    @rotate_locked.setter
    def rotate_locked(self, value: bool):
        ...

    @property
    def aspect_ratio_locked(self) -> bool:
        ...

    @aspect_ratio_locked.setter
    def aspect_ratio_locked(self, value: bool):
        ...

    @property
    def position_move(self) -> bool:
        ...

    @position_move.setter
    def position_move(self, value: bool):
        ...

    @property
    def size_locked(self) -> bool:
        ...

    @size_locked.setter
    def size_locked(self, value: bool):
        ...

    @property
    def edit_points_locked(self) -> bool:
        ...

    @edit_points_locked.setter
    def edit_points_locked(self, value: bool):
        ...

    @property
    def adjust_handles_locked(self) -> bool:
        ...

    @adjust_handles_locked.setter
    def adjust_handles_locked(self, value: bool):
        ...

    @property
    def arrowheads_locked(self) -> bool:
        ...

    @arrowheads_locked.setter
    def arrowheads_locked(self, value: bool):
        ...

    @property
    def shape_type_locked(self) -> bool:
        ...

    @shape_type_locked.setter
    def shape_type_locked(self, value: bool):
        ...

    @property
    def as_i_base_shape_lock(self) -> IBaseShapeLock:
        ...

    @property
    def no_locks(self) -> bool:
        ...

    ...

class IControl:
    '''Represents an ActiveX control.'''
    @property
    def name(self) -> str:
        '''Returns the name of this control.
                    Read/write :py:class:`str`.'''
        ...

    @name.setter
    def name(self, value: str):
        '''Returns the name of this control.
                    Read/write :py:class:`str`.'''
        ...

    @property
    def class_id(self) -> Guid:
        ...

    @property
    def substitute_picture_format(self) -> IPictureFillFormat:
        ...

    @property
    def frame(self) -> IShapeFrame:
        '''Returns or sets control's frame.
                    Read/write :py:class:`aspose.slides.IShapeFrame`.'''
        ...

    @frame.setter
    def frame(self, value: IShapeFrame):
        '''Returns or sets control's frame.
                    Read/write :py:class:`aspose.slides.IShapeFrame`.'''
        ...

    @property
    def properties(self) -> IControlPropertiesCollection:
        '''Returns a collection of ActiveX properties.
                    Read-only :py:class:`aspose.slides.IControlPropertiesCollection`.'''
        ...

    @property
    def persistence(self) -> PersistenceType:
        '''Gets the method used to store properties of the ActiveX control.
                    Read only :py:enum:`aspose.slides.PersistenceType`.'''
        ...

    @property
    def active_x_control_binary(self) -> bytes:
        ...

    @property
    def as_i_slide_component(self) -> ISlideComponent:
        ...

    @property
    def slide(self) -> IBaseSlide:
        ...

    @property
    def as_i_presentation_component(self) -> IPresentationComponent:
        ...

    @property
    def presentation(self) -> IPresentation:
        ...

    ...

class IControlCollection:
    '''A collection of ActiveX controls.'''
    def remove(self, item: IControl) -> None:
        '''Removes an ActiveX control from the collection.
        :param item: A control to remove.'''
        ...

    def remove_at(self, index: int) -> None:
        '''Removes an ActiveX control stored at specified position from the collection.
        :param index: Index of a control to remove.'''
        ...

    def clear(self) -> None:
        '''Removes all controls from the collection.'''
        ...

    def add_control(self, control_type: ControlType, x: float, y: float, width: float, height: float) -> IControl:
        '''Creates and adds a new control to the collection.
        :param control_type: Type of a control to add.
        :param x: The X-coordinate for a left side of shape's frame.
        :param y: The Y-coordinate for a top side of shape's frame.
        :param width: The width of shape's frame.
        :param height: The height of shape's frame.
        :returns: Created control :py:class:`aspose.slides.IControl`.'''
        ...

    @property
    def as_i_collection(self) -> list:
        ...

    @property
    def as_i_enumerable(self) -> collections.abc.Iterable:
        ...

    def __getitem__(self, key: int) -> IControl
        ...

    ...

class IControlPropertiesCollection:
    '''A collection of ActiveX controls.'''
    def add(self, name: str, value: str) -> None:
        '''Adds a property to the collection.
        :param name: The name of the property.
        :param value: The alue of the property.'''
        ...

    def remove(self, name: str) -> None:
        '''Removes a property with the specified name.
        :param name: The name of property to remove.'''
        ...

    def clear(self) -> None:
        '''Removes all properties.'''
        ...

    @property
    def count(self) -> int:
        '''Returns a number of properties in the collection.
                    Read-only :py:class:`int`.'''
        ...

    @property
    def names_of_properties(self) -> list:
        ...

    @property
    def as_i_enumerable(self) -> collections.abc.Iterable:
        ...

    ...

class ICustomData:
    '''Represents container for custom data.'''
    @property
    def tags(self) -> ITagCollection:
        '''Returns the Customer Data Tags collection.
                    Read-only :py:class:`aspose.slides.ITagCollection`.'''
        ...

    @property
    def custom_xml_parts(self) -> ICustomXmlPartCollection:
        ...

    ...

class ICustomXmlPart:
    '''Represents custom xml part.'''
    def remove(self) -> None:
        '''Removes the custom xml part from the presentation.'''
        ...

    @property
    def xml_as_string(self) -> str:
        ...

    @xml_as_string.setter
    def xml_as_string(self, value: str):
        ...

    @property
    def xml_data(self) -> bytes:
        ...

    @xml_data.setter
    def xml_data(self, value: bytes):
        ...

    @property
    def item_id(self) -> Guid:
        ...

    @item_id.setter
    def item_id(self, value: Guid):
        ...

    @property
    def namespace_schemas(self) -> List[str]:
        ...

    ...

class ICustomXmlPartCollection:
    '''Represents collection of custom xml parts.'''
    @overload
    def add(self, xml_data: bytes) -> ICustomXmlPart:
        '''Adds new custom xml part.
        :param xml_data: The xml data of new part to be added.
        :returns: Created custom xml part.'''
        ...

    @overload
    def add(self, xml_string: str) -> ICustomXmlPart:
        '''Adds new custom xml part.
        :param xml_string: The xml string of new part to be added.
        :returns: Created custom xml part.'''
        ...

    @overload
    def add(self, input_stream: io.RawIOBase) -> ICustomXmlPart:
        '''Adds new custom xml part.
        :param input_stream: The inputStream with xml data of new part to be added.
        :returns: Created custom xml part.'''
        ...

    def remove_at(self, index: int) -> None:
        '''Removes custom xml part at the specified index.
        :param index: The zero-based index of the element to remove.'''
        ...

    def remove(self, item: ICustomXmlPart) -> bool:
        '''Removes the first occurrence of a specific object from the collection.
        :param item: The custom xml part to remove.
        :returns: ``true`` if item is successfully removed; otherwise, ``false``.'''
        ...

    def clear(self) -> None:
        '''Removes all items from the collection.'''
        ...

    @property
    def as_i_collection(self) -> list:
        ...

    @property
    def as_i_enumerable(self) -> collections.abc.Iterable:
        ...

    def __getitem__(self, key: int) -> ICustomXmlPart
        ...

    ...

class IDigitalSignature:
    '''Digital signature in signed file.'''
    @property
    def certificate(self) -> System.Security.Cryptography.X509Certificates.X509Certificate2:
        '''Certificate object that was used to sign the document.
                    Read-only :py:class:`System.Security.Cryptography.X509Certificates.X509Certificate2`.'''
        ...

    @property
    def is_valid(self) -> bool:
        ...

    @property
    def sign_time(self) -> DateTime:
        ...

    @property
    def comments(self) -> str:
        '''The purpose of signature.
                    Read/write :py:class:`str`.'''
        ...

    @comments.setter
    def comments(self, value: str):
        '''The purpose of signature.
                    Read/write :py:class:`str`.'''
        ...

    ...

class IDigitalSignatureCollection:
    '''Represents a collection of digital signatures attached to a document.'''
    def add(self, digital_signature: IDigitalSignature) -> None:
        '''Adds the signature at the end of collection.
        :param digital_signature: Signature to add.'''
        ...

    def remove_at(self, index: int) -> None:
        '''Removes the signature at the specified index.
        :param index: Index of the signature that should be deleted.'''
        ...

    def clear(self) -> None:
        '''Removes all signatures from collection.'''
        ...

    @property
    def as_i_collection(self) -> list:
        ...

    @property
    def as_i_enumerable(self) -> collections.abc.Iterable:
        ...

    def __getitem__(self, key: int) -> IDigitalSignature
        ...

    ...

class IDocumentProperties:
    '''Represents properties of a presentation.'''
    @overload
    def get_custom_property_value(self, name: str, value: Any) -> None:
        '''Gets a named boolean value from the custom properties.
        :param name: Name of the custom property to get
        :param value: Custom property value'''
        ...

    @overload
    def get_custom_property_value(self, name: str, value: Any) -> None:
        '''Gets a named integer value from the custom properties.
        :param name: Name of the custom property to get
        :param value: Custom property value'''
        ...

    @overload
    def get_custom_property_value(self, name: str, value: Any) -> None:
        '''Gets a named DateTime value from the custom properties.
        :param name: Name of the custom property to get
        :param value: Custom property value'''
        ...

    @overload
    def get_custom_property_value(self, name: str, value: Any) -> None:
        ...

    @overload
    def get_custom_property_value(self, name: str, value: Any) -> None:
        ...

    @overload
    def get_custom_property_value(self, name: str, value: Any) -> None:
        ...

    @overload
    def set_custom_property_value(self, name: str, value: bool) -> None:
        '''Sets a named boolean custom property.
        :param name: Name of the custom property to set
        :param value: Custom property value'''
        ...

    @overload
    def set_custom_property_value(self, name: str, value: int) -> None:
        '''Sets a named integer custom property.
        :param name: Name of the custom property to set
        :param value: Custom property value'''
        ...

    @overload
    def set_custom_property_value(self, name: str, value: DateTime) -> None:
        '''Sets a named DateTime custom property.
        :param name: Name of the custom property to set
        :param value: Custom property value'''
        ...

    @overload
    def set_custom_property_value(self, name: str, value: str) -> None:
        '''Sets a named string custom property.
        :param name: Name of the custom property to set
        :param value: Custom property value'''
        ...

    @overload
    def set_custom_property_value(self, name: str, value: float) -> None:
        '''Sets a named float custom property.
        :param name: Name of the custom property to set
        :param value: Custom property value'''
        ...

    @overload
    def set_custom_property_value(self, name: str, value: float) -> None:
        '''Sets a named double custom property.
        :param name: Name of the custom property to set
        :param value: Custom property value'''
        ...

    def get_custom_property_name(self, index: int) -> str:
        '''Return a custom property name at the specified index.
        :param index: The zero-based index of a custom property to get.
        :returns: Custom property name at the specified index.'''
        ...

    def remove_custom_property(self, name: str) -> bool:
        '''Remove a custom property associated with a specified name.
        :param name: Name of a custom property to remove.
        :returns: Return true if a property was removed, false otherwise.'''
        ...

    def contains_custom_property(self, name: str) -> bool:
        '''Check presents of a custom property with a specified name.
        :param name: Name of a custom property to check.
        :returns: Return true if property exists, false otherwise.'''
        ...

    def clear_custom_properties(self) -> None:
        '''Removes all custom properties.'''
        ...

    def clear_built_in_properties(self) -> None:
        '''Clears and sets default values for all builtIn properties.'''
        ...

    @property
    def app_version(self) -> str:
        ...

    @property
    def name_of_application(self) -> str:
        ...

    @name_of_application.setter
    def name_of_application(self, value: str):
        ...

    @property
    def company(self) -> str:
        '''Returns or sets the company property.
                    Read/write :py:class:`str`.'''
        ...

    @company.setter
    def company(self, value: str):
        '''Returns or sets the company property.
                    Read/write :py:class:`str`.'''
        ...

    @property
    def manager(self) -> str:
        '''Returns or sets the manager property.
                    Read/write :py:class:`str`.'''
        ...

    @manager.setter
    def manager(self, value: str):
        '''Returns or sets the manager property.
                    Read/write :py:class:`str`.'''
        ...

    @property
    def presentation_format(self) -> str:
        ...

    @presentation_format.setter
    def presentation_format(self, value: str):
        ...

    @property
    def shared_doc(self) -> bool:
        ...

    @shared_doc.setter
    def shared_doc(self, value: bool):
        ...

    @property
    def application_template(self) -> str:
        ...

    @application_template.setter
    def application_template(self, value: str):
        ...

    @property
    def total_editing_time(self) -> TimeSpan:
        ...

    @total_editing_time.setter
    def total_editing_time(self, value: TimeSpan):
        ...

    @property
    def title(self) -> str:
        '''Returns or sets the title of a presentation.
                    Read/write :py:class:`str`.'''
        ...

    @title.setter
    def title(self, value: str):
        '''Returns or sets the title of a presentation.
                    Read/write :py:class:`str`.'''
        ...

    @property
    def subject(self) -> str:
        '''Returns or sets the subject of a presentation.
                    Read/write :py:class:`str`.'''
        ...

    @subject.setter
    def subject(self, value: str):
        '''Returns or sets the subject of a presentation.
                    Read/write :py:class:`str`.'''
        ...

    @property
    def author(self) -> str:
        '''Returns or sets the author of a presentation.
                    Read/write :py:class:`str`.'''
        ...

    @author.setter
    def author(self, value: str):
        '''Returns or sets the author of a presentation.
                    Read/write :py:class:`str`.'''
        ...

    @property
    def keywords(self) -> str:
        '''Returns or sets the keywords of a presentation.
                    Read/write :py:class:`str`.'''
        ...

    @keywords.setter
    def keywords(self, value: str):
        '''Returns or sets the keywords of a presentation.
                    Read/write :py:class:`str`.'''
        ...

    @property
    def comments(self) -> str:
        '''Returns or sets the comments of a presentation.
                    Read/write :py:class:`str`.'''
        ...

    @comments.setter
    def comments(self, value: str):
        '''Returns or sets the comments of a presentation.
                    Read/write :py:class:`str`.'''
        ...

    @property
    def category(self) -> str:
        '''Returns or sets the category of a presentation.
                    Read/write :py:class:`str`.'''
        ...

    @category.setter
    def category(self, value: str):
        '''Returns or sets the category of a presentation.
                    Read/write :py:class:`str`.'''
        ...

    @property
    def created_time(self) -> DateTime:
        ...

    @created_time.setter
    def created_time(self, value: DateTime):
        ...

    @property
    def last_saved_time(self) -> DateTime:
        ...

    @last_saved_time.setter
    def last_saved_time(self, value: DateTime):
        ...

    @property
    def last_printed(self) -> DateTime:
        ...

    @last_printed.setter
    def last_printed(self, value: DateTime):
        ...

    @property
    def last_saved_by(self) -> str:
        ...

    @last_saved_by.setter
    def last_saved_by(self, value: str):
        ...

    @property
    def revision_number(self) -> int:
        ...

    @revision_number.setter
    def revision_number(self, value: int):
        ...

    @property
    def content_status(self) -> str:
        ...

    @content_status.setter
    def content_status(self, value: str):
        ...

    @property
    def content_type(self) -> str:
        ...

    @content_type.setter
    def content_type(self, value: str):
        ...

    @property
    def hyperlink_base(self) -> str:
        ...

    @hyperlink_base.setter
    def hyperlink_base(self, value: str):
        ...

    @property
    def scale_crop(self) -> bool:
        ...

    @scale_crop.setter
    def scale_crop(self, value: bool):
        ...

    @property
    def links_up_to_date(self) -> bool:
        ...

    @links_up_to_date.setter
    def links_up_to_date(self, value: bool):
        ...

    @property
    def hyperlinks_changed(self) -> bool:
        ...

    @hyperlinks_changed.setter
    def hyperlinks_changed(self, value: bool):
        ...

    @property
    def slides(self) -> int:
        '''Specifies the total number of slides in a presentation document.
                    Read-only :py:class:`int`.'''
        ...

    @property
    def hidden_slides(self) -> int:
        ...

    @property
    def notes(self) -> int:
        '''Specifies the number of slides in a presentation containing notes.
                    Read-only :py:class:`int`.'''
        ...

    @property
    def paragraphs(self) -> int:
        '''Specifies the total number of paragraphs found in a document if applicable.
                    Read-only :py:class:`int`.'''
        ...

    @property
    def words(self) -> int:
        '''Specifies the total number of words contained in a document.
                    Read-only :py:class:`int`.'''
        ...

    @property
    def multimedia_clips(self) -> int:
        ...

    @property
    def titles_of_parts(self) -> List[str]:
        ...

    @property
    def heading_pairs(self) -> List[IHeadingPair]:
        ...

    @property
    def count_of_custom_properties(self) -> int:
        ...

    ...

class IDrawingGuide:
    '''Represents an adjustable drawing guide.'''
    @property
    def orientation(self) -> Orientation:
        '''Returns or sets orientation of the drawing guide.
                    Read/write :py:enum:`aspose.slides.Orientation`.'''
        ...

    @orientation.setter
    def orientation(self, value: Orientation):
        '''Returns or sets orientation of the drawing guide.
                    Read/write :py:enum:`aspose.slides.Orientation`.'''
        ...

    @property
    def position(self) -> float:
        '''Returns or sets position of the drawing guide in points from the top, left corner of the slide.
                    Read/write :py:class:`float`.'''
        ...

    @position.setter
    def position(self, value: float):
        '''Returns or sets position of the drawing guide in points from the top, left corner of the slide.
                    Read/write :py:class:`float`.'''
        ...

    ...

class IDrawingGuidesCollection:
    '''Represents a collection of the adjustable drawing guides.'''
    def add(self, orientation: Orientation, position: float) -> IDrawingGuide:
        '''Adds the drawing guide at the end of the collection.
        :param orientation: Orientation of the drawing guide.
        :param position: Position of the the drawing guide in points.'''
        ...

    def remove_at(self, index: int) -> None:
        '''Removes the drawing guide at the specified index.
        :param index: Index of the drawing guide that should be deleted.'''
        ...

    def clear(self) -> None:
        '''Removes all elements from the collection.'''
        ...

    @property
    def count(self) -> int:
        '''Gets the number of all elements in the collection.
                    Read-only :py:class:`int`.'''
        ...

    def __getitem__(self, key: int) -> IDrawingGuide
        ...

    ...

class IEffectFormat:
    '''Represents effect properties of shape.'''
    def set_blur_effect(self, radius: float, grow: bool) -> None:
        '''Sets blur effect.
        :param radius: Radius.
        :param grow: Grow.'''
        ...

    def enable_fill_overlay_effect(self) -> None:
        '''Enables fill overlay effect.'''
        ...

    def enable_glow_effect(self) -> None:
        '''Enables glow effect.'''
        ...

    def enable_inner_shadow_effect(self) -> None:
        '''Enables inner shadow effect.'''
        ...

    def enable_outer_shadow_effect(self) -> None:
        '''Enables outer shadow effect.'''
        ...

    def enable_preset_shadow_effect(self) -> None:
        '''Enables preset shadows effect.'''
        ...

    def enable_reflection_effect(self) -> None:
        '''Enables reflection effect.'''
        ...

    def enable_soft_edge_effect(self) -> None:
        '''Enables soft edge effect.'''
        ...

    def disable_blur_effect(self) -> None:
        '''Disables blur effect.'''
        ...

    def disable_fill_overlay_effect(self) -> None:
        '''Disables fill overlay effect.'''
        ...

    def disable_glow_effect(self) -> None:
        '''Disable glow effect.'''
        ...

    def disable_inner_shadow_effect(self) -> None:
        '''Disables inner shadow effect.'''
        ...

    def disable_outer_shadow_effect(self) -> None:
        '''Disables outer shadow effect.'''
        ...

    def disable_preset_shadow_effect(self) -> None:
        '''Disables preset shadow effect.'''
        ...

    def disable_reflection_effect(self) -> None:
        '''Disables reflection effect.'''
        ...

    def disable_soft_edge_effect(self) -> None:
        '''Disables soft edge effect.'''
        ...

    def get_effective(self) -> IEffectFormatEffectiveData:
        '''Gets effective effect formatting data with the inheritance applied.
        :returns: A :py:class:`aspose.slides.IEffectFormatEffectiveData`.'''
        ...

    @property
    def is_no_effects(self) -> bool:
        ...

    @property
    def blur_effect(self) -> aspose.slides.effects.IBlur:
        ...

    @blur_effect.setter
    def blur_effect(self, value: aspose.slides.effects.IBlur):
        ...

    @property
    def fill_overlay_effect(self) -> aspose.slides.effects.IFillOverlay:
        ...

    @fill_overlay_effect.setter
    def fill_overlay_effect(self, value: aspose.slides.effects.IFillOverlay):
        ...

    @property
    def glow_effect(self) -> aspose.slides.effects.IGlow:
        ...

    @glow_effect.setter
    def glow_effect(self, value: aspose.slides.effects.IGlow):
        ...

    @property
    def inner_shadow_effect(self) -> aspose.slides.effects.IInnerShadow:
        ...

    @inner_shadow_effect.setter
    def inner_shadow_effect(self, value: aspose.slides.effects.IInnerShadow):
        ...

    @property
    def outer_shadow_effect(self) -> aspose.slides.effects.IOuterShadow:
        ...

    @outer_shadow_effect.setter
    def outer_shadow_effect(self, value: aspose.slides.effects.IOuterShadow):
        ...

    @property
    def preset_shadow_effect(self) -> aspose.slides.effects.IPresetShadow:
        ...

    @preset_shadow_effect.setter
    def preset_shadow_effect(self, value: aspose.slides.effects.IPresetShadow):
        ...

    @property
    def reflection_effect(self) -> aspose.slides.effects.IReflection:
        ...

    @reflection_effect.setter
    def reflection_effect(self, value: aspose.slides.effects.IReflection):
        ...

    @property
    def soft_edge_effect(self) -> aspose.slides.effects.ISoftEdge:
        ...

    @soft_edge_effect.setter
    def soft_edge_effect(self, value: aspose.slides.effects.ISoftEdge):
        ...

    @property
    def as_i_effect_param_source(self) -> IEffectParamSource:
        ...

    ...

class IEffectFormatEffectiveData:
    '''Imutable object which contains effective effect formatting properties.'''
    @property
    def is_no_effects(self) -> bool:
        ...

    @property
    def blur_effect(self) -> aspose.slides.effects.IBlurEffectiveData:
        ...

    @property
    def fill_overlay_effect(self) -> aspose.slides.effects.IFillOverlayEffectiveData:
        ...

    @property
    def glow_effect(self) -> aspose.slides.effects.IGlowEffectiveData:
        ...

    @property
    def inner_shadow_effect(self) -> aspose.slides.effects.IInnerShadowEffectiveData:
        ...

    @property
    def outer_shadow_effect(self) -> aspose.slides.effects.IOuterShadowEffectiveData:
        ...

    @property
    def preset_shadow_effect(self) -> aspose.slides.effects.IPresetShadowEffectiveData:
        ...

    @property
    def reflection_effect(self) -> aspose.slides.effects.IReflectionEffectiveData:
        ...

    @property
    def soft_edge_effect(self) -> aspose.slides.effects.ISoftEdgeEffectiveData:
        ...

    @property
    def as_i_effect_param_source(self) -> IEffectParamSource:
        ...

    ...

class IEffectParamSource:
    '''Auxiliary effect parameters interface.'''
    ...

class IField:
    '''Represents a field.'''
    @property
    def type(self) -> IFieldType:
        '''Returns or sets field's type.
                    Read/write :py:class:`aspose.slides.IFieldType`.'''
        ...

    @type.setter
    def type(self, value: IFieldType):
        '''Returns or sets field's type.
                    Read/write :py:class:`aspose.slides.IFieldType`.'''
        ...

    @property
    def as_i_slide_component(self) -> ISlideComponent:
        ...

    @property
    def slide(self) -> IBaseSlide:
        ...

    @property
    def as_i_presentation_component(self) -> IPresentationComponent:
        ...

    @property
    def presentation(self) -> IPresentation:
        ...

    ...

class IFieldType:
    '''Represents a type of field. 
                This value determines which text will be set to the field portion when it will be updated.'''
    @property
    def internal_string(self) -> str:
        ...

    @internal_string.setter
    def internal_string(self, value: str):
        ...

    ...

class IFillFormat:
    '''Represents a fill formatting options.'''
    def get_effective(self) -> IFillFormatEffectiveData:
        '''Gets effective fill formatting data with the inheritance applied.
        :returns: A :py:class:`aspose.slides.IFillFormatEffectiveData`.'''
        ...

    @property
    def fill_type(self) -> FillType:
        ...

    @fill_type.setter
    def fill_type(self, value: FillType):
        ...

    @property
    def solid_fill_color(self) -> IColorFormat:
        ...

    @property
    def gradient_format(self) -> IGradientFormat:
        ...

    @property
    def pattern_format(self) -> IPatternFormat:
        ...

    @property
    def picture_fill_format(self) -> IPictureFillFormat:
        ...

    @property
    def rotate_with_shape(self) -> NullableBool:
        ...

    @rotate_with_shape.setter
    def rotate_with_shape(self, value: NullableBool):
        ...

    @property
    def as_i_fill_param_source(self) -> IFillParamSource:
        ...

    ...

class IFillFormatEffectiveData:
    '''Immutable object which contains effective fill formatting properties.'''
    @property
    def fill_type(self) -> FillType:
        ...

    @property
    def solid_fill_color(self) -> aspose.pydrawing.Color:
        ...

    @property
    def gradient_format(self) -> IGradientFormatEffectiveData:
        ...

    @property
    def pattern_format(self) -> IPatternFormatEffectiveData:
        ...

    @property
    def picture_fill_format(self) -> IPictureFillFormatEffectiveData:
        ...

    @property
    def rotate_with_shape(self) -> bool:
        ...

    @property
    def as_i_fill_param_source(self) -> IFillParamSource:
        ...

    ...

class IFillParamSource:
    '''Auxiliary fill parameters interface.'''
    ...

class IFindResultCallback:
    '''Callback interface used to getting search text result.'''
    def found_result(self, text_frame: ITextFrame, source_text: str, found_text: str, text_position: int) -> None:
        '''Callback method that receives data about the found text.
        :param text_frame: The :py:class:`aspose.slides.ITextFrame` in which the text was found.
        :param source_text: The source text in which the text was found.
        :param found_text: The found text.
        :param text_position: The position of the found text.'''
        ...

    ...

class IFontData:
    '''Represents a font definition.'''
    def get_font_name(self, theme: aspose.slides.theme.IThemeEffectiveData) -> str:
        '''Returns the font name, replacing theme referrence with an actual font used.
        :param theme: Theme from which themed font name should be taken. Its up to caller to provide a correct value.
        :returns: Font name.'''
        ...

    @property
    def font_name(self) -> str:
        ...

    ...

class IFontDataFactory:
    '''FontData factory interface'''
    def create_font_data(self, font_name: str) -> IFontData:
        '''Creates FontData with specified font name.
        :param font_name: Font name
        :returns: FontData'''
        ...

    ...

class IFontFallBackRule:
    '''Represents font fallback rule'''
    @overload
    def add_fall_back_fonts(self, font_name: str) -> None:
        '''Adds a new font(s) to the list of FallBack fonts.
        :param font_name: Font's name or names (delimited by comma) for FallBack'''
        ...

    @overload
    def add_fall_back_fonts(self, font_names: List[str]) -> None:
        '''Adds a new fonts to the list of FallBack fonts.
        :param font_names: Font's name or names (delimited by comma) for FallBack'''
        ...

    @overload
    def to_array(self) -> List[str]:
        '''Creates and returns an array with all FallBack fonts for this rule.
        :returns: Array of :py:class:`str`'''
        ...

    @overload
    def to_array(self, start_index: int, count: int) -> List[str]:
        '''Creates and returns an array with all FallBack fonts from the specified range in list.
        :param start_index: An index of a first font to add.
        :param count: A number of fonts to add.
        :returns: Array of :py:class:`str`'''
        ...

    def clear(self) -> None:
        '''Removes all fonts from the list.'''
        ...

    def remove(self, font_name: str) -> None:
        '''Removes the first occurrence of a specific FallBack font from the list.
        :param font_name: The font's name to remove from the list.'''
        ...

    def remove_at(self, index: int) -> None:
        '''Removes the FallBack font at the specified index of the list.
        :param index: The zero-based index of the font to remove.'''
        ...

    def index_of(self, font_name: str) -> int:
        '''Returns an index of the specified rule in the collection.
        :param font_name: Font's name to find.
        :returns: Index of a font or -1 if font not found in list.'''
        ...

    @property
    def range_start_index(self) -> int:
        ...

    @property
    def range_end_index(self) -> int:
        ...

    @property
    def count(self) -> int:
        '''Gets the number of fonts actually defined for range.'''
        ...

    def __getitem__(self, key: int) -> str
        ...

    ...

class IFontFallBackRulesCollection:
    '''Represents a collection of FontFallBack rules, defined by user'''
    def add(self, source_rule: IFontFallBackRule) -> None:
        '''Add a new FallBack rule to the end of the collection.
        :param source_rule: Specified rule for adding'''
        ...

    def remove(self, target_rule: IFontFallBackRule) -> None:
        '''Removes the first occurrence of a specific FallBack rule from the collection.
        :param target_rule: The rule to remove from the collection.'''
        ...

    @property
    def as_i_collection(self) -> list:
        ...

    @property
    def as_i_enumerable(self) -> collections.abc.Iterable:
        ...

    def __getitem__(self, key: int) -> IFontFallBackRule
        ...

    ...

class IFontSources:
    '''Provides file and memory sources for external fonts.'''
    @property
    def font_folders(self) -> List[str]:
        ...

    @font_folders.setter
    def font_folders(self, value: List[str]):
        ...

    @property
    def memory_fonts(self) -> List[bytes]:
        ...

    @memory_fonts.setter
    def memory_fonts(self, value: List[bytes]):
        ...

    ...

class IFontSubstRule:
    '''Represents font subtituition information'''
    @property
    def source_font(self) -> IFontData:
        ...

    @property
    def dest_font(self) -> IFontData:
        ...

    @property
    def replace_font_condition(self) -> FontSubstCondition:
        ...

    ...

class IFontSubstRuleCollection:
    '''Represents collection of fonts substitution.'''
    def add(self, value: IFontSubstRule) -> None:
        '''Adds the new font substitution rule to the collection
        :param value: Font substitution rule :py:class:`aspose.slides.IFontSubstRule`'''
        ...

    def remove(self, value: IFontSubstRule) -> None:
        '''Removes the first occurrence of a specific object from the collection.
        :param value: The module to remove from the collection.'''
        ...

    @property
    def as_i_collection(self) -> list:
        ...

    @property
    def as_i_enumerable(self) -> collections.abc.Iterable:
        ...

    def __getitem__(self, key: int) -> IFontSubstRule
        ...

    ...

class IFonts:
    '''Represents fonts collection.'''
    @property
    def latin_font(self) -> IFontData:
        ...

    @latin_font.setter
    def latin_font(self, value: IFontData):
        ...

    @property
    def east_asian_font(self) -> IFontData:
        ...

    @east_asian_font.setter
    def east_asian_font(self, value: IFontData):
        ...

    @property
    def complex_script_font(self) -> IFontData:
        ...

    @complex_script_font.setter
    def complex_script_font(self, value: IFontData):
        ...

    ...

class IFontsEffectiveData:
    '''Immutable object which contains effective fonts set.'''
    @property
    def latin_font(self) -> IFontData:
        ...

    @property
    def east_asian_font(self) -> IFontData:
        ...

    @property
    def complex_script_font(self) -> IFontData:
        ...

    ...

class IFontsLoader:
    '''Class for loading custom fonts defined by user.
                Should be used before creating any presentation objects.'''
    ...

class IFontsManager:
    '''Manages fonts across the presentation.'''
    @overload
    def add_embedded_font(self, font_data: IFontData, embed_font_rule: aspose.slides.export.EmbedFontCharacters) -> None:
        '''Adds the embedded font.
        :param font_data: Font data object :py:class:`aspose.slides.IFontData`
        :param embed_font_rule: Embedded font rule :py:enum:`aspose.slides.export.EmbedFontCharacters`'''
        ...

    @overload
    def add_embedded_font(self, font_data: bytes, embed_font_rule: aspose.slides.export.EmbedFontCharacters) -> None:
        '''Adds the embedded font
        :param font_data: Font data :py:class:`int`[]
        :param embed_font_rule: Embedded font rule :py:enum:`aspose.slides.export.EmbedFontCharacters`'''
        ...

    @overload
    def replace_font(self, source_font: IFontData, dest_font: IFontData) -> None:
        '''Replace font in presentation
        :param source_font: Source font
        :param dest_font: Destination font'''
        ...

    @overload
    def replace_font(self, subst_rule: IFontSubstRule) -> None:
        '''Replace font in presentation using information provided in :py:class:`aspose.slides.IFontSubstRule`
        :param subst_rule: Font substitution info'''
        ...

    @overload
    def replace_font(self, subst_rules: IFontSubstRuleCollection) -> None:
        '''Replace font in presentation using information provided in collection of :py:class:`aspose.slides.IFontSubstRule`
        :param subst_rules: Font substitution info collection'''
        ...

    def get_fonts(self) -> List[IFontData]:
        '''Returns the fonts used in the presentation
        :returns: An array of fonts'''
        ...

    def get_substitutions(self) -> Iterable[FontSubstitutionInfo]:
        '''Gets the information about fonts that will be replaced on the presentation's rendering.
        :returns: Collection of all fonts substitution :py:class:`aspose.slides.FontSubstitutionInfo`.'''
        ...

    def get_embedded_fonts(self) -> List[IFontData]:
        '''Returns the fonts embedded in the presentation
        :returns: Embedded fonts :py:class:`aspose.slides.IFontData`[]'''
        ...

    def remove_embedded_font(self, font_data: IFontData) -> None:
        '''Removes the embedded font
        :param font_data: Font data object :py:class:`aspose.slides.IFontData`'''
        ...

    def get_font_bytes(self, font_data: IFontData, font_style: aspose.pydrawing.FontStyle) -> bytes:
        '''Retrieves the byte array representing the font data for a specified font style and font data.
        :param font_data: The font data object containing the information about the font :py:class:`aspose.slides.IFontData`.
        :param font_style: The style of the font for which the data is to be retrieved :py:class:`aspose.pydrawing.FontStyle`.
        :returns: A byte array containing the font data for the specified font style. If the font data or style is not found, returns None.'''
        ...

    def get_font_embedding_level(self, font_bytes: bytes, font_name: str) -> EmbeddingLevel:
        '''Determines the embedding level of a font from the given byte array and font name.
        :param font_bytes: The byte array containing the font data.
        :param font_name: The name of the font.
        :returns: The embedding level of the specified font.'''
        ...

    @property
    def font_subst_rule_list(self) -> IFontSubstRuleCollection:
        ...

    @font_subst_rule_list.setter
    def font_subst_rule_list(self, value: IFontSubstRuleCollection):
        ...

    @property
    def font_fall_back_rules_collection(self) -> IFontFallBackRulesCollection:
        ...

    @font_fall_back_rules_collection.setter
    def font_fall_back_rules_collection(self, value: IFontFallBackRulesCollection):
        ...

    ...

class IFormatFactory:
    '''Allows to create formats via COM interface.'''
    def create_portion_format(self) -> IPortionFormat:
        '''Creates new :py:class:`aspose.slides.IPortionFormat`.
        :returns: New portion format.'''
        ...

    def create_paragraph_format(self) -> IParagraphFormat:
        '''Creates new :py:class:`aspose.slides.IParagraphFormat`.
        :returns: New paragraph format.'''
        ...

    def create_text_frame_format(self) -> ITextFrameFormat:
        '''Creates new :py:class:`aspose.slides.ITextFrameFormat`.
        :returns: New text frame format.'''
        ...

    ...

class IGeometryPath:
    '''Represents geometry path of GeometryShape'''
    @overload
    def line_to(self, point: aspose.pydrawing.PointF) -> None:
        '''Adds line to the end of the path
        :param point: End point of the line'''
        ...

    @overload
    def line_to(self, x: float, y: float) -> None:
        '''Adds line to the end of the path
        :param x: X coordinate of the end point of the line
        :param y: Y coordinate of the end point of the line'''
        ...

    @overload
    def line_to(self, point: aspose.pydrawing.PointF, index: int) -> None:
        '''Adds line to the specified place of the path
        :param point: End point
        :param index: Index of segment in PathData'''
        ...

    @overload
    def line_to(self, x: float, y: float, index: int) -> None:
        '''Adds line to the specified place of the path
        :param x: X coordinate of the point
        :param y: Y coordinate of the point
        :param index: Index of segment in PathData'''
        ...

    @overload
    def cubic_bezier_to(self, point1: aspose.pydrawing.PointF, point2: aspose.pydrawing.PointF, point3: aspose.pydrawing.PointF) -> None:
        '''Adds cubic Bezier curve at the end the path
        :param point1: First direction point
        :param point2: Second direction point
        :param point3: End point'''
        ...

    @overload
    def cubic_bezier_to(self, x1: float, y1: float, x2: float, y2: float, x3: float, y3: float) -> None:
        '''Adds cubic Bezier curve at the end the path
        :param x1: X coordinate of first direction point
        :param y1: Y coordinate of first direction point
        :param x2: X coordinate of second direction point
        :param y2: Y coordinate of second direction point
        :param x3: X coordinate of end point
        :param y3: Y coordinate of end point'''
        ...

    @overload
    def cubic_bezier_to(self, point1: aspose.pydrawing.PointF, point2: aspose.pydrawing.PointF, point3: aspose.pydrawing.PointF, index: int) -> None:
        '''Adds cubic Bezier curve to the specified place of the path
        :param point1: First direction point
        :param point2: Second direction point
        :param point3: End point
        :param index: Index of segment in PathData'''
        ...

    @overload
    def cubic_bezier_to(self, x1: float, y1: float, x2: float, y2: float, x3: float, y3: float, index: int) -> None:
        '''Adds cubic Bezier curve to the specified place of the path
        :param x1: X coordinate of first direction point
        :param y1: Y coordinate of first direction point
        :param x2: X coordinate of second direction point
        :param y2: Y coordinate of second direction point
        :param x3: X coordinate of end point
        :param y3: Y coordinate of end point
        :param index: Index of segment in PathData'''
        ...

    @overload
    def quadratic_bezier_to(self, point1: aspose.pydrawing.PointF, point2: aspose.pydrawing.PointF) -> None:
        '''Adds quadratic Bezier curve at the end the path
        :param point1: Direction point
        :param point2: End point'''
        ...

    @overload
    def quadratic_bezier_to(self, x1: float, y1: float, x2: float, y2: float) -> None:
        '''Adds quadratic Bezier curve at the end the path
        :param x1: X coordinate of direction point
        :param y1: Y coordinate of direction point
        :param x2: X coordinate of end point
        :param y2: Y coordinate of end point'''
        ...

    @overload
    def quadratic_bezier_to(self, point1: aspose.pydrawing.PointF, point2: aspose.pydrawing.PointF, index: int) -> None:
        '''Adds quadratic Bezier curve to the specified place of the path
        :param point1: Direction point
        :param point2: End point
        :param index: Index of segment in PathData'''
        ...

    @overload
    def quadratic_bezier_to(self, x1: float, y1: float, x2: float, y2: float, index: int) -> None:
        '''Adds quadratic Bezier curve to the specified place of the path
        :param x1: X coordinate of direction point
        :param y1: Y coordinate of direction point
        :param x2: X coordinate of end point
        :param y2: Y coordinate of end point
        :param index: Index of segment in PathData'''
        ...

    @overload
    def move_to(self, point: aspose.pydrawing.PointF) -> None:
        '''Sets next point position.
        :param point: Point position'''
        ...

    @overload
    def move_to(self, x: float, y: float) -> None:
        '''Sets next point position.
        :param x: X coordinate of the point
        :param y: Y Coordinate of the point'''
        ...

    def remove_at(self, index: int) -> None:
        '''Removes segment at the specified index of the geometry path.'''
        ...

    def close_figure(self) -> None:
        '''Closes the current figure of this path'''
        ...

    def arc_to(self, width: float, heigth: float, start_angle: float, sweep_angle: float) -> None:
        '''Appends the specified arc to the path.
        :param width: Width of the rectangle
        :param heigth: Height of the rectangle
        :param start_angle: Start angle.
        :param sweep_angle: Sweep angle/'''
        ...

    @property
    def path_data(self) -> List[IPathSegment]:
        ...

    @property
    def fill_mode(self) -> PathFillModeType:
        ...

    @fill_mode.setter
    def fill_mode(self, value: PathFillModeType):
        ...

    @property
    def stroke(self) -> bool:
        '''Sets stroke appearance'''
        ...

    @stroke.setter
    def stroke(self, value: bool):
        '''Sets stroke appearance'''
        ...

    ...

class IGeometryShape:
    '''Represents the parent class for all geometric shapes.'''
    @overload
    def get_thumbnail(self) -> aspose.pydrawing.Bitmap:
        ...

    @overload
    def get_thumbnail(self, bounds: ShapeThumbnailBounds, scale_x: float, scale_y: float) -> aspose.pydrawing.Bitmap:
        ...

    @overload
    def get_image(self) -> IImage:
        ...

    @overload
    def get_image(self, bounds: ShapeThumbnailBounds, scale_x: float, scale_y: float) -> IImage:
        ...

    @overload
    def write_as_svg(self, stream: io.RawIOBase) -> None:
        ...

    @overload
    def write_as_svg(self, stream: io.RawIOBase, svg_options: aspose.slides.export.ISVGOptions) -> None:
        ...

    def get_geometry_paths(self) -> List[IGeometryPath]:
        '''Returns the copy of path of the geometry shape. Coordinates are relative to the left top corner of the shape.
        :returns: Array of :py:class:`aspose.slides.IGeometryPath`'''
        ...

    def set_geometry_path(self, geometry_path: IGeometryPath) -> None:
        '''Updates shape geometry from :py:class:`aspose.slides.IGeometryPath` object. Coordinates must be relative to the left
                     top corner of the shape.
                     Changes the type of the shape (:py:attr:`aspose.slides.IGeometryShape.shape_type`) to :py:attr:`aspose.slides.ShapeType.CUSTOM`.
        :param geometry_path: Geometry path'''
        ...

    def set_geometry_paths(self, geometry_paths: List[IGeometryPath]) -> None:
        '''Updates shape geometry from array of :py:class:`aspose.slides.IGeometryPath`. Coordinates must be relative to the left
                     top corner of the shape.
                     Changes the type of the shape (:py:attr:`aspose.slides.IGeometryShape.shape_type`) to :py:attr:`aspose.slides.ShapeType.CUSTOM`.
        :param geometry_paths: Array geometry paths'''
        ...

    def create_shape_elements(self) -> List[IShapeElement]:
        '''Creates and returns array of shape's elements.
        :returns: Array of :py:class:`aspose.slides.IShapeElement`'''
        ...

    def add_placeholder(self, placeholder_to_copy_from: IPlaceholder) -> IPlaceholder:
        ...

    def remove_placeholder(self) -> None:
        ...

    def get_base_placeholder(self) -> IShape:
        ...

    @property
    def shape_style(self) -> IShapeStyle:
        ...

    @property
    def shape_type(self) -> ShapeType:
        ...

    @shape_type.setter
    def shape_type(self, value: ShapeType):
        ...

    @property
    def adjustments(self) -> IAdjustValueCollection:
        '''Returns a collection of shape's adjustment values.
                    Read-only :py:class:`aspose.slides.IAdjustValueCollection`.'''
        ...

    @property
    def as_i_shape(self) -> IShape:
        ...

    @property
    def is_text_holder(self) -> bool:
        ...

    @property
    def placeholder(self) -> IPlaceholder:
        ...

    @property
    def custom_data(self) -> ICustomData:
        ...

    @property
    def raw_frame(self) -> IShapeFrame:
        ...

    @raw_frame.setter
    def raw_frame(self, value: IShapeFrame):
        ...

    @property
    def frame(self) -> IShapeFrame:
        ...

    @frame.setter
    def frame(self, value: IShapeFrame):
        ...

    @property
    def line_format(self) -> ILineFormat:
        ...

    @property
    def three_d_format(self) -> IThreeDFormat:
        ...

    @property
    def effect_format(self) -> IEffectFormat:
        ...

    @property
    def fill_format(self) -> IFillFormat:
        ...

    @property
    def hidden(self) -> bool:
        ...

    @hidden.setter
    def hidden(self, value: bool):
        ...

    @property
    def z_order_position(self) -> int:
        ...

    @property
    def connection_site_count(self) -> int:
        ...

    @property
    def rotation(self) -> float:
        ...

    @rotation.setter
    def rotation(self, value: float):
        ...

    @property
    def x(self) -> float:
        ...

    @x.setter
    def x(self, value: float):
        ...

    @property
    def y(self) -> float:
        ...

    @y.setter
    def y(self, value: float):
        ...

    @property
    def width(self) -> float:
        ...

    @width.setter
    def width(self, value: float):
        ...

    @property
    def height(self) -> float:
        ...

    @height.setter
    def height(self, value: float):
        ...

    @property
    def alternative_text(self) -> str:
        ...

    @alternative_text.setter
    def alternative_text(self, value: str):
        ...

    @property
    def alternative_text_title(self) -> str:
        ...

    @alternative_text_title.setter
    def alternative_text_title(self, value: str):
        ...

    @property
    def name(self) -> str:
        ...

    @name.setter
    def name(self, value: str):
        ...

    @property
    def is_decorative(self) -> bool:
        ...

    @is_decorative.setter
    def is_decorative(self, value: bool):
        ...

    @property
    def shape_lock(self) -> IBaseShapeLock:
        ...

    @property
    def unique_id(self) -> int:
        ...

    @property
    def office_interop_shape_id(self) -> int:
        ...

    @property
    def is_grouped(self) -> bool:
        ...

    @property
    def black_white_mode(self) -> BlackWhiteMode:
        ...

    @black_white_mode.setter
    def black_white_mode(self, value: BlackWhiteMode):
        ...

    @property
    def parent_group(self) -> IGroupShape:
        ...

    @property
    def as_i_hyperlink_container(self) -> IHyperlinkContainer:
        ...

    @property
    def as_i_slide_component(self) -> ISlideComponent:
        ...

    @property
    def slide(self) -> IBaseSlide:
        ...

    @property
    def as_i_presentation_component(self) -> IPresentationComponent:
        ...

    @property
    def presentation(self) -> IPresentation:
        ...

    @property
    def hyperlink_click(self) -> IHyperlink:
        ...

    @hyperlink_click.setter
    def hyperlink_click(self, value: IHyperlink):
        ...

    @property
    def hyperlink_mouse_over(self) -> IHyperlink:
        ...

    @hyperlink_mouse_over.setter
    def hyperlink_mouse_over(self, value: IHyperlink):
        ...

    @property
    def hyperlink_manager(self) -> IHyperlinkManager:
        ...

    ...

class IGlobalLayoutSlideCollection:
    '''Represents a collection of all layout slides in presentation.
                Extends ILayoutSlideCollection interface with methods for adding/cloning 
                layout slides in context of uniting of the individual collections of master's layout slides.'''
    @overload
    def add_clone(self, source_layout: ILayoutSlide) -> ILayoutSlide:
        '''Adds a copy of a specified layout slide to the presentation.
        :param source_layout: Slide to clone.
        :returns: Added slide.'''
        ...

    @overload
    def add_clone(self, source_layout: ILayoutSlide, dest_master: IMasterSlide) -> ILayoutSlide:
        '''Adds a copy of a specified layout slide to the presentation.
        :param source_layout: Slide to clone.
        :param dest_master: Master slide for a new layout.
        :returns: Added slide.'''
        ...

    def add(self, master: IMasterSlide, layout_type: SlideLayoutType, layout_name: str) -> ILayoutSlide:
        '''Adds a new layout slide to the presentation.
        :param master: Master slide for a new layout.
        :param layout_type: Layout type for a new layout.
                    Supported layout types: Title, TitleOnly, Blank, TitleAndObject, VerticalText, VerticalTitleAndText, TwoObjects, SectionHeader, TwoTextAndTwoObjects, TitleObjectAndCaption, PictureAndCaption, Custom.
                    Other layout types are not supported now: Text, TwoColumnText, Table, TextAndChart, ChartAndText, Diagram, Chart, TextAndClipArt, ClipArtAndText, TextAndObject, ObjectAndText, Object, TextAndMedia, MediaAndText, ObjectOverText, TextOverObject, TextAndTwoObjects, TwoObjectsAndText, TwoObjectsOverText, FourObjects, ClipArtAndVerticalText, VerticalTitleAndTextOverChart, ObjectAndTwoObject, TwoObjectsAndObject.
        :param layout_name: Name for a new layout. If passed name is already in use the ArgumentException will be thrown.
                    If None parameter is passed then name genarated atomatically in regards to passed layout type 
                    (for example "Title Slide" or "1_Title Slide", "2_..", etc.).
        :returns: Added slide.'''
        ...

    def get_by_type(self, type: SlideLayoutType) -> ILayoutSlide:
        ...

    def remove(self, value: ILayoutSlide) -> None:
        ...

    def remove_unused(self) -> None:
        ...

    @property
    def as_i_layout_slide_collection(self) -> ILayoutSlideCollection:
        ...

    @property
    def as_i_collection(self) -> list:
        ...

    @property
    def as_i_enumerable(self) -> collections.abc.Iterable:
        ...

    def __getitem__(self, key: int) -> ILayoutSlide
        ...

    ...

class IGradientFormat:
    '''Represent a gradient format.'''
    @property
    def tile_flip(self) -> TileFlip:
        ...

    @tile_flip.setter
    def tile_flip(self, value: TileFlip):
        ...

    @property
    def gradient_direction(self) -> GradientDirection:
        ...

    @gradient_direction.setter
    def gradient_direction(self, value: GradientDirection):
        ...

    @property
    def linear_gradient_angle(self) -> float:
        ...

    @linear_gradient_angle.setter
    def linear_gradient_angle(self, value: float):
        ...

    @property
    def linear_gradient_scaled(self) -> NullableBool:
        ...

    @linear_gradient_scaled.setter
    def linear_gradient_scaled(self, value: NullableBool):
        ...

    @property
    def gradient_shape(self) -> GradientShape:
        ...

    @gradient_shape.setter
    def gradient_shape(self, value: GradientShape):
        ...

    @property
    def gradient_stops(self) -> IGradientStopCollection:
        ...

    @property
    def as_i_fill_param_source(self) -> IFillParamSource:
        ...

    ...

class IGradientFormatEffectiveData:
    '''Imutable object which contains effective gradient filling properties.'''
    @property
    def tile_flip(self) -> TileFlip:
        ...

    @property
    def gradient_direction(self) -> GradientDirection:
        ...

    @property
    def linear_gradient_angle(self) -> float:
        ...

    @property
    def linear_gradient_scaled(self) -> bool:
        ...

    @property
    def gradient_shape(self) -> GradientShape:
        ...

    @property
    def gradient_stops(self) -> IGradientStopCollectionEffectiveData:
        ...

    @property
    def as_i_fill_param_source(self) -> IFillParamSource:
        ...

    ...

class IGradientStop:
    '''Represents a gradient format.'''
    @property
    def position(self) -> float:
        '''Returns or sets the position (0..1) of a gradient stop.
                    Read/write :py:class:`float`.'''
        ...

    @position.setter
    def position(self, value: float):
        '''Returns or sets the position (0..1) of a gradient stop.
                    Read/write :py:class:`float`.'''
        ...

    @property
    def color(self) -> IColorFormat:
        '''Returns the color of a gradient stop.
                    Read-only :py:class:`aspose.slides.IColorFormat`.'''
        ...

    ...

class IGradientStopCollection:
    '''Represnts a collection of gradient stops.'''
    @overload
    def add(self, position: float, color: aspose.pydrawing.Color) -> IGradientStop:
        '''Creates the new gradient stop and adds it to the end of collection.
        :param position: Position of the new gradient stop.
        :param color: Color of the new radient stop.
        :returns: Index of the new gradient stop in the collection.'''
        ...

    @overload
    def add(self, position: float, preset_color: PresetColor) -> IGradientStop:
        '''Creates the new gradient stop and adds it to the end of collection.
        :param position: Position of the new gradient stop.
        :param preset_color: Color of the new radient stop.
        :returns: Index of the new gradient stop in the collection.'''
        ...

    @overload
    def add(self, position: float, scheme_color: SchemeColor) -> IGradientStop:
        '''Creates the new gradient stop and adds it to the end of collection.
        :param position: Position of the new gradient stop.
        :param scheme_color: Color of the new radient stop.
        :returns: Index of the new gradient stop in the collection.'''
        ...

    @overload
    def insert(self, index: int, position: float, color: aspose.pydrawing.Color) -> None:
        '''Creates the new gradient stop and inserts it at the specified index to the collection.
        :param index: Index in the collection where new gradient stop will be inserted.
        :param position: Position of the new gradient stop.
        :param color: Color of the new radient stop.'''
        ...

    @overload
    def insert(self, index: int, position: float, preset_color: PresetColor) -> None:
        '''Creates the new gradient stop and inserts it at the specified index to the collection.
        :param index: Index in the collection where new gradient stop will be inserted.
        :param position: Position of the new gradient stop.
        :param preset_color: Color of the new radient stop.'''
        ...

    @overload
    def insert(self, index: int, position: float, scheme_color: SchemeColor) -> None:
        '''Creates the new gradient stop and inserts it at the specified index to the collection.
        :param index: Index in the collection where new gradient stop will be inserted.
        :param position: Position of the new gradient stop.
        :param scheme_color: Color of the new radient stop.'''
        ...

    def remove_at(self, index: int) -> None:
        '''Removes a gradient stop at the specified index.
        :param index: Index of a gradient stop that should be deleted.'''
        ...

    def clear(self) -> None:
        '''Removes all gradient stops from a collection.'''
        ...

    @property
    def as_i_collection(self) -> list:
        ...

    @property
    def as_i_enumerable(self) -> collections.abc.Iterable:
        ...

    def __getitem__(self, key: int) -> IGradientStop
        ...

    ...

class IGradientStopCollectionEffectiveData:
    '''Represents a collection of GradientStopDataEx objects.'''
    @property
    def as_i_collection(self) -> list:
        ...

    @property
    def as_i_enumerable(self) -> collections.abc.Iterable:
        ...

    def __getitem__(self, key: int) -> IGradientStopEffectiveData
        ...

    ...

class IGradientStopEffectiveData:
    '''immutable object which represents a gradient stop.'''
    @property
    def position(self) -> float:
        '''Returns the position (0..1) of a gradient stop.
                    Read-only :py:class:`float`.'''
        ...

    @property
    def color(self) -> aspose.pydrawing.Color:
        '''Returns the color of a gradient stop.
                    Read-only :py:class:`aspose.pydrawing.Color`.'''
        ...

    ...

class IGraphicalObject:
    '''Represents abstract graphical object.'''
    @overload
    def get_thumbnail(self) -> aspose.pydrawing.Bitmap:
        ...

    @overload
    def get_thumbnail(self, bounds: ShapeThumbnailBounds, scale_x: float, scale_y: float) -> aspose.pydrawing.Bitmap:
        ...

    @overload
    def get_image(self) -> IImage:
        ...

    @overload
    def get_image(self, bounds: ShapeThumbnailBounds, scale_x: float, scale_y: float) -> IImage:
        ...

    @overload
    def write_as_svg(self, stream: io.RawIOBase) -> None:
        ...

    @overload
    def write_as_svg(self, stream: io.RawIOBase, svg_options: aspose.slides.export.ISVGOptions) -> None:
        ...

    def add_placeholder(self, placeholder_to_copy_from: IPlaceholder) -> IPlaceholder:
        ...

    def remove_placeholder(self) -> None:
        ...

    def get_base_placeholder(self) -> IShape:
        ...

    @property
    def shape_lock(self) -> IGraphicalObjectLock:
        ...

    @property
    def graphical_object_lock(self) -> IGraphicalObjectLock:
        ...

    @property
    def as_i_shape(self) -> IShape:
        ...

    @property
    def is_text_holder(self) -> bool:
        ...

    @property
    def placeholder(self) -> IPlaceholder:
        ...

    @property
    def custom_data(self) -> ICustomData:
        ...

    @property
    def raw_frame(self) -> IShapeFrame:
        ...

    @raw_frame.setter
    def raw_frame(self, value: IShapeFrame):
        ...

    @property
    def frame(self) -> IShapeFrame:
        ...

    @frame.setter
    def frame(self, value: IShapeFrame):
        ...

    @property
    def line_format(self) -> ILineFormat:
        ...

    @property
    def three_d_format(self) -> IThreeDFormat:
        ...

    @property
    def effect_format(self) -> IEffectFormat:
        ...

    @property
    def fill_format(self) -> IFillFormat:
        ...

    @property
    def hidden(self) -> bool:
        ...

    @hidden.setter
    def hidden(self, value: bool):
        ...

    @property
    def z_order_position(self) -> int:
        ...

    @property
    def connection_site_count(self) -> int:
        ...

    @property
    def rotation(self) -> float:
        ...

    @rotation.setter
    def rotation(self, value: float):
        ...

    @property
    def x(self) -> float:
        ...

    @x.setter
    def x(self, value: float):
        ...

    @property
    def y(self) -> float:
        ...

    @y.setter
    def y(self, value: float):
        ...

    @property
    def width(self) -> float:
        ...

    @width.setter
    def width(self, value: float):
        ...

    @property
    def height(self) -> float:
        ...

    @height.setter
    def height(self, value: float):
        ...

    @property
    def alternative_text(self) -> str:
        ...

    @alternative_text.setter
    def alternative_text(self, value: str):
        ...

    @property
    def alternative_text_title(self) -> str:
        ...

    @alternative_text_title.setter
    def alternative_text_title(self, value: str):
        ...

    @property
    def name(self) -> str:
        ...

    @name.setter
    def name(self, value: str):
        ...

    @property
    def is_decorative(self) -> bool:
        ...

    @is_decorative.setter
    def is_decorative(self, value: bool):
        ...

    @property
    def unique_id(self) -> int:
        ...

    @property
    def office_interop_shape_id(self) -> int:
        ...

    @property
    def is_grouped(self) -> bool:
        ...

    @property
    def black_white_mode(self) -> BlackWhiteMode:
        ...

    @black_white_mode.setter
    def black_white_mode(self, value: BlackWhiteMode):
        ...

    @property
    def parent_group(self) -> IGroupShape:
        ...

    @property
    def as_i_hyperlink_container(self) -> IHyperlinkContainer:
        ...

    @property
    def as_i_slide_component(self) -> ISlideComponent:
        ...

    @property
    def slide(self) -> IBaseSlide:
        ...

    @property
    def as_i_presentation_component(self) -> IPresentationComponent:
        ...

    @property
    def presentation(self) -> IPresentation:
        ...

    @property
    def hyperlink_click(self) -> IHyperlink:
        ...

    @hyperlink_click.setter
    def hyperlink_click(self, value: IHyperlink):
        ...

    @property
    def hyperlink_mouse_over(self) -> IHyperlink:
        ...

    @hyperlink_mouse_over.setter
    def hyperlink_mouse_over(self, value: IHyperlink):
        ...

    @property
    def hyperlink_manager(self) -> IHyperlinkManager:
        ...

    ...

class IGraphicalObjectLock:
    '''Determines which operations are disabled on the parent GraphicalObjectEx.'''
    @property
    def grouping_locked(self) -> bool:
        ...

    @grouping_locked.setter
    def grouping_locked(self, value: bool):
        ...

    @property
    def drilldown_locked(self) -> bool:
        ...

    @drilldown_locked.setter
    def drilldown_locked(self, value: bool):
        ...

    @property
    def select_locked(self) -> bool:
        ...

    @select_locked.setter
    def select_locked(self, value: bool):
        ...

    @property
    def aspect_ratio_locked(self) -> bool:
        ...

    @aspect_ratio_locked.setter
    def aspect_ratio_locked(self, value: bool):
        ...

    @property
    def position_locked(self) -> bool:
        ...

    @position_locked.setter
    def position_locked(self, value: bool):
        ...

    @property
    def size_locked(self) -> bool:
        ...

    @size_locked.setter
    def size_locked(self, value: bool):
        ...

    @property
    def as_i_base_shape_lock(self) -> IBaseShapeLock:
        ...

    @property
    def no_locks(self) -> bool:
        ...

    ...

class IGroupShape:
    '''Represents a group of shapes on a slide.'''
    @overload
    def get_thumbnail(self) -> aspose.pydrawing.Bitmap:
        ...

    @overload
    def get_thumbnail(self, bounds: ShapeThumbnailBounds, scale_x: float, scale_y: float) -> aspose.pydrawing.Bitmap:
        ...

    @overload
    def get_image(self) -> IImage:
        ...

    @overload
    def get_image(self, bounds: ShapeThumbnailBounds, scale_x: float, scale_y: float) -> IImage:
        ...

    @overload
    def write_as_svg(self, stream: io.RawIOBase) -> None:
        ...

    @overload
    def write_as_svg(self, stream: io.RawIOBase, svg_options: aspose.slides.export.ISVGOptions) -> None:
        ...

    def add_placeholder(self, placeholder_to_copy_from: IPlaceholder) -> IPlaceholder:
        ...

    def remove_placeholder(self) -> None:
        ...

    def get_base_placeholder(self) -> IShape:
        ...

    @property
    def shape_lock(self) -> IGroupShapeLock:
        ...

    @property
    def group_shape_lock(self) -> IGroupShapeLock:
        ...

    @property
    def shapes(self) -> IShapeCollection:
        '''Returns the collection of shapes inside the group.
                    Read-only :py:class:`aspose.slides.IShapeCollection`.'''
        ...

    @property
    def as_i_shape(self) -> IShape:
        ...

    @property
    def is_text_holder(self) -> bool:
        ...

    @property
    def placeholder(self) -> IPlaceholder:
        ...

    @property
    def custom_data(self) -> ICustomData:
        ...

    @property
    def raw_frame(self) -> IShapeFrame:
        ...

    @raw_frame.setter
    def raw_frame(self, value: IShapeFrame):
        ...

    @property
    def frame(self) -> IShapeFrame:
        ...

    @frame.setter
    def frame(self, value: IShapeFrame):
        ...

    @property
    def line_format(self) -> ILineFormat:
        ...

    @property
    def three_d_format(self) -> IThreeDFormat:
        ...

    @property
    def effect_format(self) -> IEffectFormat:
        ...

    @property
    def fill_format(self) -> IFillFormat:
        ...

    @property
    def hidden(self) -> bool:
        ...

    @hidden.setter
    def hidden(self, value: bool):
        ...

    @property
    def z_order_position(self) -> int:
        ...

    @property
    def connection_site_count(self) -> int:
        ...

    @property
    def rotation(self) -> float:
        ...

    @rotation.setter
    def rotation(self, value: float):
        ...

    @property
    def x(self) -> float:
        ...

    @x.setter
    def x(self, value: float):
        ...

    @property
    def y(self) -> float:
        ...

    @y.setter
    def y(self, value: float):
        ...

    @property
    def width(self) -> float:
        ...

    @width.setter
    def width(self, value: float):
        ...

    @property
    def height(self) -> float:
        ...

    @height.setter
    def height(self, value: float):
        ...

    @property
    def alternative_text(self) -> str:
        ...

    @alternative_text.setter
    def alternative_text(self, value: str):
        ...

    @property
    def alternative_text_title(self) -> str:
        ...

    @alternative_text_title.setter
    def alternative_text_title(self, value: str):
        ...

    @property
    def name(self) -> str:
        ...

    @name.setter
    def name(self, value: str):
        ...

    @property
    def is_decorative(self) -> bool:
        ...

    @is_decorative.setter
    def is_decorative(self, value: bool):
        ...

    @property
    def unique_id(self) -> int:
        ...

    @property
    def office_interop_shape_id(self) -> int:
        ...

    @property
    def is_grouped(self) -> bool:
        ...

    @property
    def black_white_mode(self) -> BlackWhiteMode:
        ...

    @black_white_mode.setter
    def black_white_mode(self, value: BlackWhiteMode):
        ...

    @property
    def parent_group(self) -> IGroupShape:
        ...

    @property
    def as_i_hyperlink_container(self) -> IHyperlinkContainer:
        ...

    @property
    def as_i_slide_component(self) -> ISlideComponent:
        ...

    @property
    def slide(self) -> IBaseSlide:
        ...

    @property
    def as_i_presentation_component(self) -> IPresentationComponent:
        ...

    @property
    def presentation(self) -> IPresentation:
        ...

    @property
    def hyperlink_click(self) -> IHyperlink:
        ...

    @hyperlink_click.setter
    def hyperlink_click(self, value: IHyperlink):
        ...

    @property
    def hyperlink_mouse_over(self) -> IHyperlink:
        ...

    @hyperlink_mouse_over.setter
    def hyperlink_mouse_over(self, value: IHyperlink):
        ...

    @property
    def hyperlink_manager(self) -> IHyperlinkManager:
        ...

    ...

class IGroupShapeLock:
    '''Determines which operations are disabled on the parent GroupShape.'''
    @property
    def grouping_locked(self) -> bool:
        ...

    @grouping_locked.setter
    def grouping_locked(self, value: bool):
        ...

    @property
    def ungrouping_locked(self) -> bool:
        ...

    @ungrouping_locked.setter
    def ungrouping_locked(self, value: bool):
        ...

    @property
    def select_locked(self) -> bool:
        ...

    @select_locked.setter
    def select_locked(self, value: bool):
        ...

    @property
    def rotation_locked(self) -> bool:
        ...

    @rotation_locked.setter
    def rotation_locked(self, value: bool):
        ...

    @property
    def aspect_ratio_locked(self) -> bool:
        ...

    @aspect_ratio_locked.setter
    def aspect_ratio_locked(self, value: bool):
        ...

    @property
    def position_locked(self) -> bool:
        ...

    @position_locked.setter
    def position_locked(self, value: bool):
        ...

    @property
    def size_locked(self) -> bool:
        ...

    @size_locked.setter
    def size_locked(self, value: bool):
        ...

    @property
    def as_i_base_shape_lock(self) -> IBaseShapeLock:
        ...

    @property
    def no_locks(self) -> bool:
        ...

    ...

class IHeadingPair:
    '''Represents a 'Heading pair' property of the document. 
                It indicates the group name of document parts and the number of parts in group.'''
    @property
    def name(self) -> str:
        '''Returns the group name of document parts.
                    Read-only :py:class:`str`.'''
        ...

    @property
    def count(self) -> int:
        '''Returns the number of parts in group.
                    Read-only :py:class:`int`.'''
        ...

    ...

class IHyperlink:
    '''Represents a hyperlink.'''
    def equals(self, hlink: IHyperlink) -> bool:
        '''Determines whether the two Hyperlink instances are equal.
        :param hlink: The Hyperlink to compare with the current Hyperlink.
        :returns: **true** if the specified Hyperlink is equal to the current Hyperlink; otherwise, **false**.'''
        ...

    @property
    def action_type(self) -> HyperlinkActionType:
        ...

    @property
    def external_url(self) -> str:
        ...

    @property
    def external_url_original(self) -> str:
        ...

    @property
    def target_slide(self) -> ISlide:
        ...

    @property
    def target_frame(self) -> str:
        ...

    @target_frame.setter
    def target_frame(self, value: str):
        ...

    @property
    def tooltip(self) -> str:
        '''Returns the string which may be surfaced in a user interface
                    as associated with the parent hyperlink.
                    Read/write :py:class:`str`.'''
        ...

    @tooltip.setter
    def tooltip(self, value: str):
        '''Returns the string which may be surfaced in a user interface
                    as associated with the parent hyperlink.
                    Read/write :py:class:`str`.'''
        ...

    @property
    def history(self) -> bool:
        '''Determines whether the target of the parent hyperlink shall be added
                    to a list of viewed hyperlinks when it is invoked.
                    Read/write :py:class:`bool`.'''
        ...

    @history.setter
    def history(self, value: bool):
        '''Determines whether the target of the parent hyperlink shall be added
                    to a list of viewed hyperlinks when it is invoked.
                    Read/write :py:class:`bool`.'''
        ...

    @property
    def highlight_click(self) -> bool:
        ...

    @highlight_click.setter
    def highlight_click(self, value: bool):
        ...

    @property
    def stop_sound_on_click(self) -> bool:
        ...

    @stop_sound_on_click.setter
    def stop_sound_on_click(self, value: bool):
        ...

    @property
    def sound(self) -> IAudio:
        '''Represents the playing sound of the hyperlink.
                    Read/write :py:class:`aspose.slides.IAudio`.'''
        ...

    @sound.setter
    def sound(self, value: IAudio):
        '''Represents the playing sound of the hyperlink.
                    Read/write :py:class:`aspose.slides.IAudio`.'''
        ...

    @property
    def color_source(self) -> HyperlinkColorSource:
        ...

    @color_source.setter
    def color_source(self, value: HyperlinkColorSource):
        ...

    ...

class IHyperlinkContainer:
    '''Represents hyperlink object.'''
    @property
    def hyperlink_click(self) -> IHyperlink:
        ...

    @hyperlink_click.setter
    def hyperlink_click(self, value: IHyperlink):
        ...

    @property
    def hyperlink_mouse_over(self) -> IHyperlink:
        ...

    @hyperlink_mouse_over.setter
    def hyperlink_mouse_over(self, value: IHyperlink):
        ...

    @property
    def hyperlink_manager(self) -> IHyperlinkManager:
        ...

    ...

class IHyperlinkManager:
    '''Provide hyperlinks management (adding, removing).'''
    def set_external_hyperlink_click(self, url: str) -> IHyperlink:
        '''Set external hyperlink on click.
        :param url: Hyperlink URL.
        :returns: Hyperlink object :py:class:`aspose.slides.IHyperlink`'''
        ...

    def set_internal_hyperlink_click(self, target_slide: ISlide) -> IHyperlink:
        '''Sets internal hyperlink on click.
        :param target_slide: Target slide.
        :returns: Hyperlink.'''
        ...

    def remove_hyperlink_click(self) -> None:
        '''Removes hyperlink on click.'''
        ...

    def set_external_hyperlink_mouse_over(self, url: str) -> IHyperlink:
        '''Sets external hyperlink mouse over.
        :param url: Hyperlink URL.
        :returns: Hyperlink.'''
        ...

    def set_internal_hyperlink_mouse_over(self, target_slide: ISlide) -> IHyperlink:
        '''Sets internal hyperlink mouse over.
        :param target_slide: Target slide.
        :returns: Hyperlink.'''
        ...

    def remove_hyperlink_mouse_over(self) -> None:
        '''Removes hyperlink mouse over.'''
        ...

    def set_macro_hyperlink_click(self, macro_name: str) -> IHyperlink:
        '''Set Macro hyperlink on a click.
        :param macro_name: Name of the macro
        :returns: Hyperlink object :py:class:`aspose.slides.IHyperlink`'''
        ...

    ...

class IHyperlinkQueries:
    '''Provide easy access to contained hyperlinks.'''
    def get_hyperlink_clicks(self) -> List[IHyperlinkContainer]:
        '''Get all IHyperlinkContainer subobjects that contain not None HyperlinkClick.
                    With given IHyperlinkContainer object you can manage its hyperlink (read, update or remove). See IHyperlinkContainer interface.
        :returns: All IHyperlinkContainer subobjects that contain not None HyperlinkClick'''
        ...

    def get_hyperlink_mouse_overs(self) -> List[IHyperlinkContainer]:
        '''Get all IHyperlinkContainer subobjects that contain not None HyperlinkMouseOver.
                    With given IHyperlinkContainer object you can manage its hyperlink (read, update or remove). See IHyperlinkContainer interface.
        :returns: All IHyperlinkContainer subobjects that contain not None HyperlinkMouseOver'''
        ...

    def get_any_hyperlinks(self) -> List[IHyperlinkContainer]:
        '''Get all IHyperlinkContainer subobjects that contain not None HyperlinkMouseOver.
                    With given IHyperlinkContainer object you can manage its hyperlink (read, update or remove). See IHyperlinkContainer interface.
        :returns: All IHyperlinkContainer subobjects that contain not None HyperlinkMouseOver'''
        ...

    def remove_all_hyperlinks(self) -> None:
        '''Removes all contained HyperlinkClick and HyperlinkMouseOver hyperlinks (in all IHyperlinkContainer subobjects).'''
        ...

    ...

class IImage:
    '''Represents a raster or vector image.'''
    @overload
    def save(self, filename: str) -> None:
        '''Saves the image to a file.
        :param filename: The path to the file where the image will be saved.'''
        ...

    @overload
    def save(self, filename: str, format: ImageFormat) -> None:
        '''Saves the image to a file in the specified format.
        :param filename: The path to the file where the image will be saved.
        :param format: The image format.'''
        ...

    @overload
    def save(self, stream: io.RawIOBase, format: ImageFormat) -> None:
        '''Saves the image to a stream in the specified format.
        :param stream: The stream where the image will be saved.
        :param format: The image format.'''
        ...

    @overload
    def save(self, filename: str, format: ImageFormat, quality: int) -> None:
        '''Saves the image to a file in the specified format and quality.
        :param filename: The path to the file where the image will be saved.
        :param format: The image format.
        :param quality: The quality of the saved image (0 to 100).  
                    This parameter only affects saving in :py:attr:`aspose.slides.ImageFormat.JPEG`; for all other formats, it is ignored.'''
        ...

    @overload
    def save(self, stream: io.RawIOBase, format: ImageFormat, quality: int) -> None:
        '''Saves the image to a stream in the specified format and quality.
        :param stream: The stream where the image will be saved.
        :param format: The image format.
        :param quality: The quality of the saved image (0 to 100).  
                    This parameter only affects saving in :py:attr:`aspose.slides.ImageFormat.JPEG`; for all other formats, it is ignored.'''
        ...

    @property
    def size(self) -> aspose.pydrawing.Size:
        '''Gets the size of the image.'''
        ...

    @property
    def width(self) -> int:
        '''Gets the width of the image in pixels.'''
        ...

    @property
    def height(self) -> int:
        '''Gets the height of the image in pixels.'''
        ...

    ...

class IImageCollection:
    '''Represents collection of PPImage.'''
    @overload
    def add_image(self, image: aspose.pydrawing.Image) -> IPPImage:
        '''Add an image to a presentation.
        :param image: Image to add.
        :returns: Added image.'''
        ...

    @overload
    def add_image(self, image: IImage) -> IPPImage:
        '''Add an image to a presentation.
        :param image: Image to add.
        :returns: Added image.'''
        ...

    @overload
    def add_image(self, stream: io.RawIOBase) -> IPPImage:
        '''Add an image to a presentation from stream.
        :param stream: Stream to add image from.
        :returns: Added image.'''
        ...

    @overload
    def add_image(self, stream: io.RawIOBase, loading_stream_behavior: LoadingStreamBehavior) -> IPPImage:
        '''Creates and adds an image to a presentation from stream.
        :param stream: Stream to add image file from.
        :param loading_stream_behavior: The behavior which will be applied to the stream.
        :returns: Added :py:class:`aspose.slides.IPPImage`.'''
        ...

    @overload
    def add_image(self, buffer: bytes) -> IPPImage:
        '''Adds an image to a presentation from specified buffer.
        :param buffer: Buffer.
        :returns: Added image.'''
        ...

    @overload
    def add_image(self, image_source: IPPImage) -> IPPImage:
        '''Adds a copy of an image from an another presentation.
        :param image_source: Source image.
        :returns: Added image.'''
        ...

    @overload
    def add_image(self, svg_image: ISvgImage) -> IPPImage:
        '''Add an image to a presentation from SVG object.
        :param svg_image: SVG image object :py:class:`aspose.slides.ISvgImage`
        :returns: Added image.'''
        ...

    @property
    def as_i_collection(self) -> list:
        ...

    @property
    def as_i_enumerable(self) -> collections.abc.Iterable:
        ...

    def __getitem__(self, key: int) -> IPPImage
        ...

    ...

class IImageWrapper:
    '''System.Drawing.Image wrapper for COM interface.'''
    @overload
    def save(self, file_name: str) -> None:
        '''Saves Image to the specified file
        :param file_name: File name :py:class:`str`'''
        ...

    @overload
    def save(self, stream: io.RawIOBase, image_format: PPImageFormat) -> None:
        '''Saves the Image to the specified stream in the specified format.
        :param stream: Stream for saving image :py:class:`io.RawIOBase`
        :param image_format: Image format :py:enum:`aspose.slides.PPImageFormat`'''
        ...

    @overload
    def save(self, file_name: str, image_format: PPImageFormat) -> None:
        '''Saves the Image to the specified file in the specified format.
        :param file_name: File name :py:class:`str`
        :param image_format: Image format :py:enum:`aspose.slides.PPImageFormat`'''
        ...

    @property
    def image(self) -> aspose.pydrawing.Image:
        '''Gets the Syste.Drawing.Image
                    Read-only :py:attr:`aspose.slides.IImageWrapper.image`.'''
        ...

    @property
    def image_source(self) -> IImage:
        ...

    @property
    def size(self) -> aspose.pydrawing.Size:
        '''Gets the width and height, in pixels, of the Image
                    Read-only :py:attr:`aspose.slides.IImageWrapper.size`.'''
        ...

    @property
    def as_i_disposable(self) -> IDisposable:
        ...

    ...

class IImageWrapperFactory:
    '''This interface allows to initialize IBitmapWrapper.'''
    @overload
    def create_image_wrapper(self, image: aspose.pydrawing.Image) -> IImageWrapper:
        '''Initializes a new instance of the ImageWrapper class from the specified existing image.
        :param image: Existing Image :py:class:`aspose.pydrawing.Image`
        :returns: New instance of a :py:class:`aspose.slides.IImageWrapper`'''
        ...

    @overload
    def create_image_wrapper(self, image: IImage) -> IImageWrapper:
        '''Initializes a new instance of the ImageWrapper class from the specified existing image.
        :param image: Existing Image :py:class:`aspose.pydrawing.Image`
        :returns: New instance of a :py:class:`aspose.slides.IImageWrapper`'''
        ...

    @overload
    def create_image_wrapper(self, stream: io.RawIOBase) -> IImageWrapper:
        '''Initializes a new instance of the ImageWrapper class from the specified data stream.
        :param stream: Data stream :py:class:`io.RawIOBase`
        :returns: New instance of a :py:class:`aspose.slides.IImageWrapper`'''
        ...

    @overload
    def create_image_wrapper(self, file_name: str) -> IImageWrapper:
        '''Initializes a new instance of the ImageWrapper class from the specified file.
        :param file_name: File name :py:class:`str`
        :returns: New instance of a :py:class:`aspose.slides.IImageWrapper`'''
        ...

    ...

class IInterruptionToken:
    '''This class represents the token to use for signaling long running tasks whether the interruption was requested.'''
    def throw_if_interruption_requested(self) -> None:
        '''Throws an  if
                    interruption was requested.'''
        ...

    @property
    def is_interruption_requested(self) -> bool:
        ...

    ...

class IInterruptionTokenSource:
    '''Represents the source of :py:class:`aspose.slides.IInterruptionToken`.'''
    def interrupt(self) -> None:
        '''Intialize request for interruption.'''
        ...

    @property
    def token(self) -> IInterruptionToken:
        '''Returns new token binded to this :py:class:`aspose.slides.IInterruptionTokenSource`.'''
        ...

    @property
    def is_interruption_requested(self) -> bool:
        ...

    ...

class ILayoutPlaceholderManager:
    '''Represents manager that allows you to add placeholders to the layout slide.'''
    def add_content_placeholder(self, x: float, y: float, width: float, height: float) -> IAutoShape:
        '''Adds a new placeholder shape to the layout slide to hold content, such as a picture, table, media or text.
        :param x: The X coordinate of the new placeholder shape.
        :param y: The Y coordinate of the new placeholder shape.
        :param width: The width of the new placeholder shape.
        :param height: The height of the new placeholder shape.
        :returns: Created :py:class:`aspose.slides.IAutoShape` with a Content placeholder.'''
        ...

    def add_vertical_content_placeholder(self, x: float, y: float, width: float, height: float) -> IAutoShape:
        '''Adds a new placeholder shape to the layout slide to hold content, such as a picture, table, media 
                    or text in a vertical direction.
        :param x: The X coordinate of the new placeholder shape.
        :param y: The Y coordinate of the new placeholder shape.
        :param width: The width of the new placeholder shape.
        :param height: The height of the new placeholder shape.
        :returns: Created :py:class:`aspose.slides.IAutoShape` with a Content (Vertical) placeholder.'''
        ...

    def add_text_placeholder(self, x: float, y: float, width: float, height: float) -> IAutoShape:
        '''Adds a new placeholder shape to the layout slide to hold text content.
        :param x: The X coordinate of the new placeholder shape.
        :param y: The Y coordinate of the new placeholder shape.
        :param width: The width of the new placeholder shape.
        :param height: The height of the new placeholder shape.
        :returns: Created :py:class:`aspose.slides.IAutoShape` with a Text placeholder.'''
        ...

    def add_vertical_text_placeholder(self, x: float, y: float, width: float, height: float) -> IAutoShape:
        '''Adds a new placeholder shape to the layout slide to hold text content in a vertical direction.
        :param x: The X coordinate of the new placeholder shape.
        :param y: The Y coordinate of the new placeholder shape.
        :param width: The width of the new placeholder shape.
        :param height: The height of the new placeholder shape.
        :returns: Created :py:class:`aspose.slides.IAutoShape` with a Text (Vertical) placeholder.'''
        ...

    def add_picture_placeholder(self, x: float, y: float, width: float, height: float) -> IAutoShape:
        '''Adds a new placeholder shape to the layout slide to hold a picture.
        :param x: The X coordinate of the new placeholder shape.
        :param y: The Y coordinate of the new placeholder shape.
        :param width: The width of the new placeholder shape.
        :param height: The height of the new placeholder shape.
        :returns: Created :py:class:`aspose.slides.IAutoShape` with a Picture placeholder.'''
        ...

    def add_chart_placeholder(self, x: float, y: float, width: float, height: float) -> IAutoShape:
        '''Adds a new placeholder shape to the layout slide to hold a chart.
        :param x: The X coordinate of the new placeholder shape.
        :param y: The Y coordinate of the new placeholder shape.
        :param width: The width of the new placeholder shape.
        :param height: The height of the new placeholder shape.
        :returns: Created :py:class:`aspose.slides.IAutoShape` with a Chart placeholder.'''
        ...

    def add_table_placeholder(self, x: float, y: float, width: float, height: float) -> IAutoShape:
        '''Adds a new placeholder shape to the layout slide to hold a table.
        :param x: The X coordinate of the new placeholder shape.
        :param y: The Y coordinate of the new placeholder shape.
        :param width: The width of the new placeholder shape.
        :param height: The height of the new placeholder shape.
        :returns: Created :py:class:`aspose.slides.IAutoShape` with a Table placeholder.'''
        ...

    def add_smart_art_placeholder(self, x: float, y: float, width: float, height: float) -> IAutoShape:
        '''Adds a new placeholder shape to the layout slide to hold a SmartArt diagram.
        :param x: The X coordinate of the new placeholder shape.
        :param y: The Y coordinate of the new placeholder shape.
        :param width: The width of the new placeholder shape.
        :param height: The height of the new placeholder shape.
        :returns: Created :py:class:`aspose.slides.IAutoShape` with a SmartArt placeholder.'''
        ...

    def add_media_placeholder(self, x: float, y: float, width: float, height: float) -> IAutoShape:
        '''Adds a new placeholder shape to the layout slide to hold a media object.
        :param x: The X coordinate of the new placeholder shape.
        :param y: The Y coordinate of the new placeholder shape.
        :param width: The width of the new placeholder shape.
        :param height: The height of the new placeholder shape.
        :returns: Created :py:class:`aspose.slides.IAutoShape` with a Media placeholder.'''
        ...

    def add_online_image_placeholder(self, x: float, y: float, width: float, height: float) -> IAutoShape:
        '''Adds a new placeholder shape to the layout slide to hold an online image.
        :param x: The X coordinate of the new placeholder shape.
        :param y: The Y coordinate of the new placeholder shape.
        :param width: The width of the new placeholder shape.
        :param height: The height of the new placeholder shape.
        :returns: Created :py:class:`aspose.slides.IAutoShape` with an Online Image placeholder.'''
        ...

    ...

class ILayoutSlide:
    '''Represents a layout slide.'''
    def get_depending_slides(self) -> List[ISlide]:
        '''Returns an array with all slides, which depend on this layout slide.
        :returns: Array with all slides, which depend on this layout slide'''
        ...

    def remove(self) -> None:
        '''Removes layout from presentation.'''
        ...

    def find_shape_by_alt_text(self, alt_text: str) -> IShape:
        ...

    def join_portions_with_same_formatting(self) -> None:
        ...

    def equals(self, slide: IBaseSlide) -> bool:
        ...

    def create_theme_effective(self) -> aspose.slides.theme.IThemeEffectiveData:
        ...

    @property
    def header_footer_manager(self) -> ILayoutSlideHeaderFooterManager:
        ...

    @property
    def placeholder_manager(self) -> ILayoutPlaceholderManager:
        ...

    @property
    def master_slide(self) -> IMasterSlide:
        ...

    @master_slide.setter
    def master_slide(self, value: IMasterSlide):
        ...

    @property
    def layout_type(self) -> SlideLayoutType:
        ...

    @property
    def has_depending_slides(self) -> bool:
        ...

    @property
    def as_i_base_slide(self) -> IBaseSlide:
        ...

    @property
    def as_i_override_themeable(self) -> aspose.slides.theme.IOverrideThemeable:
        ...

    @property
    def shapes(self) -> IShapeCollection:
        ...

    @property
    def controls(self) -> IControlCollection:
        ...

    @property
    def name(self) -> str:
        ...

    @name.setter
    def name(self, value: str):
        ...

    @property
    def slide_id(self) -> int:
        ...

    @property
    def custom_data(self) -> ICustomData:
        ...

    @property
    def timeline(self) -> IAnimationTimeLine:
        ...

    @property
    def slide_show_transition(self) -> ISlideShowTransition:
        ...

    @property
    def background(self) -> IBackground:
        ...

    @property
    def hyperlink_queries(self) -> IHyperlinkQueries:
        ...

    @property
    def show_master_shapes(self) -> bool:
        ...

    @show_master_shapes.setter
    def show_master_shapes(self, value: bool):
        ...

    @property
    def as_i_slide_component(self) -> ISlideComponent:
        ...

    @property
    def slide(self) -> IBaseSlide:
        ...

    @property
    def as_i_presentation_component(self) -> IPresentationComponent:
        ...

    @property
    def presentation(self) -> IPresentation:
        ...

    @property
    def theme_manager(self) -> aspose.slides.theme.IOverrideThemeManager:
        ...

    ...

class ILayoutSlideCollection:
    '''Represents a base class for collection of a layout slides.'''
    def get_by_type(self, type: SlideLayoutType) -> ILayoutSlide:
        '''Returns the first layout slide of specified type.
        :param type: A type of layout slide to find.
        :returns: :py:class:`aspose.slides.ILayoutSlide` with specified type or None if no layouts found.'''
        ...

    def remove(self, value: ILayoutSlide) -> None:
        '''Removes a layout from the collection.
        :param value: The layout slide to remove from the collection.'''
        ...

    def remove_unused(self) -> None:
        '''Removes unused layout slides (layout slides whose HasDependingSlides is false).'''
        ...

    @property
    def as_i_collection(self) -> list:
        ...

    @property
    def as_i_enumerable(self) -> collections.abc.Iterable:
        ...

    def __getitem__(self, key: int) -> ILayoutSlide
        ...

    ...

class ILayoutSlideHeaderFooterManager:
    '''Represents manager which holds behavior of the layout slide footer, date-time, page number placeholders and all child placeholders.
                Child placeholders mean placeholders are contained on depending slides.
                Depending slides use and depend on layout slide.'''
    def set_footer_and_child_footers_visibility(self, is_visible: bool) -> None:
        '''Changes layout slide footer placeholder and all child footer placeholders visibility.
                    Child placeholders mean placeholders are contained on depending slides.
                    Depending slides use and depend on master slide.
        :param is_visible: true - makes a footer placeholders visible, otherwise - hides them.'''
        ...

    def set_slide_number_and_child_slide_numbers_visibility(self, is_visible: bool) -> None:
        '''Changes layout slide page number placeholder and all child page number placeholders visibility.
                    Child placeholders mean placeholders are contained on depending slides.
                    Depending slides use and depend on layout slide.
        :param is_visible: true - makes a page number placeholders visible, otherwise - hides them.'''
        ...

    def set_date_time_and_child_date_times_visibility(self, is_visible: bool) -> None:
        '''Changes layout slide date-time placeholder and all child date-time placeholders visibility.
                    Child placeholders mean placeholders are contained on depending slides.
                    Depending slides use and depend on layout slide.
        :param is_visible: true - makes a date-time placeholders visible, otherwise - hides them.'''
        ...

    def set_footer_and_child_footers_text(self, text: str) -> None:
        '''Sets text to layout slide footer placeholder and all child footer placeholders.
                    Child placeholders mean placeholders are contained on depending slides.
                    Depending slides use and depend on layout slide.
        :param text: Text to set.'''
        ...

    def set_date_time_and_child_date_times_text(self, text: str) -> None:
        '''Sets text to layout slide date-time placeholder and all child date-time placeholders.
                    Child placeholders mean placeholders are contained on depending slides.
                    Depending slides use and depend on layout slide.
        :param text: Text to set.'''
        ...

    def set_footer_visibility(self, is_visible: bool) -> None:
        ...

    def set_slide_number_visibility(self, is_visible: bool) -> None:
        ...

    def set_date_time_visibility(self, is_visible: bool) -> None:
        ...

    def set_footer_text(self, text: str) -> None:
        ...

    def set_date_time_text(self, text: str) -> None:
        ...

    @property
    def as_i_base_slide_header_footer_manager(self) -> IBaseSlideHeaderFooterManager:
        ...

    @property
    def is_footer_visible(self) -> bool:
        ...

    @property
    def is_slide_number_visible(self) -> bool:
        ...

    @property
    def is_date_time_visible(self) -> bool:
        ...

    @property
    def as_i_base_header_footer_manager(self) -> IBaseHeaderFooterManager:
        ...

    ...

class ILegacyDiagram:
    '''Represents a legacy diagram object'''
    @overload
    def get_thumbnail(self) -> aspose.pydrawing.Bitmap:
        ...

    @overload
    def get_thumbnail(self, bounds: ShapeThumbnailBounds, scale_x: float, scale_y: float) -> aspose.pydrawing.Bitmap:
        ...

    @overload
    def get_image(self) -> IImage:
        ...

    @overload
    def get_image(self, bounds: ShapeThumbnailBounds, scale_x: float, scale_y: float) -> IImage:
        ...

    @overload
    def write_as_svg(self, stream: io.RawIOBase) -> None:
        ...

    @overload
    def write_as_svg(self, stream: io.RawIOBase, svg_options: aspose.slides.export.ISVGOptions) -> None:
        ...

    def convert_to_smart_art(self) -> aspose.slides.smartart.ISmartArt:
        '''Converts legacy digram to editable SmartArt object. 
                    Created SmartArt object adds to parent group shape at the same position.
        :returns: Created SmartArt object.'''
        ...

    def convert_to_group_shape(self) -> IGroupShape:
        '''Converts legacy digram to editable group shape. 
                    Created GroupShape object adds to parent group shape at the same position.
        :returns: Created GroupShape object.'''
        ...

    def add_placeholder(self, placeholder_to_copy_from: IPlaceholder) -> IPlaceholder:
        ...

    def remove_placeholder(self) -> None:
        ...

    def get_base_placeholder(self) -> IShape:
        ...

    @property
    def as_i_graphical_object(self) -> IGraphicalObject:
        ...

    @property
    def shape_lock(self) -> IGraphicalObjectLock:
        ...

    @property
    def graphical_object_lock(self) -> IGraphicalObjectLock:
        ...

    @property
    def as_i_shape(self) -> IShape:
        ...

    @property
    def is_text_holder(self) -> bool:
        ...

    @property
    def placeholder(self) -> IPlaceholder:
        ...

    @property
    def custom_data(self) -> ICustomData:
        ...

    @property
    def raw_frame(self) -> IShapeFrame:
        ...

    @raw_frame.setter
    def raw_frame(self, value: IShapeFrame):
        ...

    @property
    def frame(self) -> IShapeFrame:
        ...

    @frame.setter
    def frame(self, value: IShapeFrame):
        ...

    @property
    def line_format(self) -> ILineFormat:
        ...

    @property
    def three_d_format(self) -> IThreeDFormat:
        ...

    @property
    def effect_format(self) -> IEffectFormat:
        ...

    @property
    def fill_format(self) -> IFillFormat:
        ...

    @property
    def hidden(self) -> bool:
        ...

    @hidden.setter
    def hidden(self, value: bool):
        ...

    @property
    def z_order_position(self) -> int:
        ...

    @property
    def connection_site_count(self) -> int:
        ...

    @property
    def rotation(self) -> float:
        ...

    @rotation.setter
    def rotation(self, value: float):
        ...

    @property
    def x(self) -> float:
        ...

    @x.setter
    def x(self, value: float):
        ...

    @property
    def y(self) -> float:
        ...

    @y.setter
    def y(self, value: float):
        ...

    @property
    def width(self) -> float:
        ...

    @width.setter
    def width(self, value: float):
        ...

    @property
    def height(self) -> float:
        ...

    @height.setter
    def height(self, value: float):
        ...

    @property
    def alternative_text(self) -> str:
        ...

    @alternative_text.setter
    def alternative_text(self, value: str):
        ...

    @property
    def alternative_text_title(self) -> str:
        ...

    @alternative_text_title.setter
    def alternative_text_title(self, value: str):
        ...

    @property
    def name(self) -> str:
        ...

    @name.setter
    def name(self, value: str):
        ...

    @property
    def is_decorative(self) -> bool:
        ...

    @is_decorative.setter
    def is_decorative(self, value: bool):
        ...

    @property
    def unique_id(self) -> int:
        ...

    @property
    def office_interop_shape_id(self) -> int:
        ...

    @property
    def is_grouped(self) -> bool:
        ...

    @property
    def black_white_mode(self) -> BlackWhiteMode:
        ...

    @black_white_mode.setter
    def black_white_mode(self, value: BlackWhiteMode):
        ...

    @property
    def parent_group(self) -> IGroupShape:
        ...

    @property
    def as_i_hyperlink_container(self) -> IHyperlinkContainer:
        ...

    @property
    def as_i_slide_component(self) -> ISlideComponent:
        ...

    @property
    def slide(self) -> IBaseSlide:
        ...

    @property
    def as_i_presentation_component(self) -> IPresentationComponent:
        ...

    @property
    def presentation(self) -> IPresentation:
        ...

    @property
    def hyperlink_click(self) -> IHyperlink:
        ...

    @hyperlink_click.setter
    def hyperlink_click(self, value: IHyperlink):
        ...

    @property
    def hyperlink_mouse_over(self) -> IHyperlink:
        ...

    @hyperlink_mouse_over.setter
    def hyperlink_mouse_over(self, value: IHyperlink):
        ...

    @property
    def hyperlink_manager(self) -> IHyperlinkManager:
        ...

    ...

class ILicense:
    '''Provides methods to license the component.'''
    @overload
    def set_license(self, license_name: str) -> None:
        '''Licenses the component.
        :param license_name: Can be a full or short file name or name of an embedded resource.
                    Use an empty string to switch to evaluation mode.'''
        ...

    @overload
    def set_license(self, stream: io.RawIOBase) -> None:
        '''Licenses the component.
        :param stream: A stream that contains the license.'''
        ...

    def reset_license(self) -> None:
        '''Reset the license'''
        ...

    def is_licensed(self) -> bool:
        '''Check if licence is applied to component
        :returns: ``True`` if component is licensed, otherwise ``false``'''
        ...

    ...

class ILightRig:
    '''Represents LightRig.'''
    def set_rotation(self, latitude: float, longitude: float, revolution: float) -> None:
        '''A rotation is defined through the use of a latitude
                    coordinate, a longitude coordinate, and a revolution about the axis 
                    as the latitude and longitude coordinates.
        :param latitude: Latitude coordinate :py:class:`float`
        :param longitude: Longitude coordinate :py:class:`float`
        :param revolution: Revolution coordinate :py:class:`float`'''
        ...

    def get_rotation(self) -> List[float]:
        '''A rotation is defined through the use of a latitude
                    coordinate, a longitude coordinate, and a revolution about the axis 
                    as the latitude and longitude coordinates.
                    first element in return array - latitude, second - longitude, third - revolution.
        :returns: Rotation coordinates as :py:class:`float`[]'''
        ...

    @property
    def direction(self) -> LightingDirection:
        '''Light direction.
                    Read/write :py:enum:`aspose.slides.LightingDirection`.'''
        ...

    @direction.setter
    def direction(self, value: LightingDirection):
        '''Light direction.
                    Read/write :py:enum:`aspose.slides.LightingDirection`.'''
        ...

    @property
    def light_type(self) -> LightRigPresetType:
        ...

    @light_type.setter
    def light_type(self, value: LightRigPresetType):
        ...

    ...

class ILightRigEffectiveData:
    '''Immutable object which contains effective light rig properties.'''
    def get_rotation(self) -> List[float]:
        '''A rotation is defined through the use of a latitude coordinate, a longitude coordinate, and a revolution about the axis as the latitude and longitude coordinates.
                    First element in return array - latitude, second - longitude, third - revolution.
        :returns: Rotation coordinates as :py:class:`float`[]'''
        ...

    @property
    def direction(self) -> LightingDirection:
        '''Light direction.
                    Read-only :py:enum:`aspose.slides.LightingDirection`.'''
        ...

    @property
    def light_type(self) -> LightRigPresetType:
        ...

    ...

class ILineFillFormat:
    '''Represents properties for lines filling.'''
    @property
    def fill_type(self) -> FillType:
        ...

    @fill_type.setter
    def fill_type(self, value: FillType):
        ...

    @property
    def solid_fill_color(self) -> IColorFormat:
        ...

    @property
    def gradient_format(self) -> IGradientFormat:
        ...

    @property
    def pattern_format(self) -> IPatternFormat:
        ...

    @property
    def rotate_with_shape(self) -> NullableBool:
        ...

    @rotate_with_shape.setter
    def rotate_with_shape(self, value: NullableBool):
        ...

    @property
    def as_i_fill_param_source(self) -> IFillParamSource:
        ...

    ...

class ILineFillFormatEffectiveData:
    '''Immutable object which contains effective line filling properties.'''
    @property
    def fill_type(self) -> FillType:
        ...

    @property
    def solid_fill_color(self) -> aspose.pydrawing.Color:
        ...

    @property
    def gradient_format(self) -> IGradientFormatEffectiveData:
        ...

    @property
    def pattern_format(self) -> IPatternFormatEffectiveData:
        ...

    @property
    def rotate_with_shape(self) -> bool:
        ...

    @property
    def as_i_fill_param_source(self) -> IFillParamSource:
        ...

    ...

class ILineFormat:
    '''Represents format of a line.'''
    def equals(self, line_format: ILineFormat) -> bool:
        '''Determines whether the two LineFormat instances are equal.
        :param line_format: The LineFormat to compare with the current LineFormat.
        :returns: **true** if the specified LineFormat is equal to the current LineFormat; 
                    otherwise, **false**.'''
        ...

    def get_effective(self) -> ILineFormatEffectiveData:
        '''Gets effective line formatting data with the inheritance applied.
        :returns: A :py:class:`aspose.slides.ILineFormatEffectiveData`.'''
        ...

    @property
    def is_format_not_defined(self) -> bool:
        ...

    @property
    def fill_format(self) -> ILineFillFormat:
        ...

    @property
    def sketch_format(self) -> ISketchFormat:
        ...

    @property
    def width(self) -> float:
        '''Returns or sets the width of a line.
                    Read/write :py:class:`float`.'''
        ...

    @width.setter
    def width(self, value: float):
        '''Returns or sets the width of a line.
                    Read/write :py:class:`float`.'''
        ...

    @property
    def dash_style(self) -> LineDashStyle:
        ...

    @dash_style.setter
    def dash_style(self, value: LineDashStyle):
        ...

    @property
    def custom_dash_pattern(self) -> List[float]:
        ...

    @custom_dash_pattern.setter
    def custom_dash_pattern(self, value: List[float]):
        ...

    @property
    def cap_style(self) -> LineCapStyle:
        ...

    @cap_style.setter
    def cap_style(self, value: LineCapStyle):
        ...

    @property
    def style(self) -> LineStyle:
        '''Returns or sets the line style.
                    Read/write :py:enum:`aspose.slides.LineStyle`.'''
        ...

    @style.setter
    def style(self, value: LineStyle):
        '''Returns or sets the line style.
                    Read/write :py:enum:`aspose.slides.LineStyle`.'''
        ...

    @property
    def alignment(self) -> LineAlignment:
        '''Returns or sets the line alignment.
                    Read/write :py:enum:`aspose.slides.LineAlignment`.'''
        ...

    @alignment.setter
    def alignment(self, value: LineAlignment):
        '''Returns or sets the line alignment.
                    Read/write :py:enum:`aspose.slides.LineAlignment`.'''
        ...

    @property
    def join_style(self) -> LineJoinStyle:
        ...

    @join_style.setter
    def join_style(self, value: LineJoinStyle):
        ...

    @property
    def miter_limit(self) -> float:
        ...

    @miter_limit.setter
    def miter_limit(self, value: float):
        ...

    @property
    def begin_arrowhead_style(self) -> LineArrowheadStyle:
        ...

    @begin_arrowhead_style.setter
    def begin_arrowhead_style(self, value: LineArrowheadStyle):
        ...

    @property
    def end_arrowhead_style(self) -> LineArrowheadStyle:
        ...

    @end_arrowhead_style.setter
    def end_arrowhead_style(self, value: LineArrowheadStyle):
        ...

    @property
    def begin_arrowhead_width(self) -> LineArrowheadWidth:
        ...

    @begin_arrowhead_width.setter
    def begin_arrowhead_width(self, value: LineArrowheadWidth):
        ...

    @property
    def end_arrowhead_width(self) -> LineArrowheadWidth:
        ...

    @end_arrowhead_width.setter
    def end_arrowhead_width(self, value: LineArrowheadWidth):
        ...

    @property
    def begin_arrowhead_length(self) -> LineArrowheadLength:
        ...

    @begin_arrowhead_length.setter
    def begin_arrowhead_length(self, value: LineArrowheadLength):
        ...

    @property
    def end_arrowhead_length(self) -> LineArrowheadLength:
        ...

    @end_arrowhead_length.setter
    def end_arrowhead_length(self, value: LineArrowheadLength):
        ...

    @property
    def as_i_line_param_source(self) -> ILineParamSource:
        ...

    ...

class ILineFormatEffectiveData:
    '''Immutable object which contains effective line formatting properties.'''
    def equals(self, lf: ILineFormatEffectiveData) -> bool:
        '''Determines whether the two ILineFormatEffectiveData instances are equal.
        :param lf: The ILineFormatEffectiveData to compare with the current ILineFormatEffectiveData.
        :returns: **true** if the specified ILineFormatEffectiveData is equal to the current ILineFormatEffectiveData; otherwise, **false**.'''
        ...

    @property
    def fill_format(self) -> ILineFillFormatEffectiveData:
        ...

    @property
    def sketch_format(self) -> ISketchFormatEffectiveData:
        ...

    @property
    def width(self) -> float:
        '''Returns the width of a line.
                    Read-only :py:class:`float`.'''
        ...

    @property
    def dash_style(self) -> LineDashStyle:
        ...

    @property
    def custom_dash_pattern(self) -> List[float]:
        ...

    @property
    def cap_style(self) -> LineCapStyle:
        ...

    @property
    def style(self) -> LineStyle:
        '''Returns the line style.
                    Read-only :py:enum:`aspose.slides.LineStyle`.'''
        ...

    @property
    def alignment(self) -> LineAlignment:
        '''Returns the line alignment.
                    Read-only :py:enum:`aspose.slides.LineAlignment`.'''
        ...

    @property
    def join_style(self) -> LineJoinStyle:
        ...

    @property
    def miter_limit(self) -> float:
        ...

    @property
    def begin_arrowhead_style(self) -> LineArrowheadStyle:
        ...

    @property
    def end_arrowhead_style(self) -> LineArrowheadStyle:
        ...

    @property
    def begin_arrowhead_width(self) -> LineArrowheadWidth:
        ...

    @property
    def end_arrowhead_width(self) -> LineArrowheadWidth:
        ...

    @property
    def begin_arrowhead_length(self) -> LineArrowheadLength:
        ...

    @property
    def end_arrowhead_length(self) -> LineArrowheadLength:
        ...

    @property
    def as_i_line_param_source(self) -> ILineParamSource:
        ...

    ...

class ILineParamSource:
    '''Auxiliary line parameters interface.'''
    ...

class ILoadOptions:
    '''Allows to specify additional options (such as format or default font) when loading a presentation.'''
    @property
    def load_format(self) -> LoadFormat:
        ...

    @load_format.setter
    def load_format(self, value: LoadFormat):
        ...

    @property
    def default_regular_font(self) -> str:
        ...

    @default_regular_font.setter
    def default_regular_font(self, value: str):
        ...

    @property
    def default_symbol_font(self) -> str:
        ...

    @default_symbol_font.setter
    def default_symbol_font(self, value: str):
        ...

    @property
    def default_asian_font(self) -> str:
        ...

    @default_asian_font.setter
    def default_asian_font(self, value: str):
        ...

    @property
    def password(self) -> str:
        '''Gets or sets the password.
                    Read-write :py:class:`str`.'''
        ...

    @password.setter
    def password(self, value: str):
        '''Gets or sets the password.
                    Read-write :py:class:`str`.'''
        ...

    @property
    def only_load_document_properties(self) -> bool:
        ...

    @only_load_document_properties.setter
    def only_load_document_properties(self, value: bool):
        ...

    @property
    def warning_callback(self) -> aspose.slides.warnings.IWarningCallback:
        ...

    @warning_callback.setter
    def warning_callback(self, value: aspose.slides.warnings.IWarningCallback):
        ...

    @property
    def blob_management_options(self) -> IBlobManagementOptions:
        ...

    @blob_management_options.setter
    def blob_management_options(self, value: IBlobManagementOptions):
        ...

    @property
    def document_level_font_sources(self) -> IFontSources:
        ...

    @document_level_font_sources.setter
    def document_level_font_sources(self, value: IFontSources):
        ...

    @property
    def interruption_token(self) -> IInterruptionToken:
        ...

    @interruption_token.setter
    def interruption_token(self, value: IInterruptionToken):
        ...

    @property
    def resource_loading_callback(self) -> IResourceLoadingCallback:
        ...

    @resource_loading_callback.setter
    def resource_loading_callback(self, value: IResourceLoadingCallback):
        ...

    @property
    def spreadsheet_options(self) -> ISpreadsheetOptions:
        ...

    @spreadsheet_options.setter
    def spreadsheet_options(self, value: ISpreadsheetOptions):
        ...

    @property
    def default_text_language(self) -> str:
        ...

    @default_text_language.setter
    def default_text_language(self, value: str):
        ...

    @property
    def delete_embedded_binary_objects(self) -> bool:
        ...

    @delete_embedded_binary_objects.setter
    def delete_embedded_binary_objects(self, value: bool):
        ...

    ...

class IMasterHandoutSlide:
    '''Represents master slide for handouts.'''
    def find_shape_by_alt_text(self, alt_text: str) -> IShape:
        ...

    def join_portions_with_same_formatting(self) -> None:
        ...

    def equals(self, slide: IBaseSlide) -> bool:
        ...

    def create_theme_effective(self) -> aspose.slides.theme.IThemeEffectiveData:
        ...

    @property
    def header_footer_manager(self) -> IMasterHandoutSlideHeaderFooterManager:
        ...

    @property
    def as_i_base_slide(self) -> IBaseSlide:
        ...

    @property
    def as_i_master_themeable(self) -> aspose.slides.theme.IMasterThemeable:
        ...

    @property
    def shapes(self) -> IShapeCollection:
        ...

    @property
    def controls(self) -> IControlCollection:
        ...

    @property
    def name(self) -> str:
        ...

    @name.setter
    def name(self, value: str):
        ...

    @property
    def slide_id(self) -> int:
        ...

    @property
    def custom_data(self) -> ICustomData:
        ...

    @property
    def timeline(self) -> IAnimationTimeLine:
        ...

    @property
    def slide_show_transition(self) -> ISlideShowTransition:
        ...

    @property
    def background(self) -> IBackground:
        ...

    @property
    def hyperlink_queries(self) -> IHyperlinkQueries:
        ...

    @property
    def show_master_shapes(self) -> bool:
        ...

    @show_master_shapes.setter
    def show_master_shapes(self, value: bool):
        ...

    @property
    def as_i_slide_component(self) -> ISlideComponent:
        ...

    @property
    def slide(self) -> IBaseSlide:
        ...

    @property
    def as_i_presentation_component(self) -> IPresentationComponent:
        ...

    @property
    def presentation(self) -> IPresentation:
        ...

    @property
    def theme_manager(self) -> aspose.slides.theme.IMasterThemeManager:
        ...

    ...

class IMasterHandoutSlideHeaderFooterManager:
    '''Represents manager which holds behavior of the master handout slide placeholders, including header placeholder.'''
    def set_header_visibility(self, is_visible: bool) -> None:
        ...

    def set_header_text(self, text: str) -> None:
        ...

    def set_footer_visibility(self, is_visible: bool) -> None:
        ...

    def set_slide_number_visibility(self, is_visible: bool) -> None:
        ...

    def set_date_time_visibility(self, is_visible: bool) -> None:
        ...

    def set_footer_text(self, text: str) -> None:
        ...

    def set_date_time_text(self, text: str) -> None:
        ...

    @property
    def as_i_base_handout_notes_slide_header_footer_manag(self) -> IBaseHandoutNotesSlideHeaderFooterManag:
        ...

    @property
    def is_header_visible(self) -> bool:
        ...

    @property
    def as_i_base_slide_header_footer_manager(self) -> IBaseSlideHeaderFooterManager:
        ...

    @property
    def is_footer_visible(self) -> bool:
        ...

    @property
    def is_slide_number_visible(self) -> bool:
        ...

    @property
    def is_date_time_visible(self) -> bool:
        ...

    @property
    def as_i_base_header_footer_manager(self) -> IBaseHeaderFooterManager:
        ...

    ...

class IMasterHandoutSlideManager:
    '''Master handout slide manager.'''
    def set_default_master_handout_slide(self) -> IMasterHandoutSlide:
        '''Sets default master handout slide to related handout slide.
        :returns: Master handout slide :py:class:`aspose.slides.IMasterHandoutSlide`'''
        ...

    def remove_master_handout_slide(self) -> None:
        '''Removes master handout slide.'''
        ...

    @property
    def master_handout_slide(self) -> IMasterHandoutSlide:
        ...

    ...

class IMasterLayoutSlideCollection:
    '''Represents a collections of all layout slides of defined master slide.
                Extends ILayoutSlideCollection interface with methods for adding/inserting/removing/cloning 
                layout slides in context of the individual collections of master's layout slides.'''
    def add_clone(self, source_layout: ILayoutSlide) -> ILayoutSlide:
        '''Adds a copy of a specified layout slide to the end of the collection.
        :param source_layout: Slide to clone.
        :returns: Added slide.'''
        ...

    def insert_clone(self, index: int, source_layout: ILayoutSlide) -> ILayoutSlide:
        '''Inserts a copy of a specified layout slide to specified position of the collection.
        :param index: Index of new slide.
        :param source_layout: Slide to clone.
        :returns: Inserted slide.'''
        ...

    def add(self, layout_type: SlideLayoutType, layout_name: str) -> ILayoutSlide:
        '''Adds a new layout slide to the end of the collection.
        :param layout_type: Layout type for a new layout.
                    Supported layout types: Title, TitleOnly, Blank, TitleAndObject, VerticalText, VerticalTitleAndText, TwoObjects, SectionHeader, TwoTextAndTwoObjects, TitleObjectAndCaption, PictureAndCaption, Custom.
                    Other layout types are not supported now: Text, TwoColumnText, Table, TextAndChart, ChartAndText, Diagram, Chart, TextAndClipArt, ClipArtAndText, TextAndObject, ObjectAndText, Object, TextAndMedia, MediaAndText, ObjectOverText, TextOverObject, TextAndTwoObjects, TwoObjectsAndText, TwoObjectsOverText, FourObjects, ClipArtAndVerticalText, VerticalTitleAndTextOverChart, ObjectAndTwoObject, TwoObjectsAndObject.
        :param layout_name: Name for a new layout. If passed name is already in use the ArgumentException will be thrown.
                    If None parameter is passed then name genarated atomatically in regards to passed layout type 
                    (for example "Title Slide" or "1_Title Slide", "2_..", etc.).
        :returns: Added slide.'''
        ...

    def insert(self, index: int, layout_type: SlideLayoutType, layout_name: str) -> ILayoutSlide:
        '''Inserts a new layout slide to specified position of the collection.
        :param index: Index of new slide.
        :param layout_type: Layout type for a new layout.
                    Supported layout types: Title, TitleOnly, Blank, TitleAndObject, VerticalText, VerticalTitleAndText, TwoObjects, SectionHeader, TwoTextAndTwoObjects, TitleObjectAndCaption, PictureAndCaption, Custom.
                    Other layout types are not supported now: Text, TwoColumnText, Table, TextAndChart, ChartAndText, Diagram, Chart, TextAndClipArt, ClipArtAndText, TextAndObject, ObjectAndText, Object, TextAndMedia, MediaAndText, ObjectOverText, TextOverObject, TextAndTwoObjects, TwoObjectsAndText, TwoObjectsOverText, FourObjects, ClipArtAndVerticalText, VerticalTitleAndTextOverChart, ObjectAndTwoObject, TwoObjectsAndObject.
        :param layout_name: Name for a new layout. If passed name is already in use the ArgumentException will be thrown.
                    If None parameter is passed then name genarated atomatically in regards to passed layout type 
                    (for example "Title Slide" or "1_Title Slide", "2_..", etc.).
        :returns: Inserted slide.'''
        ...

    def remove_at(self, index: int) -> None:
        '''Removes the element at the specified index of the collection.
        :param index: The zero-based index of the element to remove.'''
        ...

    def reorder(self, index: int, layout_slide: ILayoutSlide) -> None:
        '''Moves layout slide from the collection to the specified position.
        :param index: Target index.
        :param layout_slide: Slide to move.'''
        ...

    def get_by_type(self, type: SlideLayoutType) -> ILayoutSlide:
        ...

    def remove(self, value: ILayoutSlide) -> None:
        ...

    def remove_unused(self) -> None:
        ...

    @property
    def as_i_layout_slide_collection(self) -> ILayoutSlideCollection:
        ...

    @property
    def as_i_collection(self) -> list:
        ...

    @property
    def as_i_enumerable(self) -> collections.abc.Iterable:
        ...

    def __getitem__(self, key: int) -> ILayoutSlide
        ...

    ...

class IMasterNotesSlide:
    '''Represents master slide for notes.'''
    def find_shape_by_alt_text(self, alt_text: str) -> IShape:
        ...

    def join_portions_with_same_formatting(self) -> None:
        ...

    def equals(self, slide: IBaseSlide) -> bool:
        ...

    def create_theme_effective(self) -> aspose.slides.theme.IThemeEffectiveData:
        ...

    @property
    def header_footer_manager(self) -> IMasterNotesSlideHeaderFooterManager:
        ...

    @property
    def notes_style(self) -> ITextStyle:
        ...

    @property
    def as_i_base_slide(self) -> IBaseSlide:
        ...

    @property
    def as_i_master_themeable(self) -> aspose.slides.theme.IMasterThemeable:
        ...

    @property
    def shapes(self) -> IShapeCollection:
        ...

    @property
    def controls(self) -> IControlCollection:
        ...

    @property
    def name(self) -> str:
        ...

    @name.setter
    def name(self, value: str):
        ...

    @property
    def slide_id(self) -> int:
        ...

    @property
    def custom_data(self) -> ICustomData:
        ...

    @property
    def timeline(self) -> IAnimationTimeLine:
        ...

    @property
    def slide_show_transition(self) -> ISlideShowTransition:
        ...

    @property
    def background(self) -> IBackground:
        ...

    @property
    def hyperlink_queries(self) -> IHyperlinkQueries:
        ...

    @property
    def show_master_shapes(self) -> bool:
        ...

    @show_master_shapes.setter
    def show_master_shapes(self, value: bool):
        ...

    @property
    def as_i_slide_component(self) -> ISlideComponent:
        ...

    @property
    def slide(self) -> IBaseSlide:
        ...

    @property
    def as_i_presentation_component(self) -> IPresentationComponent:
        ...

    @property
    def presentation(self) -> IPresentation:
        ...

    @property
    def theme_manager(self) -> aspose.slides.theme.IMasterThemeManager:
        ...

    ...

class IMasterNotesSlideHeaderFooterManager:
    '''Represents manager which holds behavior of the master notes slide footer, date-time, page number placeholders and all child placeholders.
                Child placeholders mean placeholders are contained on depending notes slides.
                Depending notes slides use and depend on master notes slide.'''
    def set_header_and_child_headers_visibility(self, is_visible: bool) -> None:
        '''Changes master notes slide header placeholder and all child header placeholders visibility.
                    Child placeholders mean placeholders are contained on depending notes slides.
                    Depending notes slides use and depend on master notes slide.
        :param is_visible: true - makes a header placeholders visible, otherwise - hides them.'''
        ...

    def set_header_and_child_headers_text(self, text: str) -> None:
        '''Sets text to master notes slide header placeholder and all child header placeholders.
                    Child placeholders mean placeholders are contained on depending notes slides.
                    Depending notes slides use and depend on master notes slide.
        :param text: Text to set.'''
        ...

    def set_footer_and_child_footers_visibility(self, is_visible: bool) -> None:
        '''Changes master notes slide footer placeholder and all child footer placeholders visibility.
                    Child placeholders mean placeholders are contained on depending notes slides.
                    Depending notes slides use and depend on master notes slide.
        :param is_visible: true - makes a footer placeholders visible, otherwise - hides them.'''
        ...

    def set_slide_number_and_child_slide_numbers_visibility(self, is_visible: bool) -> None:
        '''Changes master notes slide page number placeholder and all child page number placeholders visibility.
                    Child placeholders mean placeholders are contained on depending notes slides.
                    Depending notes slides use and depend on master notes slide.
        :param is_visible: true - makes a page number placeholders visible, otherwise - hides them.'''
        ...

    def set_date_time_and_child_date_times_visibility(self, is_visible: bool) -> None:
        '''Changes master notes slide date-time placeholder and all child date-time placeholders visibility.
                    Child placeholders mean placeholders are contained on depending notes slides.
                    Depending notes slides use and depend on master notes slide.
        :param is_visible: true - makes a date-time placeholders visible, otherwise - hides them.'''
        ...

    def set_footer_and_child_footers_text(self, text: str) -> None:
        '''Sets text to master notes slide footer placeholder and all child footer placeholders.
                    Child placeholders mean placeholders are contained on depending notes slides.
                    Depending notes slides use and depend on master notes slide.
        :param text: Text to set.'''
        ...

    def set_date_time_and_child_date_times_text(self, text: str) -> None:
        '''Sets text to master notes slide date-time placeholder and all child date-time placeholders.
                    Child placeholders mean placeholders are contained on depending notes slides.
                    Depending notes slides use and depend on master notes slide.
        :param text: Text to set.'''
        ...

    def set_header_visibility(self, is_visible: bool) -> None:
        ...

    def set_header_text(self, text: str) -> None:
        ...

    def set_footer_visibility(self, is_visible: bool) -> None:
        ...

    def set_slide_number_visibility(self, is_visible: bool) -> None:
        ...

    def set_date_time_visibility(self, is_visible: bool) -> None:
        ...

    def set_footer_text(self, text: str) -> None:
        ...

    def set_date_time_text(self, text: str) -> None:
        ...

    @property
    def as_i_base_handout_notes_slide_header_footer_manag(self) -> IBaseHandoutNotesSlideHeaderFooterManag:
        ...

    @property
    def is_header_visible(self) -> bool:
        ...

    @property
    def as_i_base_slide_header_footer_manager(self) -> IBaseSlideHeaderFooterManager:
        ...

    @property
    def is_footer_visible(self) -> bool:
        ...

    @property
    def is_slide_number_visible(self) -> bool:
        ...

    @property
    def is_date_time_visible(self) -> bool:
        ...

    @property
    def as_i_base_header_footer_manager(self) -> IBaseHeaderFooterManager:
        ...

    ...

class IMasterNotesSlideManager:
    '''Master notes slide manager.'''
    def set_default_master_notes_slide(self) -> IMasterNotesSlide:
        '''Sets defalut master notes slide for related notes slide.
        :returns: Defalut master notes slide :py:class:`aspose.slides.IMasterNotesSlide`'''
        ...

    def remove_master_notes_slide(self) -> None:
        '''Removes master notes slide.'''
        ...

    @property
    def master_notes_slide(self) -> IMasterNotesSlide:
        ...

    ...

class IMasterSlide:
    '''Represents a master slide in a presentation.'''
    def apply_external_theme_to_depending_slides(self, fname: str) -> IMasterSlide:
        '''Creates a new master slide based on the current one, applying an external theme to it 
                    and applies the created master slide to all dependent slides.
        :param fname: Path to the external theme file (.thmx).
        :returns: New themed MasterSlide.'''
        ...

    def get_depending_slides(self) -> List[ISlide]:
        '''Returns an array with all slides, which depend on this master slide.
        :returns: Array of :py:class:`aspose.slides.ISlide`, which depend on this master slide'''
        ...

    def find_shape_by_alt_text(self, alt_text: str) -> IShape:
        ...

    def join_portions_with_same_formatting(self) -> None:
        ...

    def equals(self, slide: IBaseSlide) -> bool:
        ...

    def create_theme_effective(self) -> aspose.slides.theme.IThemeEffectiveData:
        ...

    @property
    def header_footer_manager(self) -> IMasterSlideHeaderFooterManager:
        ...

    @property
    def title_style(self) -> ITextStyle:
        ...

    @property
    def body_style(self) -> ITextStyle:
        ...

    @property
    def other_style(self) -> ITextStyle:
        ...

    @property
    def layout_slides(self) -> IMasterLayoutSlideCollection:
        ...

    @property
    def preserve(self) -> bool:
        '''Determines whether the corresponding master is deleted when all 
                    the slides that follow that master are deleted.
                    Note: Aspose.Slides will never remove any unused master by itself, 
                    to actually remove unused masters call :py:func:`Aspose.Slides.IMasterSlideCollection.RemoveUnused(Syste.`
                    Read/write :py:class:`bool`.'''
        ...

    @preserve.setter
    def preserve(self, value: bool):
        '''Determines whether the corresponding master is deleted when all 
                    the slides that follow that master are deleted.
                    Note: Aspose.Slides will never remove any unused master by itself, 
                    to actually remove unused masters call :py:func:`Aspose.Slides.IMasterSlideCollection.RemoveUnused(Syste.`
                    Read/write :py:class:`bool`.'''
        ...

    @property
    def has_depending_slides(self) -> bool:
        ...

    @property
    def as_i_base_slide(self) -> IBaseSlide:
        ...

    @property
    def as_i_master_themeable(self) -> aspose.slides.theme.IMasterThemeable:
        ...

    @property
    def shapes(self) -> IShapeCollection:
        ...

    @property
    def controls(self) -> IControlCollection:
        ...

    @property
    def name(self) -> str:
        ...

    @name.setter
    def name(self, value: str):
        ...

    @property
    def slide_id(self) -> int:
        ...

    @property
    def custom_data(self) -> ICustomData:
        ...

    @property
    def timeline(self) -> IAnimationTimeLine:
        ...

    @property
    def slide_show_transition(self) -> ISlideShowTransition:
        ...

    @property
    def background(self) -> IBackground:
        ...

    @property
    def hyperlink_queries(self) -> IHyperlinkQueries:
        ...

    @property
    def show_master_shapes(self) -> bool:
        ...

    @show_master_shapes.setter
    def show_master_shapes(self, value: bool):
        ...

    @property
    def as_i_slide_component(self) -> ISlideComponent:
        ...

    @property
    def slide(self) -> IBaseSlide:
        ...

    @property
    def as_i_presentation_component(self) -> IPresentationComponent:
        ...

    @property
    def presentation(self) -> IPresentation:
        ...

    @property
    def theme_manager(self) -> aspose.slides.theme.IMasterThemeManager:
        ...

    ...

class IMasterSlideCollection:
    '''Represents a collection of master slides.'''
    def remove(self, value: IMasterSlide) -> None:
        '''Removes the first occurrence of a specific object from the collection.
        :param value: The master slide to remove from the collection.'''
        ...

    def remove_at(self, index: int) -> None:
        '''Removes the element at the specified index of the collection.
        :param index: The zero-based index of the element to remove.'''
        ...

    def remove_unused(self, ignore_preserve_field: bool) -> None:
        '''Removes unused master slides.
        :param ignore_preserve_field: Determines, whether this method should remove unused 
                    master even if its :py:attr:`aspose.slides.IMasterSlide.preserve` property is set to true.'''
        ...

    def add_clone(self, source_master: IMasterSlide) -> IMasterSlide:
        '''Adds a copy of a specified master slide to the end of the collection.
                    Linked layout slides will be copied too.
        :param source_master: Slide to clone.
        :returns: Added slide.'''
        ...

    def insert_clone(self, index: int, source_master: IMasterSlide) -> IMasterSlide:
        '''Inserts a copy of a specified master slide to specified position of the collection.
                    Linked layout slides will be copied too.
        :param index: Index of new slide.
        :param source_master: Slide to clone.
        :returns: Inserted master slide.'''
        ...

    @property
    def as_i_collection(self) -> list:
        ...

    @property
    def as_i_enumerable(self) -> collections.abc.Iterable:
        ...

    def __getitem__(self, key: int) -> IMasterSlide
        ...

    ...

class IMasterSlideHeaderFooterManager:
    '''Represents manager which holds behavior of the master slide footer, date-time, page number placeholders and all child placeholders.
                Child placeholders mean placeholders are contained on depending layout slides and depending slides.
                Depending layout slides and slides use and depend on master slide.'''
    def set_footer_and_child_footers_visibility(self, is_visible: bool) -> None:
        '''Changes master slide footer placeholder and all child footer placeholders visibility.
                    Child placeholders mean placeholders are contained on depending layout slides and depending slides.
                    Depending layout slides and slides use and depend on master slide.
        :param is_visible: true - makes a footer placeholders visible, otherwise - hides them.'''
        ...

    def set_slide_number_and_child_slide_numbers_visibility(self, is_visible: bool) -> None:
        '''Changes master slide page number placeholder and all child page number placeholders visibility.
                    Child placeholders mean placeholders are contained on depending layout slides and depending slides.
                    Depending layout slides and slides use and depend on master slide.
        :param is_visible: true - makes a page number placeholders visible, otherwise - hides them.'''
        ...

    def set_date_time_and_child_date_times_visibility(self, is_visible: bool) -> None:
        '''Changes master slide date-time placeholder and all child date-time placeholders visibility.
                    Child placeholders mean placeholders are contained on depending layout slides and depending slides.
                    Depending layout slides and slides use and depend on master slide.
        :param is_visible: true - makes a date-time placeholders visible, otherwise - hides them.'''
        ...

    def set_footer_and_child_footers_text(self, text: str) -> None:
        '''Sets text to master slide footer placeholder and all child footer placeholders.
                    Child placeholders mean placeholders are contained on depending layout slides and depending slides.
                    Depending layout slides and slides use and depend on master slide.
        :param text: Text to set.'''
        ...

    def set_date_time_and_child_date_times_text(self, text: str) -> None:
        '''Sets text to master slide date-time placeholder and all child date-time placeholders.
                    Child placeholders mean placeholders are contained on depending layout slides and depending slides.
                    Depending layout slides and slides use and depend on master slide.
        :param text: Text to set.'''
        ...

    def set_footer_visibility(self, is_visible: bool) -> None:
        ...

    def set_slide_number_visibility(self, is_visible: bool) -> None:
        ...

    def set_date_time_visibility(self, is_visible: bool) -> None:
        ...

    def set_footer_text(self, text: str) -> None:
        ...

    def set_date_time_text(self, text: str) -> None:
        ...

    @property
    def as_i_base_slide_header_footer_manager(self) -> IBaseSlideHeaderFooterManager:
        ...

    @property
    def is_footer_visible(self) -> bool:
        ...

    @property
    def is_slide_number_visible(self) -> bool:
        ...

    @property
    def is_date_time_visible(self) -> bool:
        ...

    @property
    def as_i_base_header_footer_manager(self) -> IBaseHeaderFooterManager:
        ...

    ...

class IMetered:
    '''Provides methods to set metered key.'''
    def set_metered_key(self, public_key: str, private_key: str) -> None:
        '''Sets metered public and private key.
        :param public_key: Metered public key.
        :param private_key: Metered private key.'''
        ...

    ...

class IModernComment:
    '''Represents a comment on a slide.'''
    def remove(self) -> None:
        ...

    @property
    def shape(self) -> IShape:
        '''Returns a shape associated with the comment.
                    Read-only :py:class:`aspose.slides.IShape`.'''
        ...

    @property
    def text_selection_start(self) -> int:
        ...

    @text_selection_start.setter
    def text_selection_start(self, value: int):
        ...

    @property
    def text_selection_length(self) -> int:
        ...

    @text_selection_length.setter
    def text_selection_length(self, value: int):
        ...

    @property
    def status(self) -> ModernCommentStatus:
        '''Returns or sets the status of the comment.
                    Read/write :py:enum:`aspose.slides.ModernCommentStatus`.'''
        ...

    @status.setter
    def status(self, value: ModernCommentStatus):
        '''Returns or sets the status of the comment.
                    Read/write :py:enum:`aspose.slides.ModernCommentStatus`.'''
        ...

    @property
    def as_i_comment(self) -> IComment:
        ...

    @property
    def text(self) -> str:
        ...

    @text.setter
    def text(self, value: str):
        ...

    @property
    def created_time(self) -> DateTime:
        ...

    @created_time.setter
    def created_time(self, value: DateTime):
        ...

    @property
    def slide(self) -> ISlide:
        ...

    @property
    def author(self) -> ICommentAuthor:
        ...

    @property
    def position(self) -> aspose.pydrawing.PointF:
        ...

    @position.setter
    def position(self, value: aspose.pydrawing.PointF):
        ...

    @property
    def parent_comment(self) -> IComment:
        ...

    @parent_comment.setter
    def parent_comment(self, value: IComment):
        ...

    ...

class INormalViewProperties:
    '''Represents normal view properties. The normal view consists of
                three content regions: the slide itself, a side content region, and a bottom content region.'''
    @property
    def show_outline_icons(self) -> bool:
        ...

    @show_outline_icons.setter
    def show_outline_icons(self, value: bool):
        ...

    @property
    def snap_vertical_splitter(self) -> bool:
        ...

    @snap_vertical_splitter.setter
    def snap_vertical_splitter(self, value: bool):
        ...

    @property
    def vertical_bar_state(self) -> SplitterBarStateType:
        ...

    @vertical_bar_state.setter
    def vertical_bar_state(self, value: SplitterBarStateType):
        ...

    @property
    def horizontal_bar_state(self) -> SplitterBarStateType:
        ...

    @horizontal_bar_state.setter
    def horizontal_bar_state(self, value: SplitterBarStateType):
        ...

    @property
    def prefer_single_view(self) -> bool:
        ...

    @prefer_single_view.setter
    def prefer_single_view(self, value: bool):
        ...

    @property
    def restored_left(self) -> INormalViewRestoredProperties:
        ...

    @property
    def restored_top(self) -> INormalViewRestoredProperties:
        ...

    ...

class INormalViewRestoredProperties:
    '''Specifies the sizing of the slide region ((width when a child of restoredTop, height when a
                child of restoredLeft) of the normal view, when the region is of a variable restored size(neither minimized nor maximized).'''
    @property
    def dimension_size(self) -> float:
        ...

    @dimension_size.setter
    def dimension_size(self, value: float):
        ...

    @property
    def auto_adjust(self) -> bool:
        ...

    @auto_adjust.setter
    def auto_adjust(self, value: bool):
        ...

    ...

class INotesSize:
    '''Represents a size of notes slide.'''
    @property
    def size(self) -> aspose.pydrawing.SizeF:
        '''Returns or sets the size in points.
                    Read/write :py:class:`aspose.pydrawing.SizeF`.'''
        ...

    @size.setter
    def size(self, value: aspose.pydrawing.SizeF):
        '''Returns or sets the size in points.
                    Read/write :py:class:`aspose.pydrawing.SizeF`.'''
        ...

    ...

class INotesSlide:
    '''Represents a notes slide in a presentation.'''
    def find_shape_by_alt_text(self, alt_text: str) -> IShape:
        ...

    def join_portions_with_same_formatting(self) -> None:
        ...

    def equals(self, slide: IBaseSlide) -> bool:
        ...

    def create_theme_effective(self) -> aspose.slides.theme.IThemeEffectiveData:
        ...

    @property
    def header_footer_manager(self) -> INotesSlideHeaderFooterManager:
        ...

    @property
    def notes_text_frame(self) -> ITextFrame:
        ...

    @property
    def parent_slide(self) -> ISlide:
        ...

    @property
    def as_i_base_slide(self) -> IBaseSlide:
        ...

    @property
    def as_i_override_themeable(self) -> aspose.slides.theme.IOverrideThemeable:
        ...

    @property
    def shapes(self) -> IShapeCollection:
        ...

    @property
    def controls(self) -> IControlCollection:
        ...

    @property
    def name(self) -> str:
        ...

    @name.setter
    def name(self, value: str):
        ...

    @property
    def slide_id(self) -> int:
        ...

    @property
    def custom_data(self) -> ICustomData:
        ...

    @property
    def timeline(self) -> IAnimationTimeLine:
        ...

    @property
    def slide_show_transition(self) -> ISlideShowTransition:
        ...

    @property
    def background(self) -> IBackground:
        ...

    @property
    def hyperlink_queries(self) -> IHyperlinkQueries:
        ...

    @property
    def show_master_shapes(self) -> bool:
        ...

    @show_master_shapes.setter
    def show_master_shapes(self, value: bool):
        ...

    @property
    def as_i_slide_component(self) -> ISlideComponent:
        ...

    @property
    def slide(self) -> IBaseSlide:
        ...

    @property
    def as_i_presentation_component(self) -> IPresentationComponent:
        ...

    @property
    def presentation(self) -> IPresentation:
        ...

    @property
    def theme_manager(self) -> aspose.slides.theme.IOverrideThemeManager:
        ...

    ...

class INotesSlideHeaderFooterManager:
    '''Represents manager which holds behavior of the notes slide placeholders, including header placeholder.'''
    def set_header_visibility(self, is_visible: bool) -> None:
        ...

    def set_header_text(self, text: str) -> None:
        ...

    def set_footer_visibility(self, is_visible: bool) -> None:
        ...

    def set_slide_number_visibility(self, is_visible: bool) -> None:
        ...

    def set_date_time_visibility(self, is_visible: bool) -> None:
        ...

    def set_footer_text(self, text: str) -> None:
        ...

    def set_date_time_text(self, text: str) -> None:
        ...

    @property
    def as_i_base_handout_notes_slide_header_footer_manag(self) -> IBaseHandoutNotesSlideHeaderFooterManag:
        ...

    @property
    def is_header_visible(self) -> bool:
        ...

    @property
    def as_i_base_slide_header_footer_manager(self) -> IBaseSlideHeaderFooterManager:
        ...

    @property
    def is_footer_visible(self) -> bool:
        ...

    @property
    def is_slide_number_visible(self) -> bool:
        ...

    @property
    def is_date_time_visible(self) -> bool:
        ...

    @property
    def as_i_base_header_footer_manager(self) -> IBaseHeaderFooterManager:
        ...

    ...

class INotesSlideManager:
    '''Notes slide manager.'''
    def add_notes_slide(self) -> INotesSlide:
        '''Returns the notes slide for the current slide, creating one if there isn't.
        :returns: :py:class:`aspose.slides.INotesSlide` for this slide.'''
        ...

    def remove_notes_slide(self) -> None:
        '''Removes notes slide of the current slide.'''
        ...

    @property
    def notes_slide(self) -> INotesSlide:
        ...

    ...

class IOleEmbeddedDataInfo:
    '''Represents embedded data info for OLE object.'''
    @property
    def embedded_file_data(self) -> bytes:
        ...

    @property
    def embedded_file_extension(self) -> str:
        ...

    ...

class IOleObjectFrame:
    '''Represents an OLE object on a slide.'''
    @overload
    def get_thumbnail(self) -> aspose.pydrawing.Bitmap:
        ...

    @overload
    def get_thumbnail(self, bounds: ShapeThumbnailBounds, scale_x: float, scale_y: float) -> aspose.pydrawing.Bitmap:
        ...

    @overload
    def get_image(self) -> IImage:
        ...

    @overload
    def get_image(self, bounds: ShapeThumbnailBounds, scale_x: float, scale_y: float) -> IImage:
        ...

    @overload
    def write_as_svg(self, stream: io.RawIOBase) -> None:
        ...

    @overload
    def write_as_svg(self, stream: io.RawIOBase, svg_options: aspose.slides.export.ISVGOptions) -> None:
        ...

    def set_embedded_data(self, embedded_data: IOleEmbeddedDataInfo) -> None:
        '''Sets information about OLE embedded data.
        :param embedded_data: Embedded data :py:class:`aspose.slides.IOleEmbeddedDataInfo`'''
        ...

    def add_placeholder(self, placeholder_to_copy_from: IPlaceholder) -> IPlaceholder:
        ...

    def remove_placeholder(self) -> None:
        ...

    def get_base_placeholder(self) -> IShape:
        ...

    @property
    def substitute_picture_format(self) -> IPictureFillFormat:
        ...

    @property
    def object_name(self) -> str:
        ...

    @object_name.setter
    def object_name(self, value: str):
        ...

    @property
    def embedded_data(self) -> IOleEmbeddedDataInfo:
        ...

    @property
    def object_prog_id(self) -> str:
        ...

    @object_prog_id.setter
    def object_prog_id(self, value: str):
        ...

    @property
    def link_file_name(self) -> str:
        ...

    @property
    def link_path_long(self) -> str:
        ...

    @link_path_long.setter
    def link_path_long(self, value: str):
        ...

    @property
    def link_path_relative(self) -> str:
        ...

    @property
    def embedded_file_label(self) -> str:
        ...

    @property
    def embedded_file_name(self) -> str:
        ...

    @property
    def is_object_icon(self) -> bool:
        ...

    @is_object_icon.setter
    def is_object_icon(self, value: bool):
        ...

    @property
    def is_object_link(self) -> bool:
        ...

    @property
    def update_automatic(self) -> bool:
        ...

    @update_automatic.setter
    def update_automatic(self, value: bool):
        ...

    @property
    def substitute_picture_title(self) -> str:
        ...

    @substitute_picture_title.setter
    def substitute_picture_title(self, value: str):
        ...

    @property
    def as_i_graphical_object(self) -> IGraphicalObject:
        ...

    @property
    def shape_lock(self) -> IGraphicalObjectLock:
        ...

    @property
    def graphical_object_lock(self) -> IGraphicalObjectLock:
        ...

    @property
    def as_i_shape(self) -> IShape:
        ...

    @property
    def is_text_holder(self) -> bool:
        ...

    @property
    def placeholder(self) -> IPlaceholder:
        ...

    @property
    def custom_data(self) -> ICustomData:
        ...

    @property
    def raw_frame(self) -> IShapeFrame:
        ...

    @raw_frame.setter
    def raw_frame(self, value: IShapeFrame):
        ...

    @property
    def frame(self) -> IShapeFrame:
        ...

    @frame.setter
    def frame(self, value: IShapeFrame):
        ...

    @property
    def line_format(self) -> ILineFormat:
        ...

    @property
    def three_d_format(self) -> IThreeDFormat:
        ...

    @property
    def effect_format(self) -> IEffectFormat:
        ...

    @property
    def fill_format(self) -> IFillFormat:
        ...

    @property
    def hidden(self) -> bool:
        ...

    @hidden.setter
    def hidden(self, value: bool):
        ...

    @property
    def z_order_position(self) -> int:
        ...

    @property
    def connection_site_count(self) -> int:
        ...

    @property
    def rotation(self) -> float:
        ...

    @rotation.setter
    def rotation(self, value: float):
        ...

    @property
    def x(self) -> float:
        ...

    @x.setter
    def x(self, value: float):
        ...

    @property
    def y(self) -> float:
        ...

    @y.setter
    def y(self, value: float):
        ...

    @property
    def width(self) -> float:
        ...

    @width.setter
    def width(self, value: float):
        ...

    @property
    def height(self) -> float:
        ...

    @height.setter
    def height(self, value: float):
        ...

    @property
    def alternative_text(self) -> str:
        ...

    @alternative_text.setter
    def alternative_text(self, value: str):
        ...

    @property
    def alternative_text_title(self) -> str:
        ...

    @alternative_text_title.setter
    def alternative_text_title(self, value: str):
        ...

    @property
    def name(self) -> str:
        ...

    @name.setter
    def name(self, value: str):
        ...

    @property
    def is_decorative(self) -> bool:
        ...

    @is_decorative.setter
    def is_decorative(self, value: bool):
        ...

    @property
    def unique_id(self) -> int:
        ...

    @property
    def office_interop_shape_id(self) -> int:
        ...

    @property
    def is_grouped(self) -> bool:
        ...

    @property
    def black_white_mode(self) -> BlackWhiteMode:
        ...

    @black_white_mode.setter
    def black_white_mode(self, value: BlackWhiteMode):
        ...

    @property
    def parent_group(self) -> IGroupShape:
        ...

    @property
    def as_i_hyperlink_container(self) -> IHyperlinkContainer:
        ...

    @property
    def as_i_slide_component(self) -> ISlideComponent:
        ...

    @property
    def slide(self) -> IBaseSlide:
        ...

    @property
    def as_i_presentation_component(self) -> IPresentationComponent:
        ...

    @property
    def presentation(self) -> IPresentation:
        ...

    @property
    def hyperlink_click(self) -> IHyperlink:
        ...

    @hyperlink_click.setter
    def hyperlink_click(self, value: IHyperlink):
        ...

    @property
    def hyperlink_mouse_over(self) -> IHyperlink:
        ...

    @hyperlink_mouse_over.setter
    def hyperlink_mouse_over(self, value: IHyperlink):
        ...

    @property
    def hyperlink_manager(self) -> IHyperlinkManager:
        ...

    ...

class IPPImage:
    '''Represents an image in a presentation.'''
    @overload
    def replace_image(self, new_image_data: bytes) -> None:
        '''Replaces image data.
        :param new_image_data: The new image's data.'''
        ...

    @overload
    def replace_image(self, new_image: aspose.pydrawing.Image) -> None:
        '''Replaces image.
        :param new_image: The new image.'''
        ...

    @overload
    def replace_image(self, new_image: IImage) -> None:
        '''Replaces image.
        :param new_image: The new image.'''
        ...

    @overload
    def replace_image(self, new_image: IPPImage) -> None:
        '''Replaces image.
        :param new_image: The new IPPImage.'''
        ...

    @property
    def binary_data(self) -> bytes:
        ...

    @property
    def system_image(self) -> aspose.pydrawing.Image:
        ...

    @property
    def image(self) -> IImage:
        '''Returns the copy of an image.
                    Read-only :py:attr:`aspose.slides.IPPImage.image`.'''
        ...

    @property
    def svg_image(self) -> ISvgImage:
        ...

    @svg_image.setter
    def svg_image(self, value: ISvgImage):
        ...

    @property
    def content_type(self) -> str:
        ...

    @property
    def width(self) -> int:
        '''Returns a width of an image.
                    Read-only :py:class:`int`.'''
        ...

    @property
    def height(self) -> int:
        '''Returns a height of an image.
                    Read-only :py:class:`int`.'''
        ...

    @property
    def x(self) -> int:
        '''Returns a X-offset of an image.
                    Read-only :py:class:`int`.'''
        ...

    @property
    def y(self) -> int:
        '''Returns a Y-offset of an image.
                    Read-only :py:class:`int`.'''
        ...

    ...

class IParagraph:
    '''Represents a paragraph of a text.'''
    def join_portions_with_same_formatting(self) -> None:
        '''Joins runs with same formatting.'''
        ...

    def get_rect(self) -> aspose.pydrawing.RectangleF:
        '''Get coordinates of rect that bounds paragraph. The rect includes all the lines of
                    text in paragraph, including empty ones.
        :returns: Rectangle that bounds paragraph :py:class:`aspose.pydrawing.RectangleF`'''
        ...

    def get_lines_count(self) -> int:
        '''Get number of lines in a paragraph.
        :returns: Lines count in a paragraph'''
        ...

    @property
    def portions(self) -> IPortionCollection:
        '''Returns the collection of a text portions.
                    Read-only :py:class:`aspose.slides.IPortionCollection`.'''
        ...

    @property
    def paragraph_format(self) -> IParagraphFormat:
        ...

    @property
    def text(self) -> str:
        '''Gets or sets the the plain text of a paragraph.
                    Read/write :py:class:`str`.'''
        ...

    @text.setter
    def text(self, value: str):
        '''Gets or sets the the plain text of a paragraph.
                    Read/write :py:class:`str`.'''
        ...

    @property
    def end_paragraph_portion_format(self) -> IPortionFormat:
        ...

    @end_paragraph_portion_format.setter
    def end_paragraph_portion_format(self, value: IPortionFormat):
        ...

    @property
    def as_i_slide_component(self) -> ISlideComponent:
        ...

    @property
    def slide(self) -> IBaseSlide:
        ...

    @property
    def as_i_presentation_component(self) -> IPresentationComponent:
        ...

    @property
    def presentation(self) -> IPresentation:
        ...

    ...

class IParagraphCollection:
    '''Represents a collection of a paragraphs.'''
    @overload
    def add(self, value: IParagraph) -> None:
        '''Adds a Paragraph to the end of collection.
        :param value: The Paragraph to be added to the end of the collection.'''
        ...

    @overload
    def add(self, value: IParagraphCollection) -> int:
        '''Adds a content of ParagraphCollection to the end of collection.
        :param value: The ParagraphCollection to be added to the end of the collection.
        :returns: The index at which the Paragraph has been added or -1 if there are nothing to add.'''
        ...

    @overload
    def insert(self, index: int, value: IParagraph) -> None:
        '''Inserts a Paragraph into the collection at the specified index.
        :param index: The zero-based index at which Paragraph should be inserted.
        :param value: The Paragraph to insert.'''
        ...

    @overload
    def insert(self, index: int, value: IParagraphCollection) -> None:
        '''Inserts a content of ParagraphCollection into the collection at the specified index.
        :param index: The zero-based index at which paragraphs should be inserted.
        :param value: The paragraphs to insert.'''
        ...

    @overload
    def add_from_html(self, text: str) -> None:
        '''Adds text from specified html string to the collection.
        :param text: HTML text.'''
        ...

    @overload
    def add_from_html(self, text: str, resolver: aspose.slides.importing.IExternalResourceResolver, uri: str) -> None:
        '''Adds text from specified html string to the collection.
        :param text: HTML text.
        :param resolver: Resolver callback object which resolves URIs and fetches referrenced objects.
        :param uri: URI for adding HTML document. Used for resolving relative links.'''
        ...

    def clear(self) -> None:
        '''Removes all elements from the collection.'''
        ...

    def remove_at(self, index: int) -> None:
        '''Removes the element at the specified index of the collection.
        :param index: The zero-based index of the element to remove.'''
        ...

    def remove(self, item: IParagraph) -> bool:
        '''Removes the first occurrence of a specific paragraph.
        :param item: The paragraph to remove from collection.
        :returns: true if ``item`` was successfully removed; otherwise, false.'''
        ...

    def export_to_html(self, first_paragraph_index: int, paragraphs_count: int, options: aspose.slides.export.ITextToHtmlConversionOptions) -> str:
        '''Converts specifying paragraphs to the HTML and returns it as String object.
        :param first_paragraph_index: First paragraph index :py:class:`int`
        :param paragraphs_count: Paragraph count :py:class:`int`
        :param options: Convert options :py:class:`aspose.slides.export.ITextToHtmlConversionOptions`
        :returns: Generated HTML.'''
        ...

    @property
    def count(self) -> int:
        '''Gets the number of elements actually contained in the collection.
                    Read-only :py:class:`int`.'''
        ...

    @property
    def as_i_slide_component(self) -> ISlideComponent:
        ...

    @property
    def as_i_enumerable(self) -> collections.abc.Iterable:
        ...

    @property
    def slide(self) -> IBaseSlide:
        ...

    @property
    def as_i_presentation_component(self) -> IPresentationComponent:
        ...

    @property
    def presentation(self) -> IPresentation:
        ...

    def __getitem__(self, key: int) -> IParagraph
        ...

    ...

class IParagraphFactory:
    '''Allows to create paragraphs'''
    @overload
    def create_paragraph(self) -> IParagraph:
        '''Creates a new empty paragraph.
        :returns: Paragraph.'''
        ...

    @overload
    def create_paragraph(self, paragraph: IParagraph) -> IParagraph:
        '''Creates a new paragraph with specified paragraph data using.
        :param paragraph: A paragraph to use data.
        :returns: Paragraph.'''
        ...

    ...

class IParagraphFormat:
    '''This class contains the paragraph formatting properties. Unlike :py:class:`aspose.slides.IParagraphFormatEffectiveData`, all properties of this class are writeable.'''
    def get_effective(self) -> IParagraphFormatEffectiveData:
        '''Gets effective paragraph formatting data with the inheritance applied.
        :returns: A :py:class:`aspose.slides.IParagraphFormatEffectiveData`.'''
        ...

    @property
    def bullet(self) -> IBulletFormat:
        '''Returns bullet format of the paragraph.
                    Read-only :py:class:`aspose.slides.IBulletFormat`.'''
        ...

    @property
    def depth(self) -> int:
        '''Returns or sets depth of the paragraph.
                    Value 0 means undefined value.
                    Read/write :py:class:`int`.'''
        ...

    @depth.setter
    def depth(self, value: int):
        '''Returns or sets depth of the paragraph.
                    Value 0 means undefined value.
                    Read/write :py:class:`int`.'''
        ...

    @property
    def alignment(self) -> TextAlignment:
        '''Returns or sets the text alignment in a paragraph with no inheritance.
                    Read/write :py:enum:`aspose.slides.TextAlignment`.'''
        ...

    @alignment.setter
    def alignment(self, value: TextAlignment):
        '''Returns or sets the text alignment in a paragraph with no inheritance.
                    Read/write :py:enum:`aspose.slides.TextAlignment`.'''
        ...

    @property
    def space_within(self) -> float:
        ...

    @space_within.setter
    def space_within(self, value: float):
        ...

    @property
    def space_before(self) -> float:
        ...

    @space_before.setter
    def space_before(self, value: float):
        ...

    @property
    def space_after(self) -> float:
        ...

    @space_after.setter
    def space_after(self, value: float):
        ...

    @property
    def east_asian_line_break(self) -> NullableBool:
        ...

    @east_asian_line_break.setter
    def east_asian_line_break(self, value: NullableBool):
        ...

    @property
    def right_to_left(self) -> NullableBool:
        ...

    @right_to_left.setter
    def right_to_left(self, value: NullableBool):
        ...

    @property
    def latin_line_break(self) -> NullableBool:
        ...

    @latin_line_break.setter
    def latin_line_break(self, value: NullableBool):
        ...

    @property
    def hanging_punctuation(self) -> NullableBool:
        ...

    @hanging_punctuation.setter
    def hanging_punctuation(self, value: NullableBool):
        ...

    @property
    def margin_left(self) -> float:
        ...

    @margin_left.setter
    def margin_left(self, value: float):
        ...

    @property
    def margin_right(self) -> float:
        ...

    @margin_right.setter
    def margin_right(self, value: float):
        ...

    @property
    def indent(self) -> float:
        '''Returns or sets paragraph First Line Indent/Hanging Indent with no inheritance. Hanging Indent can be defined with negative values.
                    Read/write :py:class:`float`.'''
        ...

    @indent.setter
    def indent(self, value: float):
        '''Returns or sets paragraph First Line Indent/Hanging Indent with no inheritance. Hanging Indent can be defined with negative values.
                    Read/write :py:class:`float`.'''
        ...

    @property
    def default_tab_size(self) -> float:
        ...

    @default_tab_size.setter
    def default_tab_size(self, value: float):
        ...

    @property
    def tabs(self) -> ITabCollection:
        '''Returns tabulations of a paragraph. No inheritance applied.
                    Read-only :py:class:`aspose.slides.ITabCollection`.'''
        ...

    @property
    def font_alignment(self) -> FontAlignment:
        ...

    @font_alignment.setter
    def font_alignment(self, value: FontAlignment):
        ...

    @property
    def default_portion_format(self) -> IPortionFormat:
        ...

    ...

class IParagraphFormatEffectiveData:
    '''Immutable object which contains effective paragraph formatting properties.'''
    @property
    def bullet(self) -> IBulletFormatEffectiveData:
        '''Returns a bullet format of a paragraph.
                    Read-only :py:class:`aspose.slides.IBulletFormatEffectiveData`.'''
        ...

    @property
    def depth(self) -> int:
        '''Returns a depth of a paragraph.
                    Read-only :py:class:`int`.'''
        ...

    @property
    def alignment(self) -> TextAlignment:
        '''Returns the text alignment in a paragraph.
                    Read-only :py:enum:`aspose.slides.TextAlignment`.'''
        ...

    @property
    def space_within(self) -> float:
        ...

    @property
    def space_before(self) -> float:
        ...

    @property
    def space_after(self) -> float:
        ...

    @property
    def east_asian_line_break(self) -> bool:
        ...

    @property
    def right_to_left(self) -> bool:
        ...

    @property
    def latin_line_break(self) -> bool:
        ...

    @property
    def hanging_punctuation(self) -> bool:
        ...

    @property
    def margin_left(self) -> float:
        ...

    @property
    def margin_right(self) -> float:
        ...

    @property
    def indent(self) -> float:
        '''Returns paragraph First Line Indent/Hanging Indent. Hanging Indent can be defined with negative values.
                    Read-only :py:class:`float`.'''
        ...

    @property
    def default_tab_size(self) -> float:
        ...

    @property
    def tabs(self) -> List[ITabEffectiveData]:
        '''Returns tabulations of a paragraph.
                    Read-only :py:class:`aspose.slides.ITabEffectiveData`[].'''
        ...

    @property
    def font_alignment(self) -> FontAlignment:
        ...

    @property
    def default_portion_format(self) -> IPortionFormatEffectiveData:
        ...

    ...

class IPathSegment:
    '''Represents segment of graphics path of GeometryShape'''
    @property
    def segment_data(self) -> List[float]:
        ...

    @property
    def path_command(self) -> PathCommandType:
        ...

    ...

class IPatternFormat:
    '''Represents a pattern to fill a shape.'''
    @overload
    def get_tile_image(self, background: aspose.pydrawing.Color, foreground: aspose.pydrawing.Color) -> aspose.pydrawing.Bitmap:
        '''Creates a tile image for the pattern fill with a specified colors.
        :param background: The background :py:class:`aspose.pydrawing.Color` for the pattern.
        :param foreground: The foreground :py:class:`aspose.pydrawing.Color` for the pattern.
        :returns: Tile :py:class:`aspose.pydrawing.Bitmap`.'''
        ...

    @overload
    def get_tile_image(self, style_color: aspose.pydrawing.Color) -> aspose.pydrawing.Bitmap:
        '''Creates a tile image for the pattern fill.
        :param style_color: The default :py:class:`aspose.pydrawing.Color`, 
                    defined in ShapeEx's StyleEx object. Fill's colors can depend on this.
        :returns: Tile :py:class:`aspose.pydrawing.Bitmap`.'''
        ...

    @overload
    def get_tile(self, background: aspose.pydrawing.Color, foreground: aspose.pydrawing.Color) -> IImage:
        '''Creates a tile image for the pattern fill with a specified colors.
        :param background: The background :py:class:`aspose.pydrawing.Color` for the pattern.
        :param foreground: The foreground :py:class:`aspose.pydrawing.Color` for the pattern.
        :returns: Tile :py:class:`aspose.pydrawing.Bitmap`.'''
        ...

    @overload
    def get_tile(self, style_color: aspose.pydrawing.Color) -> IImage:
        '''Creates a tile image for the pattern fill.
        :param style_color: The default :py:class:`aspose.pydrawing.Color`, 
                    defined in ShapeEx's StyleEx object. Fill's colors can depend on this.
        :returns: Tile :py:class:`aspose.pydrawing.Bitmap`.'''
        ...

    @property
    def pattern_style(self) -> PatternStyle:
        ...

    @pattern_style.setter
    def pattern_style(self, value: PatternStyle):
        ...

    @property
    def fore_color(self) -> IColorFormat:
        ...

    @property
    def back_color(self) -> IColorFormat:
        ...

    ...

class IPatternFormatEffectiveData:
    '''Immutable object which contains effective pattern filling properties.'''
    def get_tile_image(self, background: aspose.pydrawing.Color, foreground: aspose.pydrawing.Color) -> aspose.pydrawing.Bitmap:
        '''Creates a tile image for the pattern fill with a specified colors.
        :param background: The background :py:class:`aspose.pydrawing.Color` for the pattern.
        :param foreground: The foreground :py:class:`aspose.pydrawing.Color` for the pattern.
        :returns: Tile :py:class:`aspose.pydrawing.Bitmap`.'''
        ...

    def get_tile_i_image(self, background: aspose.pydrawing.Color, foreground: aspose.pydrawing.Color) -> IImage:
        '''Creates a tile image for the pattern fill with a specified colors.
        :param background: The background :py:class:`aspose.pydrawing.Color` for the pattern.
        :param foreground: The foreground :py:class:`aspose.pydrawing.Color` for the pattern.
        :returns: Tile :py:class:`aspose.slides.IImage`.'''
        ...

    @property
    def pattern_style(self) -> PatternStyle:
        ...

    @property
    def fore_color(self) -> aspose.pydrawing.Color:
        ...

    @property
    def back_color(self) -> aspose.pydrawing.Color:
        ...

    ...

class IPictureEffectiveData:
    '''Immutable object which contains effective picture properties.'''
    @property
    def image(self) -> IPPImage:
        '''Returns the embedded image.
                    Read-only :py:class:`aspose.slides.IPPImage`.'''
        ...

    @property
    def link_path_long(self) -> str:
        ...

    @property
    def image_transform(self) -> aspose.slides.effects.IImageTransformOCollectionEffectiveData:
        ...

    ...

class IPictureFillFormat:
    '''Represents a picture fill style.'''
    @overload
    def compress_image(self, delete_cropped_areas_of_image: bool, resolution: aspose.slides.export.PicturesCompression) -> bool:
        '''Compresses the image by reducing its size based on the shape size and specified resolution. Optionally, it also deletes cropped areas.
        :param delete_cropped_areas_of_image: If true, the method will remove the cropped areas of the image, potentially further reducing its size.
        :param resolution: The target resolution for compression, specified as a value of the :py:enum:`aspose.slides.export.PicturesCompression` enum.
        :returns: A :py:class:`bool` indicating whether the image was successfully compressed. Returns **True** if the image was resized or cropped, otherwise **False**.'''
        ...

    @overload
    def compress_image(self, delete_cropped_areas_of_image: bool, resolution: float) -> bool:
        '''Compresses the image by reducing its size based on the shape size and specified resolution. Optionally, it also deletes cropped areas.
        :param delete_cropped_areas_of_image: If true, the method will remove the cropped areas of the image, potentially further reducing its size.
        :param resolution: The target resolution in DPI. This value must be positive and defines how the image will be resized.
        :returns: A :py:class:`bool` indicating whether the image was successfully compressed. Returns **True** if the image was resized or cropped, otherwise **False**.'''
        ...

    def delete_picture_cropped_areas(self) -> IPPImage:
        '''Delete cropped areas of the fill Picture.
        :returns: Cropped image or origin image if cropping is not necessary.'''
        ...

    @property
    def dpi(self) -> int:
        '''Returns or sets the dpi which is used to fill a picture.
                    Read/write :py:class:`int`.'''
        ...

    @dpi.setter
    def dpi(self, value: int):
        '''Returns or sets the dpi which is used to fill a picture.
                    Read/write :py:class:`int`.'''
        ...

    @property
    def picture_fill_mode(self) -> PictureFillMode:
        ...

    @picture_fill_mode.setter
    def picture_fill_mode(self, value: PictureFillMode):
        ...

    @property
    def picture(self) -> ISlidesPicture:
        '''Returns the picture.
                    Read-only :py:class:`aspose.slides.ISlidesPicture`.'''
        ...

    @property
    def crop_left(self) -> float:
        ...

    @crop_left.setter
    def crop_left(self, value: float):
        ...

    @property
    def crop_top(self) -> float:
        ...

    @crop_top.setter
    def crop_top(self, value: float):
        ...

    @property
    def crop_right(self) -> float:
        ...

    @crop_right.setter
    def crop_right(self, value: float):
        ...

    @property
    def crop_bottom(self) -> float:
        ...

    @crop_bottom.setter
    def crop_bottom(self, value: float):
        ...

    @property
    def stretch_offset_left(self) -> float:
        ...

    @stretch_offset_left.setter
    def stretch_offset_left(self, value: float):
        ...

    @property
    def stretch_offset_top(self) -> float:
        ...

    @stretch_offset_top.setter
    def stretch_offset_top(self, value: float):
        ...

    @property
    def stretch_offset_right(self) -> float:
        ...

    @stretch_offset_right.setter
    def stretch_offset_right(self, value: float):
        ...

    @property
    def stretch_offset_bottom(self) -> float:
        ...

    @stretch_offset_bottom.setter
    def stretch_offset_bottom(self, value: float):
        ...

    @property
    def tile_offset_x(self) -> float:
        ...

    @tile_offset_x.setter
    def tile_offset_x(self, value: float):
        ...

    @property
    def tile_offset_y(self) -> float:
        ...

    @tile_offset_y.setter
    def tile_offset_y(self, value: float):
        ...

    @property
    def tile_scale_x(self) -> float:
        ...

    @tile_scale_x.setter
    def tile_scale_x(self, value: float):
        ...

    @property
    def tile_scale_y(self) -> float:
        ...

    @tile_scale_y.setter
    def tile_scale_y(self, value: float):
        ...

    @property
    def tile_alignment(self) -> RectangleAlignment:
        ...

    @tile_alignment.setter
    def tile_alignment(self, value: RectangleAlignment):
        ...

    @property
    def tile_flip(self) -> TileFlip:
        ...

    @tile_flip.setter
    def tile_flip(self, value: TileFlip):
        ...

    @property
    def as_i_fill_param_source(self) -> IFillParamSource:
        ...

    ...

class IPictureFillFormatEffectiveData:
    '''Immutable object which contains the properties of picture fill.'''
    @property
    def dpi(self) -> int:
        '''Returns the dpi which is used to fill a picture.
                    Read-only :py:class:`int`.'''
        ...

    @property
    def picture_fill_mode(self) -> PictureFillMode:
        ...

    @property
    def picture(self) -> IPictureEffectiveData:
        '''Returns the picture.
                    Read-only :py:class:`aspose.slides.IPictureEffectiveData`.'''
        ...

    @property
    def crop_left(self) -> float:
        ...

    @property
    def crop_top(self) -> float:
        ...

    @property
    def crop_right(self) -> float:
        ...

    @property
    def crop_bottom(self) -> float:
        ...

    @property
    def as_i_fill_param_source(self) -> IFillParamSource:
        ...

    ...

class IPictureFrame:
    '''Represents a frame with a picture inside.'''
    @overload
    def get_thumbnail(self) -> aspose.pydrawing.Bitmap:
        ...

    @overload
    def get_thumbnail(self, bounds: ShapeThumbnailBounds, scale_x: float, scale_y: float) -> aspose.pydrawing.Bitmap:
        ...

    @overload
    def get_image(self) -> IImage:
        ...

    @overload
    def get_image(self, bounds: ShapeThumbnailBounds, scale_x: float, scale_y: float) -> IImage:
        ...

    @overload
    def write_as_svg(self, stream: io.RawIOBase) -> None:
        ...

    @overload
    def write_as_svg(self, stream: io.RawIOBase, svg_options: aspose.slides.export.ISVGOptions) -> None:
        ...

    def get_geometry_paths(self) -> List[IGeometryPath]:
        ...

    def set_geometry_path(self, geometry_path: IGeometryPath) -> None:
        ...

    def set_geometry_paths(self, geometry_paths: List[IGeometryPath]) -> None:
        ...

    def create_shape_elements(self) -> List[IShapeElement]:
        ...

    def add_placeholder(self, placeholder_to_copy_from: IPlaceholder) -> IPlaceholder:
        ...

    def remove_placeholder(self) -> None:
        ...

    def get_base_placeholder(self) -> IShape:
        ...

    @property
    def shape_lock(self) -> IPictureFrameLock:
        ...

    @property
    def picture_frame_lock(self) -> IPictureFrameLock:
        ...

    @property
    def picture_format(self) -> IPictureFillFormat:
        ...

    @property
    def relative_scale_height(self) -> float:
        ...

    @relative_scale_height.setter
    def relative_scale_height(self, value: float):
        ...

    @property
    def relative_scale_width(self) -> float:
        ...

    @relative_scale_width.setter
    def relative_scale_width(self, value: float):
        ...

    @property
    def as_i_geometry_shape(self) -> IGeometryShape:
        ...

    @property
    def shape_style(self) -> IShapeStyle:
        ...

    @property
    def shape_type(self) -> ShapeType:
        ...

    @shape_type.setter
    def shape_type(self, value: ShapeType):
        ...

    @property
    def adjustments(self) -> IAdjustValueCollection:
        ...

    @property
    def as_i_shape(self) -> IShape:
        ...

    @property
    def is_text_holder(self) -> bool:
        ...

    @property
    def placeholder(self) -> IPlaceholder:
        ...

    @property
    def custom_data(self) -> ICustomData:
        ...

    @property
    def raw_frame(self) -> IShapeFrame:
        ...

    @raw_frame.setter
    def raw_frame(self, value: IShapeFrame):
        ...

    @property
    def frame(self) -> IShapeFrame:
        ...

    @frame.setter
    def frame(self, value: IShapeFrame):
        ...

    @property
    def line_format(self) -> ILineFormat:
        ...

    @property
    def three_d_format(self) -> IThreeDFormat:
        ...

    @property
    def effect_format(self) -> IEffectFormat:
        ...

    @property
    def fill_format(self) -> IFillFormat:
        ...

    @property
    def hidden(self) -> bool:
        ...

    @hidden.setter
    def hidden(self, value: bool):
        ...

    @property
    def z_order_position(self) -> int:
        ...

    @property
    def connection_site_count(self) -> int:
        ...

    @property
    def rotation(self) -> float:
        ...

    @rotation.setter
    def rotation(self, value: float):
        ...

    @property
    def x(self) -> float:
        ...

    @x.setter
    def x(self, value: float):
        ...

    @property
    def y(self) -> float:
        ...

    @y.setter
    def y(self, value: float):
        ...

    @property
    def width(self) -> float:
        ...

    @width.setter
    def width(self, value: float):
        ...

    @property
    def height(self) -> float:
        ...

    @height.setter
    def height(self, value: float):
        ...

    @property
    def alternative_text(self) -> str:
        ...

    @alternative_text.setter
    def alternative_text(self, value: str):
        ...

    @property
    def alternative_text_title(self) -> str:
        ...

    @alternative_text_title.setter
    def alternative_text_title(self, value: str):
        ...

    @property
    def name(self) -> str:
        ...

    @name.setter
    def name(self, value: str):
        ...

    @property
    def is_decorative(self) -> bool:
        ...

    @is_decorative.setter
    def is_decorative(self, value: bool):
        ...

    @property
    def unique_id(self) -> int:
        ...

    @property
    def office_interop_shape_id(self) -> int:
        ...

    @property
    def is_grouped(self) -> bool:
        ...

    @property
    def black_white_mode(self) -> BlackWhiteMode:
        ...

    @black_white_mode.setter
    def black_white_mode(self, value: BlackWhiteMode):
        ...

    @property
    def parent_group(self) -> IGroupShape:
        ...

    @property
    def as_i_hyperlink_container(self) -> IHyperlinkContainer:
        ...

    @property
    def as_i_slide_component(self) -> ISlideComponent:
        ...

    @property
    def slide(self) -> IBaseSlide:
        ...

    @property
    def as_i_presentation_component(self) -> IPresentationComponent:
        ...

    @property
    def presentation(self) -> IPresentation:
        ...

    @property
    def hyperlink_click(self) -> IHyperlink:
        ...

    @hyperlink_click.setter
    def hyperlink_click(self, value: IHyperlink):
        ...

    @property
    def hyperlink_mouse_over(self) -> IHyperlink:
        ...

    @hyperlink_mouse_over.setter
    def hyperlink_mouse_over(self, value: IHyperlink):
        ...

    @property
    def hyperlink_manager(self) -> IHyperlinkManager:
        ...

    ...

class IPictureFrameLock:
    '''Determines which operations are disabled on the parent PictureFrameEx.'''
    @property
    def grouping_locked(self) -> bool:
        ...

    @grouping_locked.setter
    def grouping_locked(self, value: bool):
        ...

    @property
    def select_locked(self) -> bool:
        ...

    @select_locked.setter
    def select_locked(self, value: bool):
        ...

    @property
    def rotation_locked(self) -> bool:
        ...

    @rotation_locked.setter
    def rotation_locked(self, value: bool):
        ...

    @property
    def aspect_ratio_locked(self) -> bool:
        ...

    @aspect_ratio_locked.setter
    def aspect_ratio_locked(self, value: bool):
        ...

    @property
    def position_locked(self) -> bool:
        ...

    @position_locked.setter
    def position_locked(self, value: bool):
        ...

    @property
    def size_locked(self) -> bool:
        ...

    @size_locked.setter
    def size_locked(self, value: bool):
        ...

    @property
    def edit_points_locked(self) -> bool:
        ...

    @edit_points_locked.setter
    def edit_points_locked(self, value: bool):
        ...

    @property
    def adjust_handles_locked(self) -> bool:
        ...

    @adjust_handles_locked.setter
    def adjust_handles_locked(self, value: bool):
        ...

    @property
    def arrowheads_locked(self) -> bool:
        ...

    @arrowheads_locked.setter
    def arrowheads_locked(self, value: bool):
        ...

    @property
    def shape_type_locked(self) -> bool:
        ...

    @shape_type_locked.setter
    def shape_type_locked(self, value: bool):
        ...

    @property
    def crop_locked(self) -> bool:
        ...

    @crop_locked.setter
    def crop_locked(self, value: bool):
        ...

    @property
    def as_i_base_shape_lock(self) -> IBaseShapeLock:
        ...

    @property
    def no_locks(self) -> bool:
        ...

    ...

class IPlaceholder:
    '''Represents a placeholder on a slide.'''
    @property
    def orientation(self) -> Orientation:
        '''Gets the orientation of a placeholder.
                    Read-only :py:enum:`aspose.slides.Orientation`.'''
        ...

    @property
    def size(self) -> PlaceholderSize:
        '''Gets the size of a placeholder.
                    Read-only :py:enum:`aspose.slides.PlaceholderSize`.'''
        ...

    @property
    def type(self) -> PlaceholderType:
        '''Gets the type of a placeholder.
                    Read-only :py:enum:`aspose.slides.PlaceholderType`.'''
        ...

    @property
    def index(self) -> int:
        '''Gets the index of a placeholder.
                    Read-only :py:class:`int`.'''
        ...

    ...

class IPortion:
    '''Represents a portion of text inside a text paragraph.'''
    @overload
    def add_field(self, field_type: IFieldType) -> None:
        '''Converts this portion to the automaticaly updated field.
        :param field_type: Type of field :py:class:`aspose.slides.IFieldType`'''
        ...

    @overload
    def add_field(self, internal_string: str) -> None:
        '''Converts this portion to the automaticaly updated field.
        :param internal_string: Internal name of FieldTypeEx  :py:class:`str`'''
        ...

    def remove_field(self) -> None:
        '''Converts this field portion to the simple portion.'''
        ...

    def get_rect(self) -> aspose.pydrawing.RectangleF:
        '''Get coordinates of rect that bounds portion. The rect includes all the lines of
                     text in portion, including empty ones.
        :returns: Rectangle that bounds portion :py:class:`aspose.pydrawing.RectangleF`'''
        ...

    def get_coordinates(self) -> aspose.pydrawing.PointF:
        '''Get coordinates of the beginning of the portion. The X coordinate of point represents the 
                    portion beginning from the first character including left side bearing. The Y coordinate 
                    includes top side bearing.
        :returns: Coordinates of the beginning of the portion :py:class:`aspose.pydrawing.PointF`'''
        ...

    @property
    def portion_format(self) -> IPortionFormat:
        ...

    @property
    def text(self) -> str:
        '''Gets or sets the plain text of a portion.
                    Read/write :py:class:`str`.'''
        ...

    @text.setter
    def text(self, value: str):
        '''Gets or sets the plain text of a portion.
                    Read/write :py:class:`str`.'''
        ...

    @property
    def field(self) -> IField:
        '''Returns a field of this portion.
                    Read-only :py:class:`aspose.slides.IField`.'''
        ...

    @property
    def as_i_slide_component(self) -> ISlideComponent:
        ...

    @property
    def slide(self) -> IBaseSlide:
        ...

    @property
    def as_i_presentation_component(self) -> IPresentationComponent:
        ...

    @property
    def presentation(self) -> IPresentation:
        ...

    ...

class IPortionCollection:
    '''Represents a collection of a portions.'''
    def add(self, value: IPortion) -> None:
        '''Adds a Portion to the end of collection.
        :param value: The Portion to be added to the end of the collection.'''
        ...

    def index_of(self, item: IPortion) -> int:
        '''Determines the index of a specific portion in collection.
        :param item: The portion to locate in the collection.
        :returns: The index of ``item`` if found in the collection; otherwise, -1.'''
        ...

    def insert(self, index: int, value: IPortion) -> None:
        '''Inserts a Portion into the collection at the specified index.
        :param index: The zero-based index at which Portion should be inserted.
        :param value: The Portion to insert.'''
        ...

    def clear(self) -> None:
        '''Removes all elements from the collection.'''
        ...

    def contains(self, item: IPortion) -> bool:
        '''Determines whether the :py:class:`System.Collections.Generic.ICollection`1` contains a specific value.
        :param item: The object to locate in the :py:class:`System.Collections.Generic.ICollection`1`.
        :returns: true if ``item`` is found in the :py:class:`System.Collections.Generic.ICollection`1`; otherwise, false.'''
        ...

    def remove(self, item: IPortion) -> bool:
        '''Removes the first occurrence of a specific object from the :py:class:`System.Collections.Generic.ICollection`1`.
        :param item: The object to remove from the :py:class:`System.Collections.Generic.ICollection`1`.
        :returns: true if ``item`` was successfully removed from the :py:class:`System.Collections.Generic.ICollection`1`; otherwise, false. This method also returns false if ``item`` is not found in the original :py:class:`System.Collections.Generic.ICollection`1`.'''
        ...

    def remove_at(self, index: int) -> None:
        '''Removes the element at the specified index of the collection.
        :param index: The zero-based index of the element to remove.'''
        ...

    @property
    def count(self) -> int:
        '''Gets the number of elements actually contained in the collection.
                    Read-only :py:class:`int`.'''
        ...

    @property
    def as_i_enumerable(self) -> collections.abc.Iterable:
        ...

    def __getitem__(self, key: int) -> IPortion
        ...

    ...

class IPortionFactory:
    '''Allows to create test portions'''
    @overload
    def create_portion(self) -> IPortion:
        '''Creates an empty text portion.
        :returns: Portion.'''
        ...

    @overload
    def create_portion(self, str: str) -> IPortion:
        '''Creates a text portion from specified string.
        :param str: String.
        :returns: Portion.'''
        ...

    @overload
    def create_portion(self, portion: IPortion) -> IPortion:
        '''Creates a portion with the using of a specified portion data.
        :param portion: A portion to use.
        :returns: Portion.'''
        ...

    ...

class IPortionFormat:
    '''This class contains the text portion formatting properties. Unlike :py:class:`aspose.slides.IPortionFormatEffectiveData`, all properties of this class are writeable.'''
    def get_effective(self) -> IPortionFormatEffectiveData:
        '''Gets effective portion formatting data with the inheritance applied.
        :returns: A :py:class:`aspose.slides.IPortionFormatEffectiveData`.'''
        ...

    @property
    def bookmark_id(self) -> str:
        ...

    @bookmark_id.setter
    def bookmark_id(self, value: str):
        ...

    @property
    def smart_tag_clean(self) -> bool:
        ...

    @smart_tag_clean.setter
    def smart_tag_clean(self, value: bool):
        ...

    @property
    def as_i_base_portion_format(self) -> IBasePortionFormat:
        ...

    @property
    def as_i_hyperlink_container(self) -> IHyperlinkContainer:
        ...

    @property
    def line_format(self) -> ILineFormat:
        ...

    @property
    def fill_format(self) -> IFillFormat:
        ...

    @property
    def effect_format(self) -> IEffectFormat:
        ...

    @property
    def highlight_color(self) -> IColorFormat:
        ...

    @property
    def underline_line_format(self) -> ILineFormat:
        ...

    @property
    def underline_fill_format(self) -> IFillFormat:
        ...

    @property
    def font_bold(self) -> NullableBool:
        ...

    @font_bold.setter
    def font_bold(self, value: NullableBool):
        ...

    @property
    def font_italic(self) -> NullableBool:
        ...

    @font_italic.setter
    def font_italic(self, value: NullableBool):
        ...

    @property
    def kumimoji(self) -> NullableBool:
        ...

    @kumimoji.setter
    def kumimoji(self, value: NullableBool):
        ...

    @property
    def normalise_height(self) -> NullableBool:
        ...

    @normalise_height.setter
    def normalise_height(self, value: NullableBool):
        ...

    @property
    def proof_disabled(self) -> NullableBool:
        ...

    @proof_disabled.setter
    def proof_disabled(self, value: NullableBool):
        ...

    @property
    def font_underline(self) -> TextUnderlineType:
        ...

    @font_underline.setter
    def font_underline(self, value: TextUnderlineType):
        ...

    @property
    def text_cap_type(self) -> TextCapType:
        ...

    @text_cap_type.setter
    def text_cap_type(self, value: TextCapType):
        ...

    @property
    def strikethrough_type(self) -> TextStrikethroughType:
        ...

    @strikethrough_type.setter
    def strikethrough_type(self, value: TextStrikethroughType):
        ...

    @property
    def is_hard_underline_line(self) -> NullableBool:
        ...

    @is_hard_underline_line.setter
    def is_hard_underline_line(self, value: NullableBool):
        ...

    @property
    def is_hard_underline_fill(self) -> NullableBool:
        ...

    @is_hard_underline_fill.setter
    def is_hard_underline_fill(self, value: NullableBool):
        ...

    @property
    def font_height(self) -> float:
        ...

    @font_height.setter
    def font_height(self, value: float):
        ...

    @property
    def latin_font(self) -> IFontData:
        ...

    @latin_font.setter
    def latin_font(self, value: IFontData):
        ...

    @property
    def east_asian_font(self) -> IFontData:
        ...

    @east_asian_font.setter
    def east_asian_font(self, value: IFontData):
        ...

    @property
    def complex_script_font(self) -> IFontData:
        ...

    @complex_script_font.setter
    def complex_script_font(self, value: IFontData):
        ...

    @property
    def symbol_font(self) -> IFontData:
        ...

    @symbol_font.setter
    def symbol_font(self, value: IFontData):
        ...

    @property
    def escapement(self) -> float:
        ...

    @escapement.setter
    def escapement(self, value: float):
        ...

    @property
    def kerning_minimal_size(self) -> float:
        ...

    @kerning_minimal_size.setter
    def kerning_minimal_size(self, value: float):
        ...

    @property
    def language_id(self) -> str:
        ...

    @language_id.setter
    def language_id(self, value: str):
        ...

    @property
    def alternative_language_id(self) -> str:
        ...

    @alternative_language_id.setter
    def alternative_language_id(self, value: str):
        ...

    @property
    def spacing(self) -> float:
        ...

    @spacing.setter
    def spacing(self, value: float):
        ...

    @property
    def hyperlink_click(self) -> IHyperlink:
        ...

    @hyperlink_click.setter
    def hyperlink_click(self, value: IHyperlink):
        ...

    @property
    def hyperlink_mouse_over(self) -> IHyperlink:
        ...

    @hyperlink_mouse_over.setter
    def hyperlink_mouse_over(self, value: IHyperlink):
        ...

    @property
    def hyperlink_manager(self) -> IHyperlinkManager:
        ...

    ...

class IPortionFormatEffectiveData:
    '''Immutable object which contains effective text portion formatting properties.'''
    @property
    def bookmark_id(self) -> str:
        ...

    @property
    def hyperlink_click(self) -> IHyperlink:
        ...

    @property
    def hyperlink_mouse_over(self) -> IHyperlink:
        ...

    @property
    def as_i_base_portion_format_effective_data(self) -> IBasePortionFormatEffectiveData:
        ...

    @property
    def line_format(self) -> ILineFormatEffectiveData:
        ...

    @property
    def fill_format(self) -> IFillFormatEffectiveData:
        ...

    @property
    def effect_format(self) -> IEffectFormatEffectiveData:
        ...

    @property
    def highlight_color(self) -> aspose.pydrawing.Color:
        ...

    @property
    def underline_line_format(self) -> ILineFormatEffectiveData:
        ...

    @property
    def underline_fill_format(self) -> IFillFormatEffectiveData:
        ...

    @property
    def font_bold(self) -> bool:
        ...

    @property
    def font_italic(self) -> bool:
        ...

    @property
    def kumimoji(self) -> bool:
        ...

    @property
    def normalise_height(self) -> bool:
        ...

    @property
    def proof_disabled(self) -> bool:
        ...

    @property
    def font_underline(self) -> TextUnderlineType:
        ...

    @property
    def text_cap_type(self) -> TextCapType:
        ...

    @property
    def strikethrough_type(self) -> TextStrikethroughType:
        ...

    @property
    def smart_tag_clean(self) -> bool:
        ...

    @property
    def is_hard_underline_line(self) -> bool:
        ...

    @property
    def is_hard_underline_fill(self) -> bool:
        ...

    @property
    def font_height(self) -> float:
        ...

    @property
    def latin_font(self) -> IFontData:
        ...

    @property
    def east_asian_font(self) -> IFontData:
        ...

    @property
    def complex_script_font(self) -> IFontData:
        ...

    @property
    def symbol_font(self) -> IFontData:
        ...

    @property
    def escapement(self) -> float:
        ...

    @property
    def kerning_minimal_size(self) -> float:
        ...

    @property
    def language_id(self) -> str:
        ...

    @property
    def alternative_language_id(self) -> str:
        ...

    @property
    def spacing(self) -> float:
        ...

    ...

class IPresentation:
    '''Presentation document'''
    @overload
    def save(self, fname: str, format: aspose.slides.export.SaveFormat) -> None:
        '''Saves all slides of a presentation to a file with the specified format.
        :param fname: Path to the created file.
        :param format: Format of the exported data.'''
        ...

    @overload
    def save(self, stream: io.RawIOBase, format: aspose.slides.export.SaveFormat) -> None:
        '''Saves all slides of a presentation to a stream in the specified format.
        :param stream: Output stream.
        :param format: Format of the exported data.'''
        ...

    @overload
    def save(self, fname: str, format: aspose.slides.export.SaveFormat, options: aspose.slides.export.ISaveOptions) -> None:
        '''Saves all slides of a presentation to a file with the specified format and with additional options.
        :param fname: Path to the created file.
        :param format: Format of the exported data.
        :param options: Additional format options.'''
        ...

    @overload
    def save(self, stream: io.RawIOBase, format: aspose.slides.export.SaveFormat, options: aspose.slides.export.ISaveOptions) -> None:
        '''Saves all slides of a presentation to a stream in the specified format and with additional options.
        :param stream: Output stream.
        :param format: Format of the exported data.
        :param options: Additional format options.'''
        ...

    @overload
    def save(self, fname: str, slides: List[int], format: aspose.slides.export.SaveFormat) -> None:
        '''Saves specified slides of a presentation to a file with the specified format.
        :param fname: Path to the created file.
        :param slides: Array with slide positions, starting from 1.
        :param format: Format of the exported data.'''
        ...

    @overload
    def save(self, fname: str, slides: List[int], format: aspose.slides.export.SaveFormat, options: aspose.slides.export.ISaveOptions) -> None:
        '''Saves specified slides of a presentation to a file with the specified format.
        :param fname: Path to the created file.
        :param slides: Array with slide positions, starting from 1.
        :param format: Format of the exported data.
        :param options: Additional format options.'''
        ...

    @overload
    def save(self, stream: io.RawIOBase, slides: List[int], format: aspose.slides.export.SaveFormat) -> None:
        '''Saves specified slides of a presentation to a stream in the specified format.
        :param stream: Output stream.
        :param slides: Array with slide positions, starting from 1.
        :param format: Format of the exported data.'''
        ...

    @overload
    def save(self, stream: io.RawIOBase, slides: List[int], format: aspose.slides.export.SaveFormat, options: aspose.slides.export.ISaveOptions) -> None:
        '''Saves specified slides of a presentation to a stream in the specified format.
        :param stream: Output stream.
        :param slides: Array with slide positions, starting from 1.
        :param format: Format of the exported data.
        :param options: Additional format options.'''
        ...

    @overload
    def save(self, options: aspose.slides.export.xaml.IXamlOptions) -> None:
        '''Saves all slides of a presentation to a set of files representing XAML markup.
        :param options: The XAML format options.'''
        ...

    @overload
    def get_thumbnails(self, options: aspose.slides.export.IRenderingOptions) -> List[aspose.pydrawing.Bitmap]:
        '''Returns a Thumbnail Bitmap objects for all slides of a presentation.
        :param options: Rendering options.
        :returns: Bitmap objects.'''
        ...

    @overload
    def get_thumbnails(self, options: aspose.slides.export.IRenderingOptions, slides: List[int]) -> List[aspose.pydrawing.Bitmap]:
        '''Returns a Thumbnail Image objects for specified slides of a presentation.
        :param options: Rendering options.
        :param slides: Array with slide positions, starting from 1.
        :returns: Bitmap objects.'''
        ...

    @overload
    def get_thumbnails(self, options: aspose.slides.export.IRenderingOptions, scale_x: float, scale_y: float) -> List[aspose.pydrawing.Bitmap]:
        '''Returns a Thumbnail Bitmap objects for all slides of a presentation with custom scaling.
        :param options: Rendering options.
        :param scale_x: The value by which to scale this Thumbnail in the x-axis direction.
        :param scale_y: The value by which to scale this Thumbnail in the y-axis direction.
        :returns: Bitmap objects.'''
        ...

    @overload
    def get_thumbnails(self, options: aspose.slides.export.IRenderingOptions, slides: List[int], scale_x: float, scale_y: float) -> List[aspose.pydrawing.Bitmap]:
        '''Returns a Thumbnail Bitmap objects for specified slides of a presentation with custom scaling.
        :param options: Rendering options.
        :param slides: Array with slide positions, starting from 1.
        :param scale_x: The value by which to scale this Thumbnail in the x-axis direction.
        :param scale_y: The value by which to scale this Thumbnail in the y-axis direction.
        :returns: Bitmap objects.'''
        ...

    @overload
    def get_thumbnails(self, options: aspose.slides.export.IRenderingOptions, image_size: aspose.pydrawing.Size) -> List[aspose.pydrawing.Bitmap]:
        '''Returns a Thumbnail Bitmap objects for all slides of a presentation with specified size.
        :param options: Rendering options.
        :param image_size: Size of the image to create.
        :returns: Bitmap objects.'''
        ...

    @overload
    def get_thumbnails(self, options: aspose.slides.export.IRenderingOptions, slides: List[int], image_size: aspose.pydrawing.Size) -> List[aspose.pydrawing.Bitmap]:
        '''Returns a Thumbnail Bitmap objects for specified slides of a presentation with specified size.
        :param options: Rendering options.
        :param slides: Array with slide positions, starting from 1.
        :param image_size: Size of the image to create.
        :returns: Bitmap objects.'''
        ...

    @overload
    def get_images(self, options: aspose.slides.export.IRenderingOptions) -> List[IImage]:
        '''Returns a Thumbnail Image objects for all slides of a presentation.
        :param options: Rendering options.
        :returns: Bitmap objects.'''
        ...

    @overload
    def get_images(self, options: aspose.slides.export.IRenderingOptions, slides: List[int]) -> List[IImage]:
        '''Returns a Thumbnail Bitmap objects for specified slides of a presentation.
        :param options: Rendering options.
        :param slides: Array with slide positions, starting from 1.
        :returns: Bitmap objects.'''
        ...

    @overload
    def get_images(self, options: aspose.slides.export.IRenderingOptions, scale_x: float, scale_y: float) -> List[IImage]:
        '''Returns a Thumbnail Image objects for all slides of a presentation with custom scaling.
        :param options: Rendering options.
        :param scale_x: The value by which to scale this Thumbnail in the x-axis direction.
        :param scale_y: The value by which to scale this Thumbnail in the y-axis direction.
        :returns: Bitmap objects.'''
        ...

    @overload
    def get_images(self, options: aspose.slides.export.IRenderingOptions, slides: List[int], scale_x: float, scale_y: float) -> List[IImage]:
        '''Returns a Thumbnail Image objects for specified slides of a presentation with custom scaling.
        :param options: Rendering options.
        :param slides: Array with slide positions, starting from 1.
        :param scale_x: The value by which to scale this Thumbnail in the x-axis direction.
        :param scale_y: The value by which to scale this Thumbnail in the y-axis direction.
        :returns: Bitmap objects.'''
        ...

    @overload
    def get_images(self, options: aspose.slides.export.IRenderingOptions, image_size: aspose.pydrawing.Size) -> List[IImage]:
        '''Returns a Thumbnail Image objects for all slides of a presentation with specified size.
        :param options: Rendering options.
        :param image_size: Size of the image to create.
        :returns: Bitmap objects.'''
        ...

    @overload
    def get_images(self, options: aspose.slides.export.IRenderingOptions, slides: List[int], image_size: aspose.pydrawing.Size) -> List[IImage]:
        '''Returns a Thumbnail Image objects for specified slides of a presentation with specified size.
        :param options: Rendering options.
        :param slides: Array with slide positions, starting from 1.
        :param image_size: Size of the image to create.
        :returns: Bitmap objects.'''
        ...

    @overload
    def print(self) -> None:
        '''Prints the whole presentation to the default printer.'''
        ...

    @overload
    def print(self, printer_settings: aspose.pydrawing.Printing.PrinterSettings) -> None:
        '''Prints the presentation according to the specified printer settings,
                    using the standard (no User Interface) print controller.
        :param printer_settings: The .NET printer settings to use.'''
        ...

    @overload
    def print(self, printer_name: str) -> None:
        '''Print the whole presentation to the specified printer,
                    using the standard (no User Interface) print controller.
        :param printer_name: The name of the printer.'''
        ...

    @overload
    def print(self, printer_settings: aspose.pydrawing.Printing.PrinterSettings, pres_name: str) -> None:
        '''Prints the document according to the specified printer settings, using
                    the standard (no User Interface) print controller and a presentation name.
        :param printer_settings: The .NET printer settings to use.
        :param pres_name: The presentation name to display (for example, in a print
                    status dialog box or printer queue) while printing the presentation.'''
        ...

    @overload
    def highlight_text(self, text: str, highlight_color: aspose.pydrawing.Color) -> None:
        '''Highlights all matches of the sample text with the specified color.
        :param text: The text to highlight.
        :param highlight_color: The color to highlight the text.'''
        ...

    @overload
    def highlight_text(self, text: str, highlight_color: aspose.pydrawing.Color, options: ITextSearchOptions, callback: IFindResultCallback) -> None:
        '''Highlights all matches of the sample text with the specified color.
        :param text: The text to highlight.
        :param highlight_color: The color to highlight the text.
        :param options: Text search options :py:class:`aspose.slides.ITextSearchOptions`.
        :param callback: The callback object for receiving search results :py:class:`aspose.slides.IFindResultCallback`.'''
        ...

    def get_slide_by_id(self, id: int) -> IBaseSlide:
        '''Returns a Slide, MasterSlide or LayoutSlide by Id.
        :param id: Id of a slide.
        :returns: IBaseSlide object.'''
        ...

    def join_portions_with_same_formatting(self) -> None:
        '''Joins runs with same formatting in all paragraphs in all acceptable shapes in all slides.'''
        ...

    def highlight_regex(self, regex: str, highlight_color: aspose.pydrawing.Color) -> None:
        ...

    def replace_text(self, old_text: str, new_text: str, options: ITextSearchOptions, callback: IFindResultCallback) -> None:
        '''Replaces all occurrences of the specified text with another specified text.
        :param old_text: The string to be replaced.
        :param new_text: The string to replace all occurrences of oldText.
        :param options: Text search options :py:class:`aspose.slides.ITextSearchOptions`.
        :param callback: The callback object for receiving search results :py:class:`aspose.slides.IFindResultCallback`.'''
        ...

    def replace_regex(self, regex: str, new_text: str) -> None:
        ...

    @property
    def current_date_time(self) -> DateTime:
        ...

    @current_date_time.setter
    def current_date_time(self, value: DateTime):
        ...

    @property
    def header_footer_manager(self) -> IPresentationHeaderFooterManager:
        ...

    @property
    def protection_manager(self) -> IProtectionManager:
        ...

    @property
    def slides(self) -> ISlideCollection:
        '''Returns a list of all slides that are defined in the presentation.
                    Read-only :py:class:`aspose.slides.ISlideCollection`.'''
        ...

    @property
    def sections(self) -> ISectionCollection:
        '''Returns a list of all slides sections that are defined in the presentation.
                    Read-only :py:class:`aspose.slides.ISectionCollection`.'''
        ...

    @property
    def slide_size(self) -> ISlideSize:
        ...

    @property
    def notes_size(self) -> INotesSize:
        ...

    @property
    def layout_slides(self) -> IGlobalLayoutSlideCollection:
        ...

    @property
    def masters(self) -> IMasterSlideCollection:
        '''Returns a list of all master slides that are defined in the presentation.
                    Read-only :py:class:`aspose.slides.IMasterSlideCollection`.'''
        ...

    @property
    def master_notes_slide_manager(self) -> IMasterNotesSlideManager:
        ...

    @property
    def master_handout_slide_manager(self) -> IMasterHandoutSlideManager:
        ...

    @property
    def fonts_manager(self) -> IFontsManager:
        ...

    @property
    def default_text_style(self) -> ITextStyle:
        ...

    @property
    def comment_authors(self) -> ICommentAuthorCollection:
        ...

    @property
    def document_properties(self) -> IDocumentProperties:
        ...

    @property
    def images(self) -> IImageCollection:
        '''Returns the collection of all images in the presentation.
                    Read-only :py:class:`aspose.slides.IImageCollection`.'''
        ...

    @property
    def audios(self) -> IAudioCollection:
        '''Returns the collection of all embedded audio files in the presentation.
                    Read-only :py:class:`aspose.slides.IAudioCollection`.'''
        ...

    @property
    def videos(self) -> IVideoCollection:
        '''Returns the collection of all embedded video files in the presentation.
                    Read-only :py:class:`aspose.slides.IVideoCollection`.'''
        ...

    @property
    def custom_data(self) -> ICustomData:
        ...

    @property
    def vba_project(self) -> aspose.slides.vba.IVbaProject:
        ...

    @vba_project.setter
    def vba_project(self, value: aspose.slides.vba.IVbaProject):
        ...

    @property
    def source_format(self) -> SourceFormat:
        ...

    @property
    def master_theme(self) -> aspose.slides.theme.IMasterTheme:
        ...

    @property
    def hyperlink_queries(self) -> IHyperlinkQueries:
        ...

    @property
    def view_properties(self) -> IViewProperties:
        ...

    @property
    def first_slide_number(self) -> int:
        ...

    @first_slide_number.setter
    def first_slide_number(self, value: int):
        ...

    @property
    def all_custom_xml_parts(self) -> List[ICustomXmlPart]:
        ...

    @property
    def digital_signatures(self) -> IDigitalSignatureCollection:
        ...

    @property
    def as_i_disposable(self) -> IDisposable:
        ...

    @property
    def as_i_presentation_component(self) -> IPresentationComponent:
        ...

    @property
    def presentation(self) -> IPresentation:
        ...

    ...

class IPresentationComponent:
    '''Represents a component of a presentation.'''
    @property
    def presentation(self) -> IPresentation:
        '''Returns the presentation. 
                    Read-only :py:class:`aspose.slides.IPresentation`.'''
        ...

    ...

class IPresentationFactory:
    '''Allows to create presentation via COM interface'''
    @overload
    def create_presentation(self) -> IPresentation:
        '''Creates new presentation.
        :returns: New presentation'''
        ...

    @overload
    def create_presentation(self, options: ILoadOptions) -> IPresentation:
        '''Creates new presentation with additional load options
        :param options: Load options
        :returns: New presentation'''
        ...

    @overload
    def get_presentation_info(self, file: str) -> IPresentationInfo:
        '''Gets info about presentation in specified file.
        :param file: Presentation file.
        :returns: Presentation info'''
        ...

    @overload
    def get_presentation_info(self, stream: io.RawIOBase) -> IPresentationInfo:
        '''Gets info about presentation in specified stream.
        :param stream: Presentation stream.
        :returns: Presentation info.'''
        ...

    @overload
    def read_presentation(self, data: bytes) -> IPresentation:
        '''Reads an existing presentation from array
        :param data: Array to read
        :returns: Read presentation'''
        ...

    @overload
    def read_presentation(self, data: bytes, options: ILoadOptions) -> IPresentation:
        '''Reads an existing presentation from array with additional load options
        :param data: Array to read
        :param options: Load options
        :returns: Read presentation'''
        ...

    @overload
    def read_presentation(self, stream: io.RawIOBase) -> IPresentation:
        '''Reads an existing presentation from stream
        :param stream: Input stream to read
        :returns: Read presentation'''
        ...

    @overload
    def read_presentation(self, stream: io.RawIOBase, options: ILoadOptions) -> IPresentation:
        '''Reads an existing presentation from stream with additional load options
        :param stream: Input stream to read
        :param options: Load options
        :returns: Read presentation'''
        ...

    @overload
    def read_presentation(self, file: str) -> IPresentation:
        '''Reads an existing presentation from file
        :param file: File name
        :returns: Read presentation'''
        ...

    @overload
    def read_presentation(self, file: str, options: ILoadOptions) -> IPresentation:
        '''Reads an existing presentation from stream with additional load options
        :param file: File name
        :param options: Load options
        :returns: Read presentation'''
        ...

    @overload
    def get_presentation_text(self, file: str, mode: TextExtractionArrangingMode) -> IPresentationText:
        '''Retrieves the raw text from the slides
        :param file: Input file
        :param mode: Extraction mode
        :returns: The instance of PresentationText containing the SlideText array representing the raw slides text'''
        ...

    @overload
    def get_presentation_text(self, stream: io.RawIOBase, mode: TextExtractionArrangingMode) -> IPresentationText:
        '''Retrieves the raw text from the slides
        :param stream: Input stream
        :param mode: Extraction mode
        :returns: The instance of PresentationText containing the SlideText array representing the raw slides text'''
        ...

    @overload
    def get_presentation_text(self, stream: io.RawIOBase, mode: TextExtractionArrangingMode, options: ILoadOptions) -> IPresentationText:
        '''Retrieves the raw text from the slides
        :param stream: Input stream
        :param mode: Extraction mode
        :param options: Load options
        :returns: The instance of PresentationText containing the SlideText array representing the raw slides text'''
        ...

    ...

class IPresentationHeaderFooterManager:
    '''Represents manager which holds behavior of all footer, date-time and page number placeholders of presentation.'''
    def set_all_headers_visibility(self, is_visible: bool) -> None:
        '''Changes all header placeholders visibility, including notes master, notes slides and handout master.
        :param is_visible: true - makes a header placeholders visible, otherwise - hides them.'''
        ...

    def set_all_footers_visibility(self, is_visible: bool) -> None:
        '''Changes all footer placeholders visibility, including master slides, layout slides and slides.
        :param is_visible: true - makes a footer placeholders visible, otherwise - hides them.'''
        ...

    def set_all_slide_numbers_visibility(self, is_visible: bool) -> None:
        '''Changes all page number placeholders visibility, including master slides, layout slides and slides.
        :param is_visible: true - makes a page number placeholders visible, otherwise - hides them.'''
        ...

    def set_all_date_times_visibility(self, is_visible: bool) -> None:
        '''Changes all date-time placeholders visibility, including master slides, layout slides and slides.
        :param is_visible: true - makes a date-time placeholders visible, otherwise - hides them.'''
        ...

    def set_all_headers_text(self, text: str) -> None:
        '''Sets text to all header placeholders, including notes master, notes slides and handout master.
        :param text: Text to set.'''
        ...

    def set_all_footers_text(self, text: str) -> None:
        '''Sets text to all footer placeholders, including master slides, layout slides and slides.
        :param text: Text to set.'''
        ...

    def set_all_date_times_text(self, text: str) -> None:
        '''Sets text to all date-time placeholders, including master slides, layout slides and slides.
        :param text: Text to set.'''
        ...

    def set_visibility_on_all_title_slides(self, is_visible: bool) -> None:
        '''Changes the footer, date-time and page number placeholders visibility for all title slides and for first layout slide.
                    Title slides – slides based on first layout slide (regardless of type of this first layout).
        :param is_visible: true - makes a placeholders visible, otherwise - hides them.'''
        ...

    @property
    def as_i_base_header_footer_manager(self) -> IBaseHeaderFooterManager:
        ...

    ...

class IPresentationInfo:
    '''Information about presentation file'''
    @overload
    def write_binded_presentation(self, stream: io.RawIOBase) -> None:
        '''Writes binded presentation to stream.
        :param stream: The stream must be seekable and writable.'''
        ...

    @overload
    def write_binded_presentation(self, file: str) -> None:
        '''Writes binded presentation to file.
        :param file: Presentation file.'''
        ...

    def check_password(self, password: str) -> bool:
        '''Checks whether a password is correct for a presentation protected with open password.
        :param password: The password to check.
        :returns: True if the presentation is protected with open password and the password is correct and false otherwise.'''
        ...

    def check_write_protection(self, password: str) -> bool:
        '''Checks whether a password to modify is correct for a write protected presentation.
        :param password: The password to check.
        :returns: True if the presentation is write protected and the password is correct. False otherwise.'''
        ...

    def read_document_properties(self) -> IDocumentProperties:
        '''Gets document properties of binded presentation.
        :returns: Document properties :py:class:`aspose.slides.IDocumentProperties`'''
        ...

    def update_document_properties(self, document_properties: IDocumentProperties) -> None:
        '''Updates properties of binded presentation.
        :param document_properties: Document properties :py:class:`aspose.slides.IDocumentProperties`'''
        ...

    @property
    def is_encrypted(self) -> bool:
        ...

    @property
    def is_password_protected(self) -> bool:
        ...

    @property
    def is_write_protected(self) -> NullableBool:
        ...

    @property
    def load_format(self) -> LoadFormat:
        ...

    ...

class IPresentationText:
    '''Represents the text extracted from the slide'''
    @property
    def slides_text(self) -> List[ISlideText]:
        ...

    ...

class IProgressCallback:
    '''Represents a callback object for saving progress updates in percentage.'''
    def reporting(self, progress_value: float) -> None:
        '''Reports a progress update.
        :param progress_value: The value of the updated progress.'''
        ...

    ...

class IProtectionManager:
    '''Presentation password protection management.'''
    def encrypt(self, encryption_password: str) -> None:
        '''Encrypts Presentation with specified password.
        :param encryption_password: The password.'''
        ...

    def remove_encryption(self) -> None:
        '''Removes the encryption.'''
        ...

    def set_write_protection(self, password: str) -> None:
        '''Set write protection for this presentation with specified password.
        :param password: The password.'''
        ...

    def remove_write_protection(self) -> None:
        '''Removes write protection for this presentation.'''
        ...

    def check_write_protection(self, password: str) -> bool:
        '''Determines whether a presentation is a password protected to modify.
        :param password: The password for checking.
        :returns: True if the password is valid; otherwise, false.'''
        ...

    @property
    def encrypt_document_properties(self) -> bool:
        ...

    @encrypt_document_properties.setter
    def encrypt_document_properties(self, value: bool):
        ...

    @property
    def is_encrypted(self) -> bool:
        ...

    @property
    def is_only_document_properties_loaded(self) -> bool:
        ...

    @property
    def is_write_protected(self) -> bool:
        ...

    @property
    def encryption_password(self) -> str:
        ...

    @property
    def read_only_recommended(self) -> bool:
        ...

    @read_only_recommended.setter
    def read_only_recommended(self, value: bool):
        ...

    ...

class IResourceLoadingArgs:
    '''Interface for external resource loading arguments.'''
    def set_data(self, data: bytes) -> None:
        '''Sets user provided data of the resource which used if :py:func:`Aspose.Slides.IResourceLoadingCallback.ResourceLoading(Aspose.Slide.` 
                    returns :py:attr:`aspose.slides.ResourceLoadingAction.USER_PROVIDED`.
        :param data: Provided data of the resource :py:class:`int`[]'''
        ...

    @property
    def original_uri(self) -> str:
        ...

    @property
    def uri(self) -> str:
        '''URI of the resource which is used for downloading if :py:func:`Aspose.Slides.IResourceLoadingCallback.ResourceLoading(Aspose.Slide.` 
                    returns :py:attr:`aspose.slides.ResourceLoadingAction.DEFAULT`. 
                    Initially it's set to original URI of the resource, but can be redefined to any value.'''
        ...

    @uri.setter
    def uri(self, value: str):
        '''URI of the resource which is used for downloading if :py:func:`Aspose.Slides.IResourceLoadingCallback.ResourceLoading(Aspose.Slide.` 
                    returns :py:attr:`aspose.slides.ResourceLoadingAction.DEFAULT`. 
                    Initially it's set to original URI of the resource, but can be redefined to any value.'''
        ...

    ...

class IResourceLoadingCallback:
    '''Callback interface used to manage external resources loading.'''
    def resource_loading(self, args: IResourceLoadingArgs) -> ResourceLoadingAction:
        '''Callback method which regulates external resources loading.
        :param args: The loading resource data :py:class:`aspose.slides.IResourceLoadingArgs`.
        :returns: The resource loading decision :py:enum:`aspose.slides.ResourceLoadingAction`.'''
        ...

    ...

class IRow:
    '''Represents a row in a table.'''
    @overload
    def set_text_format(self, source: IPortionFormat) -> None:
        ...

    @overload
    def set_text_format(self, source: IParagraphFormat) -> None:
        ...

    @overload
    def set_text_format(self, source: ITextFrameFormat) -> None:
        ...

    @property
    def height(self) -> float:
        '''Returns the height of a row.
                    Read-only :py:class:`float`.'''
        ...

    @property
    def minimal_height(self) -> float:
        ...

    @minimal_height.setter
    def minimal_height(self, value: float):
        ...

    @property
    def row_format(self) -> IRowFormat:
        ...

    @property
    def as_i_cell_collection(self) -> ICellCollection:
        ...

    @property
    def as_i_bulk_text_formattable(self) -> IBulkTextFormattable:
        ...

    @property
    def as_i_slide_component(self) -> ISlideComponent:
        ...

    @property
    def slide(self) -> IBaseSlide:
        ...

    @property
    def as_i_presentation_component(self) -> IPresentationComponent:
        ...

    @property
    def presentation(self) -> IPresentation:
        ...

    @property
    def as_i_collection(self) -> list:
        ...

    @property
    def as_i_enumerable(self) -> collections.abc.Iterable:
        ...

    def __getitem__(self, key: int) -> ICell
        ...

    ...

class IRowCollection:
    '''Represents table row collection.'''
    def add_clone(self, templ: IRow, with_attached_rows: bool) -> List[IRow]:
        '''Creates a copy of the specified template row and inserts it at the bottom of a table.
        :param templ: Row which is used as a template.
        :param with_attached_rows: True to copy also all rows attached to the template row.
        :returns: Added rows.'''
        ...

    def insert_clone(self, index: int, templ: IRow, with_attached_rows: bool) -> List[IRow]:
        '''Creates a copy of the specified template row and insert it at the specified position in a table.
        :param index: Index of a new row.
        :param templ: Row which is used as a template.
        :param with_attached_rows: True to copy also all rows attached to the template row.
        :returns: Inserted rows.'''
        ...

    def remove_at(self, first_row_index: int, with_attached_rows: bool) -> None:
        '''Removes a row at the specified position from a table.
        :param first_row_index: Index of a row to delete.
        :param with_attached_rows: True to delete also all attached rows.'''
        ...

    @property
    def as_i_collection(self) -> list:
        ...

    @property
    def as_i_enumerable(self) -> collections.abc.Iterable:
        ...

    def __getitem__(self, key: int) -> IRow
        ...

    ...

class IRowFormat:
    '''Represents format of a table row.'''
    def get_effective(self) -> IRowFormatEffectiveData:
        '''Gets effective table row formatting properties with inheritance and table styles applied.
        :returns: A :py:class:`aspose.slides.IRowFormatEffectiveData`.'''
        ...

    ...

class IRowFormatEffectiveData:
    '''Immutable object which contains effective table row formatting properties.'''
    @property
    def as_i_base_table_format_effective_data(self) -> IBaseTableFormatEffectiveData:
        ...

    @property
    def fill_format(self) -> IFillFormatEffectiveData:
        ...

    @property
    def border_left(self) -> ILineFormatEffectiveData:
        ...

    @property
    def border_top(self) -> ILineFormatEffectiveData:
        ...

    @property
    def border_right(self) -> ILineFormatEffectiveData:
        ...

    @property
    def border_bottom(self) -> ILineFormatEffectiveData:
        ...

    @property
    def border_diagonal_down(self) -> ILineFormatEffectiveData:
        ...

    @property
    def border_diagonal_up(self) -> ILineFormatEffectiveData:
        ...

    ...

class ISection:
    '''Represents section of slides.'''
    def get_slides_list_of_section(self) -> ISectionSlideCollection:
        '''Returns list of slides in the section.
        :returns: List of slides :py:class:`aspose.slides.ISectionSlideCollection`'''
        ...

    @property
    def name(self) -> str:
        '''Name of the section.'''
        ...

    @name.setter
    def name(self, value: str):
        '''Name of the section.'''
        ...

    @property
    def section_id(self) -> Guid:
        ...

    @property
    def started_from_slide(self) -> ISlide:
        ...

    ...

class ISectionCollection:
    '''Represents a collection of sections.'''
    def add_section(self, name: str, started_from_slide: ISlide) -> ISection:
        '''Add new section started form specific slide.
        :param name: Name of the section
        :param started_from_slide: First slide of section
        :returns: Added section.'''
        ...

    def add_empty_section(self, name: str, index: int) -> ISection:
        '''Add empty section to specified position of the collection.
        :param name: Name of the section
        :param index: Index of new section.
        :returns: Added section.'''
        ...

    def remove_section_with_slides(self, section: ISection) -> None:
        '''Remove section and slides contained in the section.
        :param section: The section to remove from the collection.'''
        ...

    def remove_section(self, section: ISection) -> None:
        '''Remove section. Slides contained in the section will be merged into previous section.
        :param section: The section to remove from the collection.'''
        ...

    def reorder_section_with_slides(self, section: ISection, index: int) -> None:
        '''Moves section and its slides from the collection to the specified position.
        :param index: Target index.
        :param section: Section to move.'''
        ...

    def append_empty_section(self, name: str) -> ISection:
        '''Add empty section to the end of the collection.
        :param name: Name of the section
        :returns: Added section.'''
        ...

    def index_of(self, section: ISection) -> int:
        '''Returns an index of the specified section in the collection.
        :param section: Section to find.
        :returns: Index of a section or -1 if section not from this collection.'''
        ...

    def clear(self) -> None:
        '''Removes all sections from the collection.'''
        ...

    @property
    def as_i_collection(self) -> list:
        ...

    @property
    def as_i_enumerable(self) -> collections.abc.Iterable:
        ...

    def __getitem__(self, key: int) -> ISection
        ...

    ...

class ISectionSlideCollection:
    '''Represents a collection of a slides in the section.'''
    @property
    def as_i_collection(self) -> list:
        ...

    @property
    def as_i_enumerable(self) -> collections.abc.Iterable:
        ...

    def __getitem__(self, key: int) -> ISlide
        ...

    ...

class ISectionZoomFrame:
    '''Represents a Section Zoom object in a slide.'''
    @overload
    def get_thumbnail(self) -> aspose.pydrawing.Bitmap:
        ...

    @overload
    def get_thumbnail(self, bounds: ShapeThumbnailBounds, scale_x: float, scale_y: float) -> aspose.pydrawing.Bitmap:
        ...

    @overload
    def get_image(self) -> IImage:
        ...

    @overload
    def get_image(self, bounds: ShapeThumbnailBounds, scale_x: float, scale_y: float) -> IImage:
        ...

    @overload
    def write_as_svg(self, stream: io.RawIOBase) -> None:
        ...

    @overload
    def write_as_svg(self, stream: io.RawIOBase, svg_options: aspose.slides.export.ISVGOptions) -> None:
        ...

    def add_placeholder(self, placeholder_to_copy_from: IPlaceholder) -> IPlaceholder:
        ...

    def remove_placeholder(self) -> None:
        ...

    def get_base_placeholder(self) -> IShape:
        ...

    @property
    def target_section(self) -> ISection:
        ...

    @target_section.setter
    def target_section(self, value: ISection):
        ...

    @property
    def as_i_zoom_object(self) -> IZoomObject:
        ...

    @property
    def image_type(self) -> ZoomImageType:
        ...

    @image_type.setter
    def image_type(self, value: ZoomImageType):
        ...

    @property
    def return_to_parent(self) -> bool:
        ...

    @return_to_parent.setter
    def return_to_parent(self, value: bool):
        ...

    @property
    def show_background(self) -> bool:
        ...

    @show_background.setter
    def show_background(self, value: bool):
        ...

    @property
    def zoom_image(self) -> IPPImage:
        ...

    @zoom_image.setter
    def zoom_image(self, value: IPPImage):
        ...

    @property
    def transition_duration(self) -> float:
        ...

    @transition_duration.setter
    def transition_duration(self, value: float):
        ...

    @property
    def as_i_graphical_object(self) -> IGraphicalObject:
        ...

    @property
    def shape_lock(self) -> IGraphicalObjectLock:
        ...

    @property
    def graphical_object_lock(self) -> IGraphicalObjectLock:
        ...

    @property
    def as_i_shape(self) -> IShape:
        ...

    @property
    def is_text_holder(self) -> bool:
        ...

    @property
    def placeholder(self) -> IPlaceholder:
        ...

    @property
    def custom_data(self) -> ICustomData:
        ...

    @property
    def raw_frame(self) -> IShapeFrame:
        ...

    @raw_frame.setter
    def raw_frame(self, value: IShapeFrame):
        ...

    @property
    def frame(self) -> IShapeFrame:
        ...

    @frame.setter
    def frame(self, value: IShapeFrame):
        ...

    @property
    def line_format(self) -> ILineFormat:
        ...

    @property
    def three_d_format(self) -> IThreeDFormat:
        ...

    @property
    def effect_format(self) -> IEffectFormat:
        ...

    @property
    def fill_format(self) -> IFillFormat:
        ...

    @property
    def hidden(self) -> bool:
        ...

    @hidden.setter
    def hidden(self, value: bool):
        ...

    @property
    def z_order_position(self) -> int:
        ...

    @property
    def connection_site_count(self) -> int:
        ...

    @property
    def rotation(self) -> float:
        ...

    @rotation.setter
    def rotation(self, value: float):
        ...

    @property
    def x(self) -> float:
        ...

    @x.setter
    def x(self, value: float):
        ...

    @property
    def y(self) -> float:
        ...

    @y.setter
    def y(self, value: float):
        ...

    @property
    def width(self) -> float:
        ...

    @width.setter
    def width(self, value: float):
        ...

    @property
    def height(self) -> float:
        ...

    @height.setter
    def height(self, value: float):
        ...

    @property
    def alternative_text(self) -> str:
        ...

    @alternative_text.setter
    def alternative_text(self, value: str):
        ...

    @property
    def alternative_text_title(self) -> str:
        ...

    @alternative_text_title.setter
    def alternative_text_title(self, value: str):
        ...

    @property
    def name(self) -> str:
        ...

    @name.setter
    def name(self, value: str):
        ...

    @property
    def is_decorative(self) -> bool:
        ...

    @is_decorative.setter
    def is_decorative(self, value: bool):
        ...

    @property
    def unique_id(self) -> int:
        ...

    @property
    def office_interop_shape_id(self) -> int:
        ...

    @property
    def is_grouped(self) -> bool:
        ...

    @property
    def black_white_mode(self) -> BlackWhiteMode:
        ...

    @black_white_mode.setter
    def black_white_mode(self, value: BlackWhiteMode):
        ...

    @property
    def parent_group(self) -> IGroupShape:
        ...

    @property
    def as_i_hyperlink_container(self) -> IHyperlinkContainer:
        ...

    @property
    def as_i_slide_component(self) -> ISlideComponent:
        ...

    @property
    def slide(self) -> IBaseSlide:
        ...

    @property
    def as_i_presentation_component(self) -> IPresentationComponent:
        ...

    @property
    def presentation(self) -> IPresentation:
        ...

    @property
    def hyperlink_click(self) -> IHyperlink:
        ...

    @hyperlink_click.setter
    def hyperlink_click(self, value: IHyperlink):
        ...

    @property
    def hyperlink_mouse_over(self) -> IHyperlink:
        ...

    @hyperlink_mouse_over.setter
    def hyperlink_mouse_over(self, value: IHyperlink):
        ...

    @property
    def hyperlink_manager(self) -> IHyperlinkManager:
        ...

    ...

class IShape:
    '''Represents a shape on a slide.'''
    @overload
    def get_thumbnail(self) -> aspose.pydrawing.Bitmap:
        '''Returns shape thumbnail.
                    ShapeThumbnailBounds.Shape shape thumbnail bounds type is used by default.
        :returns: Shape thumbnail.'''
        ...

    @overload
    def get_thumbnail(self, bounds: ShapeThumbnailBounds, scale_x: float, scale_y: float) -> aspose.pydrawing.Bitmap:
        '''Returns shape thumbnail.
        :param bounds: Shape thumbnail bounds type.
        :param scale_x: X scale
        :param scale_y: Y scale
        :returns: Shape thumbnail or None in case when ShapeThumbnailBounds.Appearance is used and a shape doesn't have visible elements.'''
        ...

    @overload
    def get_image(self) -> IImage:
        '''Returns shape thumbnail.
                    ShapeThumbnailBounds.Shape shape thumbnail bounds type is used by default.
        :returns: Shape thumbnail.'''
        ...

    @overload
    def get_image(self, bounds: ShapeThumbnailBounds, scale_x: float, scale_y: float) -> IImage:
        '''Returns shape thumbnail.
        :param bounds: Shape thumbnail bounds type.
        :param scale_x: X scale
        :param scale_y: Y scale
        :returns: Shape thumbnail or None in case when ShapeThumbnailBounds.Appearance is used and a shape doesn't have visible elements.'''
        ...

    @overload
    def write_as_svg(self, stream: io.RawIOBase) -> None:
        '''Saves content of Shape as SVG file.
        :param stream: Target stream'''
        ...

    @overload
    def write_as_svg(self, stream: io.RawIOBase, svg_options: aspose.slides.export.ISVGOptions) -> None:
        '''Saves content of Shape as SVG file.
        :param stream: Target stream
        :param svg_options: SVG generation options'''
        ...

    def add_placeholder(self, placeholder_to_copy_from: IPlaceholder) -> IPlaceholder:
        '''Adds a new placeholder if there is no and sets placeholder properties to a specified one.
        :param placeholder_to_copy_from: Placeholder to copy content from.
        :returns: New :py:class:`aspose.slides.IPlaceholder`.'''
        ...

    def remove_placeholder(self) -> None:
        '''Defines that this shape isn't a placeholder.'''
        ...

    def get_base_placeholder(self) -> IShape:
        '''Returns a basic placeholder shape (shape from the layout and/or master slide that the current shape is inherited from).'''
        ...

    @property
    def is_text_holder(self) -> bool:
        ...

    @property
    def placeholder(self) -> IPlaceholder:
        '''Returns the placeholder for a shape.
                    Read-only :py:class:`aspose.slides.IPlaceholder`.'''
        ...

    @property
    def custom_data(self) -> ICustomData:
        ...

    @property
    def raw_frame(self) -> IShapeFrame:
        ...

    @raw_frame.setter
    def raw_frame(self, value: IShapeFrame):
        ...

    @property
    def frame(self) -> IShapeFrame:
        '''Returns or sets the shape frame's properties.
                    Read/write :py:class:`aspose.slides.IShapeFrame`.'''
        ...

    @frame.setter
    def frame(self, value: IShapeFrame):
        '''Returns or sets the shape frame's properties.
                    Read/write :py:class:`aspose.slides.IShapeFrame`.'''
        ...

    @property
    def line_format(self) -> ILineFormat:
        ...

    @property
    def three_d_format(self) -> IThreeDFormat:
        ...

    @property
    def effect_format(self) -> IEffectFormat:
        ...

    @property
    def fill_format(self) -> IFillFormat:
        ...

    @property
    def hidden(self) -> bool:
        '''Determines whether the shape is hidden.
                    Read/write :py:class:`bool`.'''
        ...

    @hidden.setter
    def hidden(self, value: bool):
        '''Determines whether the shape is hidden.
                    Read/write :py:class:`bool`.'''
        ...

    @property
    def z_order_position(self) -> int:
        ...

    @property
    def connection_site_count(self) -> int:
        ...

    @property
    def rotation(self) -> float:
        '''Returns or sets the number of degrees the specified shape is rotated around
                    the z-axis. A positive value indicates clockwise rotation; a negative value
                    indicates counterclockwise rotation.
                    Read/write :py:class:`float`.'''
        ...

    @rotation.setter
    def rotation(self, value: float):
        '''Returns or sets the number of degrees the specified shape is rotated around
                    the z-axis. A positive value indicates clockwise rotation; a negative value
                    indicates counterclockwise rotation.
                    Read/write :py:class:`float`.'''
        ...

    @property
    def x(self) -> float:
        '''Returns or sets the x-coordinate of the upper-left corner of the shape.
                    Read/write :py:class:`float`.'''
        ...

    @x.setter
    def x(self, value: float):
        '''Returns or sets the x-coordinate of the upper-left corner of the shape.
                    Read/write :py:class:`float`.'''
        ...

    @property
    def y(self) -> float:
        '''Returns or sets the y-coordinate of the upper-left corner of the shape.
                    Read/write :py:class:`float`.'''
        ...

    @y.setter
    def y(self, value: float):
        '''Returns or sets the y-coordinate of the upper-left corner of the shape.
                    Read/write :py:class:`float`.'''
        ...

    @property
    def width(self) -> float:
        '''Returns or sets the width of the shape.
                    Read/write :py:class:`float`.'''
        ...

    @width.setter
    def width(self, value: float):
        '''Returns or sets the width of the shape.
                    Read/write :py:class:`float`.'''
        ...

    @property
    def height(self) -> float:
        '''Returns or sets the height of the shape.
                    Read/write :py:class:`float`.'''
        ...

    @height.setter
    def height(self, value: float):
        '''Returns or sets the height of the shape.
                    Read/write :py:class:`float`.'''
        ...

    @property
    def alternative_text(self) -> str:
        ...

    @alternative_text.setter
    def alternative_text(self, value: str):
        ...

    @property
    def alternative_text_title(self) -> str:
        ...

    @alternative_text_title.setter
    def alternative_text_title(self, value: str):
        ...

    @property
    def name(self) -> str:
        '''Returns or sets the name of a shape.
                    Read/write :py:class:`str`.'''
        ...

    @name.setter
    def name(self, value: str):
        '''Returns or sets the name of a shape.
                    Read/write :py:class:`str`.'''
        ...

    @property
    def is_decorative(self) -> bool:
        ...

    @is_decorative.setter
    def is_decorative(self, value: bool):
        ...

    @property
    def shape_lock(self) -> IBaseShapeLock:
        ...

    @property
    def unique_id(self) -> int:
        ...

    @property
    def office_interop_shape_id(self) -> int:
        ...

    @property
    def is_grouped(self) -> bool:
        ...

    @property
    def black_white_mode(self) -> BlackWhiteMode:
        ...

    @black_white_mode.setter
    def black_white_mode(self, value: BlackWhiteMode):
        ...

    @property
    def parent_group(self) -> IGroupShape:
        ...

    @property
    def as_i_hyperlink_container(self) -> IHyperlinkContainer:
        ...

    @property
    def as_i_slide_component(self) -> ISlideComponent:
        ...

    @property
    def slide(self) -> IBaseSlide:
        ...

    @property
    def as_i_presentation_component(self) -> IPresentationComponent:
        ...

    @property
    def presentation(self) -> IPresentation:
        ...

    @property
    def hyperlink_click(self) -> IHyperlink:
        ...

    @hyperlink_click.setter
    def hyperlink_click(self, value: IHyperlink):
        ...

    @property
    def hyperlink_mouse_over(self) -> IHyperlink:
        ...

    @hyperlink_mouse_over.setter
    def hyperlink_mouse_over(self, value: IHyperlink):
        ...

    @property
    def hyperlink_manager(self) -> IHyperlinkManager:
        ...

    ...

class IShapeBevel:
    '''Represents properties of shape's main face relief.'''
    @property
    def width(self) -> float:
        '''Bevel width.
                    Read/write :py:class:`float`.'''
        ...

    @width.setter
    def width(self, value: float):
        '''Bevel width.
                    Read/write :py:class:`float`.'''
        ...

    @property
    def height(self) -> float:
        '''Bevel height.
                    Read/write :py:class:`float`.'''
        ...

    @height.setter
    def height(self, value: float):
        '''Bevel height.
                    Read/write :py:class:`float`.'''
        ...

    @property
    def bevel_type(self) -> BevelPresetType:
        ...

    @bevel_type.setter
    def bevel_type(self, value: BevelPresetType):
        ...

    ...

class IShapeBevelEffectiveData:
    '''Immutable object which contains effective shape's face relief properties.'''
    @property
    def width(self) -> float:
        '''Bevel width.
                    Read-only :py:class:`float`.'''
        ...

    @property
    def height(self) -> float:
        '''Bevel height.
                    Read-only :py:class:`float`.'''
        ...

    @property
    def bevel_type(self) -> BevelPresetType:
        ...

    ...

class IShapeCollection:
    '''Represents a collection of a shapes.'''
    @overload
    def add_chart(self, type: aspose.slides.charts.ChartType, x: float, y: float, width: float, height: float) -> aspose.slides.charts.IChart:
        '''Creates a new Chart, initialize it with sample series data and settings and adds 
                    it to the end of the collection.
        :param type: Type of chart.
        :param x: X coordinate of a new chart.
        :param y: Y coordinate of a new chart.
        :param width: Chart's width.
        :param height: Chart's height.
        :returns: Created chart.'''
        ...

    @overload
    def add_chart(self, type: aspose.slides.charts.ChartType, x: float, y: float, width: float, height: float, init_with_sample: bool) -> aspose.slides.charts.IChart:
        '''Creates a new Chart and adds it to the end of the collection.
        :param type: Type of chart.
        :param x: X coordinate of a new chart.
        :param y: Y coordinate of a new chart.
        :param width: Chart's width.
        :param height: Chart's height.
        :param init_with_sample: If true then new chart will be initialized with sample series data and settings.
                    If false then new chart will have no series and minimum settings. In this case 
                    chart creation will be more fast.
        :returns: Created chart.'''
        ...

    @overload
    def insert_chart(self, type: aspose.slides.charts.ChartType, x: float, y: float, width: float, height: float, index: int) -> aspose.slides.charts.IChart:
        '''Creates a new Chart, initialize it with sample series data and settings and inserts 
                    it to the specified position in the collection.
        :param type: Type of chart.
        :param x: X coordinate of a new chart.
        :param y: Y coordinate of a new chart.
        :param width: Chart's width.
        :param height: Chart's height.
        :param index: Chart's position in the collection.
        :returns: Created chart.'''
        ...

    @overload
    def insert_chart(self, type: aspose.slides.charts.ChartType, x: float, y: float, width: float, height: float, index: int, init_with_sample: bool) -> aspose.slides.charts.IChart:
        '''Creates a new Chart and inserts it to the specified position in the collection.
        :param type: Type of chart.
        :param x: X coordinate of a new chart.
        :param y: Y coordinate of a new chart.
        :param width: Chart's width.
        :param height: Chart's height.
        :param index: Chart's position in the collection.
        :param init_with_sample: If true then new chart will be initialized with sample series data and settings.
                    If false then new chart will have no series and minimum settings. In this case 
                    chart creation will be more fast.
        :returns: Created chart.'''
        ...

    @overload
    def add_ole_object_frame(self, x: float, y: float, width: float, height: float, data_info: IOleEmbeddedDataInfo) -> IOleObjectFrame:
        '''Adds a new OLE object to the end of a collection.
        :param x: X coordinate of a new OLE frame.
        :param y: Y coordinate of a new OLE frame.
        :param width: Width of a new OLE frame.
        :param height: Height of a new OLE frame.
        :param data_info: Embedded data info :py:class:`aspose.slides.IOleEmbeddedDataInfo`.
        :returns: Created OLE object.'''
        ...

    @overload
    def add_ole_object_frame(self, x: float, y: float, width: float, height: float, class_name: str, path: str) -> IOleObjectFrame:
        '''Adds a new OLE object to the end of a collection.
        :param x: X coordinate of a new OLE frame.
        :param y: Y coordinate of a new OLE frame.
        :param width: Width of a new OLE frame.
        :param height: Height of a new OLE frame.
        :param class_name: Name of an OLE class.
        :param path: path to the linked file.
        :returns: Created OLE object.'''
        ...

    @overload
    def insert_ole_object_frame(self, index: int, x: float, y: float, width: float, height: float, data_info: IOleEmbeddedDataInfo) -> IOleObjectFrame:
        '''Creates a new OLE object and inserts it to a collection at the specified index.
        :param index: The zero-based index at which OLE object should be inserted.
        :param x: X coordinate of a new OLE frame.
        :param y: Y coordinate of a new OLE frame.
        :param width: Width of a new OLE frame.
        :param height: Height of a new OLE frame.
        :param data_info: Embedded data info :py:class:`aspose.slides.IOleEmbeddedDataInfo`.
        :returns: Created OLE object.'''
        ...

    @overload
    def insert_ole_object_frame(self, index: int, x: float, y: float, width: float, height: float, class_name: str, path: str) -> IOleObjectFrame:
        '''Creates a new OLE object and inserts it to a collection at the specified index.
        :param index: The zero-based index at which OLE object should be inserted.
        :param x: X coordinate of a new OLE frame.
        :param y: Y coordinate of a new OLE frame.
        :param width: Width of a new OLE frame.
        :param height: Height of a new OLE frame.
        :param class_name: Name of an OLE class.
        :param path: Path to the linked file.
        :returns: Created OLE object.'''
        ...

    @overload
    def add_zoom_frame(self, x: float, y: float, width: float, height: float, slide: ISlide) -> IZoomFrame:
        '''Adds a new Zoom object to the end of a collection.
        :param x: X coordinate of a new Zoom frame :py:class:`float`.
        :param y: Y coordinate of a new Zoom frame :py:class:`float`.
        :param width: Width of a new Zoom frame :py:class:`float`.
        :param height: Height of a new Zoom frame :py:class:`float`.
        :param slide: The slide object referenced by the Zoom frame :py:class:`aspose.slides.ISlide`.
        :returns: Created Zoom object :py:class:`aspose.slides.IZoomFrame`.'''
        ...

    @overload
    def add_zoom_frame(self, x: float, y: float, width: float, height: float, slide: ISlide, image: IPPImage) -> IZoomFrame:
        '''Adds a new Zoom object to the end of a collection.
        :param x: X coordinate of a new Zoom frame :py:class:`float`.
        :param y: Y coordinate of a new Zoom frame :py:class:`float`.
        :param width: Width of a new Zoom frame :py:class:`float`.
        :param height: Height of a new Zoom frame :py:class:`float`.
        :param slide: The slide object referenced by the Zoom frame :py:class:`aspose.slides.ISlide`.
        :param image: The image for the referenced slide :py:class:`aspose.slides.IPPImage`
        :returns: Created Zoom object :py:class:`aspose.slides.IZoomFrame`.'''
        ...

    @overload
    def insert_zoom_frame(self, index: int, x: float, y: float, width: float, height: float, slide: ISlide) -> IZoomFrame:
        '''Creates a new Zoom object and inserts it to a collection at the specified index.
        :param index: The zero-based index at which Zoom frame should be inserted.
        :param x: X coordinate of a new Zoom frame :py:class:`float`.
        :param y: Y coordinate of a new Zoom frame :py:class:`float`.
        :param width: Width of a new Zoom frame :py:class:`float`.
        :param height: Height of a new Zoom frame :py:class:`float`.
        :param slide: The slide object referenced by the Zoom frame :py:class:`aspose.slides.ISlide`.
        :returns: Created Zoom object :py:class:`aspose.slides.IZoomFrame`.'''
        ...

    @overload
    def insert_zoom_frame(self, index: int, x: float, y: float, width: float, height: float, slide: ISlide, image: IPPImage) -> IZoomFrame:
        '''Creates a new Zoom object and inserts it to a collection at the specified index.
        :param index: The zero-based index at which Zoom frame should be inserted.
        :param x: X coordinate of a new Zoom frame :py:class:`float`.
        :param y: Y coordinate of a new Zoom frame :py:class:`float`.
        :param width: Width of a new Zoom frame :py:class:`float`.
        :param height: Height of a new Zoom frame :py:class:`float`.
        :param slide: The slide object referenced by the Zoom frame :py:class:`aspose.slides.ISlide`.
        :param image: The image for the referenced slide :py:class:`aspose.slides.IPPImage`
        :returns: Created Zoom object :py:class:`aspose.slides.IZoomFrame`.'''
        ...

    @overload
    def add_section_zoom_frame(self, x: float, y: float, width: float, height: float, section: ISection) -> ISectionZoomFrame:
        '''Adds a new Section Zoom object to the end of a collection.
        :param x: X coordinate of a new Section Zoom frame :py:class:`float`.
        :param y: Y coordinate of a new Section Zoom frame :py:class:`float`.
        :param width: Width of a new Section Zoom frame :py:class:`float`.
        :param height: Height of a new Section Zoom frame :py:class:`float`.
        :param section: The section object referenced by the Section Zoom frame :py:class:`aspose.slides.ISection`.
        :returns: Created Section Zoom object :py:class:`aspose.slides.ISectionZoomFrame`.'''
        ...

    @overload
    def add_section_zoom_frame(self, x: float, y: float, width: float, height: float, section: ISection, image: IPPImage) -> ISectionZoomFrame:
        '''Adds a new Section Zoom object to the end of a collection with a predefined image.
        :param x: X coordinate of a new Section Zoom frame :py:class:`float`.
        :param y: Y coordinate of a new Section Zoom frame :py:class:`float`.
        :param width: Width of a new Section Zoom frame :py:class:`float`.
        :param height: Height of a new Section Zoom frame :py:class:`float`.
        :param section: The section object referenced by the Section Zoom frame :py:class:`aspose.slides.ISection`.
        :param image: The image for the referenced slide :py:class:`aspose.slides.IPPImage`
        :returns: Created Section Zoom object :py:class:`aspose.slides.ISectionZoomFrame`.'''
        ...

    @overload
    def insert_section_zoom_frame(self, index: int, x: float, y: float, width: float, height: float, section: ISection) -> ISectionZoomFrame:
        '''Creates a new Section Zoom object and inserts into to a collection at the specified index.
        :param index: The zero-based index at which Section Zoom frame should be inserted.
        :param x: X coordinate of a new Section Zoom frame :py:class:`float`.
        :param y: Y coordinate of a new Section Zoom frame :py:class:`float`.
        :param width: Width of a new Section Zoom frame :py:class:`float`.
        :param height: Height of a new Section Zoom frame :py:class:`float`.
        :param section: The slide object referenced by the Section Zoom frame :py:class:`aspose.slides.ISection`.
        :returns: Created Section Zoom object :py:class:`aspose.slides.ISectionZoomFrame`.'''
        ...

    @overload
    def insert_section_zoom_frame(self, index: int, x: float, y: float, width: float, height: float, section: ISection, image: IPPImage) -> ISectionZoomFrame:
        '''Creates a new Section Zoom object and inserts it to a collection at the specified index.
        :param index: The zero-based index at which Section Zoom frame should be inserted.
        :param x: X coordinate of a new Section Zoom frame :py:class:`float`.
        :param y: Y coordinate of a new Section Zoom frame :py:class:`float`.
        :param width: Width of a new Section Zoom frame :py:class:`float`.
        :param height: Height of a new Section Zoom frame :py:class:`float`.
        :param section: The slide object referenced by the Section Zoom frame :py:class:`aspose.slides.ISection`.
        :param image: The image for the referenced slide :py:class:`aspose.slides.IPPImage`
        :returns: Created Section Zoom object :py:class:`aspose.slides.ISectionZoomFrame`.'''
        ...

    @overload
    def add_video_frame(self, x: float, y: float, width: float, height: float, fname: str) -> IVideoFrame:
        '''Adds a new video frame to the end of a collection.
        :param x: X coordinate of a new video frame.
        :param y: Y coordinate of a new video frame.
        :param width: Width of a new video frame.
        :param height: Height of a new video frame.
        :param fname: Video file name.
        :returns: Created VideoFrame object.'''
        ...

    @overload
    def add_video_frame(self, x: float, y: float, width: float, height: float, video: IVideo) -> IVideoFrame:
        '''Adds a new video frame to the end of a collection.
        :param x: X coordinate of a new video frame.
        :param y: Y coordinate of a new video frame.
        :param width: Width of a new video frame.
        :param height: Height of a new video frame.
        :param video: Video.
        :returns: Created VideoFrame object.'''
        ...

    @overload
    def add_audio_frame_embedded(self, x: float, y: float, width: float, height: float, audio_stream: io.RawIOBase) -> IAudioFrame:
        '''Adds a new audio frame with embedded audio file to the end of a collection.
                    Embedded audio file can be a WAV only.
                    It adds new audio into Presentation.Audios list.
        :param x: X coordinate of a new audio frame.
        :param y: Y coordinate of a new audio frame.
        :param width: Width of a new audio frame.
        :param height: Height of a new audio frame.
        :param audio_stream: Inout stream with audio data.
        :returns: Created AudioFrame object.'''
        ...

    @overload
    def add_audio_frame_embedded(self, x: float, y: float, width: float, height: float, audio: IAudio) -> IAudioFrame:
        '''Adds a new audio frame with embedded audio file to the end of a collection.
                    It uses audio file from Presentation.Audios list.
        :param x: X coordinate of a new audio frame.
        :param y: Y coordinate of a new audio frame.
        :param width: Width of a new audio frame.
        :param height: Height of a new audio frame.
        :param audio: Audio from Presentation.Audios list.
        :returns: Created AudioFrame object.'''
        ...

    @overload
    def insert_audio_frame_embedded(self, index: int, x: float, y: float, width: float, height: float, audio_stream: io.RawIOBase) -> IAudioFrame:
        '''Insert an AudioFrame with embedded audio file.
                    Embedded audio file sound can be a WAV only.
                    It adds new audio into Presentation.Audios list.
        :param index: The zero-based index at which value should be inserted.
        :param x: X coordinate of a new audio frame.
        :param y: Y coordinate of a new audio frame.
        :param width: Width of a new audio frame.
        :param height: Height of a new audio frame.
        :param audio_stream: Audio stream.
        :returns: Created AudioFrame object.'''
        ...

    @overload
    def insert_audio_frame_embedded(self, index: int, x: float, y: float, width: float, height: float, audio: IAudio) -> IAudioFrame:
        '''Insert an AudioFrame with embedded audio file.
                    It uses audio file from Presentation.Audios list.
        :param index: The zero-based index at which value should be inserted.
        :param x: X coordinate of a new audio frame.
        :param y: Y coordinate of a new audio frame.
        :param width: Width of a new audio frame.
        :param height: Height of a new audio frame.
        :param audio: Audio from Presentation.Audios list.
        :returns: Created AudioFrame object.'''
        ...

    @overload
    def to_array(self) -> List[IShape]:
        '''Creates and returns an array with all shapse in it.
        :returns: Array of :py:class:`aspose.slides.IShape`'''
        ...

    @overload
    def to_array(self, start_index: int, count: int) -> List[IShape]:
        '''Creates and returns an array with all shapes from the specified range in it.
        :param start_index: An index of a first shape to return.
        :param count: A number of shapes to return.
        :returns: Array of :py:class:`aspose.slides.IShape`'''
        ...

    @overload
    def reorder(self, index: int, shape: IShape) -> None:
        '''Moves a shape from the collection to the specified position.
        :param index: Target index.
        :param shape: Shape to move.'''
        ...

    @overload
    def reorder(self, index: int, shapes: List[IShape]) -> None:
        '''Moves shapes from the collection to the specified position.
                    Shapes will be placed starting from index in order they appear in list.
        :param index: Target index.
        :param shapes: Shapes to move.'''
        ...

    @overload
    def add_auto_shape(self, shape_type: ShapeType, x: float, y: float, width: float, height: float) -> IAutoShape:
        '''Creates a new AutoShape, tunes it from default template and adds it to the end of the collection.
        :param shape_type: The :py:enum:`aspose.slides.ShapeType` of shape.
        :param x: The X-coordinate for a left side of shape's frame.
        :param y: The Y-coordinate for a top side of shape's frame.
        :param width: The width of shape's frame.
        :param height: The height of shape's frame.
        :returns: Created AutoShape object.'''
        ...

    @overload
    def add_auto_shape(self, shape_type: ShapeType, x: float, y: float, width: float, height: float, create_from_template: bool) -> IAutoShape:
        '''Creates a new AutoShape and adds it to the end of the collection.
        :param shape_type: The :py:enum:`aspose.slides.ShapeType` of shape.
        :param x: The X-coordinate for a left side of shape's frame.
        :param y: The Y-coordinate for a top side of shape's frame.
        :param width: The width of shape's frame.
        :param height: The height of shape's frame.
        :param create_from_template: If true then new shape will be tuned from default template. Not empty name, 
                    simple style, text centered will be assined to the new shape.
                    If false then all values of the properties of the new shape will have default values.
        :returns: Created AutoShape object.'''
        ...

    @overload
    def insert_auto_shape(self, index: int, shape_type: ShapeType, x: float, y: float, width: float, height: float) -> IAutoShape:
        '''Creates a new AutoShape, tunes it from default template and inserts it to 
                    the collection at the specified index.
                    Note: the type of the shape will be determined by the shapeType parameter.
        :param index: The zero-based index at which value should be inserted.
        :param shape_type: An :py:enum:`aspose.slides.ShapeType` of shape.
        :param x: The X-coordinate for a left side of shape's frame.
        :param y: The Y-coordinate for a top side of shape's frame.
        :param width: The width of shape's frame.
        :param height: The height of shape's frame.
        :returns: Created AutoShape object.'''
        ...

    @overload
    def insert_auto_shape(self, index: int, shape_type: ShapeType, x: float, y: float, width: float, height: float, create_from_template: bool) -> IAutoShape:
        '''Creates a new AutoShape and inserts it to the collection at the specified index.
                    Note: the type of the shape will be determined by the shapeType parameter.
        :param index: The zero-based index at which value should be inserted.
        :param shape_type: An :py:enum:`aspose.slides.ShapeType` of shape.
        :param x: The X-coordinate for a left side of shape's frame.
        :param y: The Y-coordinate for a top side of shape's frame.
        :param width: The width of shape's frame.
        :param height: The height of shape's frame.
        :param create_from_template: If true then new shape will be tuned from default template. Not empty name, 
                    simple style, text centered will be assined to the new shape.
                    If false then all values of the properties of the new shape will have default values.
        :returns: Created AutoShape object.'''
        ...

    @overload
    def add_group_shape(self) -> IGroupShape:
        '''Creates a new GroupShape and adds it to the end of the collection.
                    GroupShape frame size and position will be fitted to content when new shape will be added into the GroupShape.
        :returns: Created GroupShape object.'''
        ...

    @overload
    def add_group_shape(self, svg_image: ISvgImage, x: float, y: float, width: float, height: float) -> IGroupShape:
        '''Creates a new GroupShape, fills it with converted shapes from SVG and adds it to the end of the collection.
        :param svg_image: Svg image object :py:class:`aspose.slides.ISvgImage`
        :param x: The X coordinate for the left side of the shape group frame.
        :param y: The Y coordinate for the top side of the shape group frame.
        :param width: The width of the group of the shape group frame.
        :param height: The height of a group of the shape group frame.
        :returns: Created GroupShape object.'''
        ...

    @overload
    def add_connector(self, shape_type: ShapeType, x: float, y: float, width: float, height: float) -> IConnector:
        '''Creates a new Connector, tunes it from default template and adds it to the end of the collection.
        :param shape_type: The :py:enum:`aspose.slides.ShapeType` of shape.
        :param x: The X-coordinate for a left side of shape's frame.
        :param y: The Y-coordinate for a top side of shape's frame.
        :param width: The width of shape's frame.
        :param height: The height of shape's frame.
        :returns: The zero-based index of the created shape.
        :returns: Created Connector object.'''
        ...

    @overload
    def add_connector(self, shape_type: ShapeType, x: float, y: float, width: float, height: float, create_from_template: bool) -> IConnector:
        '''Creates a new Connector and adds it to the end of the collection.
        :param shape_type: The :py:enum:`aspose.slides.ShapeType` of shape.
        :param x: The X-coordinate for a left side of shape's frame.
        :param y: The Y-coordinate for a top side of shape's frame.
        :param width: The width of shape's frame.
        :param height: The height of shape's frame.
        :param create_from_template: If true then new shape will be tuned from default template. Not empty name, 
                    simple style, text centered will be assined to the new shape.
                    If false then all values of the properties of the new shape will have default values.
        :returns: The zero-based index of the created shape.
        :returns: Created Connector object.'''
        ...

    @overload
    def insert_connector(self, index: int, shape_type: ShapeType, x: float, y: float, width: float, height: float) -> IConnector:
        '''Creates a new Connector, tunes it from default template and inserts it to 
                    the collection at the specified index.
        :param index: The zero-based index at which value should be inserted.
        :param shape_type: An :py:enum:`aspose.slides.ShapeType` of shape.
        :param x: The X-coordinate for a left side of shape's frame.
        :param y: The Y-coordinate for a top side of shape's frame.
        :param width: The width of shape's frame.
        :param height: The height of shape's frame.
        :returns: Created Connector object.'''
        ...

    @overload
    def insert_connector(self, index: int, shape_type: ShapeType, x: float, y: float, width: float, height: float, create_from_template: bool) -> IConnector:
        '''Creates a new Connector and inserts it to the collection at the specified index.
        :param index: The zero-based index at which value should be inserted.
        :param shape_type: An :py:enum:`aspose.slides.ShapeType` of shape.
        :param x: The X-coordinate for a left side of shape's frame.
        :param y: The Y-coordinate for a top side of shape's frame.
        :param width: The width of shape's frame.
        :param height: The height of shape's frame.
        :param create_from_template: If true then new shape will be tuned from default template. Not empty name, 
                    simple style, text centered will be assined to the new shape.
                    If false then all values of the properties of the new shape will have default values.
        :returns: Created Connector object.'''
        ...

    @overload
    def add_clone(self, source_shape: IShape, x: float, y: float, width: float, height: float) -> IShape:
        '''Adds a copy of a specified shape to the end of the collection.
        :param source_shape: Shape to clone.
        :param x: X coordinate of a new shape.
        :param y: Y coordinate of a new shape.
        :param width: Width of a new shape.
        :param height: Height of a new shape.
        :returns: New shape.'''
        ...

    @overload
    def add_clone(self, source_shape: IShape, x: float, y: float) -> IShape:
        '''Adds a copy of a specified shape to the end of the collection.
                    Width and Height of the new shape are equal to Width and Height of the ``sourceShape``.
        :param source_shape: Shape to clone.
        :param x: X coordinate of a new shape.
        :param y: Y coordinate of a new shape.
        :returns: New shape.'''
        ...

    @overload
    def add_clone(self, source_shape: IShape) -> IShape:
        '''Adds a copy of a specified shape to the end of the collection.
                    X, Y, Width and Height of the new shape are equal to X, Y, Width and Height of the ``sourceShape``.
        :param source_shape: Shape to clone.
        :returns: New shape.'''
        ...

    @overload
    def insert_clone(self, index: int, source_shape: IShape, x: float, y: float, width: float, height: float) -> IShape:
        '''Inserts a copy of a specified shape to specified position of the collection.
        :param index: Index of new shape.
        :param source_shape: Shape to clone.
        :param x: X coordinate of a new shape.
        :param y: Y coordinate of a new shape.
        :param width: Width of a new shape.
        :param height: Height of a new shape.
        :returns: Inserted shape.'''
        ...

    @overload
    def insert_clone(self, index: int, source_shape: IShape, x: float, y: float) -> IShape:
        '''Inserts a copy of a specified shape to specified position of the collection.
                    Width and Height of the new shape are equal to Width and Height of the ``sourceShape``.
        :param index: Index of new shape.
        :param source_shape: Shape to clone.
        :param x: X coordinate of a new shape.
        :param y: Y coordinate of a new shape.
        :returns: Inserted shape.'''
        ...

    @overload
    def insert_clone(self, index: int, source_shape: IShape) -> IShape:
        '''Inserts a copy of a specified shape to specified position of the collection.
                    X, Y, Width and Height of the new shape are equal to X, Y, Width and Height of the ``sourceShape``.
        :param index: Index of new shape.
        :param source_shape: Shape to clone.
        :returns: Inserted shape.'''
        ...

    def add_smart_art(self, x: float, y: float, width: float, height: float, layout_type: aspose.slides.smartart.SmartArtLayoutType) -> aspose.slides.smartart.ISmartArt:
        '''Add SmartArt diagram.
        :param x: The X-coordinate for a left side of diagram's frame.
        :param y: The Y-coordinate for a left side of diagram's frame.
        :param width: The width of diagram's frame.
        :param height: The height of diagram's frame.
        :param layout_type: The type of SmartArt diagram
        :returns: Create SmartArt diagram'''
        ...

    def add_summary_zoom_frame(self, x: float, y: float, width: float, height: float) -> ISummaryZoomFrame:
        '''Adds a new Summary Zoom object to the end of a collection.
        :param x: X coordinate of a new Section Zoom frame :py:class:`float`.
        :param y: Y coordinate of a new Section Zoom frame :py:class:`float`.
        :param width: Width of a new Section Zoom frame :py:class:`float`.
        :param height: Height of a new Section Zoom frame :py:class:`float`.
        :returns: Created Summary Zoom object :py:class:`aspose.slides.ISummaryZoomFrame`.'''
        ...

    def insert_summary_zoom_frame(self, index: int, x: float, y: float, width: float, height: float) -> ISummaryZoomFrame:
        '''Creates a new Summary Zoom object and inserts it to a collection at the specified index.
        :param index: The zero-based index at which Section Zoom frame should be inserted.
        :param x: X coordinate of a new Section Zoom frame :py:class:`float`.
        :param y: Y coordinate of a new Section Zoom frame :py:class:`float`.
        :param width: Width of a new Section Zoom frame :py:class:`float`.
        :param height: Height of a new Section Zoom frame :py:class:`float`.
        :returns: Created Summary Zoom object :py:class:`aspose.slides.ISummaryZoomFrame`.'''
        ...

    def insert_video_frame(self, index: int, x: float, y: float, width: float, height: float, fname: str) -> IVideoFrame:
        '''Creates a new video frame and inserts it to a collection at the specified index.
        :param index: The zero-based index at which video frame should be inserted.
        :param x: X coordinate of a new video frame.
        :param y: Y coordinate of a new video frame.
        :param width: Width of a new video frame.
        :param height: Height of a new video frame.
        :param fname: Video file name.
        :returns: Created VideoFrame object.'''
        ...

    def add_audio_frame_cd(self, x: float, y: float, width: float, height: float) -> IAudioFrame:
        '''Adds an AudioFrame with CD to the end of collection.
        :param x: X coordinate of a new audio frame.
        :param y: Y coordinate of a new audio frame.
        :param width: Width of a new audio frame.
        :param height: Height of a new audio frame.
        :returns: Created AudioFrame object.'''
        ...

    def insert_audio_frame_cd(self, index: int, x: float, y: float, width: float, height: float) -> IAudioFrame:
        '''Insert an AudioFrame with CD.
        :param index: The zero-based index at which video frame should be inserted.
        :param x: X coordinate of a new audio frame.
        :param y: Y coordinate of a new audio frame.
        :param width: Width of a new audio frame.
        :param height: Height of a new audio frame.
        :returns: Created AudioFrame object.'''
        ...

    def add_audio_frame_linked(self, x: float, y: float, width: float, height: float, fname: str) -> IAudioFrame:
        '''Adds a new audio frame with linked audio file to the end of a collection.
        :param x: X coordinate of a new audio frame.
        :param y: Y coordinate of a new audio frame.
        :param width: Width of a new audio frame.
        :param height: Height of a new audio frame.
        :param fname: Audio file name.
        :returns: Created AudioFrame object.'''
        ...

    def insert_audio_frame_linked(self, index: int, x: float, y: float, width: float, height: float, fname: str) -> IAudioFrame:
        '''Creates a new audio frame with linked audio file and inserts it to a collection at the specified index.
        :param index: The zero-based index at which audio frame should be inserted.
        :param x: X coordinate of a new audio frame.
        :param y: Y coordinate of a new audio frame.
        :param width: Width of a new audio frame.
        :param height: Height of a new audio frame.
        :param fname: Audio file name.
        :returns: Created AudioFrame object.'''
        ...

    def index_of(self, shape: IShape) -> int:
        '''Returns the zero-based index of the first occurrence of a shape in the collection.
        :param shape: The shape to locate in the collection.
        :returns: The zero-based index of the first occurrence of shape within
                    the collection, if found; otherwise, -1.'''
        ...

    def add_math_shape(self, x: float, y: float, width: float, height: float) -> IAutoShape:
        '''Creates a new AutoShape of the type Rectangle to host mathematical content inside and adds it to the end of the collection.
        :param x: The X-coordinate for a left side of shape's frame.
        :param y: The Y-coordinate for a top side of shape's frame.
        :param width: The width of shape's frame.
        :param height: The height of shape's frame.
        :returns: Created AutoShape object.'''
        ...

    def insert_group_shape(self, index: int) -> IGroupShape:
        '''Creates a new GroupShape and inserts it to the collection at the specified index.
                    GroupShape frame size and position will be fitted to content when new shape will be added into the GroupShape.
        :param index: The zero-based index at which value should be inserted.
        :returns: Created GroupShape object.'''
        ...

    def add_picture_frame(self, shape_type: ShapeType, x: float, y: float, width: float, height: float, image: IPPImage) -> IPictureFrame:
        '''Creates a new PictureFrame and adds it to the end of the collection.
        :param shape_type: The shape contained in the set :py:enum:`aspose.slides.ShapeType`
                    of shapes, except all sorts of lines:
        
            ShapeType.Line,
        
            ShapeType.StraightConnector1,
        
            ShapeType.BentConnector2,
        
            ShapeType.BentConnector3,
        
            ShapeType.BentConnector4,
        
            ShapeType.BentConnector5,
        
            ShapeType.CurvedConnector2,
        
            ShapeType.CurvedConnector3,
        
            ShapeType.CurvedConnector4,
        
            ShapeType.CurvedConnector5.
        :param x: The X-coordinate for a left side of shape's frame.
        :param y: The Y-coordinate for a top side of shape's frame.
        :param width: The width of shape's frame.
        :param height: The height of shape's frame.
        :param image: The image of picture frame.
        :returns: Created PictureFrame object.'''
        ...

    def insert_picture_frame(self, index: int, shape_type: ShapeType, x: float, y: float, width: float, height: float, image: IPPImage) -> IPictureFrame:
        '''Creates a new PictureFrame and inserts it to the collection at the specified index.
        :param index: The zero-based index at which value should be inserted.
        :param shape_type: The shape contained in the set :py:enum:`aspose.slides.ShapeType`
                    of shapes, except all sorts of lines:
        
            ShapeType.Line,
        
            ShapeType.StraightConnector1,
        
            ShapeType.BentConnector2,
        
            ShapeType.BentConnector3,
        
            ShapeType.BentConnector4,
        
            ShapeType.BentConnector5,
        
            ShapeType.CurvedConnector2,
        
            ShapeType.CurvedConnector3,
        
            ShapeType.CurvedConnector4,
        
            ShapeType.CurvedConnector5.
        :param x: The X-coordinate for a left side of shape's frame.
        :param y: The Y-coordinate for a top side of shape's frame.
        :param width: The width of shape's frame.
        :param height: The height of shape's frame.
        :param image: The image of picture frame.
        :returns: Created PictureFrame object.'''
        ...

    def add_table(self, x: float, y: float, column_widths: List[float], row_heights: List[float]) -> ITable:
        '''Creates a new Table and adds it to the end of the collection.
        :param x: The X-coordinate for a left side of shape's frame.
        :param y: The Y-coordinate for a top side of shape's frame.
        :param column_widths: Array of doubles which represents widths of columns in the table.
        :param row_heights: Array of doubles which represents heights of rows in the table.
        :returns: Created Table object.'''
        ...

    def insert_table(self, index: int, x: float, y: float, column_widths: List[float], row_heights: List[float]) -> ITable:
        '''Creates a new Table and inserts it to the collection at the specified index.
        :param index: The zero-based index at which value should be inserted.
        :param x: The X-coordinate for a left side of shape's frame.
        :param y: The Y-coordinate for a top side of shape's frame.
        :param column_widths: Array of doubles which represents widths of columns in the table.
        :param row_heights: Array of doubles which represents heights of rows in the table.
        :returns: Created Table object.'''
        ...

    def remove_at(self, index: int) -> None:
        '''Removes the element at the specified index of the collection.
        :param index: The zero-based index of the element to remove.'''
        ...

    def remove(self, shape: IShape) -> None:
        '''Removes the first occurrence of a specific shape from the collection.
        :param shape: The shape to remove from the collection.'''
        ...

    def clear(self) -> None:
        '''Removes all shapes from the collection.'''
        ...

    @property
    def parent_group(self) -> IGroupShape:
        ...

    @property
    def as_i_collection(self) -> list:
        ...

    @property
    def as_i_enumerable(self) -> collections.abc.Iterable:
        ...

    def __getitem__(self, key: int) -> IShape
        ...

    ...

class IShapeElement:
    '''Represents a part of shape with same outline and fill properties.'''
    ...

class IShapeFrame:
    '''Represents shape frame's properties.'''
    def clone_t(self) -> IShapeFrame:
        ...

    @property
    def x(self) -> float:
        '''Returns the X coordinate of the upper-left corner of a frame.
                    Read-only :py:class:`float`.'''
        ...

    @property
    def y(self) -> float:
        '''Returns the Y coordinate of the upper-left corner of a frame.
                    Read-only :py:class:`float`.'''
        ...

    @property
    def width(self) -> float:
        '''Returns the width of a frame.
                    Read-only :py:class:`float`.'''
        ...

    @property
    def height(self) -> float:
        '''Returns the height of a frame.
                    Read-only :py:class:`float`.'''
        ...

    @property
    def rotation(self) -> float:
        '''Returns the number of degrees a frame is rotated around the z-axis.
                    A positive value indicates clockwise rotation; a negative value
                    indicates counterclockwise rotation.
                    Read-only :py:class:`float`.'''
        ...

    @property
    def center_x(self) -> float:
        ...

    @property
    def center_y(self) -> float:
        ...

    @property
    def flip_h(self) -> NullableBool:
        ...

    @property
    def flip_v(self) -> NullableBool:
        ...

    @property
    def rectangle(self) -> aspose.pydrawing.RectangleF:
        '''Returns the coordinates of a frame.
                    Read-only :py:class:`aspose.pydrawing.RectangleF`.'''
        ...

    ...

class IShapeStyle:
    '''Represent shape's style reference.'''
    @property
    def line_color(self) -> IColorFormat:
        ...

    @property
    def line_style_index(self) -> int:
        ...

    @line_style_index.setter
    def line_style_index(self, value: int):
        ...

    @property
    def fill_color(self) -> IColorFormat:
        ...

    @property
    def fill_style_index(self) -> int:
        ...

    @fill_style_index.setter
    def fill_style_index(self, value: int):
        ...

    @property
    def effect_color(self) -> IColorFormat:
        ...

    @property
    def effect_style_index(self) -> int:
        ...

    @effect_style_index.setter
    def effect_style_index(self, value: int):
        ...

    @property
    def font_color(self) -> IColorFormat:
        ...

    @property
    def font_collection_index(self) -> FontCollectionIndex:
        ...

    @font_collection_index.setter
    def font_collection_index(self, value: FontCollectionIndex):
        ...

    ...

class ISketchFormat:
    '''Represents properties for lines sketch format.'''
    @property
    def sketch_type(self) -> LineSketchType:
        ...

    @sketch_type.setter
    def sketch_type(self, value: LineSketchType):
        ...

    ...

class ISketchFormatEffectiveData:
    '''Immutable object which contains effective line sketch properties.'''
    @property
    def sketch_type(self) -> LineSketchType:
        ...

    ...

class ISlide:
    '''Represents a slide in a presentation.'''
    @overload
    def get_thumbnail(self, scale_x: float, scale_y: float) -> aspose.pydrawing.Bitmap:
        '''Returns a Thumbnail Bitmap object with custom scaling.
        :param scale_x: The value by which to scale this Thumbnail in the x-axis direction.
        :param scale_y: The value by which to scale this Thumbnail in the y-axis direction.
        :returns: Bitmap object :py:class:`aspose.pydrawing.Bitmap`'''
        ...

    @overload
    def get_thumbnail(self) -> aspose.pydrawing.Bitmap:
        '''Returns a Thumbnail Image object (20% of real size).
        :returns: Bitmap object :py:class:`aspose.pydrawing.Bitmap`'''
        ...

    @overload
    def get_thumbnail(self, image_size: aspose.pydrawing.Size) -> aspose.pydrawing.Bitmap:
        '''Returns a Thumbnail Bitmap object with specified size.
        :param image_size: Size of the image to create.
        :returns: Bitmap object.'''
        ...

    @overload
    def get_thumbnail(self, options: aspose.slides.export.ITiffOptions) -> aspose.pydrawing.Bitmap:
        '''Returns a Thumbnail tiff bitmap object with specified parameters.
        :param options: Tiff options.
        :returns: Bitmap object.'''
        ...

    @overload
    def get_thumbnail(self, options: aspose.slides.export.IRenderingOptions) -> aspose.pydrawing.Bitmap:
        '''Returns a Thumbnail Bitmap object.
        :param options: Rendering options.
        :returns: Bitmap objects.'''
        ...

    @overload
    def get_thumbnail(self, options: aspose.slides.export.IRenderingOptions, scale_x: float, scale_y: float) -> aspose.pydrawing.Bitmap:
        '''Returns a Thumbnail Bitmap object with custom scaling.
        :param options: Rendering options.
        :param scale_x: The value by which to scale this Thumbnail in the x-axis direction.
        :param scale_y: The value by which to scale this Thumbnail in the y-axis direction.
        :returns: Bitmap objects.'''
        ...

    @overload
    def get_thumbnail(self, options: aspose.slides.export.IRenderingOptions, image_size: aspose.pydrawing.Size) -> aspose.pydrawing.Bitmap:
        '''Returns a Thumbnail Bitmap object with specified size.
        :param options: Rendering options.
        :param image_size: Size of the image to create.
        :returns: Bitmap objects.'''
        ...

    @overload
    def get_image(self, scale_x: float, scale_y: float) -> IImage:
        '''Returns an image object with custom scaling.
        :param scale_x: The value by which to scale this Thumbnail in the x-axis direction.
        :param scale_y: The value by which to scale this Thumbnail in the y-axis direction.
        :returns: Image object :py:class:`aspose.pydrawing.Bitmap`'''
        ...

    @overload
    def get_image(self) -> IImage:
        '''Returns a Thumbnail Image object (20% of real size).
        :returns: Image object :py:class:`aspose.pydrawing.Bitmap`'''
        ...

    @overload
    def get_image(self, image_size: aspose.pydrawing.Size) -> IImage:
        '''Returns an image object with specified size.
        :param image_size: Size of the image to create.
        :returns: Bitmap object.'''
        ...

    @overload
    def get_image(self, options: aspose.slides.export.ITiffOptions) -> IImage:
        '''Returns a Thumbnail tiff bitmap object with specified parameters.
        :param options: Tiff options.
        :returns: Image object.'''
        ...

    @overload
    def get_image(self, options: aspose.slides.export.IRenderingOptions) -> IImage:
        '''Returns a Thumbnail Bitmap object.
        :param options: Rendering options.
        :returns: Bitmap objects.'''
        ...

    @overload
    def get_image(self, options: aspose.slides.export.IRenderingOptions, scale_x: float, scale_y: float) -> IImage:
        '''Returns a Thumbnail Bitmap object with custom scaling.
        :param options: Rendering options.
        :param scale_x: The value by which to scale this Thumbnail in the x-axis direction.
        :param scale_y: The value by which to scale this Thumbnail in the y-axis direction.
        :returns: Bitmap objects.'''
        ...

    @overload
    def get_image(self, options: aspose.slides.export.IRenderingOptions, image_size: aspose.pydrawing.Size) -> IImage:
        '''Returns a Thumbnail Bitmap object with specified size.
        :param options: Rendering options.
        :param image_size: Size of the image to create.
        :returns: Bitmap objects.'''
        ...

    @overload
    def render_to_graphics(self, options: aspose.slides.export.IRenderingOptions, graphics: aspose.pydrawing.Graphics) -> None:
        '''Renders certain slide to a Graphics object.
        :param options: Rendering options.
        :param graphics: The object where to render to.'''
        ...

    @overload
    def render_to_graphics(self, options: aspose.slides.export.IRenderingOptions, graphics: aspose.pydrawing.Graphics, scale_x: float, scale_y: float) -> None:
        '''Renders certain slide to a Graphics object with custom scaling.
        :param options: Rendering options.
        :param graphics: The object where to render to.
        :param scale_x: The scale for rendering the slide (1.0 is 100%) in the x-axis direction.
        :param scale_y: The scale for rendering the slide (1.0 is 100%) in the y-axis direction.'''
        ...

    @overload
    def render_to_graphics(self, options: aspose.slides.export.IRenderingOptions, graphics: aspose.pydrawing.Graphics, rendering_size: aspose.pydrawing.Size) -> None:
        '''Renders certain slide to a Graphics object using specified size.
        :param options: Rendering options.
        :param graphics: The object where to render to.
        :param rendering_size: The maximum dimensions (in pixels) that can be occupied by the rendered slide.'''
        ...

    @overload
    def write_as_svg(self, stream: io.RawIOBase) -> None:
        '''Saves the slide content as an SVG file.
        :param stream: Target stream'''
        ...

    @overload
    def write_as_svg(self, stream: io.RawIOBase, svg_options: aspose.slides.export.ISVGOptions) -> None:
        '''Saves the slide content as an SVG file.
        :param stream: Target stream
        :param svg_options: SVG generation options'''
        ...

    def get_slide_comments(self, author: ICommentAuthor) -> List[IComment]:
        '''Returns all slide comments added by specific author.
        :param author: Author of comments to find or None to return all comments.
        :returns: Array of :py:class:`aspose.slides.IComment`.'''
        ...

    def write_as_emf(self, stream: io.RawIOBase) -> None:
        '''Saves the slide content as an EMF file.
        :param stream: Target stream'''
        ...

    def remove(self) -> None:
        '''Removes slide from presentation.'''
        ...

    def reset(self) -> None:
        '''Resets position, size and formatting of every shape that has a prototype on LayoutSlide.'''
        ...

    def find_shape_by_alt_text(self, alt_text: str) -> IShape:
        ...

    def join_portions_with_same_formatting(self) -> None:
        ...

    def equals(self, slide: IBaseSlide) -> bool:
        ...

    def create_theme_effective(self) -> aspose.slides.theme.IThemeEffectiveData:
        ...

    @property
    def header_footer_manager(self) -> ISlideHeaderFooterManager:
        ...

    @property
    def slide_number(self) -> int:
        ...

    @slide_number.setter
    def slide_number(self, value: int):
        ...

    @property
    def hidden(self) -> bool:
        '''Determines whether the specified slide is hidden during a slide show.
                    Read/write :py:class:`bool`.'''
        ...

    @hidden.setter
    def hidden(self, value: bool):
        '''Determines whether the specified slide is hidden during a slide show.
                    Read/write :py:class:`bool`.'''
        ...

    @property
    def layout_slide(self) -> ILayoutSlide:
        ...

    @layout_slide.setter
    def layout_slide(self, value: ILayoutSlide):
        ...

    @property
    def notes_slide_manager(self) -> INotesSlideManager:
        ...

    @property
    def as_i_base_slide(self) -> IBaseSlide:
        ...

    @property
    def as_i_override_themeable(self) -> aspose.slides.theme.IOverrideThemeable:
        ...

    @property
    def shapes(self) -> IShapeCollection:
        ...

    @property
    def controls(self) -> IControlCollection:
        ...

    @property
    def name(self) -> str:
        ...

    @name.setter
    def name(self, value: str):
        ...

    @property
    def slide_id(self) -> int:
        ...

    @property
    def custom_data(self) -> ICustomData:
        ...

    @property
    def timeline(self) -> IAnimationTimeLine:
        ...

    @property
    def slide_show_transition(self) -> ISlideShowTransition:
        ...

    @property
    def background(self) -> IBackground:
        ...

    @property
    def hyperlink_queries(self) -> IHyperlinkQueries:
        ...

    @property
    def show_master_shapes(self) -> bool:
        ...

    @show_master_shapes.setter
    def show_master_shapes(self, value: bool):
        ...

    @property
    def as_i_slide_component(self) -> ISlideComponent:
        ...

    @property
    def slide(self) -> IBaseSlide:
        ...

    @property
    def as_i_presentation_component(self) -> IPresentationComponent:
        ...

    @property
    def presentation(self) -> IPresentation:
        ...

    @property
    def theme_manager(self) -> aspose.slides.theme.IOverrideThemeManager:
        ...

    ...

class ISlideCollection:
    '''Represents a collection of a slides.'''
    @overload
    def add_clone(self, source_slide: ISlide) -> ISlide:
        '''Adds a copy of a specified slide to the end of the collection.
        :param source_slide: Slide to clone.
        :returns: New slide.'''
        ...

    @overload
    def add_clone(self, source_slide: ISlide, section: ISection) -> ISlide:
        '''Adds a copy of a specified slide to the end of the specified section.
        :param source_slide: Slide to clone.
        :param section: Section for a new slide.
        :returns: New slide.'''
        ...

    @overload
    def add_clone(self, source_slide: ISlide, dest_layout: ILayoutSlide) -> ISlide:
        '''Adds a copy of a specified slide to the end of the collection.
        :param source_slide: Slide to clone.
        :param dest_layout: Layout slide for a new slide.
        :returns: New slide.'''
        ...

    @overload
    def add_clone(self, source_slide: ISlide, dest_master: IMasterSlide, allow_clone_missing_layout: bool) -> ISlide:
        '''Adds a copy of a specified source slide to the end of the collection.
                    Appropriate layout will be selected automatically from the specified 
                    master (appropriate layout is the layout with the same Type or Name as 
                    of layout of the source slide). If there is no appropriate layout then
                    layout of the source slide will be cloned (if allowCloneMissingLayout 
                    is true) or PptxEditException will be thrown (if allowCloneMissingLayout
                    is false).
        :param source_slide: Slide to clone.
        :param dest_master: Master slide for a new slide.
        :param allow_clone_missing_layout: If there is no appropriate layout in specified master then layout of the 
                    source slide will be cloned (if allowCloneMissingLayout is true) or 
                    PptxEditException will be thrown (if allowCloneMissingLayout is false).
        :returns: New slide.'''
        ...

    @overload
    def insert_clone(self, index: int, source_slide: ISlide) -> ISlide:
        '''Inserts a copy of a specified slide to specified position of the collection.
        :param index: Index of new slide.
        :param source_slide: Slide to clone.
        :returns: Inserted slide.'''
        ...

    @overload
    def insert_clone(self, index: int, source_slide: ISlide, dest_layout: ILayoutSlide) -> ISlide:
        '''Inserts a copy of a specified slide to specified position of the collection.
        :param index: Index of new slide.
        :param source_slide: Slide to clone.
        :param dest_layout: Layout slide for a new slide.
        :returns: Inserted slide.'''
        ...

    @overload
    def insert_clone(self, index: int, source_slide: ISlide, dest_master: IMasterSlide, allow_clone_missing_layout: bool) -> ISlide:
        '''Inserts a copy of a specified source slide to specified position of the collection.
                    Appropriate layout will be selected automatically from the specified 
                    master (appropriate layout is the layout with the same Type or Name as 
                    of layout of the source slide). If there is no appropriate layout then
                    layout of the source slide will be cloned (if allowCloneMissingLayout 
                    is true) or PptxEditException will be thrown (if allowCloneMissingLayout
                    is false).
        :param index: Index of new slide.
        :param source_slide: Slide to clone.
        :param dest_master: Master slide for a new slide.
        :param allow_clone_missing_layout: If there is no appropriate layout in specified master then layout of the 
                    source slide will be cloned (if allowCloneMissingLayout is true) or 
                    PptxEditException will be thrown (if allowCloneMissingLayout is false).
        :returns: Inserted slide.'''
        ...

    @overload
    def to_array(self) -> List[ISlide]:
        '''Creates and returns an array with all slides in it.
        :returns: Array of :py:class:`aspose.slides.ISlide`'''
        ...

    @overload
    def to_array(self, start_index: int, count: int) -> List[ISlide]:
        '''Creates and returns an array with all slides from the specified range in it.
        :param start_index: An index of a first slide to add.
        :param count: A number of slides to add.
        :returns: Array of :py:class:`aspose.slides.ISlide`'''
        ...

    @overload
    def reorder(self, index: int, slide: ISlide) -> None:
        '''Moves slide from the collection to the specified position.
        :param index: Target index.
        :param slide: Slide to move.'''
        ...

    @overload
    def reorder(self, index: int, slides: List[ISlide]) -> None:
        '''Moves slides from the collection to the specified position.
                    Slides will be placed starting from index in order they appear in list.
        :param index: Target index.
        :param slides: Slides to move.'''
        ...

    @overload
    def add_from_pdf(self, path: str) -> List[ISlide]:
        '''Creates slides from the PDF document and adds them to the end of the collection.
        :param path: A path to the PDF document
        :returns: Added slides'''
        ...

    @overload
    def add_from_pdf(self, path: str, pdf_import_options: aspose.slides.importing.PdfImportOptions) -> List[ISlide]:
        '''Creates slides from the PDF document and adds them to the end of the collection considering the pdf import options.
        :param path: A path to the PDF document
        :param pdf_import_options: Options for pdf import
        :returns: Added slides'''
        ...

    @overload
    def add_from_pdf(self, pdf_stream: io.RawIOBase, pdf_import_options: aspose.slides.importing.PdfImportOptions) -> List[ISlide]:
        '''Creates slides from the PDF document and adds them to the end of the collection.
        :param pdf_stream: A stream which will be used as a source of the PDF document
        :param pdf_import_options: Options for pdf import
        :returns: Added slides'''
        ...

    @overload
    def add_from_pdf(self, pdf_stream: io.RawIOBase) -> List[ISlide]:
        '''Creates slides from the PDF document and adds them to the end of the collection.
        :param pdf_stream: A stream which will be used as a source of the PDF document
        :returns: Added slides'''
        ...

    @overload
    def add_from_html(self, html_text: str, resolver: aspose.slides.importing.IExternalResourceResolver, uri: str) -> List[ISlide]:
        '''Creates slides from HTML text and adds them to the end of the collection.
        :param html_text: Html to add.
        :param resolver: A callback object used to fetch external objects. If this parameter is None all external objects will be ignored.
        :param uri: An URI of the specified HTML. Used to resolve relative links.
        :returns: Added slides.'''
        ...

    @overload
    def add_from_html(self, html_text: str) -> List[ISlide]:
        '''Creates slides from HTML text and adds them to the end of the collection.
        :param html_text: Html to add.
        :returns: Added slides'''
        ...

    @overload
    def add_from_html(self, html_stream: io.RawIOBase, resolver: aspose.slides.importing.IExternalResourceResolver, uri: str) -> List[ISlide]:
        '''Creates slides from HTML text and adds them to the end of the collection.
        :param html_stream: A Stream object which will be used as a source of a HTML file.
        :param resolver: A callback object used to fetch external objects. If this parameter is None all external objects will be ignored.
        :param uri: An URI of the specified HTML. Used to resolve relative links.
        :returns: Added slides.'''
        ...

    @overload
    def add_from_html(self, html_stream: io.RawIOBase) -> List[ISlide]:
        '''Creates slides from HTML text and adds them to the end of the collection.
        :param html_stream: A Stream object which will be used as a source of a HTML file.
        :returns: Added slides'''
        ...

    @overload
    def insert_from_html(self, index: int, html_text: str, resolver: aspose.slides.importing.IExternalResourceResolver, uri: str) -> List[ISlide]:
        '''Creates slides from HTML text and inserts them to the collection at the specified position.
        :param index: Position to insert.
        :param html_text: Html to add.
        :param resolver: A callback object used to fetch external objects. If this parameter is None all external objects will be ignored.
        :param uri: An URI of the specified HTML. Used to resolve relative links.
        :returns: Added slides.'''
        ...

    @overload
    def insert_from_html(self, index: int, html_text: str) -> List[ISlide]:
        '''Creates slides from HTML text and inserts them to the collection at the specified position.
        :param index: Position to insert.
        :param html_text: Html to add.
        :returns: Added slides'''
        ...

    @overload
    def insert_from_html(self, index: int, html_stream: io.RawIOBase, resolver: aspose.slides.importing.IExternalResourceResolver, uri: str) -> List[ISlide]:
        '''Creates slides from HTML text and inserts them to the collection at the specified position.
        :param index: Position to insert.
        :param html_stream: A Stream object which will be used as a source of a HTML file.
        :param resolver: A callback object used to fetch external objects. If this parameter is None all external objects will be ignored.
        :param uri: An URI of the specified HTML. Used to resolve relative links.
        :returns: Added slides.'''
        ...

    @overload
    def insert_from_html(self, index: int, html_stream: io.RawIOBase) -> List[ISlide]:
        '''Creates slides from HTML text and inserts them to the collection at the specified position.
        :param index: Position to insert.
        :param html_stream: A Stream object which will be used as a source of a HTML file.
        :returns: Added slides'''
        ...

    @overload
    def insert_from_html(self, index: int, html_text: str, use_slide_with_index_as_start: bool) -> List[ISlide]:
        '''Creates slides from HTML text and inserts them to the collection at the specified position.
        :param index: Position to insert.
        :param html_text: Html to add.
        :param use_slide_with_index_as_start: This flag determines how to start insertion: from a new slide or from the slide with the specified index.
                    If **true**, then data insertion will start from an empty space on the slide with the specified index.
                    If **false**, then data will be added to the created slides.
        :returns: Added slides'''
        ...

    @overload
    def insert_from_html(self, index: int, html_text: str, resolver: aspose.slides.importing.IExternalResourceResolver, uri: str, use_slide_with_index_as_start: bool) -> List[ISlide]:
        '''Creates slides from HTML text and inserts them to the collection at the specified position.
        :param index: Position to insert.
        :param html_text: Html to add.
        :param resolver: A callback object used to fetch external objects. If this parameter is None all external objects will be ignored.
        :param uri: An URI of the specified HTML. Used to resolve relative links.
        :param use_slide_with_index_as_start: This flag determines how to start insertion: from a new slide or from the slide with the specified index.
                    If **true**, then data insertion will start from an empty space on the slide with the specified index.
                    If **false**, then data will be added to the created slides.
        :returns: Added slides.'''
        ...

    @overload
    def insert_from_html(self, index: int, html_stream: io.RawIOBase, use_slide_with_index_as_start: bool) -> List[ISlide]:
        '''Creates slides from HTML text and inserts them to the collection at the specified position.
        :param index: Position to insert.
        :param html_stream: A Stream object which will be used as a source of a HTML file.
        :param use_slide_with_index_as_start: This flag determines how to start insertion: from a new slide or from the slide with the specified index.
                    If **true**, then data insertion will start from an empty space on the slide with the specified index.
                    If **false**, then data will be added to the created slides.
        :returns: Added slides'''
        ...

    @overload
    def insert_from_html(self, index: int, html_stream: io.RawIOBase, resolver: aspose.slides.importing.IExternalResourceResolver, uri: str, use_slide_with_index_as_start: bool) -> List[ISlide]:
        '''Creates slides from HTML text and inserts them to the collection at the specified position.
        :param index: Position to insert.
        :param html_stream: A Stream object which will be used as a source of a HTML file.
        :param resolver: A callback object used to fetch external objects. If this parameter is None all external objects will be ignored.
        :param uri: An URI of the specified HTML. Used to resolve relative links.
        :param use_slide_with_index_as_start: This flag determines how to start insertion: from a new slide or from the slide with the specified index.
                    If **true**, then data insertion will start from an empty space on the slide with the specified index.
                    If **false**, then data will be added to the created slides.
        :returns: Added slides.'''
        ...

    def add_empty_slide(self, layout: ILayoutSlide) -> ISlide:
        '''Adds a new empty slide to the end of the collection.
        :param layout: Layout for a slide.
        :returns: Added slide.'''
        ...

    def insert_empty_slide(self, index: int, layout: ILayoutSlide) -> ISlide:
        '''Inserts a copy of a specified slide to specified position of the collection.
        :param index: Index of a new slide.
        :param layout: Layout for a slide.
        :returns: Inserted slide.'''
        ...

    def remove(self, value: ISlide) -> None:
        '''Removes the first occurrence of a specific object from the collection.
        :param value: The slide to remove from the collection.'''
        ...

    def remove_at(self, index: int) -> None:
        '''Removes the element at the specified index of the collection.
        :param index: The zero-based index of the element to remove.'''
        ...

    def index_of(self, slide: ISlide) -> int:
        '''Returns an index of the specified slide in the collection.
        :param slide: Slide to find.
        :returns: Index of a slide or -1 if slide not from this collection.'''
        ...

    @property
    def as_i_collection(self) -> list:
        ...

    @property
    def as_i_enumerable(self) -> collections.abc.Iterable:
        ...

    def __getitem__(self, key: int) -> ISlide
        ...

    ...

class ISlideComponent:
    '''Represents a component of a slide.'''
    @property
    def slide(self) -> IBaseSlide:
        '''Returns the base slide.
                    Read-only :py:class:`aspose.slides.IBaseSlide`.'''
        ...

    @property
    def as_i_presentation_component(self) -> IPresentationComponent:
        ...

    @property
    def presentation(self) -> IPresentation:
        ...

    ...

class ISlideHeaderFooterManager:
    '''Represents manager which holds behavior of the slide footer, date-time, page number placeholders.'''
    def set_footer_visibility(self, is_visible: bool) -> None:
        ...

    def set_slide_number_visibility(self, is_visible: bool) -> None:
        ...

    def set_date_time_visibility(self, is_visible: bool) -> None:
        ...

    def set_footer_text(self, text: str) -> None:
        ...

    def set_date_time_text(self, text: str) -> None:
        ...

    @property
    def as_i_base_slide_header_footer_manager(self) -> IBaseSlideHeaderFooterManager:
        ...

    @property
    def is_footer_visible(self) -> bool:
        ...

    @property
    def is_slide_number_visible(self) -> bool:
        ...

    @property
    def is_date_time_visible(self) -> bool:
        ...

    @property
    def as_i_base_header_footer_manager(self) -> IBaseHeaderFooterManager:
        ...

    ...

class ISlideShowTransition:
    '''Represents slide show transition.'''
    @property
    def sound(self) -> IAudio:
        '''Returns or sets the embedded audio data.
                    Read-write :py:class:`aspose.slides.IAudio`.'''
        ...

    @sound.setter
    def sound(self, value: IAudio):
        '''Returns or sets the embedded audio data.
                    Read-write :py:class:`aspose.slides.IAudio`.'''
        ...

    @property
    def sound_mode(self) -> aspose.slides.slideshow.TransitionSoundMode:
        ...

    @sound_mode.setter
    def sound_mode(self, value: aspose.slides.slideshow.TransitionSoundMode):
        ...

    @property
    def sound_loop(self) -> bool:
        ...

    @sound_loop.setter
    def sound_loop(self, value: bool):
        ...

    @property
    def advance_on_click(self) -> bool:
        ...

    @advance_on_click.setter
    def advance_on_click(self, value: bool):
        ...

    @property
    def advance_after(self) -> bool:
        ...

    @advance_after.setter
    def advance_after(self, value: bool):
        ...

    @property
    def advance_after_time(self) -> int:
        ...

    @advance_after_time.setter
    def advance_after_time(self, value: int):
        ...

    @property
    def speed(self) -> aspose.slides.slideshow.TransitionSpeed:
        '''Specifies the transition speed that is to be used when transitioning from the current slide
                    to the next.
                    Read-write :py:enum:`aspose.slides.slideshow.TransitionSpeed`.'''
        ...

    @speed.setter
    def speed(self, value: aspose.slides.slideshow.TransitionSpeed):
        '''Specifies the transition speed that is to be used when transitioning from the current slide
                    to the next.
                    Read-write :py:enum:`aspose.slides.slideshow.TransitionSpeed`.'''
        ...

    @property
    def value(self) -> aspose.slides.slideshow.ITransitionValueBase:
        '''Slide show transition value.
                    Read-only :py:class:`aspose.slides.slideshow.ITransitionValueBase`.'''
        ...

    @property
    def type(self) -> aspose.slides.slideshow.TransitionType:
        '''Type of transition.
                    Read-write :py:enum:`aspose.slides.slideshow.TransitionType`.'''
        ...

    @type.setter
    def type(self, value: aspose.slides.slideshow.TransitionType):
        '''Type of transition.
                    Read-write :py:enum:`aspose.slides.slideshow.TransitionType`.'''
        ...

    @property
    def sound_is_built_in(self) -> bool:
        ...

    @sound_is_built_in.setter
    def sound_is_built_in(self, value: bool):
        ...

    @property
    def sound_name(self) -> str:
        ...

    @sound_name.setter
    def sound_name(self, value: str):
        ...

    ...

class ISlideSize:
    '''Represents a size of slide.'''
    @overload
    def set_size(self, type: SlideSizeType, scale_type: SlideSizeScaleType) -> None:
        '''Sets the type of slide size and scales content using scale type.
        :param type: Slide size type.
        :param scale_type: Scale type of slide content.'''
        ...

    @overload
    def set_size(self, width: float, height: float, scale_type: SlideSizeScaleType) -> None:
        '''Sets the size in points and scales content using scale type.
        :param width: Width.
        :param height: Height.
        :param scale_type: Scale type of slide content.'''
        ...

    @property
    def size(self) -> aspose.pydrawing.SizeF:
        '''Returns or sets the size in points.
                    
                    Read/write :py:class:`aspose.pydrawing.SizeF`.'''
        ...

    @property
    def type(self) -> SlideSizeType:
        '''Returns or sets the type of slide size.
                    
                    Read/write :py:enum:`aspose.slides.SlideSizeType`.'''
        ...

    @property
    def orientation(self) -> SlideOrientation:
        '''Returns or sets the slide orientation.
                    
                    Read/write :py:enum:`aspose.slides.SlideOrientation`.'''
        ...

    @orientation.setter
    def orientation(self, value: SlideOrientation):
        '''Returns or sets the slide orientation.
                    
                    Read/write :py:enum:`aspose.slides.SlideOrientation`.'''
        ...

    ...

class ISlideText:
    '''Represents the text extracted from the slide'''
    @property
    def text(self) -> str:
        '''The text on the slide's shapes'''
        ...

    @property
    def master_text(self) -> str:
        ...

    @property
    def layout_text(self) -> str:
        ...

    @property
    def notes_text(self) -> str:
        ...

    @property
    def comments_text(self) -> str:
        ...

    ...

class ISlidesPicture:
    '''Represents a picture in a presentation.'''
    @property
    def image(self) -> IPPImage:
        '''Returns or sets the embedded image.
                    Read/write :py:class:`aspose.slides.IPPImage`.'''
        ...

    @image.setter
    def image(self, value: IPPImage):
        '''Returns or sets the embedded image.
                    Read/write :py:class:`aspose.slides.IPPImage`.'''
        ...

    @property
    def link_path_long(self) -> str:
        ...

    @link_path_long.setter
    def link_path_long(self, value: str):
        ...

    @property
    def image_transform(self) -> aspose.slides.effects.IImageTransformOperationCollection:
        ...

    @property
    def as_i_slide_component(self) -> ISlideComponent:
        ...

    @property
    def slide(self) -> IBaseSlide:
        ...

    @property
    def as_i_presentation_component(self) -> IPresentationComponent:
        ...

    @property
    def presentation(self) -> IPresentation:
        ...

    ...

class ISpreadsheetOptions:
    '''Represents options which can be used to specify additional spreadsheets behavior.'''
    @property
    def recover_workbook_from_chart_cache(self) -> bool:
        ...

    @recover_workbook_from_chart_cache.setter
    def recover_workbook_from_chart_cache(self, value: bool):
        ...

    ...

class IStreamWrapper:
    '''Aspose.IO.Stream wrapper for COM interface.'''
    def close(self) -> None:
        '''Closes the current stream and releases any resources.'''
        ...

    def flush(self) -> None:
        '''Clears all buffers for this stream and causes any buffered data to be written to the underlying device.'''
        ...

    def read(self, buffer: bytes, offset: int, count: int) -> None:
        '''Reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.
        :param buffer: Sequence of bytes :py:class:`int`[]
        :param offset: Start reading position :py:class:`int`
        :param count: Count bytes for reading :py:class:`int`'''
        ...

    def read_byte(self) -> int:
        '''Reads a byte from the stream and advances the position within the stream by one byte, or returns -1 if at the end of the stream.
        :returns: Read byte :py:class:`int`'''
        ...

    def seek(self, offset: int, origin: System.IO.SeekOrigin) -> int:
        '''Sets the position within the current stream
        :param offset: A byte offset relative to the origin parameter :py:class:`int`
        :param origin: A value of type :py:class:`System.IO.SeekOrigin` indicating the reference point used to obtain the new position
        :returns: The new position within the current stream :py:class:`int`'''
        ...

    def write(self, buffer: bytes, offset: int, count: int) -> None:
        '''writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.
        :param buffer: An array of bytes :py:class:`int`[]
        :param offset: The zero-based byte offset in buffer at which to begin copying bytes to the current stream :py:class:`int`
        :param count: The number of bytes to be written to the current stream :py:class:`int`'''
        ...

    def write_byte(self, value: int) -> None:
        '''Writes a byte to the current position in the stream and advances the position within the stream by one byte.
        :param value: Byte for writion :py:class:`int`'''
        ...

    @property
    def stream(self) -> io.RawIOBase:
        '''Gets a stream.
                    Read-only :py:class:`io.RawIOBase`.'''
        ...

    @property
    def can_read(self) -> bool:
        ...

    @property
    def can_seek(self) -> bool:
        ...

    @property
    def can_write(self) -> bool:
        ...

    @property
    def length(self) -> int:
        '''Gets the length in bytes of the stream.
                    Read-only :py:class:`int`.'''
        ...

    @property
    def position(self) -> int:
        '''Gets the position within the current stream.
                    Read-only :py:class:`int`.'''
        ...

    @property
    def as_i_disposable(self) -> IDisposable:
        ...

    ...

class IStreamWrapperFactory:
    '''Factory of StreamWrappers. For COM interface.'''
    @overload
    def create_memory_stream_wrapper(self) -> IStreamWrapper:
        '''Creates MemoryStream wrapper.
        :returns: Stream wrapper for COM interface :py:class:`aspose.slides.IStreamWrapper`'''
        ...

    @overload
    def create_memory_stream_wrapper(self, buffer: bytes) -> IStreamWrapper:
        '''Creates MemoryStream wrapper based on the specified byte array.
        :param buffer: Byte array :py:class:`int`[]
        :returns: Stream wrapper for COM interface :py:class:`aspose.slides.IStreamWrapper`'''
        ...

    @overload
    def create_file_stream_wrapper(self, file_name: str, file_mode: System.IO.FileMode) -> IStreamWrapper:
        '''Creates FileStream with the specified path and creation mode.
        :param file_name: File name :py:class:`str`
        :param file_mode: File mode :py:class:`System.IO.FileMode`
        :returns: Stream wrapper for COM interface :py:class:`aspose.slides.IStreamWrapper`'''
        ...

    @overload
    def create_file_stream_wrapper(self, file_name: str, file_mode: System.IO.FileMode, file_access: System.IO.FileAccess) -> IStreamWrapper:
        '''Creates FileStream with the specified path, creation mode, and read/write permission.
        :param file_name: File name :py:class:`str`
        :param file_mode: File mode :py:class:`System.IO.FileMode`
        :param file_access: File access :py:class:`System.IO.FileAccess`
        :returns: Stream wrapper for COM interface :py:class:`aspose.slides.IStreamWrapper`'''
        ...

    ...

class ISummaryZoomFrame:
    '''Represents a Summary Zoom frame in a slide.'''
    @overload
    def get_thumbnail(self) -> aspose.pydrawing.Bitmap:
        ...

    @overload
    def get_thumbnail(self, bounds: ShapeThumbnailBounds, scale_x: float, scale_y: float) -> aspose.pydrawing.Bitmap:
        ...

    @overload
    def get_image(self) -> IImage:
        ...

    @overload
    def get_image(self, bounds: ShapeThumbnailBounds, scale_x: float, scale_y: float) -> IImage:
        ...

    @overload
    def write_as_svg(self, stream: io.RawIOBase) -> None:
        ...

    @overload
    def write_as_svg(self, stream: io.RawIOBase, svg_options: aspose.slides.export.ISVGOptions) -> None:
        ...

    def add_placeholder(self, placeholder_to_copy_from: IPlaceholder) -> IPlaceholder:
        ...

    def remove_placeholder(self) -> None:
        ...

    def get_base_placeholder(self) -> IShape:
        ...

    @property
    def layout(self) -> ZoomLayout:
        '''Gets layout of Summary Zoom Sections in the frame.
                    Default value is GridLayout.'''
        ...

    @property
    def summary_zoom_collection(self) -> ISummaryZoomSectionCollection:
        ...

    @property
    def as_i_graphical_object(self) -> IGraphicalObject:
        ...

    @property
    def shape_lock(self) -> IGraphicalObjectLock:
        ...

    @property
    def graphical_object_lock(self) -> IGraphicalObjectLock:
        ...

    @property
    def as_i_shape(self) -> IShape:
        ...

    @property
    def is_text_holder(self) -> bool:
        ...

    @property
    def placeholder(self) -> IPlaceholder:
        ...

    @property
    def custom_data(self) -> ICustomData:
        ...

    @property
    def raw_frame(self) -> IShapeFrame:
        ...

    @raw_frame.setter
    def raw_frame(self, value: IShapeFrame):
        ...

    @property
    def frame(self) -> IShapeFrame:
        ...

    @frame.setter
    def frame(self, value: IShapeFrame):
        ...

    @property
    def line_format(self) -> ILineFormat:
        ...

    @property
    def three_d_format(self) -> IThreeDFormat:
        ...

    @property
    def effect_format(self) -> IEffectFormat:
        ...

    @property
    def fill_format(self) -> IFillFormat:
        ...

    @property
    def hidden(self) -> bool:
        ...

    @hidden.setter
    def hidden(self, value: bool):
        ...

    @property
    def z_order_position(self) -> int:
        ...

    @property
    def connection_site_count(self) -> int:
        ...

    @property
    def rotation(self) -> float:
        ...

    @rotation.setter
    def rotation(self, value: float):
        ...

    @property
    def x(self) -> float:
        ...

    @x.setter
    def x(self, value: float):
        ...

    @property
    def y(self) -> float:
        ...

    @y.setter
    def y(self, value: float):
        ...

    @property
    def width(self) -> float:
        ...

    @width.setter
    def width(self, value: float):
        ...

    @property
    def height(self) -> float:
        ...

    @height.setter
    def height(self, value: float):
        ...

    @property
    def alternative_text(self) -> str:
        ...

    @alternative_text.setter
    def alternative_text(self, value: str):
        ...

    @property
    def alternative_text_title(self) -> str:
        ...

    @alternative_text_title.setter
    def alternative_text_title(self, value: str):
        ...

    @property
    def name(self) -> str:
        ...

    @name.setter
    def name(self, value: str):
        ...

    @property
    def is_decorative(self) -> bool:
        ...

    @is_decorative.setter
    def is_decorative(self, value: bool):
        ...

    @property
    def unique_id(self) -> int:
        ...

    @property
    def office_interop_shape_id(self) -> int:
        ...

    @property
    def is_grouped(self) -> bool:
        ...

    @property
    def black_white_mode(self) -> BlackWhiteMode:
        ...

    @black_white_mode.setter
    def black_white_mode(self, value: BlackWhiteMode):
        ...

    @property
    def parent_group(self) -> IGroupShape:
        ...

    @property
    def as_i_hyperlink_container(self) -> IHyperlinkContainer:
        ...

    @property
    def as_i_slide_component(self) -> ISlideComponent:
        ...

    @property
    def slide(self) -> IBaseSlide:
        ...

    @property
    def as_i_presentation_component(self) -> IPresentationComponent:
        ...

    @property
    def presentation(self) -> IPresentation:
        ...

    @property
    def hyperlink_click(self) -> IHyperlink:
        ...

    @hyperlink_click.setter
    def hyperlink_click(self, value: IHyperlink):
        ...

    @property
    def hyperlink_mouse_over(self) -> IHyperlink:
        ...

    @hyperlink_mouse_over.setter
    def hyperlink_mouse_over(self, value: IHyperlink):
        ...

    @property
    def hyperlink_manager(self) -> IHyperlinkManager:
        ...

    ...

class ISummaryZoomSection:
    '''Represents a Summary Zoom Section object in a Summary Zoom frame.'''
    @overload
    def get_thumbnail(self) -> aspose.pydrawing.Bitmap:
        ...

    @overload
    def get_thumbnail(self, bounds: ShapeThumbnailBounds, scale_x: float, scale_y: float) -> aspose.pydrawing.Bitmap:
        ...

    @overload
    def get_image(self) -> IImage:
        ...

    @overload
    def get_image(self, bounds: ShapeThumbnailBounds, scale_x: float, scale_y: float) -> IImage:
        ...

    @overload
    def write_as_svg(self, stream: io.RawIOBase) -> None:
        ...

    @overload
    def write_as_svg(self, stream: io.RawIOBase, svg_options: aspose.slides.export.ISVGOptions) -> None:
        ...

    def add_placeholder(self, placeholder_to_copy_from: IPlaceholder) -> IPlaceholder:
        ...

    def remove_placeholder(self) -> None:
        ...

    def get_base_placeholder(self) -> IShape:
        ...

    @property
    def title(self) -> str:
        '''Returns the text title of the Summary Zoom Section object.'''
        ...

    @title.setter
    def title(self, value: str):
        '''Returns the text title of the Summary Zoom Section object.'''
        ...

    @property
    def description(self) -> str:
        '''Returns the text description of the Summary Zoom Section object.'''
        ...

    @description.setter
    def description(self, value: str):
        '''Returns the text description of the Summary Zoom Section object.'''
        ...

    @property
    def as_i_section_zoom_frame(self) -> ISectionZoomFrame:
        ...

    @property
    def target_section(self) -> ISection:
        ...

    @target_section.setter
    def target_section(self, value: ISection):
        ...

    @property
    def as_i_zoom_object(self) -> IZoomObject:
        ...

    @property
    def image_type(self) -> ZoomImageType:
        ...

    @image_type.setter
    def image_type(self, value: ZoomImageType):
        ...

    @property
    def return_to_parent(self) -> bool:
        ...

    @return_to_parent.setter
    def return_to_parent(self, value: bool):
        ...

    @property
    def show_background(self) -> bool:
        ...

    @show_background.setter
    def show_background(self, value: bool):
        ...

    @property
    def zoom_image(self) -> IPPImage:
        ...

    @zoom_image.setter
    def zoom_image(self, value: IPPImage):
        ...

    @property
    def transition_duration(self) -> float:
        ...

    @transition_duration.setter
    def transition_duration(self, value: float):
        ...

    @property
    def as_i_graphical_object(self) -> IGraphicalObject:
        ...

    @property
    def shape_lock(self) -> IGraphicalObjectLock:
        ...

    @property
    def graphical_object_lock(self) -> IGraphicalObjectLock:
        ...

    @property
    def as_i_shape(self) -> IShape:
        ...

    @property
    def is_text_holder(self) -> bool:
        ...

    @property
    def placeholder(self) -> IPlaceholder:
        ...

    @property
    def custom_data(self) -> ICustomData:
        ...

    @property
    def raw_frame(self) -> IShapeFrame:
        ...

    @raw_frame.setter
    def raw_frame(self, value: IShapeFrame):
        ...

    @property
    def frame(self) -> IShapeFrame:
        ...

    @frame.setter
    def frame(self, value: IShapeFrame):
        ...

    @property
    def line_format(self) -> ILineFormat:
        ...

    @property
    def three_d_format(self) -> IThreeDFormat:
        ...

    @property
    def effect_format(self) -> IEffectFormat:
        ...

    @property
    def fill_format(self) -> IFillFormat:
        ...

    @property
    def hidden(self) -> bool:
        ...

    @hidden.setter
    def hidden(self, value: bool):
        ...

    @property
    def z_order_position(self) -> int:
        ...

    @property
    def connection_site_count(self) -> int:
        ...

    @property
    def rotation(self) -> float:
        ...

    @rotation.setter
    def rotation(self, value: float):
        ...

    @property
    def x(self) -> float:
        ...

    @x.setter
    def x(self, value: float):
        ...

    @property
    def y(self) -> float:
        ...

    @y.setter
    def y(self, value: float):
        ...

    @property
    def width(self) -> float:
        ...

    @width.setter
    def width(self, value: float):
        ...

    @property
    def height(self) -> float:
        ...

    @height.setter
    def height(self, value: float):
        ...

    @property
    def alternative_text(self) -> str:
        ...

    @alternative_text.setter
    def alternative_text(self, value: str):
        ...

    @property
    def alternative_text_title(self) -> str:
        ...

    @alternative_text_title.setter
    def alternative_text_title(self, value: str):
        ...

    @property
    def name(self) -> str:
        ...

    @name.setter
    def name(self, value: str):
        ...

    @property
    def is_decorative(self) -> bool:
        ...

    @is_decorative.setter
    def is_decorative(self, value: bool):
        ...

    @property
    def unique_id(self) -> int:
        ...

    @property
    def office_interop_shape_id(self) -> int:
        ...

    @property
    def is_grouped(self) -> bool:
        ...

    @property
    def black_white_mode(self) -> BlackWhiteMode:
        ...

    @black_white_mode.setter
    def black_white_mode(self, value: BlackWhiteMode):
        ...

    @property
    def parent_group(self) -> IGroupShape:
        ...

    @property
    def as_i_hyperlink_container(self) -> IHyperlinkContainer:
        ...

    @property
    def as_i_slide_component(self) -> ISlideComponent:
        ...

    @property
    def slide(self) -> IBaseSlide:
        ...

    @property
    def as_i_presentation_component(self) -> IPresentationComponent:
        ...

    @property
    def presentation(self) -> IPresentation:
        ...

    @property
    def hyperlink_click(self) -> IHyperlink:
        ...

    @hyperlink_click.setter
    def hyperlink_click(self, value: IHyperlink):
        ...

    @property
    def hyperlink_mouse_over(self) -> IHyperlink:
        ...

    @hyperlink_mouse_over.setter
    def hyperlink_mouse_over(self, value: IHyperlink):
        ...

    @property
    def hyperlink_manager(self) -> IHyperlinkManager:
        ...

    ...

class ISummaryZoomSectionCollection:
    '''Represents a collection of Summary Zoom Section objects.'''
    def add_summary_zoom_section(self, section: ISection) -> ISummaryZoomSection:
        '''Creates new Summary Zoom Section object and add it to the collection
        :param section: Section for a new Summary Zoom Section element :py:class:`aspose.slides.ISection`
        :returns: Added :py:class:`aspose.slides.ISummaryZoomFrame` element'''
        ...

    def get_summary_section(self, section: ISection) -> ISummaryZoomSection:
        '''Returns Summary Zoom Section element for the given section.
        :param section: Section to find :py:class:`aspose.slides.ISection`
        :returns: :py:class:`aspose.slides.ISummaryZoomSection` or None if collection does not contains element for the section.'''
        ...

    def remove_summary_zoom_section(self, section: ISection) -> None:
        '''Remove Summary Zoom Section object from the collection.
        :param section: Section for which the Summary Zoom Section element is to be removed :py:class:`aspose.slides.ISection`.'''
        ...

    def index_of(self, summary_zoom_section: ISummaryZoomSection) -> int:
        '''Returns an index of the specified SummaryZoomSection object.
        :param summary_zoom_section: SummaryZoomSection object to find :py:class:`aspose.slides.ISummaryZoomSection`.
        :returns: Index of a SummaryZoomSection object or -1 if SummaryZoomSection object not from this collection.'''
        ...

    def clear(self) -> None:
        '''Removes all SummaryZoomSection objects from the collection.'''
        ...

    @property
    def as_i_collection(self) -> list:
        ...

    @property
    def as_i_enumerable(self) -> collections.abc.Iterable:
        ...

    def __getitem__(self, key: int) -> ISummaryZoomSection
        ...

    ...

class ISvgImage:
    '''Represents an SVG image.'''
    def write_as_emf(self, stream: io.RawIOBase) -> None:
        '''Saves the SVG image as an EMF file.
        :param stream: Target stream'''
        ...

    @property
    def svg_content(self) -> str:
        ...

    @property
    def svg_data(self) -> bytes:
        ...

    @property
    def external_resource_resolver(self) -> aspose.slides.importing.IExternalResourceResolver:
        ...

    @property
    def base_uri(self) -> str:
        ...

    ...

class ITab:
    '''Represents a tabulation for a text.'''
    @property
    def position(self) -> float:
        '''Returns or sets position of a tab.
                    Assigning this property can change tab's index in collection and invalidate Enumerator.
                    Read/write :py:class:`float`.'''
        ...

    @position.setter
    def position(self, value: float):
        '''Returns or sets position of a tab.
                    Assigning this property can change tab's index in collection and invalidate Enumerator.
                    Read/write :py:class:`float`.'''
        ...

    @property
    def alignment(self) -> TabAlignment:
        '''Returns or sets align style of a tab.
                    Read/write :py:enum:`aspose.slides.TabAlignment`.'''
        ...

    @alignment.setter
    def alignment(self, value: TabAlignment):
        '''Returns or sets align style of a tab.
                    Read/write :py:enum:`aspose.slides.TabAlignment`.'''
        ...

    ...

class ITabCollection:
    '''Represents a collection of tabs.'''
    @overload
    def add(self, position: float, align: TabAlignment) -> ITab:
        '''Adds a Tab to the collection.
        :param position: Tab position.
        :param align: Tab alignment.
        :returns: Added tab.'''
        ...

    @overload
    def add(self, value: ITab) -> int:
        '''Adds a Tab to the collection.
        :param value: The Tab object to be added at the end of the collection.
        :returns: The index at which the tab was added.'''
        ...

    def clear(self) -> None:
        '''Removes all elements from the collection.'''
        ...

    def remove_at(self, index: int) -> None:
        '''Removes the element at the specified index of the collection.
        :param index: The zero-based index of the element to remove.'''
        ...

    @property
    def as_i_collection(self) -> list:
        ...

    @property
    def as_i_enumerable(self) -> collections.abc.Iterable:
        ...

    def __getitem__(self, key: int) -> ITab
        ...

    ...

class ITabEffectiveData:
    '''Immutable object which contains effective text's tabulation stop properties.'''
    @property
    def position(self) -> float:
        '''Returns position of a tab.
                    Assigning this property can change tab's index in collection and invalidate Enumerator.
                    Read-only :py:class:`float`.'''
        ...

    @property
    def alignment(self) -> TabAlignment:
        '''Returns align style of a tab.
                    Read-only :py:enum:`aspose.slides.TabAlignment`.'''
        ...

    ...

class ITabFactory:
    '''Allow to create ITab instances'''
    def create_tab(self, position: float, align: TabAlignment) -> ITab:
        '''Creates a new ITab instance.
        :param position: Tab position.
        :param align: Align.
        :returns: Created tab.'''
        ...

    ...

class ITable:
    '''Represents a table on a slide.'''
    @overload
    def get_thumbnail(self) -> aspose.pydrawing.Bitmap:
        ...

    @overload
    def get_thumbnail(self, bounds: ShapeThumbnailBounds, scale_x: float, scale_y: float) -> aspose.pydrawing.Bitmap:
        ...

    @overload
    def get_image(self) -> IImage:
        ...

    @overload
    def get_image(self, bounds: ShapeThumbnailBounds, scale_x: float, scale_y: float) -> IImage:
        ...

    @overload
    def write_as_svg(self, stream: io.RawIOBase) -> None:
        ...

    @overload
    def write_as_svg(self, stream: io.RawIOBase, svg_options: aspose.slides.export.ISVGOptions) -> None:
        ...

    @overload
    def set_text_format(self, source: IPortionFormat) -> None:
        ...

    @overload
    def set_text_format(self, source: IParagraphFormat) -> None:
        ...

    @overload
    def set_text_format(self, source: ITextFrameFormat) -> None:
        ...

    def merge_cells(self, cell1: ICell, cell2: ICell, allow_splitting: bool) -> ICell:
        '''Merges neighbour cells.
        :param cell1: Cell to merge.
        :param cell2: Cell to merge.
        :param allow_splitting: True to allow cells splitting.
        :returns: Merged cell.'''
        ...

    def add_placeholder(self, placeholder_to_copy_from: IPlaceholder) -> IPlaceholder:
        ...

    def remove_placeholder(self) -> None:
        ...

    def get_base_placeholder(self) -> IShape:
        ...

    @property
    def rows(self) -> IRowCollection:
        '''Returns the collectoin of rows.
                    Read-only :py:class:`aspose.slides.IRowCollection`.'''
        ...

    @property
    def columns(self) -> IColumnCollection:
        '''Returns the collectoin of columns.
                    Read-only :py:class:`aspose.slides.IColumnCollection`.'''
        ...

    @property
    def table_format(self) -> ITableFormat:
        ...

    @property
    def style_preset(self) -> TableStylePreset:
        ...

    @style_preset.setter
    def style_preset(self, value: TableStylePreset):
        ...

    @property
    def right_to_left(self) -> bool:
        ...

    @right_to_left.setter
    def right_to_left(self, value: bool):
        ...

    @property
    def first_row(self) -> bool:
        ...

    @first_row.setter
    def first_row(self, value: bool):
        ...

    @property
    def first_col(self) -> bool:
        ...

    @first_col.setter
    def first_col(self, value: bool):
        ...

    @property
    def last_row(self) -> bool:
        ...

    @last_row.setter
    def last_row(self, value: bool):
        ...

    @property
    def last_col(self) -> bool:
        ...

    @last_col.setter
    def last_col(self, value: bool):
        ...

    @property
    def horizontal_banding(self) -> bool:
        ...

    @horizontal_banding.setter
    def horizontal_banding(self, value: bool):
        ...

    @property
    def vertical_banding(self) -> bool:
        ...

    @vertical_banding.setter
    def vertical_banding(self, value: bool):
        ...

    @property
    def as_i_graphical_object(self) -> IGraphicalObject:
        ...

    @property
    def as_i_bulk_text_formattable(self) -> IBulkTextFormattable:
        ...

    @property
    def shape_lock(self) -> IGraphicalObjectLock:
        ...

    @property
    def graphical_object_lock(self) -> IGraphicalObjectLock:
        ...

    @property
    def as_i_shape(self) -> IShape:
        ...

    @property
    def is_text_holder(self) -> bool:
        ...

    @property
    def placeholder(self) -> IPlaceholder:
        ...

    @property
    def custom_data(self) -> ICustomData:
        ...

    @property
    def raw_frame(self) -> IShapeFrame:
        ...

    @raw_frame.setter
    def raw_frame(self, value: IShapeFrame):
        ...

    @property
    def frame(self) -> IShapeFrame:
        ...

    @frame.setter
    def frame(self, value: IShapeFrame):
        ...

    @property
    def line_format(self) -> ILineFormat:
        ...

    @property
    def three_d_format(self) -> IThreeDFormat:
        ...

    @property
    def effect_format(self) -> IEffectFormat:
        ...

    @property
    def fill_format(self) -> IFillFormat:
        ...

    @property
    def hidden(self) -> bool:
        ...

    @hidden.setter
    def hidden(self, value: bool):
        ...

    @property
    def z_order_position(self) -> int:
        ...

    @property
    def connection_site_count(self) -> int:
        ...

    @property
    def rotation(self) -> float:
        ...

    @rotation.setter
    def rotation(self, value: float):
        ...

    @property
    def x(self) -> float:
        ...

    @x.setter
    def x(self, value: float):
        ...

    @property
    def y(self) -> float:
        ...

    @y.setter
    def y(self, value: float):
        ...

    @property
    def width(self) -> float:
        ...

    @width.setter
    def width(self, value: float):
        ...

    @property
    def height(self) -> float:
        ...

    @height.setter
    def height(self, value: float):
        ...

    @property
    def alternative_text(self) -> str:
        ...

    @alternative_text.setter
    def alternative_text(self, value: str):
        ...

    @property
    def alternative_text_title(self) -> str:
        ...

    @alternative_text_title.setter
    def alternative_text_title(self, value: str):
        ...

    @property
    def name(self) -> str:
        ...

    @name.setter
    def name(self, value: str):
        ...

    @property
    def is_decorative(self) -> bool:
        ...

    @is_decorative.setter
    def is_decorative(self, value: bool):
        ...

    @property
    def unique_id(self) -> int:
        ...

    @property
    def office_interop_shape_id(self) -> int:
        ...

    @property
    def is_grouped(self) -> bool:
        ...

    @property
    def black_white_mode(self) -> BlackWhiteMode:
        ...

    @black_white_mode.setter
    def black_white_mode(self, value: BlackWhiteMode):
        ...

    @property
    def parent_group(self) -> IGroupShape:
        ...

    @property
    def as_i_hyperlink_container(self) -> IHyperlinkContainer:
        ...

    @property
    def as_i_slide_component(self) -> ISlideComponent:
        ...

    @property
    def slide(self) -> IBaseSlide:
        ...

    @property
    def as_i_presentation_component(self) -> IPresentationComponent:
        ...

    @property
    def presentation(self) -> IPresentation:
        ...

    @property
    def hyperlink_click(self) -> IHyperlink:
        ...

    @hyperlink_click.setter
    def hyperlink_click(self, value: IHyperlink):
        ...

    @property
    def hyperlink_mouse_over(self) -> IHyperlink:
        ...

    @hyperlink_mouse_over.setter
    def hyperlink_mouse_over(self, value: IHyperlink):
        ...

    @property
    def hyperlink_manager(self) -> IHyperlinkManager:
        ...

    ...

class ITableFormat:
    '''Represents format of a table.'''
    def get_effective(self) -> ITableFormatEffectiveData:
        '''Gets effective table formatting properties with inheritance and table styles applied.
        :returns: A :py:class:`aspose.slides.ITableFormatEffectiveData`.'''
        ...

    @property
    def fill_format(self) -> IFillFormat:
        ...

    @property
    def transparency(self) -> float:
        '''Gets or sets the transparency of the fill color.
                    Read/write :py:class:`float`.'''
        ...

    @transparency.setter
    def transparency(self, value: float):
        '''Gets or sets the transparency of the fill color.
                    Read/write :py:class:`float`.'''
        ...

    ...

class ITableFormatEffectiveData:
    '''Immutable object which contains effective table formatting properties.'''
    @property
    def transparency(self) -> float:
        '''Gets the transparency of the fill color.
                    Read :py:class:`float`.'''
        ...

    @property
    def as_i_base_table_format_effective_data(self) -> IBaseTableFormatEffectiveData:
        ...

    @property
    def fill_format(self) -> IFillFormatEffectiveData:
        ...

    @property
    def border_left(self) -> ILineFormatEffectiveData:
        ...

    @property
    def border_top(self) -> ILineFormatEffectiveData:
        ...

    @property
    def border_right(self) -> ILineFormatEffectiveData:
        ...

    @property
    def border_bottom(self) -> ILineFormatEffectiveData:
        ...

    @property
    def border_diagonal_down(self) -> ILineFormatEffectiveData:
        ...

    @property
    def border_diagonal_up(self) -> ILineFormatEffectiveData:
        ...

    ...

class ITagCollection:
    '''Represents the collection of tags (user defined pairs of strings)'''
    def add(self, name: str, value: str) -> int:
        '''Adds a new tag to collection.
        :param name: The name of the tag.
        :param value: The value of the tag.
        :returns: The index of the added tag.'''
        ...

    def remove(self, name: str) -> None:
        '''Removes the tag with a specified name from the collection.
        :param name: The name of tag to remove.'''
        ...

    def index_of_name(self, name: str) -> int:
        '''Returns the zero-based index of the specified key in the collection.
        :param name: The name to locate in the collection.
        :returns: The zero-based index of key, if key is found in the collection; otherwise, -1.'''
        ...

    def remove_at(self, index: int) -> None:
        '''Removes the tag at the specified index.
        :param index: The zero-based index of the tag to remove.'''
        ...

    def clear(self) -> None:
        '''Removes all tags from the collection.'''
        ...

    def get_value_by_index(self, index: int) -> str:
        '''Returns value of a tag at the specified index.
        :param index: Index of a tag to return.
        :returns: Value of a tag.'''
        ...

    def get_name_by_index(self, index: int) -> str:
        '''Returns key of a tag at the specified index.
        :param index: Index of a tag to return.
        :returns: Key of a tag.'''
        ...

    def get_names_of_tags(self) -> List[str]:
        '''Returns names of tags.
        :returns: Names of tags.'''
        ...

    @property
    def as_i_collection(self) -> list:
        ...

    @property
    def as_i_enumerable(self) -> collections.abc.Iterable:
        ...

    ...

class ITextFrame:
    '''Represents a TextFrame.'''
    @overload
    def highlight_text(self, text: str, highlight_color: aspose.pydrawing.Color) -> None:
        '''Highlights all matches of the sample text with the specified color.
        :param text: The text to highlight.
        :param highlight_color: The color to highlight the text.'''
        ...

    @overload
    def highlight_text(self, text: str, highlight_color: aspose.pydrawing.Color, options: ITextHighlightingOptions) -> None:
        '''Highlights all matches of the sample text with the specified color.
        :param text: The text to highlight.
        :param highlight_color: The color to highlight the text.
        :param options: Highlighting options.'''
        ...

    @overload
    def highlight_text(self, text: str, highlight_color: aspose.pydrawing.Color, options: ITextSearchOptions, callback: IFindResultCallback) -> None:
        '''Highlights all matches of the sample text with the specified color.
        :param text: The text to highlight.
        :param highlight_color: The color to highlight the text.
        :param options: Text search options :py:class:`aspose.slides.ITextSearchOptions`.
        :param callback: The callback object for receiving search results :py:class:`aspose.slides.IFindResultCallback`.'''
        ...

    @overload
    def highlight_regex(self, regex: str, highlight_color: aspose.pydrawing.Color) -> None:
        ...

    @overload
    def highlight_regex(self, regex: str, highlight_color: aspose.pydrawing.Color, options: ITextHighlightingOptions) -> None:
        '''Highlights all matches of the regular expression with the specified color.
        :param regex: Text of regular expression to get text to highlight.
        :param highlight_color: The color to highlight the text.
        :param options: Highlighting options.'''
        ...

    def join_portions_with_same_formatting(self) -> None:
        '''Joins runs with same formatting in all paragraphs.'''
        ...

    def split_text_by_columns(self) -> List[str]:
        '''Splits the text content of the :py:class:`aspose.slides.ITextFrame` into an array of strings,  
                    where each element corresponds to a separate text column within the frame.
        :returns: An array of strings, where each string represents the text content of a specific column  
                    in the :py:class:`aspose.slides.ITextFrame`.'''
        ...

    def replace_text(self, old_text: str, new_text: str, options: ITextSearchOptions, callback: IFindResultCallback) -> None:
        '''Replaces all occurrences of the specified text with another specified text.
        :param old_text: The string to be replaced.
        :param new_text: The string to replace all occurrences of oldText.
        :param options: Text search options :py:class:`aspose.slides.ITextSearchOptions`.
        :param callback: The callback object for receiving search results :py:class:`aspose.slides.IFindResultCallback`.'''
        ...

    def replace_regex(self, regex: str, new_text: str) -> None:
        ...

    @property
    def paragraphs(self) -> IParagraphCollection:
        '''Returns the list of all paragraphs in a frame.
                    Read-only :py:class:`aspose.slides.IParagraphCollection`.'''
        ...

    @property
    def text(self) -> str:
        '''Gets or sets the plain text for a TextFrame.
                    Read/write :py:class:`str`.'''
        ...

    @text.setter
    def text(self, value: str):
        '''Gets or sets the plain text for a TextFrame.
                    Read/write :py:class:`str`.'''
        ...

    @property
    def text_frame_format(self) -> ITextFrameFormat:
        ...

    @property
    def hyperlink_queries(self) -> IHyperlinkQueries:
        ...

    @property
    def parent_shape(self) -> IShape:
        ...

    @property
    def parent_cell(self) -> ICell:
        ...

    @property
    def as_i_slide_component(self) -> ISlideComponent:
        ...

    @property
    def slide(self) -> IBaseSlide:
        ...

    @property
    def as_i_presentation_component(self) -> IPresentationComponent:
        ...

    @property
    def presentation(self) -> IPresentation:
        ...

    ...

class ITextFrameFormat:
    '''Contains the TextFrame's formatting properties.'''
    def get_effective(self) -> ITextFrameFormatEffectiveData:
        '''Gets effective text frame formatting data with the inheritance applied.
        :returns: A :py:class:`aspose.slides.ITextFrameFormatEffectiveData`.'''
        ...

    @property
    def text_style(self) -> ITextStyle:
        ...

    @property
    def margin_left(self) -> float:
        ...

    @margin_left.setter
    def margin_left(self, value: float):
        ...

    @property
    def margin_right(self) -> float:
        ...

    @margin_right.setter
    def margin_right(self, value: float):
        ...

    @property
    def margin_top(self) -> float:
        ...

    @margin_top.setter
    def margin_top(self, value: float):
        ...

    @property
    def margin_bottom(self) -> float:
        ...

    @margin_bottom.setter
    def margin_bottom(self, value: float):
        ...

    @property
    def wrap_text(self) -> NullableBool:
        ...

    @wrap_text.setter
    def wrap_text(self, value: NullableBool):
        ...

    @property
    def anchoring_type(self) -> TextAnchorType:
        ...

    @anchoring_type.setter
    def anchoring_type(self, value: TextAnchorType):
        ...

    @property
    def center_text(self) -> NullableBool:
        ...

    @center_text.setter
    def center_text(self, value: NullableBool):
        ...

    @property
    def text_vertical_type(self) -> TextVerticalType:
        ...

    @text_vertical_type.setter
    def text_vertical_type(self, value: TextVerticalType):
        ...

    @property
    def autofit_type(self) -> TextAutofitType:
        ...

    @autofit_type.setter
    def autofit_type(self, value: TextAutofitType):
        ...

    @property
    def column_count(self) -> int:
        ...

    @column_count.setter
    def column_count(self, value: int):
        ...

    @property
    def column_spacing(self) -> float:
        ...

    @column_spacing.setter
    def column_spacing(self, value: float):
        ...

    @property
    def three_d_format(self) -> IThreeDFormat:
        ...

    @property
    def keep_text_flat(self) -> bool:
        ...

    @keep_text_flat.setter
    def keep_text_flat(self, value: bool):
        ...

    @property
    def rotation_angle(self) -> float:
        ...

    @rotation_angle.setter
    def rotation_angle(self, value: float):
        ...

    @property
    def transform(self) -> TextShapeType:
        '''Gets or sets text wrapping shape.
                    Read/write :py:enum:`aspose.slides.TextShapeType`.'''
        ...

    @transform.setter
    def transform(self, value: TextShapeType):
        '''Gets or sets text wrapping shape.
                    Read/write :py:enum:`aspose.slides.TextShapeType`.'''
        ...

    ...

class ITextFrameFormatEffectiveData:
    '''Immutable object which contains effective text frame formatting properties.'''
    @property
    def text_style(self) -> ITextStyleEffectiveData:
        ...

    @property
    def margin_left(self) -> float:
        ...

    @property
    def margin_right(self) -> float:
        ...

    @property
    def margin_top(self) -> float:
        ...

    @property
    def margin_bottom(self) -> float:
        ...

    @property
    def wrap_text(self) -> bool:
        ...

    @property
    def anchoring_type(self) -> TextAnchorType:
        ...

    @property
    def center_text(self) -> bool:
        ...

    @property
    def text_vertical_type(self) -> TextVerticalType:
        ...

    @property
    def autofit_type(self) -> TextAutofitType:
        ...

    @property
    def column_count(self) -> int:
        ...

    @property
    def column_spacing(self) -> float:
        ...

    ...

class ITextHighlightingOptions:
    '''Represents options which can be used to highlight text in text frame.'''
    @property
    def case_sensitive(self) -> bool:
        ...

    @case_sensitive.setter
    def case_sensitive(self, value: bool):
        ...

    @property
    def whole_words_only(self) -> bool:
        ...

    @whole_words_only.setter
    def whole_words_only(self, value: bool):
        ...

    ...

class ITextSearchOptions:
    '''Represents options that can be used to search for text in a Presentation, Slide or TextFrame.'''
    @property
    def case_sensitive(self) -> bool:
        ...

    @case_sensitive.setter
    def case_sensitive(self, value: bool):
        ...

    @property
    def whole_words_only(self) -> bool:
        ...

    @whole_words_only.setter
    def whole_words_only(self, value: bool):
        ...

    ...

class ITextStyle:
    '''Text style formatting properties.'''
    def get_level(self, index: int) -> IParagraphFormat:
        '''If level of style exist returns it, otherwise returns None.
        :param index: Zero-based index of level. Must lay in 0..8 interval.
        :returns: Formatting of level :py:class:`aspose.slides.IParagraphFormat`.'''
        ...

    def get_effective(self) -> ITextStyleEffectiveData:
        '''Gets effective text style formatting data with the inheritance applied.
        :returns: A :py:class:`aspose.slides.ITextStyleEffectiveData`.'''
        ...

    @property
    def default_paragraph_format(self) -> IParagraphFormat:
        ...

    ...

class ITextStyleEffectiveData:
    '''Immutable object which contains effective text style properties.'''
    def get_level(self, index: int) -> IParagraphFormatEffectiveData:
        '''Returns level of effective style.
        :param index: Zero-based index of level. Must lay in 0..8 interval.
        :returns: Effective formatting of level :py:class:`aspose.slides.IParagraphFormatEffectiveData`.'''
        ...

    @property
    def default_paragraph_format(self) -> IParagraphFormatEffectiveData:
        ...

    ...

class IThreeDFormat:
    '''Represents 3-D properties.'''
    def get_effective(self) -> IThreeDFormatEffectiveData:
        '''Gets effective 3-D formatting data with the inheritance applied.
        :returns: A :py:class:`aspose.slides.IThreeDFormatEffectiveData`.'''
        ...

    @property
    def contour_width(self) -> float:
        ...

    @contour_width.setter
    def contour_width(self, value: float):
        ...

    @property
    def extrusion_height(self) -> float:
        ...

    @extrusion_height.setter
    def extrusion_height(self, value: float):
        ...

    @property
    def depth(self) -> float:
        '''Returns or sets the depth of a 3D shape.
                    Read/write :py:class:`float`.'''
        ...

    @depth.setter
    def depth(self, value: float):
        '''Returns or sets the depth of a 3D shape.
                    Read/write :py:class:`float`.'''
        ...

    @property
    def bevel_top(self) -> IShapeBevel:
        ...

    @property
    def bevel_bottom(self) -> IShapeBevel:
        ...

    @property
    def contour_color(self) -> IColorFormat:
        ...

    @property
    def extrusion_color(self) -> IColorFormat:
        ...

    @property
    def camera(self) -> ICamera:
        '''Returns or sets the settings of a camera.
                    Read-only :py:class:`aspose.slides.ICamera`.'''
        ...

    @property
    def light_rig(self) -> ILightRig:
        ...

    @property
    def material(self) -> MaterialPresetType:
        '''Returns or sets the type of a material.
                    Read/write :py:enum:`aspose.slides.MaterialPresetType`.'''
        ...

    @material.setter
    def material(self, value: MaterialPresetType):
        '''Returns or sets the type of a material.
                    Read/write :py:enum:`aspose.slides.MaterialPresetType`.'''
        ...

    @property
    def as_i_three_d_param_source(self) -> IThreeDParamSource:
        ...

    ...

class IThreeDFormatEffectiveData:
    '''Immutable object which represents effective 3-D formatting properties.'''
    @property
    def contour_width(self) -> float:
        ...

    @property
    def extrusion_height(self) -> float:
        ...

    @property
    def depth(self) -> float:
        '''Returns the depth of a 3D shape.
                    Read-only :py:class:`float`.'''
        ...

    @property
    def bevel_top(self) -> IShapeBevelEffectiveData:
        ...

    @property
    def bevel_bottom(self) -> IShapeBevelEffectiveData:
        ...

    @property
    def contour_color(self) -> aspose.pydrawing.Color:
        ...

    @property
    def extrusion_color(self) -> aspose.pydrawing.Color:
        ...

    @property
    def camera(self) -> ICameraEffectiveData:
        '''Returns the settings of a camera.
                    Read-only :py:class:`aspose.slides.ICameraEffectiveData`.'''
        ...

    @property
    def light_rig(self) -> ILightRigEffectiveData:
        ...

    @property
    def material(self) -> MaterialPresetType:
        '''Returns the type of a material.
                    Read-only :py:enum:`aspose.slides.MaterialPresetType`.'''
        ...

    @property
    def as_i_three_d_param_source(self) -> IThreeDParamSource:
        ...

    ...

class IThreeDParamSource:
    '''3D properties source auxiliary interface'''
    ...

class IVideo:
    '''Represents a video embedded into a presentation.'''
    def get_stream(self) -> io.RawIOBase:
        '''Returns Stream stream for reading.
                    Use 'using' or close stream after using.
        :returns: Stream for reading.'''
        ...

    @property
    def content_type(self) -> str:
        ...

    @property
    def binary_data(self) -> bytes:
        ...

    ...

class IVideoCollection:
    '''Represents a collection of Video objects.'''
    @overload
    def add_video(self, video: IVideo) -> IVideo:
        '''Adds a copy of an video file from an another presentation.
        :param video: Source video.
        :returns: Added video.'''
        ...

    @overload
    def add_video(self, stream: io.RawIOBase, loading_stream_behavior: LoadingStreamBehavior) -> IVideo:
        '''Creates and adds a video to a presentation from stream.
        :param stream: Stream to add video file from.
        :param loading_stream_behavior: The behavior which will be applied to the stream.
        :returns: Added :py:class:`aspose.slides.IVideo`.'''
        ...

    @overload
    def add_video(self, video_data: bytes) -> IVideo:
        '''Creates and adds a video to a presentation from byte array.
        :param video_data: Video bytes.
        :returns: Added video.'''
        ...

    @property
    def as_i_collection(self) -> list:
        ...

    @property
    def as_i_enumerable(self) -> collections.abc.Iterable:
        ...

    def __getitem__(self, key: int) -> IVideo
        ...

    ...

class IVideoFrame:
    '''Represents a video clip on a slide.'''
    @overload
    def get_thumbnail(self) -> aspose.pydrawing.Bitmap:
        ...

    @overload
    def get_thumbnail(self, bounds: ShapeThumbnailBounds, scale_x: float, scale_y: float) -> aspose.pydrawing.Bitmap:
        ...

    @overload
    def get_image(self) -> IImage:
        ...

    @overload
    def get_image(self, bounds: ShapeThumbnailBounds, scale_x: float, scale_y: float) -> IImage:
        ...

    @overload
    def write_as_svg(self, stream: io.RawIOBase) -> None:
        ...

    @overload
    def write_as_svg(self, stream: io.RawIOBase, svg_options: aspose.slides.export.ISVGOptions) -> None:
        ...

    def get_geometry_paths(self) -> List[IGeometryPath]:
        ...

    def set_geometry_path(self, geometry_path: IGeometryPath) -> None:
        ...

    def set_geometry_paths(self, geometry_paths: List[IGeometryPath]) -> None:
        ...

    def create_shape_elements(self) -> List[IShapeElement]:
        ...

    def add_placeholder(self, placeholder_to_copy_from: IPlaceholder) -> IPlaceholder:
        ...

    def remove_placeholder(self) -> None:
        ...

    def get_base_placeholder(self) -> IShape:
        ...

    @property
    def rewind_video(self) -> bool:
        ...

    @rewind_video.setter
    def rewind_video(self, value: bool):
        ...

    @property
    def play_loop_mode(self) -> bool:
        ...

    @play_loop_mode.setter
    def play_loop_mode(self, value: bool):
        ...

    @property
    def hide_at_showing(self) -> bool:
        ...

    @hide_at_showing.setter
    def hide_at_showing(self, value: bool):
        ...

    @property
    def volume(self) -> AudioVolumeMode:
        '''Returns or sets the audio volume.
                    Read/write :py:enum:`aspose.slides.AudioVolumeMode`.'''
        ...

    @volume.setter
    def volume(self, value: AudioVolumeMode):
        '''Returns or sets the audio volume.
                    Read/write :py:enum:`aspose.slides.AudioVolumeMode`.'''
        ...

    @property
    def play_mode(self) -> VideoPlayModePreset:
        ...

    @play_mode.setter
    def play_mode(self, value: VideoPlayModePreset):
        ...

    @property
    def full_screen_mode(self) -> bool:
        ...

    @full_screen_mode.setter
    def full_screen_mode(self, value: bool):
        ...

    @property
    def link_path_long(self) -> str:
        ...

    @link_path_long.setter
    def link_path_long(self, value: str):
        ...

    @property
    def embedded_video(self) -> IVideo:
        ...

    @embedded_video.setter
    def embedded_video(self, value: IVideo):
        ...

    @property
    def trim_from_start(self) -> float:
        ...

    @trim_from_start.setter
    def trim_from_start(self, value: float):
        ...

    @property
    def trim_from_end(self) -> float:
        ...

    @trim_from_end.setter
    def trim_from_end(self, value: float):
        ...

    @property
    def caption_tracks(self) -> ICaptionsCollection:
        ...

    @property
    def as_i_picture_frame(self) -> IPictureFrame:
        ...

    @property
    def shape_lock(self) -> IPictureFrameLock:
        ...

    @property
    def picture_frame_lock(self) -> IPictureFrameLock:
        ...

    @property
    def picture_format(self) -> IPictureFillFormat:
        ...

    @property
    def relative_scale_height(self) -> float:
        ...

    @relative_scale_height.setter
    def relative_scale_height(self, value: float):
        ...

    @property
    def relative_scale_width(self) -> float:
        ...

    @relative_scale_width.setter
    def relative_scale_width(self, value: float):
        ...

    @property
    def as_i_geometry_shape(self) -> IGeometryShape:
        ...

    @property
    def shape_style(self) -> IShapeStyle:
        ...

    @property
    def shape_type(self) -> ShapeType:
        ...

    @shape_type.setter
    def shape_type(self, value: ShapeType):
        ...

    @property
    def adjustments(self) -> IAdjustValueCollection:
        ...

    @property
    def as_i_shape(self) -> IShape:
        ...

    @property
    def is_text_holder(self) -> bool:
        ...

    @property
    def placeholder(self) -> IPlaceholder:
        ...

    @property
    def custom_data(self) -> ICustomData:
        ...

    @property
    def raw_frame(self) -> IShapeFrame:
        ...

    @raw_frame.setter
    def raw_frame(self, value: IShapeFrame):
        ...

    @property
    def frame(self) -> IShapeFrame:
        ...

    @frame.setter
    def frame(self, value: IShapeFrame):
        ...

    @property
    def line_format(self) -> ILineFormat:
        ...

    @property
    def three_d_format(self) -> IThreeDFormat:
        ...

    @property
    def effect_format(self) -> IEffectFormat:
        ...

    @property
    def fill_format(self) -> IFillFormat:
        ...

    @property
    def hidden(self) -> bool:
        ...

    @hidden.setter
    def hidden(self, value: bool):
        ...

    @property
    def z_order_position(self) -> int:
        ...

    @property
    def connection_site_count(self) -> int:
        ...

    @property
    def rotation(self) -> float:
        ...

    @rotation.setter
    def rotation(self, value: float):
        ...

    @property
    def x(self) -> float:
        ...

    @x.setter
    def x(self, value: float):
        ...

    @property
    def y(self) -> float:
        ...

    @y.setter
    def y(self, value: float):
        ...

    @property
    def width(self) -> float:
        ...

    @width.setter
    def width(self, value: float):
        ...

    @property
    def height(self) -> float:
        ...

    @height.setter
    def height(self, value: float):
        ...

    @property
    def alternative_text(self) -> str:
        ...

    @alternative_text.setter
    def alternative_text(self, value: str):
        ...

    @property
    def alternative_text_title(self) -> str:
        ...

    @alternative_text_title.setter
    def alternative_text_title(self, value: str):
        ...

    @property
    def name(self) -> str:
        ...

    @name.setter
    def name(self, value: str):
        ...

    @property
    def is_decorative(self) -> bool:
        ...

    @is_decorative.setter
    def is_decorative(self, value: bool):
        ...

    @property
    def unique_id(self) -> int:
        ...

    @property
    def office_interop_shape_id(self) -> int:
        ...

    @property
    def is_grouped(self) -> bool:
        ...

    @property
    def black_white_mode(self) -> BlackWhiteMode:
        ...

    @black_white_mode.setter
    def black_white_mode(self, value: BlackWhiteMode):
        ...

    @property
    def parent_group(self) -> IGroupShape:
        ...

    @property
    def as_i_hyperlink_container(self) -> IHyperlinkContainer:
        ...

    @property
    def as_i_slide_component(self) -> ISlideComponent:
        ...

    @property
    def slide(self) -> IBaseSlide:
        ...

    @property
    def as_i_presentation_component(self) -> IPresentationComponent:
        ...

    @property
    def presentation(self) -> IPresentation:
        ...

    @property
    def hyperlink_click(self) -> IHyperlink:
        ...

    @hyperlink_click.setter
    def hyperlink_click(self, value: IHyperlink):
        ...

    @property
    def hyperlink_mouse_over(self) -> IHyperlink:
        ...

    @hyperlink_mouse_over.setter
    def hyperlink_mouse_over(self, value: IHyperlink):
        ...

    @property
    def hyperlink_manager(self) -> IHyperlinkManager:
        ...

    ...

class IViewProperties:
    '''Presentation wide view properties.'''
    @property
    def last_view(self) -> ViewType:
        ...

    @last_view.setter
    def last_view(self, value: ViewType):
        ...

    @property
    def show_comments(self) -> NullableBool:
        ...

    @show_comments.setter
    def show_comments(self, value: NullableBool):
        ...

    @property
    def slide_view_properties(self) -> ICommonSlideViewProperties:
        ...

    @property
    def notes_view_properties(self) -> ICommonSlideViewProperties:
        ...

    @property
    def normal_view_properties(self) -> INormalViewProperties:
        ...

    @property
    def grid_spacing(self) -> float:
        ...

    @grid_spacing.setter
    def grid_spacing(self, value: float):
        ...

    ...

class IZoomFrame:
    '''Represents a Slide Zoom object in a slide.'''
    @overload
    def get_thumbnail(self) -> aspose.pydrawing.Bitmap:
        ...

    @overload
    def get_thumbnail(self, bounds: ShapeThumbnailBounds, scale_x: float, scale_y: float) -> aspose.pydrawing.Bitmap:
        ...

    @overload
    def get_image(self) -> IImage:
        ...

    @overload
    def get_image(self, bounds: ShapeThumbnailBounds, scale_x: float, scale_y: float) -> IImage:
        ...

    @overload
    def write_as_svg(self, stream: io.RawIOBase) -> None:
        ...

    @overload
    def write_as_svg(self, stream: io.RawIOBase, svg_options: aspose.slides.export.ISVGOptions) -> None:
        ...

    def add_placeholder(self, placeholder_to_copy_from: IPlaceholder) -> IPlaceholder:
        ...

    def remove_placeholder(self) -> None:
        ...

    def get_base_placeholder(self) -> IShape:
        ...

    @property
    def target_slide(self) -> ISlide:
        ...

    @target_slide.setter
    def target_slide(self, value: ISlide):
        ...

    @property
    def as_i_zoom_object(self) -> IZoomObject:
        ...

    @property
    def image_type(self) -> ZoomImageType:
        ...

    @image_type.setter
    def image_type(self, value: ZoomImageType):
        ...

    @property
    def return_to_parent(self) -> bool:
        ...

    @return_to_parent.setter
    def return_to_parent(self, value: bool):
        ...

    @property
    def show_background(self) -> bool:
        ...

    @show_background.setter
    def show_background(self, value: bool):
        ...

    @property
    def zoom_image(self) -> IPPImage:
        ...

    @zoom_image.setter
    def zoom_image(self, value: IPPImage):
        ...

    @property
    def transition_duration(self) -> float:
        ...

    @transition_duration.setter
    def transition_duration(self, value: float):
        ...

    @property
    def as_i_graphical_object(self) -> IGraphicalObject:
        ...

    @property
    def shape_lock(self) -> IGraphicalObjectLock:
        ...

    @property
    def graphical_object_lock(self) -> IGraphicalObjectLock:
        ...

    @property
    def as_i_shape(self) -> IShape:
        ...

    @property
    def is_text_holder(self) -> bool:
        ...

    @property
    def placeholder(self) -> IPlaceholder:
        ...

    @property
    def custom_data(self) -> ICustomData:
        ...

    @property
    def raw_frame(self) -> IShapeFrame:
        ...

    @raw_frame.setter
    def raw_frame(self, value: IShapeFrame):
        ...

    @property
    def frame(self) -> IShapeFrame:
        ...

    @frame.setter
    def frame(self, value: IShapeFrame):
        ...

    @property
    def line_format(self) -> ILineFormat:
        ...

    @property
    def three_d_format(self) -> IThreeDFormat:
        ...

    @property
    def effect_format(self) -> IEffectFormat:
        ...

    @property
    def fill_format(self) -> IFillFormat:
        ...

    @property
    def hidden(self) -> bool:
        ...

    @hidden.setter
    def hidden(self, value: bool):
        ...

    @property
    def z_order_position(self) -> int:
        ...

    @property
    def connection_site_count(self) -> int:
        ...

    @property
    def rotation(self) -> float:
        ...

    @rotation.setter
    def rotation(self, value: float):
        ...

    @property
    def x(self) -> float:
        ...

    @x.setter
    def x(self, value: float):
        ...

    @property
    def y(self) -> float:
        ...

    @y.setter
    def y(self, value: float):
        ...

    @property
    def width(self) -> float:
        ...

    @width.setter
    def width(self, value: float):
        ...

    @property
    def height(self) -> float:
        ...

    @height.setter
    def height(self, value: float):
        ...

    @property
    def alternative_text(self) -> str:
        ...

    @alternative_text.setter
    def alternative_text(self, value: str):
        ...

    @property
    def alternative_text_title(self) -> str:
        ...

    @alternative_text_title.setter
    def alternative_text_title(self, value: str):
        ...

    @property
    def name(self) -> str:
        ...

    @name.setter
    def name(self, value: str):
        ...

    @property
    def is_decorative(self) -> bool:
        ...

    @is_decorative.setter
    def is_decorative(self, value: bool):
        ...

    @property
    def unique_id(self) -> int:
        ...

    @property
    def office_interop_shape_id(self) -> int:
        ...

    @property
    def is_grouped(self) -> bool:
        ...

    @property
    def black_white_mode(self) -> BlackWhiteMode:
        ...

    @black_white_mode.setter
    def black_white_mode(self, value: BlackWhiteMode):
        ...

    @property
    def parent_group(self) -> IGroupShape:
        ...

    @property
    def as_i_hyperlink_container(self) -> IHyperlinkContainer:
        ...

    @property
    def as_i_slide_component(self) -> ISlideComponent:
        ...

    @property
    def slide(self) -> IBaseSlide:
        ...

    @property
    def as_i_presentation_component(self) -> IPresentationComponent:
        ...

    @property
    def presentation(self) -> IPresentation:
        ...

    @property
    def hyperlink_click(self) -> IHyperlink:
        ...

    @hyperlink_click.setter
    def hyperlink_click(self, value: IHyperlink):
        ...

    @property
    def hyperlink_mouse_over(self) -> IHyperlink:
        ...

    @hyperlink_mouse_over.setter
    def hyperlink_mouse_over(self, value: IHyperlink):
        ...

    @property
    def hyperlink_manager(self) -> IHyperlinkManager:
        ...

    ...

class IZoomObject:
    '''Represents a Zoom object in a slide.'''
    @overload
    def get_thumbnail(self) -> aspose.pydrawing.Bitmap:
        ...

    @overload
    def get_thumbnail(self, bounds: ShapeThumbnailBounds, scale_x: float, scale_y: float) -> aspose.pydrawing.Bitmap:
        ...

    @overload
    def get_image(self) -> IImage:
        ...

    @overload
    def get_image(self, bounds: ShapeThumbnailBounds, scale_x: float, scale_y: float) -> IImage:
        ...

    @overload
    def write_as_svg(self, stream: io.RawIOBase) -> None:
        ...

    @overload
    def write_as_svg(self, stream: io.RawIOBase, svg_options: aspose.slides.export.ISVGOptions) -> None:
        ...

    def add_placeholder(self, placeholder_to_copy_from: IPlaceholder) -> IPlaceholder:
        ...

    def remove_placeholder(self) -> None:
        ...

    def get_base_placeholder(self) -> IShape:
        ...

    @property
    def image_type(self) -> ZoomImageType:
        ...

    @image_type.setter
    def image_type(self, value: ZoomImageType):
        ...

    @property
    def return_to_parent(self) -> bool:
        ...

    @return_to_parent.setter
    def return_to_parent(self, value: bool):
        ...

    @property
    def show_background(self) -> bool:
        ...

    @show_background.setter
    def show_background(self, value: bool):
        ...

    @property
    def zoom_image(self) -> IPPImage:
        ...

    @zoom_image.setter
    def zoom_image(self, value: IPPImage):
        ...

    @property
    def transition_duration(self) -> float:
        ...

    @transition_duration.setter
    def transition_duration(self, value: float):
        ...

    @property
    def as_i_graphical_object(self) -> IGraphicalObject:
        ...

    @property
    def shape_lock(self) -> IGraphicalObjectLock:
        ...

    @property
    def graphical_object_lock(self) -> IGraphicalObjectLock:
        ...

    @property
    def as_i_shape(self) -> IShape:
        ...

    @property
    def is_text_holder(self) -> bool:
        ...

    @property
    def placeholder(self) -> IPlaceholder:
        ...

    @property
    def custom_data(self) -> ICustomData:
        ...

    @property
    def raw_frame(self) -> IShapeFrame:
        ...

    @raw_frame.setter
    def raw_frame(self, value: IShapeFrame):
        ...

    @property
    def frame(self) -> IShapeFrame:
        ...

    @frame.setter
    def frame(self, value: IShapeFrame):
        ...

    @property
    def line_format(self) -> ILineFormat:
        ...

    @property
    def three_d_format(self) -> IThreeDFormat:
        ...

    @property
    def effect_format(self) -> IEffectFormat:
        ...

    @property
    def fill_format(self) -> IFillFormat:
        ...

    @property
    def hidden(self) -> bool:
        ...

    @hidden.setter
    def hidden(self, value: bool):
        ...

    @property
    def z_order_position(self) -> int:
        ...

    @property
    def connection_site_count(self) -> int:
        ...

    @property
    def rotation(self) -> float:
        ...

    @rotation.setter
    def rotation(self, value: float):
        ...

    @property
    def x(self) -> float:
        ...

    @x.setter
    def x(self, value: float):
        ...

    @property
    def y(self) -> float:
        ...

    @y.setter
    def y(self, value: float):
        ...

    @property
    def width(self) -> float:
        ...

    @width.setter
    def width(self, value: float):
        ...

    @property
    def height(self) -> float:
        ...

    @height.setter
    def height(self, value: float):
        ...

    @property
    def alternative_text(self) -> str:
        ...

    @alternative_text.setter
    def alternative_text(self, value: str):
        ...

    @property
    def alternative_text_title(self) -> str:
        ...

    @alternative_text_title.setter
    def alternative_text_title(self, value: str):
        ...

    @property
    def name(self) -> str:
        ...

    @name.setter
    def name(self, value: str):
        ...

    @property
    def is_decorative(self) -> bool:
        ...

    @is_decorative.setter
    def is_decorative(self, value: bool):
        ...

    @property
    def unique_id(self) -> int:
        ...

    @property
    def office_interop_shape_id(self) -> int:
        ...

    @property
    def is_grouped(self) -> bool:
        ...

    @property
    def black_white_mode(self) -> BlackWhiteMode:
        ...

    @black_white_mode.setter
    def black_white_mode(self, value: BlackWhiteMode):
        ...

    @property
    def parent_group(self) -> IGroupShape:
        ...

    @property
    def as_i_hyperlink_container(self) -> IHyperlinkContainer:
        ...

    @property
    def as_i_slide_component(self) -> ISlideComponent:
        ...

    @property
    def slide(self) -> IBaseSlide:
        ...

    @property
    def as_i_presentation_component(self) -> IPresentationComponent:
        ...

    @property
    def presentation(self) -> IPresentation:
        ...

    @property
    def hyperlink_click(self) -> IHyperlink:
        ...

    @hyperlink_click.setter
    def hyperlink_click(self, value: IHyperlink):
        ...

    @property
    def hyperlink_mouse_over(self) -> IHyperlink:
        ...

    @hyperlink_mouse_over.setter
    def hyperlink_mouse_over(self, value: IHyperlink):
        ...

    @property
    def hyperlink_manager(self) -> IHyperlinkManager:
        ...

    ...

class ImageCollection:
    '''Represents collection of PPImage.'''
    @overload
    def add_image(self, image_source: IPPImage) -> IPPImage:
        '''Adds a copy of an image from an another presentation.
        :param image_source: Source image.
        :returns: Added image.'''
        ...

    @overload
    def add_image(self, image: aspose.pydrawing.Image) -> IPPImage:
        '''Add an image to a presentation.
        :param image: Image to add.
        :returns: Added image.'''
        ...

    @overload
    def add_image(self, image: IImage) -> IPPImage:
        '''Add an image to a presentation.
        :param image: Image to add.
        :returns: Added image.'''
        ...

    @overload
    def add_image(self, stream: io.RawIOBase) -> IPPImage:
        '''Add an image to a presentation from stream.
        :param stream: Stream to add image from.
        :returns: Added image.'''
        ...

    @overload
    def add_image(self, stream: io.RawIOBase, loading_stream_behavior: LoadingStreamBehavior) -> IPPImage:
        '''Creates and adds an image to a presentation from stream.
        :param stream: Stream to add image file from.
        :param loading_stream_behavior: The behavior which will be applied to the stream.
        :returns: Added :py:class:`aspose.slides.IPPImage`.'''
        ...

    @overload
    def add_image(self, buffer: bytes) -> IPPImage:
        '''Adds an image to a presentation from specified buffer.
        :param buffer: Buffer.
        :returns: Added image.'''
        ...

    @overload
    def add_image(self, svg_image: ISvgImage) -> IPPImage:
        '''Add an image to a presentation from Svg object.
        :param svg_image: Svg image object :py:class:`aspose.slides.ISvgImage`
        :returns: Added image.'''
        ...

    @property
    def as_i_collection(self) -> list:
        ...

    @property
    def as_i_enumerable(self) -> collections.abc.Iterable:
        ...

    def __getitem__(self, key: int) -> IPPImage
        ...

    ...

class ImageWrapper:
    '''System.Drawing.Image wrapper for COM interface.'''
    @overload
    def save(self, file_name: str) -> None:
        '''Saves Image to the specified file'''
        ...

    @overload
    def save(self, stream: io.RawIOBase, image_format: PPImageFormat) -> None:
        '''Saves the Image to the specified stream in the specified format.'''
        ...

    @overload
    def save(self, file_name: str, image_format: PPImageFormat) -> None:
        '''Saves the Image to the specified file in the specified format.'''
        ...

    @property
    def image(self) -> aspose.pydrawing.Image:
        '''Gets Image.
                    Read-only :py:attr:`aspose.slides.ImageWrapper.image`.'''
        ...

    @property
    def image_source(self) -> IImage:
        ...

    @property
    def size(self) -> aspose.pydrawing.Size:
        '''Gets the width and height, in pixels, of the Image.
                    Read-only :py:attr:`aspose.slides.ImageWrapper.size`.'''
        ...

    @property
    def as_i_disposable(self) -> IDisposable:
        ...

    ...

class ImageWrapperFactory:
    '''This class allows to initialize IBitmapWrapper.'''
    def __init__(self):
        ...

    @overload
    def create_image_wrapper(self, image: aspose.pydrawing.Image) -> IImageWrapper:
        '''Initializes a new instance of the BitmapWrapper class from the specified existing image.'''
        ...

    @overload
    def create_image_wrapper(self, image: IImage) -> IImageWrapper:
        '''Initializes a new instance of the ImageWrapper class from the specified existing image.'''
        ...

    @overload
    def create_image_wrapper(self, stream: io.RawIOBase) -> IImageWrapper:
        '''Initializes a new instance of the BitmapWrapper class from the specified data stream.'''
        ...

    @overload
    def create_image_wrapper(self, file_name: str) -> IImageWrapper:
        '''Initializes a new instance of the BitmapWrapper class from the specified file.'''
        ...

    ...

class Images:
    '''Methods to instantiate and work with :py:class:`aspose.slides.IImage`.'''
    @overload
    @staticmethod
    def from_file(filename: str) -> IImage:
        '''Create an image from the file .'''
        ...

    @overload
    @staticmethod
    def from_file(filename: str, use_embedded_color_management: bool) -> IImage:
        '''Create an image from the file'''
        ...

    @overload
    @staticmethod
    def from_stream(stream: io.RawIOBase) -> IImage:
        '''Create an image from the stream.'''
        ...

    @overload
    @staticmethod
    def from_stream(stream: io.RawIOBase, use_embedded_color_management: bool) -> IImage:
        '''Create an image from the stream.'''
        ...

    @overload
    @staticmethod
    def from_stream(stream: io.RawIOBase, use_embedded_color_management: bool, validate_image_data: bool) -> IImage:
        '''Create an image from the stream.'''
        ...

    ...

class InterruptionToken:
    '''This class represents the token to use for signaling long running tasks whether the interruption was requested.'''
    def throw_if_interruption_requested(self) -> None:
        '''Throws an  if
                    interruption was requested.'''
        ...

    @classmethod
    @property
    def none(cls) -> InterruptionToken:
        '''Represents an empty interruption token.'''
        ...

    @property
    def is_interruption_requested(self) -> bool:
        ...

    ...

class InterruptionTokenSource:
    '''Represents the source of :py:class:`aspose.slides.InterruptionToken`.'''
    def __init__(self):
        '''Creates a new :py:class:`aspose.slides.InterruptionTokenSource`.'''
        ...

    def interrupt(self) -> None:
        '''Intialize request for interruption.'''
        ...

    @property
    def token(self) -> IInterruptionToken:
        '''Returns new token binded to this :py:class:`aspose.slides.InterruptionTokenSource`.'''
        ...

    @property
    def is_interruption_requested(self) -> bool:
        ...

    ...

class InvalidPasswordException:
    '''Exception which thrown when presentation file format is unsupported.'''
    def __init__(self):
        '''Default constructor.'''
        ...

    def __init__(self, message: str):
        '''Constructor allowing a message to be added to this exception.
        :param message: message'''
        ...

    ...

class LayoutPlaceholderManager:
    '''Represents manager that allows you to add placeholders to the layout slide.'''
    def add_content_placeholder(self, x: float, y: float, width: float, height: float) -> IAutoShape:
        '''Adds a new placeholder shape to the layout slide to hold content, such as a picture, table, media or text.
        :param x: The X coordinate of the new placeholder shape.
        :param y: The Y coordinate of the new placeholder shape.
        :param width: The width of the new placeholder shape.
        :param height: The height of the new placeholder shape.
        :returns: Created :py:class:`aspose.slides.IAutoShape` with a Content placeholder.'''
        ...

    def add_vertical_content_placeholder(self, x: float, y: float, width: float, height: float) -> IAutoShape:
        '''Adds a new placeholder shape to the layout slide to hold content, such as a picture, table, media 
                    or text in a vertical direction.
        :param x: The X coordinate of the new placeholder shape.
        :param y: The Y coordinate of the new placeholder shape.
        :param width: The width of the new placeholder shape.
        :param height: The height of the new placeholder shape.
        :returns: Created :py:class:`aspose.slides.IAutoShape` with a Content (Vertical) placeholder.'''
        ...

    def add_text_placeholder(self, x: float, y: float, width: float, height: float) -> IAutoShape:
        '''Adds a new placeholder shape to the layout slide to hold text content.
        :param x: The X coordinate of the new placeholder shape.
        :param y: The Y coordinate of the new placeholder shape.
        :param width: The width of the new placeholder shape.
        :param height: The height of the new placeholder shape.
        :returns: Created :py:class:`aspose.slides.IAutoShape` with a Text placeholder.'''
        ...

    def add_vertical_text_placeholder(self, x: float, y: float, width: float, height: float) -> IAutoShape:
        '''Adds a new placeholder shape to the layout slide to hold text content in a vertical direction.
        :param x: The X coordinate of the new placeholder shape.
        :param y: The Y coordinate of the new placeholder shape.
        :param width: The width of the new placeholder shape.
        :param height: The height of the new placeholder shape.
        :returns: Created :py:class:`aspose.slides.IAutoShape` with a Text (Vertical) placeholder.'''
        ...

    def add_picture_placeholder(self, x: float, y: float, width: float, height: float) -> IAutoShape:
        '''Adds a new placeholder shape to the layout slide to hold a picture.
        :param x: The X coordinate of the new placeholder shape.
        :param y: The Y coordinate of the new placeholder shape.
        :param width: The width of the new placeholder shape.
        :param height: The height of the new placeholder shape.
        :returns: Created :py:class:`aspose.slides.IAutoShape` with a Picture placeholder.'''
        ...

    def add_chart_placeholder(self, x: float, y: float, width: float, height: float) -> IAutoShape:
        '''Adds a new placeholder shape to the layout slide to hold a chart.
        :param x: The X coordinate of the new placeholder shape.
        :param y: The Y coordinate of the new placeholder shape.
        :param width: The width of the new placeholder shape.
        :param height: The height of the new placeholder shape.
        :returns: Created :py:class:`aspose.slides.IAutoShape` with a Chart placeholder.'''
        ...

    def add_table_placeholder(self, x: float, y: float, width: float, height: float) -> IAutoShape:
        '''Adds a new placeholder shape to the layout slide to hold a table.
        :param x: The X coordinate of the new placeholder shape.
        :param y: The Y coordinate of the new placeholder shape.
        :param width: The width of the new placeholder shape.
        :param height: The height of the new placeholder shape.
        :returns: Created :py:class:`aspose.slides.IAutoShape` with a Table placeholder.'''
        ...

    def add_smart_art_placeholder(self, x: float, y: float, width: float, height: float) -> IAutoShape:
        '''Adds a new placeholder shape to the layout slide to hold a SmartArt diagram.
        :param x: The X coordinate of the new placeholder shape.
        :param y: The Y coordinate of the new placeholder shape.
        :param width: The width of the new placeholder shape.
        :param height: The height of the new placeholder shape.
        :returns: Created :py:class:`aspose.slides.IAutoShape` with a SmartArt placeholder.'''
        ...

    def add_media_placeholder(self, x: float, y: float, width: float, height: float) -> IAutoShape:
        '''Adds a new placeholder shape to the layout slide to hold a media object.
        :param x: The X coordinate of the new placeholder shape.
        :param y: The Y coordinate of the new placeholder shape.
        :param width: The width of the new placeholder shape.
        :param height: The height of the new placeholder shape.
        :returns: Created :py:class:`aspose.slides.IAutoShape` with a Media placeholder.'''
        ...

    def add_online_image_placeholder(self, x: float, y: float, width: float, height: float) -> IAutoShape:
        '''Adds a new placeholder shape to the layout slide to hold an online image.
        :param x: The X coordinate of the new placeholder shape.
        :param y: The Y coordinate of the new placeholder shape.
        :param width: The width of the new placeholder shape.
        :param height: The height of the new placeholder shape.
        :returns: Created :py:class:`aspose.slides.IAutoShape` with an Online Image placeholder.'''
        ...

    ...

class LayoutSlide(BaseSlide):
    '''Represents a layout slide.'''
    @overload
    def join_portions_with_same_formatting(self) -> None:
        '''Joins runs with same formatting in all paragraphs all acceptable shapes.'''
        ...

    @overload
    def join_portions_with_same_formatting(self, collection: IShapeCollection) -> None:
        '''Joins runs with same formatting in all paragraphs in all acceptable shapes.'''
        ...

    def equals(self, slide: IBaseSlide) -> bool:
        '''Determines whether the two IBaseSlide instances are equal.
                    Returning value is calculated based on slide's structure and static content.
                    Two slides are equal if all shapes, styles, texts, animation and other settings. etc. are equal. The comparison doesn't take into account unique identifier values, e.g. SlideId and dynamic content, e.g. current date value in Date Placeholder.
        :param slide: The IBaseSlide to compare with the current IBaseSlide.
        :returns: **true** if the specified IBaseSlide is equal to the current IBaseSlide; 
                    otherwise, **false**.'''
        ...

    def create_theme_effective(self) -> aspose.slides.theme.IThemeEffectiveData:
        '''Returns an effective theme for this slide.'''
        ...

    def find_shape_by_alt_text(self, alt_text: str) -> IShape:
        '''Finds first occurrence of a shape with the specified alternative text.
        :param alt_text: Alternative text.
        :returns: Shape object or None.'''
        ...

    def remove(self) -> None:
        '''Removes layout from presentation.'''
        ...

    def get_depending_slides(self) -> List[ISlide]:
        '''Returns an array with all slides, which depend on this layout slide.'''
        ...

    @property
    def shapes(self) -> IShapeCollection:
        '''Returns the shapes of a slide.
                    Read-only :py:class:`aspose.slides.IShapeCollection`.'''
        ...

    @property
    def controls(self) -> IControlCollection:
        '''Returns the collection of ActiveX controls on a slide.
                    Read-only :py:class:`aspose.slides.IControlCollection`.'''
        ...

    @property
    def name(self) -> str:
        '''Returns or sets the name of a slide.
                    Read/write :py:class:`str`.'''
        ...

    @name.setter
    def name(self, value: str):
        '''Returns or sets the name of a slide.
                    Read/write :py:class:`str`.'''
        ...

    @property
    def slide_id(self) -> int:
        ...

    @property
    def custom_data(self) -> ICustomData:
        ...

    @property
    def timeline(self) -> IAnimationTimeLine:
        '''Returns animation timeline object.
                    Read-only :py:class:`aspose.slides.IAnimationTimeLine`.'''
        ...

    @property
    def slide_show_transition(self) -> ISlideShowTransition:
        ...

    @property
    def background(self) -> IBackground:
        '''Returns slide's background.
                    Read-only :py:class:`aspose.slides.IBackground`.'''
        ...

    @property
    def hyperlink_queries(self) -> IHyperlinkQueries:
        ...

    @property
    def show_master_shapes(self) -> bool:
        ...

    @show_master_shapes.setter
    def show_master_shapes(self, value: bool):
        ...

    @property
    def presentation(self) -> IPresentation:
        '''Returns IPresentation interface.
                    Read-only :py:class:`aspose.slides.IPresentation`.'''
        ...

    @property
    def header_footer_manager(self) -> ILayoutSlideHeaderFooterManager:
        ...

    @property
    def placeholder_manager(self) -> ILayoutPlaceholderManager:
        ...

    @property
    def master_slide(self) -> IMasterSlide:
        ...

    @master_slide.setter
    def master_slide(self, value: IMasterSlide):
        ...

    @property
    def theme_manager(self) -> aspose.slides.theme.IOverrideThemeManager:
        ...

    @property
    def layout_type(self) -> SlideLayoutType:
        ...

    @property
    def has_depending_slides(self) -> bool:
        ...

    @property
    def as_i_slide_component(self) -> ISlideComponent:
        ...

    @property
    def slide(self) -> IBaseSlide:
        ...

    @property
    def as_i_presentation_component(self) -> IPresentationComponent:
        ...

    @property
    def as_i_base_slide(self) -> IBaseSlide:
        ...

    @property
    def as_i_override_themeable(self) -> aspose.slides.theme.IOverrideThemeable:
        ...

    ...

class LayoutSlideCollection:
    '''Represents a base class for collection of a layout slides.'''
    def get_by_type(self, type: SlideLayoutType) -> ILayoutSlide:
        '''Returns the first layout slide of specified type.'''
        ...

    def remove(self, value: ILayoutSlide) -> None:
        '''Removes a layout from the collection.
        :param value: The layout slide to remove from the collection.'''
        ...

    def remove_unused(self) -> None:
        '''Removes unused layout slides (layout slides whose HasDependingSlides is false).'''
        ...

    @property
    def as_i_collection(self) -> list:
        ...

    @property
    def as_i_enumerable(self) -> collections.abc.Iterable:
        ...

    def __getitem__(self, key: int) -> ILayoutSlide
        ...

    ...

class LayoutSlideHeaderFooterManager(BaseSlideHeaderFooterManager):
    '''Represents manager which holds behavior of the layout slide footer, date-time, page number placeholders and all child placeholders.
                Child placeholders mean placeholders are contained on depending slides.
                Depending slides use and depend on layout slide.'''
    def set_footer_visibility(self, is_visible: bool) -> None:
        '''Changes slide footer placeholder visibility.
        :param is_visible: true - makes a footer placeholder visible, otherwise - hides it.'''
        ...

    def set_slide_number_visibility(self, is_visible: bool) -> None:
        '''Changes slide page number placeholder visibility.
        :param is_visible: true - makes a page number placeholder visible, otherwise - hides it.'''
        ...

    def set_date_time_visibility(self, is_visible: bool) -> None:
        '''Changes slide date-time placeholder visibility.
        :param is_visible: true - makes a date-time placeholder visible, otherwise - hides it.'''
        ...

    def set_footer_text(self, text: str) -> None:
        '''Sets text to slide footer placeholder.
        :param text: Text to set.'''
        ...

    def set_date_time_text(self, text: str) -> None:
        '''Sets text to slide date-time placeholder.
        :param text: Text to set.'''
        ...

    def set_footer_and_child_footers_visibility(self, is_visible: bool) -> None:
        '''Changes layout slide footer placeholder and all child footer placeholders visibility.
                    Child placeholders mean placeholders are contained on depending slides.
                    Depending slides use and depend on master slide.
        :param is_visible: true - makes a footer placeholders visible, otherwise - hides them.'''
        ...

    def set_slide_number_and_child_slide_numbers_visibility(self, is_visible: bool) -> None:
        '''Changes layout slide page number placeholder and all child page number placeholders visibility.
                    Child placeholders mean placeholders are contained on depending slides.
                    Depending slides use and depend on layout slide.
        :param is_visible: true - makes a page number placeholders visible, otherwise - hides them.'''
        ...

    def set_date_time_and_child_date_times_visibility(self, is_visible: bool) -> None:
        '''Changes layout slide date-time placeholder and all child date-time placeholders visibility.
                    Child placeholders mean placeholders are contained on depending slides.
                    Depending slides use and depend on layout slide.
        :param is_visible: true - makes a date-time placeholders visible, otherwise - hides them.'''
        ...

    def set_footer_and_child_footers_text(self, text: str) -> None:
        '''Sets text to layout slide footer placeholder and all child footer placeholders.
                    Child placeholders mean placeholders are contained on depending slides.
                    Depending slides use and depend on layout slide.
        :param text: Text to set.'''
        ...

    def set_date_time_and_child_date_times_text(self, text: str) -> None:
        '''Sets text to layout slide date-time placeholder and all child date-time placeholders.
                    Child placeholders mean placeholders are contained on depending slides.
                    Depending slides use and depend on layout slide.
        :param text: Text to set.'''
        ...

    @property
    def is_footer_visible(self) -> bool:
        ...

    @property
    def is_slide_number_visible(self) -> bool:
        ...

    @property
    def is_date_time_visible(self) -> bool:
        ...

    @property
    def as_i_base_slide_header_footer_manager(self) -> IBaseSlideHeaderFooterManager:
        ...

    @property
    def as_i_base_header_footer_manager(self) -> IBaseHeaderFooterManager:
        ...

    ...

class LegacyDiagram(GraphicalObject):
    '''Represents a legacy diagram object.'''
    @overload
    def get_thumbnail(self) -> aspose.pydrawing.Bitmap:
        '''Returns shape thumbnail.
                    ShapeThumbnailBounds.Shape shape thumbnail bounds type is used by default.
        :returns: Shape thumbnail.'''
        ...

    @overload
    def get_thumbnail(self, bounds: ShapeThumbnailBounds, scale_x: float, scale_y: float) -> aspose.pydrawing.Bitmap:
        '''Returns shape thumbnail.
        :param bounds: Shape thumbnail bounds type.
        :param scale_x: X scale
        :param scale_y: Y scale
        :returns: Shape thumbnail or None in case when ShapeThumbnailBounds.Appearance is used and a shape doesn't have visible elements.'''
        ...

    @overload
    def get_image(self) -> IImage:
        '''Returns shape thumbnail.
                    ShapeThumbnailBounds.Shape shape thumbnail bounds type is used by default.
        :returns: Shape thumbnail.'''
        ...

    @overload
    def get_image(self, bounds: ShapeThumbnailBounds, scale_x: float, scale_y: float) -> IImage:
        '''Returns shape thumbnail.
        :param bounds: Shape thumbnail bounds type.
        :param scale_x: X scale
        :param scale_y: Y scale
        :returns: Shape thumbnail or None in case when ShapeThumbnailBounds.Appearance is used and a shape doesn't have visible elements.'''
        ...

    @overload
    def write_as_svg(self, stream: io.RawIOBase) -> None:
        '''Saves content of Shape as SVG file.
        :param stream: Target stream'''
        ...

    @overload
    def write_as_svg(self, stream: io.RawIOBase, svg_options: aspose.slides.export.ISVGOptions) -> None:
        '''Saves content of Shape as SVG file.
        :param stream: Target stream
        :param svg_options: SVG generation options'''
        ...

    def remove_placeholder(self) -> None:
        '''Defines that this shape isn't a placeholder.'''
        ...

    def add_placeholder(self, placeholder_to_copy_from: IPlaceholder) -> IPlaceholder:
        '''Adds a new placeholder if there is no and sets placeholder properties to a specified one.
        :param placeholder_to_copy_from: Placeholder to copy content from.
        :returns: New :py:attr:`aspose.slides.Shape.placeholder`.'''
        ...

    def get_base_placeholder(self) -> IShape:
        '''Returns a basic placeholder shape (shape from the layout and/or master slide that the current shape is inherited from).'''
        ...

    def convert_to_smart_art(self) -> aspose.slides.smartart.ISmartArt:
        '''Converts legacy digram to editable SmartArt object. 
                    Created SmartArt object adds to parent group shape at the same position.
        :returns: Created SmartArt object.'''
        ...

    def convert_to_group_shape(self) -> IGroupShape:
        '''Converts legacy digram to editable group shape. 
                    Created GroupShape object adds to parent group shape at the same position.
        :returns: Created GroupShape object.'''
        ...

    @property
    def is_text_holder(self) -> bool:
        ...

    @property
    def placeholder(self) -> IPlaceholder:
        '''Returns the placeholder for a shape. Returns None if the shape has no placeholder.
                    Read-only :py:class:`aspose.slides.IPlaceholder`.'''
        ...

    @property
    def custom_data(self) -> ICustomData:
        ...

    @property
    def raw_frame(self) -> IShapeFrame:
        ...

    @raw_frame.setter
    def raw_frame(self, value: IShapeFrame):
        ...

    @property
    def frame(self) -> IShapeFrame:
        '''Returns or sets the shape frame's properties.
                    Read/write :py:class:`aspose.slides.IShapeFrame`.'''
        ...

    @frame.setter
    def frame(self, value: IShapeFrame):
        '''Returns or sets the shape frame's properties.
                    Read/write :py:class:`aspose.slides.IShapeFrame`.'''
        ...

    @property
    def line_format(self) -> ILineFormat:
        ...

    @property
    def three_d_format(self) -> IThreeDFormat:
        ...

    @property
    def effect_format(self) -> IEffectFormat:
        ...

    @property
    def fill_format(self) -> IFillFormat:
        ...

    @property
    def hyperlink_click(self) -> IHyperlink:
        ...

    @hyperlink_click.setter
    def hyperlink_click(self, value: IHyperlink):
        ...

    @property
    def hyperlink_mouse_over(self) -> IHyperlink:
        ...

    @hyperlink_mouse_over.setter
    def hyperlink_mouse_over(self, value: IHyperlink):
        ...

    @property
    def hyperlink_manager(self) -> IHyperlinkManager:
        ...

    @property
    def hidden(self) -> bool:
        '''Determines whether the shape is hidden.
                    Read/write :py:class:`bool`.'''
        ...

    @hidden.setter
    def hidden(self, value: bool):
        '''Determines whether the shape is hidden.
                    Read/write :py:class:`bool`.'''
        ...

    @property
    def z_order_position(self) -> int:
        ...

    @property
    def connection_site_count(self) -> int:
        ...

    @property
    def rotation(self) -> float:
        '''Returns or sets the number of degrees the specified shape is rotated around
                    the z-axis. A positive value indicates clockwise rotation; a negative value
                    indicates counterclockwise rotation.
                    Read/write :py:class:`float`.'''
        ...

    @rotation.setter
    def rotation(self, value: float):
        '''Returns or sets the number of degrees the specified shape is rotated around
                    the z-axis. A positive value indicates clockwise rotation; a negative value
                    indicates counterclockwise rotation.
                    Read/write :py:class:`float`.'''
        ...

    @property
    def x(self) -> float:
        '''Returns or sets the x-coordinate of the upper-left corner of the shape.
                    Read/write :py:class:`float`.'''
        ...

    @x.setter
    def x(self, value: float):
        '''Returns or sets the x-coordinate of the upper-left corner of the shape.
                    Read/write :py:class:`float`.'''
        ...

    @property
    def y(self) -> float:
        '''Returns or sets the y-coordinate of the upper-left corner of the shape.
                    Read/write :py:class:`float`.'''
        ...

    @y.setter
    def y(self, value: float):
        '''Returns or sets the y-coordinate of the upper-left corner of the shape.
                    Read/write :py:class:`float`.'''
        ...

    @property
    def width(self) -> float:
        '''Returns or sets the width of the shape.
                    Read/write :py:class:`float`.'''
        ...

    @width.setter
    def width(self, value: float):
        '''Returns or sets the width of the shape.
                    Read/write :py:class:`float`.'''
        ...

    @property
    def height(self) -> float:
        '''Returns or sets the height of the shape.
                    Read/write :py:class:`float`.'''
        ...

    @height.setter
    def height(self, value: float):
        '''Returns or sets the height of the shape.
                    Read/write :py:class:`float`.'''
        ...

    @property
    def black_white_mode(self) -> BlackWhiteMode:
        ...

    @black_white_mode.setter
    def black_white_mode(self, value: BlackWhiteMode):
        ...

    @property
    def unique_id(self) -> int:
        ...

    @property
    def office_interop_shape_id(self) -> int:
        ...

    @property
    def alternative_text(self) -> str:
        ...

    @alternative_text.setter
    def alternative_text(self, value: str):
        ...

    @property
    def alternative_text_title(self) -> str:
        ...

    @alternative_text_title.setter
    def alternative_text_title(self, value: str):
        ...

    @property
    def name(self) -> str:
        '''Returns or sets the name of a shape.
                    Must be not None. Use empty string value if needed.
                    Read/write :py:class:`str`.'''
        ...

    @name.setter
    def name(self, value: str):
        '''Returns or sets the name of a shape.
                    Must be not None. Use empty string value if needed.
                    Read/write :py:class:`str`.'''
        ...

    @property
    def is_decorative(self) -> bool:
        ...

    @is_decorative.setter
    def is_decorative(self, value: bool):
        ...

    @property
    def shape_lock(self) -> IGraphicalObjectLock:
        ...

    @property
    def is_grouped(self) -> bool:
        ...

    @property
    def parent_group(self) -> IGroupShape:
        ...

    @property
    def slide(self) -> IBaseSlide:
        '''Returns the parent slide of a shape.
                    Read-only :py:class:`aspose.slides.IBaseSlide`.'''
        ...

    @property
    def presentation(self) -> IPresentation:
        '''Returns the parent presentation of a slide.
                    Read-only :py:class:`aspose.slides.IPresentation`.'''
        ...

    @property
    def graphical_object_lock(self) -> IGraphicalObjectLock:
        ...

    @property
    def as_i_graphical_object(self) -> IGraphicalObject:
        ...

    @property
    def as_i_hyperlink_container(self) -> IHyperlinkContainer:
        ...

    @property
    def as_i_slide_component(self) -> ISlideComponent:
        ...

    @property
    def as_i_presentation_component(self) -> IPresentationComponent:
        ...

    @property
    def as_i_shape(self) -> IShape:
        ...

    ...

class License:
    '''Provides methods to license the component.'''
    def __init__(self):
        '''Initializes a new instance of this class.'''
        ...

    @overload
    def set_license(self, license_name: str) -> None:
        '''Licenses the component.
        :param license_name: Can be a full or short file name or name of an embedded resource.
                    Use an empty string to switch to evaluation mode.'''
        ...

    @overload
    def set_license(self, stream: io.RawIOBase) -> None:
        '''Licenses the component.
        :param stream: A stream that contains the license.'''
        ...

    def reset_license(self) -> None:
        '''Reset the license'''
        ...

    def is_licensed(self) -> bool:
        '''Check if licence is applied to component
        :returns: ``True`` if component is licensed, otherwise ``false``'''
        ...

    ...

class LightRig(PVIObject):
    '''Represents LightRig.'''
    def set_rotation(self, latitude: float, longitude: float, revolution: float) -> None:
        '''A rotation is defined through the use of a latitude
                    coordinate, a longitude coordinate, and a revolution about the axis 
                    as the latitude and longitude coordinates.
                    If any of coordinate value is float.NaN, all rotation is undefined.'''
        ...

    def get_rotation(self) -> List[float]:
        '''A rotation is defined through the use of a latitude
                    coordinate, a longitude coordinate, and a revolution about the axis 
                    as the latitude and longitude coordinates.
                    first element in return array - latitude, second - longitude, third - revolution.
                    Returns None if no rotation defined.'''
        ...

    @property
    def as_i_presentation_component(self) -> IPresentationComponent:
        ...

    @property
    def direction(self) -> LightingDirection:
        '''Light direction.
                    Read/write :py:enum:`aspose.slides.LightingDirection`.'''
        ...

    @direction.setter
    def direction(self, value: LightingDirection):
        '''Light direction.
                    Read/write :py:enum:`aspose.slides.LightingDirection`.'''
        ...

    @property
    def light_type(self) -> LightRigPresetType:
        ...

    @light_type.setter
    def light_type(self, value: LightRigPresetType):
        ...

    @property
    def slide(self) -> IBaseSlide:
        ...

    @property
    def presentation(self) -> IPresentation:
        ...

    ...

class LineFillFormat(PVIObject):
    '''Represents properties for lines filling.'''
    @property
    def as_i_presentation_component(self) -> IPresentationComponent:
        ...

    @property
    def fill_type(self) -> FillType:
        ...

    @fill_type.setter
    def fill_type(self, value: FillType):
        ...

    @property
    def rotate_with_shape(self) -> NullableBool:
        ...

    @rotate_with_shape.setter
    def rotate_with_shape(self, value: NullableBool):
        ...

    @property
    def solid_fill_color(self) -> IColorFormat:
        ...

    @property
    def gradient_format(self) -> IGradientFormat:
        ...

    @property
    def pattern_format(self) -> IPatternFormat:
        ...

    @property
    def slide(self) -> IBaseSlide:
        ...

    @property
    def presentation(self) -> IPresentation:
        ...

    @property
    def as_i_fill_param_source(self) -> IFillParamSource:
        ...

    ...

class LineFormat(PVIObject):
    '''Represents format of a line.'''
    def equals(self, line_format: ILineFormat) -> bool:
        '''Determines whether the two LineFormat instances are equal.
        :param line_format: The LineFormat to compare with the current LineFormat.
        :returns: **true** if the specified LineFormat is equal to the current LineFormat; 
                    otherwise, **false**.'''
        ...

    def get_effective(self) -> ILineFormatEffectiveData:
        '''Gets effective line formatting data with the inheritance applied.
        :returns: A :py:class:`aspose.slides.ILineFormatEffectiveData`.'''
        ...

    @property
    def as_i_presentation_component(self) -> IPresentationComponent:
        ...

    @property
    def is_format_not_defined(self) -> bool:
        ...

    @property
    def fill_format(self) -> ILineFillFormat:
        ...

    @property
    def sketch_format(self) -> ISketchFormat:
        ...

    @property
    def width(self) -> float:
        '''Returns or sets the width of a line.
                    Read/write :py:class:`float`.'''
        ...

    @width.setter
    def width(self, value: float):
        '''Returns or sets the width of a line.
                    Read/write :py:class:`float`.'''
        ...

    @property
    def dash_style(self) -> LineDashStyle:
        ...

    @dash_style.setter
    def dash_style(self, value: LineDashStyle):
        ...

    @property
    def custom_dash_pattern(self) -> List[float]:
        ...

    @custom_dash_pattern.setter
    def custom_dash_pattern(self, value: List[float]):
        ...

    @property
    def cap_style(self) -> LineCapStyle:
        ...

    @cap_style.setter
    def cap_style(self, value: LineCapStyle):
        ...

    @property
    def style(self) -> LineStyle:
        '''Returns or sets the line style.
                    Read/write :py:enum:`aspose.slides.LineStyle`.'''
        ...

    @style.setter
    def style(self, value: LineStyle):
        '''Returns or sets the line style.
                    Read/write :py:enum:`aspose.slides.LineStyle`.'''
        ...

    @property
    def alignment(self) -> LineAlignment:
        '''Returns or sets the line alignment.
                    Read/write :py:enum:`aspose.slides.LineAlignment`.'''
        ...

    @alignment.setter
    def alignment(self, value: LineAlignment):
        '''Returns or sets the line alignment.
                    Read/write :py:enum:`aspose.slides.LineAlignment`.'''
        ...

    @property
    def join_style(self) -> LineJoinStyle:
        ...

    @join_style.setter
    def join_style(self, value: LineJoinStyle):
        ...

    @property
    def miter_limit(self) -> float:
        ...

    @miter_limit.setter
    def miter_limit(self, value: float):
        ...

    @property
    def begin_arrowhead_style(self) -> LineArrowheadStyle:
        ...

    @begin_arrowhead_style.setter
    def begin_arrowhead_style(self, value: LineArrowheadStyle):
        ...

    @property
    def end_arrowhead_style(self) -> LineArrowheadStyle:
        ...

    @end_arrowhead_style.setter
    def end_arrowhead_style(self, value: LineArrowheadStyle):
        ...

    @property
    def begin_arrowhead_width(self) -> LineArrowheadWidth:
        ...

    @begin_arrowhead_width.setter
    def begin_arrowhead_width(self, value: LineArrowheadWidth):
        ...

    @property
    def end_arrowhead_width(self) -> LineArrowheadWidth:
        ...

    @end_arrowhead_width.setter
    def end_arrowhead_width(self, value: LineArrowheadWidth):
        ...

    @property
    def begin_arrowhead_length(self) -> LineArrowheadLength:
        ...

    @begin_arrowhead_length.setter
    def begin_arrowhead_length(self, value: LineArrowheadLength):
        ...

    @property
    def end_arrowhead_length(self) -> LineArrowheadLength:
        ...

    @end_arrowhead_length.setter
    def end_arrowhead_length(self, value: LineArrowheadLength):
        ...

    @property
    def slide(self) -> IBaseSlide:
        ...

    @property
    def presentation(self) -> IPresentation:
        ...

    @property
    def as_i_line_param_source(self) -> ILineParamSource:
        ...

    ...

class LoadOptions:
    '''Allows to specify additional options (such as format or default font) when loading a presentation.'''
    def __init__(self):
        '''Creates new default load options.'''
        ...

    def __init__(self, load_format: LoadFormat):
        '''Creates new load options.
        :param load_format: Format of a presentation to load.'''
        ...

    @property
    def load_format(self) -> LoadFormat:
        ...

    @load_format.setter
    def load_format(self, value: LoadFormat):
        ...

    @property
    def default_regular_font(self) -> str:
        ...

    @default_regular_font.setter
    def default_regular_font(self, value: str):
        ...

    @property
    def default_symbol_font(self) -> str:
        ...

    @default_symbol_font.setter
    def default_symbol_font(self, value: str):
        ...

    @property
    def default_asian_font(self) -> str:
        ...

    @default_asian_font.setter
    def default_asian_font(self, value: str):
        ...

    @property
    def password(self) -> str:
        '''Gets or sets the password.
                    Read/write :py:class:`str`.'''
        ...

    @password.setter
    def password(self, value: str):
        '''Gets or sets the password.
                    Read/write :py:class:`str`.'''
        ...

    @property
    def only_load_document_properties(self) -> bool:
        ...

    @only_load_document_properties.setter
    def only_load_document_properties(self, value: bool):
        ...

    @property
    def warning_callback(self) -> aspose.slides.warnings.IWarningCallback:
        ...

    @warning_callback.setter
    def warning_callback(self, value: aspose.slides.warnings.IWarningCallback):
        ...

    @property
    def blob_management_options(self) -> IBlobManagementOptions:
        ...

    @blob_management_options.setter
    def blob_management_options(self, value: IBlobManagementOptions):
        ...

    @property
    def document_level_font_sources(self) -> IFontSources:
        ...

    @document_level_font_sources.setter
    def document_level_font_sources(self, value: IFontSources):
        ...

    @property
    def interruption_token(self) -> IInterruptionToken:
        ...

    @interruption_token.setter
    def interruption_token(self, value: IInterruptionToken):
        ...

    @property
    def resource_loading_callback(self) -> IResourceLoadingCallback:
        ...

    @resource_loading_callback.setter
    def resource_loading_callback(self, value: IResourceLoadingCallback):
        ...

    @property
    def spreadsheet_options(self) -> ISpreadsheetOptions:
        ...

    @spreadsheet_options.setter
    def spreadsheet_options(self, value: ISpreadsheetOptions):
        ...

    @property
    def default_text_language(self) -> str:
        ...

    @default_text_language.setter
    def default_text_language(self, value: str):
        ...

    @property
    def delete_embedded_binary_objects(self) -> bool:
        ...

    @delete_embedded_binary_objects.setter
    def delete_embedded_binary_objects(self, value: bool):
        ...

    ...

class MasterHandoutSlide(BaseSlide):
    '''Represents master slide for handouts.'''
    @overload
    def join_portions_with_same_formatting(self) -> None:
        '''Joins runs with same formatting in all paragraphs all acceptable shapes.'''
        ...

    @overload
    def join_portions_with_same_formatting(self, collection: IShapeCollection) -> None:
        '''Joins runs with same formatting in all paragraphs in all acceptable shapes.'''
        ...

    def equals(self, slide: IBaseSlide) -> bool:
        '''Determines whether the two IBaseSlide instances are equal.
                    Returning value is calculated based on slide's structure and static content.
                    Two slides are equal if all shapes, styles, texts, animation and other settings. etc. are equal. The comparison doesn't take into account unique identifier values, e.g. SlideId and dynamic content, e.g. current date value in Date Placeholder.
        :param slide: The IBaseSlide to compare with the current IBaseSlide.
        :returns: **true** if the specified IBaseSlide is equal to the current IBaseSlide; 
                    otherwise, **false**.'''
        ...

    def create_theme_effective(self) -> aspose.slides.theme.IThemeEffectiveData:
        '''Returns an effective theme for this slide.'''
        ...

    def find_shape_by_alt_text(self, alt_text: str) -> IShape:
        '''Finds first occurrence of a shape with the specified alternative text.
        :param alt_text: Alternative text.
        :returns: Shape object or None.'''
        ...

    @property
    def shapes(self) -> IShapeCollection:
        '''Returns the shapes of a slide.
                    Read-only :py:class:`aspose.slides.IShapeCollection`.'''
        ...

    @property
    def controls(self) -> IControlCollection:
        '''Returns the collection of ActiveX controls on a slide.
                    Read-only :py:class:`aspose.slides.IControlCollection`.'''
        ...

    @property
    def name(self) -> str:
        '''Returns or sets the name of a slide.
                    Read/write :py:class:`str`.'''
        ...

    @name.setter
    def name(self, value: str):
        '''Returns or sets the name of a slide.
                    Read/write :py:class:`str`.'''
        ...

    @property
    def slide_id(self) -> int:
        ...

    @property
    def custom_data(self) -> ICustomData:
        ...

    @property
    def timeline(self) -> IAnimationTimeLine:
        '''Returns animation timeline object.
                    Read-only :py:class:`aspose.slides.IAnimationTimeLine`.'''
        ...

    @property
    def slide_show_transition(self) -> ISlideShowTransition:
        ...

    @property
    def background(self) -> IBackground:
        '''Returns slide's background.
                    Read-only :py:class:`aspose.slides.IBackground`.'''
        ...

    @property
    def hyperlink_queries(self) -> IHyperlinkQueries:
        ...

    @property
    def show_master_shapes(self) -> bool:
        ...

    @show_master_shapes.setter
    def show_master_shapes(self, value: bool):
        ...

    @property
    def presentation(self) -> IPresentation:
        '''Returns IPresentation interface.
                    Read-only :py:class:`aspose.slides.IPresentation`.'''
        ...

    @property
    def header_footer_manager(self) -> IMasterHandoutSlideHeaderFooterManager:
        ...

    @property
    def theme_manager(self) -> aspose.slides.theme.IMasterThemeManager:
        ...

    @property
    def as_i_slide_component(self) -> ISlideComponent:
        ...

    @property
    def slide(self) -> IBaseSlide:
        ...

    @property
    def as_i_presentation_component(self) -> IPresentationComponent:
        ...

    @property
    def as_i_base_slide(self) -> IBaseSlide:
        ...

    @property
    def as_i_master_themeable(self) -> aspose.slides.theme.IMasterThemeable:
        ...

    ...

class MasterHandoutSlideHeaderFooterManager(BaseHandoutNotesSlideHeaderFooterManager):
    '''Represents manager which holds behavior of the master handout slide placeholders, including header placeholder.'''
    def set_footer_visibility(self, is_visible: bool) -> None:
        '''Changes slide footer placeholder visibility.
        :param is_visible: true - makes a footer placeholder visible, otherwise - hides it.'''
        ...

    def set_slide_number_visibility(self, is_visible: bool) -> None:
        '''Changes slide page number placeholder visibility.
        :param is_visible: true - makes a page number placeholder visible, otherwise - hides it.'''
        ...

    def set_date_time_visibility(self, is_visible: bool) -> None:
        '''Changes slide date-time placeholder visibility.
        :param is_visible: true - makes a date-time placeholder visible, otherwise - hides it.'''
        ...

    def set_footer_text(self, text: str) -> None:
        '''Sets text to slide footer placeholder.
        :param text: Text to set.'''
        ...

    def set_date_time_text(self, text: str) -> None:
        '''Sets text to slide date-time placeholder.
        :param text: Text to set.'''
        ...

    def set_header_visibility(self, is_visible: bool) -> None:
        '''Changes slide header placeholder visibility.
        :param is_visible: true - makes a header placeholder visible, otherwise - hides it.'''
        ...

    def set_header_text(self, text: str) -> None:
        '''Sets text to slide header placeholder.
        :param text: Text to set.'''
        ...

    @property
    def is_footer_visible(self) -> bool:
        ...

    @property
    def is_slide_number_visible(self) -> bool:
        ...

    @property
    def is_date_time_visible(self) -> bool:
        ...

    @property
    def is_header_visible(self) -> bool:
        ...

    @property
    def as_i_base_slide_header_footer_manager(self) -> IBaseSlideHeaderFooterManager:
        ...

    @property
    def as_i_base_header_footer_manager(self) -> IBaseHeaderFooterManager:
        ...

    @property
    def as_i_base_handout_notes_slide_header_footer_manag(self) -> IBaseHandoutNotesSlideHeaderFooterManag:
        ...

    ...

class MasterLayoutSlideCollection(LayoutSlideCollection):
    '''Represents a collections of all layout slides of defined master slide.
                Extends LayoutSlideCollection class with methods for adding/inserting/removing/cloning/reordering 
                layout slides in context of the individual collections of master's layout slides.'''
    def get_by_type(self, type: SlideLayoutType) -> ILayoutSlide:
        '''Returns the first layout slide of specified type.'''
        ...

    def remove(self, value: ILayoutSlide) -> None:
        '''Removes a layout from the collection.
        :param value: The layout slide to remove from the collection.'''
        ...

    def remove_unused(self) -> None:
        '''Removes unused layout slides (layout slides whose HasDependingSlides is false).'''
        ...

    def add_clone(self, source_layout: ILayoutSlide) -> ILayoutSlide:
        '''Adds a copy of a specified layout slide to the end of the collection.
        :param source_layout: Slide to clone.
        :returns: Added slide.'''
        ...

    def insert_clone(self, index: int, source_layout: ILayoutSlide) -> ILayoutSlide:
        '''Inserts a copy of a specified layout slide to specified position of the collection.
        :param index: Index of new slide.
        :param source_layout: Slide to clone.
        :returns: Inserted slide.'''
        ...

    def add(self, layout_type: SlideLayoutType, layout_name: str) -> ILayoutSlide:
        '''Adds a new layout slide to the end of the collection.
        :param layout_type: Layout type for a new layout.
                    Supported layout types: Title, TitleOnly, Blank, TitleAndObject, VerticalText, VerticalTitleAndText, TwoObjects, SectionHeader, TwoTextAndTwoObjects, TitleObjectAndCaption, PictureAndCaption, Custom.
                    Other layout types are not supported now: Text, TwoColumnText, Table, TextAndChart, ChartAndText, Diagram, Chart, TextAndClipArt, ClipArtAndText, TextAndObject, ObjectAndText, Object, TextAndMedia, MediaAndText, ObjectOverText, TextOverObject, TextAndTwoObjects, TwoObjectsAndText, TwoObjectsOverText, FourObjects, ClipArtAndVerticalText, VerticalTitleAndTextOverChart, ObjectAndTwoObject, TwoObjectsAndObject.
        :param layout_name: Name for a new layout. If passed name is already in use the ArgumentException will be thrown.
                    If None parameter is passed then name genarated atomatically in regards to passed layout type 
                    (for example "Title Slide" or "1_Title Slide", "2_..", etc.).
        :returns: Added slide.'''
        ...

    def insert(self, index: int, layout_type: SlideLayoutType, layout_name: str) -> ILayoutSlide:
        '''Inserts a new layout slide to specified position of the collection.
        :param index: Index of new slide.
        :param layout_type: Layout type for a new layout.
                    Supported layout types: Title, TitleOnly, Blank, TitleAndObject, VerticalText, VerticalTitleAndText, TwoObjects, SectionHeader, TwoTextAndTwoObjects, TitleObjectAndCaption, PictureAndCaption, Custom.
                    Other layout types are not supported now: Text, TwoColumnText, Table, TextAndChart, ChartAndText, Diagram, Chart, TextAndClipArt, ClipArtAndText, TextAndObject, ObjectAndText, Object, TextAndMedia, MediaAndText, ObjectOverText, TextOverObject, TextAndTwoObjects, TwoObjectsAndText, TwoObjectsOverText, FourObjects, ClipArtAndVerticalText, VerticalTitleAndTextOverChart, ObjectAndTwoObject, TwoObjectsAndObject.
        :param layout_name: Name for a new layout. If passed name is already in use the ArgumentException will be thrown.
                    If None parameter is passed then name genarated atomatically in regards to passed layout type 
                    (for example "Title Slide" or "1_Title Slide", "2_..", etc.).
        :returns: Inserted slide.'''
        ...

    def remove_at(self, index: int) -> None:
        '''Removes the element at the specified index of the collection.
        :param index: The zero-based index of the element to remove.'''
        ...

    def reorder(self, index: int, layout_slide: ILayoutSlide) -> None:
        '''Moves layout slide from the collection to the specified position.
        :param index: Target index.
        :param layout_slide: Slide to move.'''
        ...

    @property
    def as_i_collection(self) -> list:
        ...

    @property
    def as_i_enumerable(self) -> collections.abc.Iterable:
        ...

    @property
    def as_i_layout_slide_collection(self) -> ILayoutSlideCollection:
        ...

    def __getitem__(self, key: int) -> ILayoutSlide
        ...

    ...

class MasterNotesSlide(BaseSlide):
    '''Represents master slide for notes.'''
    @overload
    def join_portions_with_same_formatting(self) -> None:
        '''Joins runs with same formatting in all paragraphs all acceptable shapes.'''
        ...

    @overload
    def join_portions_with_same_formatting(self, collection: IShapeCollection) -> None:
        '''Joins runs with same formatting in all paragraphs in all acceptable shapes.'''
        ...

    def equals(self, slide: IBaseSlide) -> bool:
        '''Determines whether the two IBaseSlide instances are equal.
                    Returning value is calculated based on slide's structure and static content.
                    Two slides are equal if all shapes, styles, texts, animation and other settings. etc. are equal. The comparison doesn't take into account unique identifier values, e.g. SlideId and dynamic content, e.g. current date value in Date Placeholder.
        :param slide: The IBaseSlide to compare with the current IBaseSlide.
        :returns: **true** if the specified IBaseSlide is equal to the current IBaseSlide; 
                    otherwise, **false**.'''
        ...

    def create_theme_effective(self) -> aspose.slides.theme.IThemeEffectiveData:
        '''Returns an effective theme for this slide.'''
        ...

    def find_shape_by_alt_text(self, alt_text: str) -> IShape:
        '''Finds first occurrence of a shape with the specified alternative text.
        :param alt_text: Alternative text.
        :returns: Shape object or None.'''
        ...

    @property
    def shapes(self) -> IShapeCollection:
        '''Returns the shapes of a slide.
                    Read-only :py:class:`aspose.slides.IShapeCollection`.'''
        ...

    @property
    def controls(self) -> IControlCollection:
        '''Returns the collection of ActiveX controls on a slide.
                    Read-only :py:class:`aspose.slides.IControlCollection`.'''
        ...

    @property
    def name(self) -> str:
        '''Returns or sets the name of a slide.
                    Read/write :py:class:`str`.'''
        ...

    @name.setter
    def name(self, value: str):
        '''Returns or sets the name of a slide.
                    Read/write :py:class:`str`.'''
        ...

    @property
    def slide_id(self) -> int:
        ...

    @property
    def custom_data(self) -> ICustomData:
        ...

    @property
    def timeline(self) -> IAnimationTimeLine:
        '''Returns animation timeline object.
                    Read-only :py:class:`aspose.slides.IAnimationTimeLine`.'''
        ...

    @property
    def slide_show_transition(self) -> ISlideShowTransition:
        ...

    @property
    def background(self) -> IBackground:
        '''Returns slide's background.
                    Read-only :py:class:`aspose.slides.IBackground`.'''
        ...

    @property
    def hyperlink_queries(self) -> IHyperlinkQueries:
        ...

    @property
    def show_master_shapes(self) -> bool:
        ...

    @show_master_shapes.setter
    def show_master_shapes(self, value: bool):
        ...

    @property
    def presentation(self) -> IPresentation:
        '''Returns IPresentation interface.
                    Read-only :py:class:`aspose.slides.IPresentation`.'''
        ...

    @property
    def header_footer_manager(self) -> IMasterNotesSlideHeaderFooterManager:
        ...

    @property
    def theme_manager(self) -> aspose.slides.theme.IMasterThemeManager:
        ...

    @property
    def notes_style(self) -> ITextStyle:
        ...

    @property
    def as_i_slide_component(self) -> ISlideComponent:
        ...

    @property
    def slide(self) -> IBaseSlide:
        ...

    @property
    def as_i_presentation_component(self) -> IPresentationComponent:
        ...

    @property
    def as_i_base_slide(self) -> IBaseSlide:
        ...

    @property
    def as_i_master_themeable(self) -> aspose.slides.theme.IMasterThemeable:
        ...

    ...

class MasterNotesSlideHeaderFooterManager(BaseHandoutNotesSlideHeaderFooterManager):
    '''Represents manager which holds behavior of the master notes slide footer, date-time, page number placeholders and all child placeholders.
                Child placeholders mean placeholders are contained on depending notes slides.
                Depending notes slides use and depend on master notes slide.'''
    def set_footer_visibility(self, is_visible: bool) -> None:
        '''Changes slide footer placeholder visibility.
        :param is_visible: true - makes a footer placeholder visible, otherwise - hides it.'''
        ...

    def set_slide_number_visibility(self, is_visible: bool) -> None:
        '''Changes slide page number placeholder visibility.
        :param is_visible: true - makes a page number placeholder visible, otherwise - hides it.'''
        ...

    def set_date_time_visibility(self, is_visible: bool) -> None:
        '''Changes slide date-time placeholder visibility.
        :param is_visible: true - makes a date-time placeholder visible, otherwise - hides it.'''
        ...

    def set_footer_text(self, text: str) -> None:
        '''Sets text to slide footer placeholder.
        :param text: Text to set.'''
        ...

    def set_date_time_text(self, text: str) -> None:
        '''Sets text to slide date-time placeholder.
        :param text: Text to set.'''
        ...

    def set_header_visibility(self, is_visible: bool) -> None:
        '''Changes slide header placeholder visibility.
        :param is_visible: true - makes a header placeholder visible, otherwise - hides it.'''
        ...

    def set_header_text(self, text: str) -> None:
        '''Sets text to slide header placeholder.
        :param text: Text to set.'''
        ...

    def set_header_and_child_headers_visibility(self, is_visible: bool) -> None:
        '''Changes master notes slide header placeholder and all child header placeholders visibility.
                    Child placeholders mean placeholders are contained on depending notes slides.
                    Depending notes slides use and depend on master notes slide.
        :param is_visible: true - makes a header placeholders visible, otherwise - hides them.'''
        ...

    def set_header_and_child_headers_text(self, text: str) -> None:
        '''Sets text to master notes slide header placeholder and all child header placeholders.
                    Child placeholders mean placeholders are contained on depending notes slides.
                    Depending notes slides use and depend on master notes slide.
        :param text: Text to set.'''
        ...

    def set_footer_and_child_footers_visibility(self, is_visible: bool) -> None:
        '''Changes master slide footer placeholder and all child footer placeholders visibility.
                    Child placeholders mean placeholders are contained on depending notes slides.
                    Depending notes slides use and depend on master notes slide.
        :param is_visible: true - makes a footer placeholders visible, otherwise - hides them.'''
        ...

    def set_slide_number_and_child_slide_numbers_visibility(self, is_visible: bool) -> None:
        '''Changes master slide page number placeholder and all child page number placeholders visibility.
                    Child placeholders mean placeholders are contained on depending notes slides.
                    Depending notes slides use and depend on master notes slide.
        :param is_visible: true - makes a page number placeholders visible, otherwise - hides them.'''
        ...

    def set_date_time_and_child_date_times_visibility(self, is_visible: bool) -> None:
        '''Changes master slide date-time placeholder and all child date-time placeholders visibility.
                    Child placeholders mean placeholders are contained on depending notes slides.
                    Depending notes slides use and depend on master notes slide.
        :param is_visible: true - makes a date-time placeholders visible, otherwise - hides them.'''
        ...

    def set_footer_and_child_footers_text(self, text: str) -> None:
        '''Sets text to master slide footer placeholder and all child footer placeholders.
                    Child placeholders mean placeholders are contained on depending notes slides.
                    Depending notes slides use and depend on master notes slide.
        :param text: Text to set.'''
        ...

    def set_date_time_and_child_date_times_text(self, text: str) -> None:
        '''Sets text to master slide date-time placeholder and all child date-time placeholders.
                    Child placeholders mean placeholders are contained on depending notes slides.
                    Depending notes slides use and depend on master notes slide.
        :param text: Text to set.'''
        ...

    @property
    def is_footer_visible(self) -> bool:
        ...

    @property
    def is_slide_number_visible(self) -> bool:
        ...

    @property
    def is_date_time_visible(self) -> bool:
        ...

    @property
    def is_header_visible(self) -> bool:
        ...

    @property
    def as_i_base_slide_header_footer_manager(self) -> IBaseSlideHeaderFooterManager:
        ...

    @property
    def as_i_base_header_footer_manager(self) -> IBaseHeaderFooterManager:
        ...

    @property
    def as_i_base_handout_notes_slide_header_footer_manag(self) -> IBaseHandoutNotesSlideHeaderFooterManag:
        ...

    ...

class MasterSlide(BaseSlide):
    '''Represents a master slide in a presentation.'''
    @overload
    def join_portions_with_same_formatting(self) -> None:
        '''Joins runs with same formatting in all paragraphs all acceptable shapes.'''
        ...

    @overload
    def join_portions_with_same_formatting(self, collection: IShapeCollection) -> None:
        '''Joins runs with same formatting in all paragraphs in all acceptable shapes.'''
        ...

    def equals(self, slide: IBaseSlide) -> bool:
        '''Determines whether the two IBaseSlide instances are equal.
                    Returning value is calculated based on slide's structure and static content.
                    Two slides are equal if all shapes, styles, texts, animation and other settings. etc. are equal. The comparison doesn't take into account unique identifier values, e.g. SlideId and dynamic content, e.g. current date value in Date Placeholder.
        :param slide: The IBaseSlide to compare with the current IBaseSlide.
        :returns: **true** if the specified IBaseSlide is equal to the current IBaseSlide; 
                    otherwise, **false**.'''
        ...

    def create_theme_effective(self) -> aspose.slides.theme.IThemeEffectiveData:
        '''Returns an effective theme for this slide.'''
        ...

    def find_shape_by_alt_text(self, alt_text: str) -> IShape:
        '''Finds first occurrence of a shape with the specified alternative text.
        :param alt_text: Alternative text.
        :returns: Shape object or None.'''
        ...

    def apply_external_theme_to_depending_slides(self, fname: str) -> IMasterSlide:
        '''Creates a new master slide based on the current one, applying an external theme to it 
                    and applies the created master slide to all dependent slides.
        :param fname: Path to the external theme file (.thmx).
        :returns: New themed MasterSlide.'''
        ...

    def get_depending_slides(self) -> List[ISlide]:
        '''Returns an array with all slides, which depend on this master slide.'''
        ...

    @property
    def shapes(self) -> IShapeCollection:
        '''Returns the shapes of a slide.
                    Read-only :py:class:`aspose.slides.IShapeCollection`.'''
        ...

    @property
    def controls(self) -> IControlCollection:
        '''Returns the collection of ActiveX controls on a slide.
                    Read-only :py:class:`aspose.slides.IControlCollection`.'''
        ...

    @property
    def name(self) -> str:
        '''Returns or sets the name of a master slide.
                    Read/write :py:class:`str`.'''
        ...

    @name.setter
    def name(self, value: str):
        '''Returns or sets the name of a master slide.
                    Read/write :py:class:`str`.'''
        ...

    @property
    def slide_id(self) -> int:
        ...

    @property
    def custom_data(self) -> ICustomData:
        ...

    @property
    def timeline(self) -> IAnimationTimeLine:
        '''Returns animation timeline object.
                    Read-only :py:class:`aspose.slides.IAnimationTimeLine`.'''
        ...

    @property
    def slide_show_transition(self) -> ISlideShowTransition:
        ...

    @property
    def background(self) -> IBackground:
        '''Returns slide's background.
                    Read-only :py:class:`aspose.slides.IBackground`.'''
        ...

    @property
    def hyperlink_queries(self) -> IHyperlinkQueries:
        ...

    @property
    def show_master_shapes(self) -> bool:
        ...

    @show_master_shapes.setter
    def show_master_shapes(self, value: bool):
        ...

    @property
    def presentation(self) -> IPresentation:
        '''Returns IPresentation interface.
                    Read-only :py:class:`aspose.slides.IPresentation`.'''
        ...

    @property
    def header_footer_manager(self) -> IMasterSlideHeaderFooterManager:
        ...

    @property
    def title_style(self) -> ITextStyle:
        ...

    @property
    def body_style(self) -> ITextStyle:
        ...

    @property
    def other_style(self) -> ITextStyle:
        ...

    @property
    def layout_slides(self) -> IMasterLayoutSlideCollection:
        ...

    @property
    def preserve(self) -> bool:
        '''Determines whether the corresponding master is deleted when all the slides that follow that master are deleted.
                    Note: Aspose.Slides will never remove any unused master by itself, to actually remove unused masters call :py:func:`Aspose.Slides.MasterSlideCollection.RemoveUnused(Syste.`
                    Read/write :py:class:`bool`.'''
        ...

    @preserve.setter
    def preserve(self, value: bool):
        '''Determines whether the corresponding master is deleted when all the slides that follow that master are deleted.
                    Note: Aspose.Slides will never remove any unused master by itself, to actually remove unused masters call :py:func:`Aspose.Slides.MasterSlideCollection.RemoveUnused(Syste.`
                    Read/write :py:class:`bool`.'''
        ...

    @property
    def has_depending_slides(self) -> bool:
        ...

    @property
    def theme_manager(self) -> aspose.slides.theme.IMasterThemeManager:
        ...

    @property
    def as_i_slide_component(self) -> ISlideComponent:
        ...

    @property
    def slide(self) -> IBaseSlide:
        ...

    @property
    def as_i_presentation_component(self) -> IPresentationComponent:
        ...

    @property
    def as_i_base_slide(self) -> IBaseSlide:
        ...

    @property
    def as_i_master_themeable(self) -> aspose.slides.theme.IMasterThemeable:
        ...

    ...

class MasterSlideCollection:
    '''Represents a collection of master slides.'''
    def remove(self, value: IMasterSlide) -> None:
        '''Removes the first occurrence of a specific object from the collection.
        :param value: The master slide to remove from the collection.'''
        ...

    def remove_at(self, index: int) -> None:
        '''Removes the element at the specified index of the collection.
        :param index: The zero-based index of the element to remove.'''
        ...

    def remove_unused(self, ignore_preserve_field: bool) -> None:
        '''Removes unused master slides.
        :param ignore_preserve_field: Determines, whether this method should remove unused master even if its :py:attr:`aspose.slides.MasterSlide.preserve` property is set to true.'''
        ...

    def add_clone(self, source_master: IMasterSlide) -> IMasterSlide:
        '''Adds a copy of a specified master slide to the end of the collection.
                    Linked layout slides will be copied too.
        :param source_master: Slide to clone.
        :returns: Added slide.'''
        ...

    def insert_clone(self, index: int, source_master: IMasterSlide) -> IMasterSlide:
        '''Inserts a copy of a specified master slide to specified position of the collection.
                    Linked layout slides will be copied too.
        :param index: Index of new slide.
        :param source_master: Slide to clone.
        :returns: Inserted master slide.'''
        ...

    @property
    def as_i_collection(self) -> list:
        ...

    @property
    def as_i_enumerable(self) -> collections.abc.Iterable:
        ...

    def __getitem__(self, key: int) -> IMasterSlide
        ...

    ...

class MasterSlideHeaderFooterManager(BaseSlideHeaderFooterManager):
    '''Represents manager which holds behavior of the master slide footer, date-time, page number placeholders and all child placeholders.
                Child placeholders mean placeholders are contained on depending layout slides and depending slides.
                Depending layout slides and slides use and depend on master slide.'''
    def set_footer_visibility(self, is_visible: bool) -> None:
        '''Changes slide footer placeholder visibility.
        :param is_visible: true - makes a footer placeholder visible, otherwise - hides it.'''
        ...

    def set_slide_number_visibility(self, is_visible: bool) -> None:
        '''Changes slide page number placeholder visibility.
        :param is_visible: true - makes a page number placeholder visible, otherwise - hides it.'''
        ...

    def set_date_time_visibility(self, is_visible: bool) -> None:
        '''Changes slide date-time placeholder visibility.
        :param is_visible: true - makes a date-time placeholder visible, otherwise - hides it.'''
        ...

    def set_footer_text(self, text: str) -> None:
        '''Sets text to slide footer placeholder.
        :param text: Text to set.'''
        ...

    def set_date_time_text(self, text: str) -> None:
        '''Sets text to slide date-time placeholder.
        :param text: Text to set.'''
        ...

    def set_footer_and_child_footers_visibility(self, is_visible: bool) -> None:
        '''Changes master slide footer placeholder and all child footer placeholders visibility.
                    Child placeholders mean placeholders are contained on depending layout slides and depending slides.
                    Depending layout slides and slides use and depend on master slide.
        :param is_visible: true - makes a footer placeholders visible, otherwise - hides them.'''
        ...

    def set_slide_number_and_child_slide_numbers_visibility(self, is_visible: bool) -> None:
        '''Changes master slide page number placeholder and all child page number placeholders visibility.
                    Child placeholders mean placeholders are contained on depending layout slides and depending slides.
                    Depending layout slides and slides use and depend on master slide.
        :param is_visible: true - makes a page number placeholders visible, otherwise - hides them.'''
        ...

    def set_date_time_and_child_date_times_visibility(self, is_visible: bool) -> None:
        '''Changes master slide date-time placeholder and all child date-time placeholders visibility.
                    Child placeholders mean placeholders are contained on depending layout slides and depending slides.
                    Depending layout slides and slides use and depend on master slide.
        :param is_visible: true - makes a date-time placeholders visible, otherwise - hides them.'''
        ...

    def set_footer_and_child_footers_text(self, text: str) -> None:
        '''Sets text to master slide footer placeholder and all child footer placeholders.
                    Child placeholders mean placeholders are contained on depending layout slides and depending slides.
                    Depending layout slides and slides use and depend on master slide.
        :param text: Text to set.'''
        ...

    def set_date_time_and_child_date_times_text(self, text: str) -> None:
        '''Sets text to master slide date-time placeholder and all child date-time placeholders.
                    Child placeholders mean placeholders are contained on depending layout slides and depending slides.
                    Depending layout slides and slides use and depend on master slide.
        :param text: Text to set.'''
        ...

    @property
    def is_footer_visible(self) -> bool:
        ...

    @property
    def is_slide_number_visible(self) -> bool:
        ...

    @property
    def is_date_time_visible(self) -> bool:
        ...

    @property
    def as_i_base_slide_header_footer_manager(self) -> IBaseSlideHeaderFooterManager:
        ...

    @property
    def as_i_base_header_footer_manager(self) -> IBaseHeaderFooterManager:
        ...

    ...

class Metered:
    '''Provides methods to set metered key.'''
    def __init__(self):
        '''Initializes a new instance of this class.'''
        ...

    def set_metered_key(self, public_key: str, private_key: str) -> None:
        '''Sets metered public and private key
        :param public_key: public key
        :param private_key: private key'''
        ...

    @staticmethod
    def get_consumption_quantity() -> float:
        '''Gets consumption file size
        :returns: consumption quantity'''
        ...

    @staticmethod
    def get_consumption_credit() -> float:
        '''Gets consumption credit
        :returns: consumption quantity'''
        ...

    @staticmethod
    def is_metered_licensed() -> bool:
        '''Check whether metered is licensed
        :returns: True or false'''
        ...

    ...

class ModernComment(Comment):
    '''Represents a comment on a slide.'''
    def remove(self) -> None:
        '''Removes comment and all its replies from the parent collection.'''
        ...

    @property
    def text(self) -> str:
        '''Returns or sets the plain text of a slide comment.
                    Read/write :py:class:`str`.'''
        ...

    @text.setter
    def text(self, value: str):
        '''Returns or sets the plain text of a slide comment.
                    Read/write :py:class:`str`.'''
        ...

    @property
    def created_time(self) -> DateTime:
        ...

    @created_time.setter
    def created_time(self, value: DateTime):
        ...

    @property
    def slide(self) -> ISlide:
        '''Returns or sets the parent slide of a comment.
                    Read-only :py:class:`aspose.slides.ISlide`.'''
        ...

    @property
    def author(self) -> ICommentAuthor:
        '''Returns the author of a comment.
                    Read-only :py:class:`aspose.slides.ICommentAuthor`.'''
        ...

    @property
    def position(self) -> aspose.pydrawing.PointF:
        '''Returns or sets the position of a comment on a slide.
                    Read/write :py:class:`aspose.pydrawing.PointF`.'''
        ...

    @position.setter
    def position(self, value: aspose.pydrawing.PointF):
        '''Returns or sets the position of a comment on a slide.
                    Read/write :py:class:`aspose.pydrawing.PointF`.'''
        ...

    @property
    def parent_comment(self) -> IComment:
        ...

    @parent_comment.setter
    def parent_comment(self, value: IComment):
        ...

    @property
    def shape(self) -> IShape:
        '''Returns a shape associated with the comment.
                    Read-only :py:class:`aspose.slides.IShape`.'''
        ...

    @property
    def text_selection_start(self) -> int:
        ...

    @text_selection_start.setter
    def text_selection_start(self, value: int):
        ...

    @property
    def text_selection_length(self) -> int:
        ...

    @text_selection_length.setter
    def text_selection_length(self, value: int):
        ...

    @property
    def status(self) -> ModernCommentStatus:
        '''Gets or sets the status of the comment.
                    Read/write :py:enum:`aspose.slides.ModernCommentStatus`.'''
        ...

    @status.setter
    def status(self, value: ModernCommentStatus):
        '''Gets or sets the status of the comment.
                    Read/write :py:enum:`aspose.slides.ModernCommentStatus`.'''
        ...

    @property
    def as_i_comment(self) -> IComment:
        ...

    ...

class NormalViewProperties:
    '''Represents normal view properties. The normal view consists of
                three content regions: the slide itself, a side content region, and a bottom content region.'''
    @property
    def show_outline_icons(self) -> bool:
        ...

    @show_outline_icons.setter
    def show_outline_icons(self, value: bool):
        ...

    @property
    def snap_vertical_splitter(self) -> bool:
        ...

    @snap_vertical_splitter.setter
    def snap_vertical_splitter(self, value: bool):
        ...

    @property
    def vertical_bar_state(self) -> SplitterBarStateType:
        ...

    @vertical_bar_state.setter
    def vertical_bar_state(self, value: SplitterBarStateType):
        ...

    @property
    def horizontal_bar_state(self) -> SplitterBarStateType:
        ...

    @horizontal_bar_state.setter
    def horizontal_bar_state(self, value: SplitterBarStateType):
        ...

    @property
    def prefer_single_view(self) -> bool:
        ...

    @prefer_single_view.setter
    def prefer_single_view(self, value: bool):
        ...

    @property
    def restored_left(self) -> INormalViewRestoredProperties:
        ...

    @property
    def restored_top(self) -> INormalViewRestoredProperties:
        ...

    ...

class NormalViewRestoredProperties:
    '''Specifies the sizing of the slide region ((width when a child of restoredTop, height when a
                child of restoredLeft) of the normal view, when the region is of a variable restored size(neither minimized nor maximized).'''
    @property
    def dimension_size(self) -> float:
        ...

    @dimension_size.setter
    def dimension_size(self, value: float):
        ...

    @property
    def auto_adjust(self) -> bool:
        ...

    @auto_adjust.setter
    def auto_adjust(self, value: bool):
        ...

    ...

class NotesSize:
    '''Represents a size of notes slide.'''
    def __init__(self):
        ...

    @property
    def size(self) -> aspose.pydrawing.SizeF:
        '''Returns or sets the size in points.
                    Read/write :py:class:`aspose.pydrawing.SizeF`.'''
        ...

    @size.setter
    def size(self, value: aspose.pydrawing.SizeF):
        '''Returns or sets the size in points.
                    Read/write :py:class:`aspose.pydrawing.SizeF`.'''
        ...

    ...

class NotesSlide(BaseSlide):
    '''Represents a notes slide in a presentation.'''
    @overload
    def join_portions_with_same_formatting(self) -> None:
        '''Joins runs with same formatting in all paragraphs all acceptable shapes.'''
        ...

    @overload
    def join_portions_with_same_formatting(self, collection: IShapeCollection) -> None:
        '''Joins runs with same formatting in all paragraphs in all acceptable shapes.'''
        ...

    def equals(self, slide: IBaseSlide) -> bool:
        '''Determines whether the two IBaseSlide instances are equal.
                    Returning value is calculated based on slide's structure and static content.
                    Two slides are equal if all shapes, styles, texts, animation and other settings. etc. are equal. The comparison doesn't take into account unique identifier values, e.g. SlideId and dynamic content, e.g. current date value in Date Placeholder.
        :param slide: The IBaseSlide to compare with the current IBaseSlide.
        :returns: **true** if the specified IBaseSlide is equal to the current IBaseSlide; 
                    otherwise, **false**.'''
        ...

    def create_theme_effective(self) -> aspose.slides.theme.IThemeEffectiveData:
        '''Returns an effective theme for this slide.'''
        ...

    def find_shape_by_alt_text(self, alt_text: str) -> IShape:
        '''Finds first occurrence of a shape with the specified alternative text.
        :param alt_text: Alternative text.
        :returns: Shape object or None.'''
        ...

    @property
    def shapes(self) -> IShapeCollection:
        '''Returns the shapes of a slide.
                    Read-only :py:class:`aspose.slides.IShapeCollection`.'''
        ...

    @property
    def controls(self) -> IControlCollection:
        '''Returns the collection of ActiveX controls on a slide.
                    Read-only :py:class:`aspose.slides.IControlCollection`.'''
        ...

    @property
    def name(self) -> str:
        '''Returns or sets the name of a slide.
                    Read/write :py:class:`str`.'''
        ...

    @name.setter
    def name(self, value: str):
        '''Returns or sets the name of a slide.
                    Read/write :py:class:`str`.'''
        ...

    @property
    def slide_id(self) -> int:
        ...

    @property
    def custom_data(self) -> ICustomData:
        ...

    @property
    def timeline(self) -> IAnimationTimeLine:
        '''Returns animation timeline object.
                    Read-only :py:class:`aspose.slides.IAnimationTimeLine`.'''
        ...

    @property
    def slide_show_transition(self) -> ISlideShowTransition:
        ...

    @property
    def background(self) -> IBackground:
        '''Returns slide's background.
                    Read-only :py:class:`aspose.slides.IBackground`.'''
        ...

    @property
    def hyperlink_queries(self) -> IHyperlinkQueries:
        ...

    @property
    def show_master_shapes(self) -> bool:
        ...

    @show_master_shapes.setter
    def show_master_shapes(self, value: bool):
        ...

    @property
    def presentation(self) -> IPresentation:
        '''Returns IPresentation interface.
                    Read-only :py:class:`aspose.slides.IPresentation`.'''
        ...

    @property
    def header_footer_manager(self) -> INotesSlideHeaderFooterManager:
        ...

    @property
    def notes_text_frame(self) -> ITextFrame:
        ...

    @property
    def theme_manager(self) -> aspose.slides.theme.IOverrideThemeManager:
        ...

    @property
    def parent_slide(self) -> ISlide:
        ...

    @property
    def as_i_slide_component(self) -> ISlideComponent:
        ...

    @property
    def slide(self) -> IBaseSlide:
        ...

    @property
    def as_i_presentation_component(self) -> IPresentationComponent:
        ...

    @property
    def as_i_base_slide(self) -> IBaseSlide:
        ...

    @property
    def as_i_override_themeable(self) -> aspose.slides.theme.IOverrideThemeable:
        ...

    ...

class NotesSlideHeaderFooterManager(BaseHandoutNotesSlideHeaderFooterManager):
    '''Represents manager which holds behavior of the notes slide placeholders, including header placeholder.'''
    def set_footer_visibility(self, is_visible: bool) -> None:
        '''Changes slide footer placeholder visibility.
        :param is_visible: true - makes a footer placeholder visible, otherwise - hides it.'''
        ...

    def set_slide_number_visibility(self, is_visible: bool) -> None:
        '''Changes slide page number placeholder visibility.
        :param is_visible: true - makes a page number placeholder visible, otherwise - hides it.'''
        ...

    def set_date_time_visibility(self, is_visible: bool) -> None:
        '''Changes slide date-time placeholder visibility.
        :param is_visible: true - makes a date-time placeholder visible, otherwise - hides it.'''
        ...

    def set_footer_text(self, text: str) -> None:
        '''Sets text to slide footer placeholder.
        :param text: Text to set.'''
        ...

    def set_date_time_text(self, text: str) -> None:
        '''Sets text to slide date-time placeholder.
        :param text: Text to set.'''
        ...

    def set_header_visibility(self, is_visible: bool) -> None:
        '''Changes slide header placeholder visibility.
        :param is_visible: true - makes a header placeholder visible, otherwise - hides it.'''
        ...

    def set_header_text(self, text: str) -> None:
        '''Sets text to slide header placeholder.
        :param text: Text to set.'''
        ...

    @property
    def is_footer_visible(self) -> bool:
        ...

    @property
    def is_slide_number_visible(self) -> bool:
        ...

    @property
    def is_date_time_visible(self) -> bool:
        ...

    @property
    def is_header_visible(self) -> bool:
        ...

    @property
    def as_i_base_slide_header_footer_manager(self) -> IBaseSlideHeaderFooterManager:
        ...

    @property
    def as_i_base_header_footer_manager(self) -> IBaseHeaderFooterManager:
        ...

    @property
    def as_i_base_handout_notes_slide_header_footer_manag(self) -> IBaseHandoutNotesSlideHeaderFooterManag:
        ...

    ...

class NotesSlideManager:
    '''Notes slide manager.'''
    def add_notes_slide(self) -> INotesSlide:
        '''Returns the notes slide for the current slide, creating one if there isn't.
        :returns: :py:attr:`aspose.slides.NotesSlideManager.notes_slide` for this slide.'''
        ...

    def remove_notes_slide(self) -> None:
        '''Removes notes slide of the current slide.'''
        ...

    @property
    def notes_slide(self) -> INotesSlide:
        ...

    ...

class OOXMLCorruptFileException(OOXMLException):
    '''Exception which thrown when Office Open XML file format is corrupted.'''
    def __init__(self):
        '''Default constructor.'''
        ...

    def __init__(self, message: str):
        '''Constructor allowing a message to be added to this exception.
        :param message: message'''
        ...

    ...

class OOXMLException:
    '''Represents a standard internal exception type related to Office Open XML file format.'''
    def __init__(self):
        '''Default constructor.'''
        ...

    def __init__(self, message: str):
        '''Constructor allowing a message to be added to this exception.
        :param message: message'''
        ...

    ...

class OdpException:
    '''Represents a standard internal exception type.'''
    def __init__(self):
        '''Default constructor'''
        ...

    def __init__(self, message: str):
        '''Constructor allowing a message to be added to this exception.
        :param message: message'''
        ...

    ...

class OdpReadException(OdpException):
    '''Represents an exception which thrown on presentation reading errors.'''
    def __init__(self):
        '''Default constructor'''
        ...

    def __init__(self, message: str):
        '''Constructor allowing a message to be added to this exception.
        :param message: message'''
        ...

    ...

class OleObjectFrame(GraphicalObject):
    '''Represents an OLE object on a slide.'''
    @overload
    def get_thumbnail(self) -> aspose.pydrawing.Bitmap:
        '''Returns shape thumbnail.
                    ShapeThumbnailBounds.Shape shape thumbnail bounds type is used by default.
        :returns: Shape thumbnail.'''
        ...

    @overload
    def get_thumbnail(self, bounds: ShapeThumbnailBounds, scale_x: float, scale_y: float) -> aspose.pydrawing.Bitmap:
        '''Returns shape thumbnail.
        :param bounds: Shape thumbnail bounds type.
        :param scale_x: X scale
        :param scale_y: Y scale
        :returns: Shape thumbnail or None in case when ShapeThumbnailBounds.Appearance is used and a shape doesn't have visible elements.'''
        ...

    @overload
    def get_image(self) -> IImage:
        '''Returns shape thumbnail.
                    ShapeThumbnailBounds.Shape shape thumbnail bounds type is used by default.
        :returns: Shape thumbnail.'''
        ...

    @overload
    def get_image(self, bounds: ShapeThumbnailBounds, scale_x: float, scale_y: float) -> IImage:
        '''Returns shape thumbnail.
        :param bounds: Shape thumbnail bounds type.
        :param scale_x: X scale
        :param scale_y: Y scale
        :returns: Shape thumbnail or None in case when ShapeThumbnailBounds.Appearance is used and a shape doesn't have visible elements.'''
        ...

    @overload
    def write_as_svg(self, stream: io.RawIOBase) -> None:
        '''Saves content of Shape as SVG file.
        :param stream: Target stream'''
        ...

    @overload
    def write_as_svg(self, stream: io.RawIOBase, svg_options: aspose.slides.export.ISVGOptions) -> None:
        '''Saves content of Shape as SVG file.
        :param stream: Target stream
        :param svg_options: SVG generation options'''
        ...

    def remove_placeholder(self) -> None:
        '''Defines that this shape isn't a placeholder.'''
        ...

    def add_placeholder(self, placeholder_to_copy_from: IPlaceholder) -> IPlaceholder:
        '''Adds a new placeholder if there is no and sets placeholder properties to a specified one.
        :param placeholder_to_copy_from: Placeholder to copy content from.
        :returns: New :py:attr:`aspose.slides.Shape.placeholder`.'''
        ...

    def get_base_placeholder(self) -> IShape:
        '''Returns a basic placeholder shape (shape from the layout and/or master slide that the current shape is inherited from).'''
        ...

    def set_embedded_data(self, embedded_data: IOleEmbeddedDataInfo) -> None:
        '''Sets information about OLE embedded data.
        :param embedded_data: Embedded data :py:class:`aspose.slides.IOleEmbeddedDataInfo`'''
        ...

    @property
    def is_text_holder(self) -> bool:
        ...

    @property
    def placeholder(self) -> IPlaceholder:
        '''Returns the placeholder for a shape. Returns None if the shape has no placeholder.
                    Read-only :py:class:`aspose.slides.IPlaceholder`.'''
        ...

    @property
    def custom_data(self) -> ICustomData:
        ...

    @property
    def raw_frame(self) -> IShapeFrame:
        ...

    @raw_frame.setter
    def raw_frame(self, value: IShapeFrame):
        ...

    @property
    def frame(self) -> IShapeFrame:
        '''Returns or sets the shape frame's properties.
                    Read/write :py:class:`aspose.slides.IShapeFrame`.'''
        ...

    @frame.setter
    def frame(self, value: IShapeFrame):
        '''Returns or sets the shape frame's properties.
                    Read/write :py:class:`aspose.slides.IShapeFrame`.'''
        ...

    @property
    def line_format(self) -> ILineFormat:
        ...

    @property
    def three_d_format(self) -> IThreeDFormat:
        ...

    @property
    def effect_format(self) -> IEffectFormat:
        ...

    @property
    def fill_format(self) -> IFillFormat:
        ...

    @property
    def hyperlink_click(self) -> IHyperlink:
        ...

    @hyperlink_click.setter
    def hyperlink_click(self, value: IHyperlink):
        ...

    @property
    def hyperlink_mouse_over(self) -> IHyperlink:
        ...

    @hyperlink_mouse_over.setter
    def hyperlink_mouse_over(self, value: IHyperlink):
        ...

    @property
    def hyperlink_manager(self) -> IHyperlinkManager:
        ...

    @property
    def hidden(self) -> bool:
        '''Determines whether the shape is hidden.
                    Read/write :py:class:`bool`.'''
        ...

    @hidden.setter
    def hidden(self, value: bool):
        '''Determines whether the shape is hidden.
                    Read/write :py:class:`bool`.'''
        ...

    @property
    def z_order_position(self) -> int:
        ...

    @property
    def connection_site_count(self) -> int:
        ...

    @property
    def rotation(self) -> float:
        '''Returns or sets the number of degrees the specified shape is rotated around
                    the z-axis. A positive value indicates clockwise rotation; a negative value
                    indicates counterclockwise rotation.
                    Read/write :py:class:`float`.'''
        ...

    @rotation.setter
    def rotation(self, value: float):
        '''Returns or sets the number of degrees the specified shape is rotated around
                    the z-axis. A positive value indicates clockwise rotation; a negative value
                    indicates counterclockwise rotation.
                    Read/write :py:class:`float`.'''
        ...

    @property
    def x(self) -> float:
        '''Returns or sets the x-coordinate of the upper-left corner of the shape.
                    Read/write :py:class:`float`.'''
        ...

    @x.setter
    def x(self, value: float):
        '''Returns or sets the x-coordinate of the upper-left corner of the shape.
                    Read/write :py:class:`float`.'''
        ...

    @property
    def y(self) -> float:
        '''Returns or sets the y-coordinate of the upper-left corner of the shape.
                    Read/write :py:class:`float`.'''
        ...

    @y.setter
    def y(self, value: float):
        '''Returns or sets the y-coordinate of the upper-left corner of the shape.
                    Read/write :py:class:`float`.'''
        ...

    @property
    def width(self) -> float:
        '''Returns or sets the width of the shape.
                    Read/write :py:class:`float`.'''
        ...

    @width.setter
    def width(self, value: float):
        '''Returns or sets the width of the shape.
                    Read/write :py:class:`float`.'''
        ...

    @property
    def height(self) -> float:
        '''Returns or sets the height of the shape.
                    Read/write :py:class:`float`.'''
        ...

    @height.setter
    def height(self, value: float):
        '''Returns or sets the height of the shape.
                    Read/write :py:class:`float`.'''
        ...

    @property
    def black_white_mode(self) -> BlackWhiteMode:
        ...

    @black_white_mode.setter
    def black_white_mode(self, value: BlackWhiteMode):
        ...

    @property
    def unique_id(self) -> int:
        ...

    @property
    def office_interop_shape_id(self) -> int:
        ...

    @property
    def alternative_text(self) -> str:
        ...

    @alternative_text.setter
    def alternative_text(self, value: str):
        ...

    @property
    def alternative_text_title(self) -> str:
        ...

    @alternative_text_title.setter
    def alternative_text_title(self, value: str):
        ...

    @property
    def name(self) -> str:
        '''Returns or sets the name of a shape.
                    Must be not None. Use empty string value if needed.
                    Read/write :py:class:`str`.'''
        ...

    @name.setter
    def name(self, value: str):
        '''Returns or sets the name of a shape.
                    Must be not None. Use empty string value if needed.
                    Read/write :py:class:`str`.'''
        ...

    @property
    def is_decorative(self) -> bool:
        ...

    @is_decorative.setter
    def is_decorative(self, value: bool):
        ...

    @property
    def shape_lock(self) -> IGraphicalObjectLock:
        ...

    @property
    def is_grouped(self) -> bool:
        ...

    @property
    def parent_group(self) -> IGroupShape:
        ...

    @property
    def slide(self) -> IBaseSlide:
        '''Returns the parent slide of a shape.
                    Read-only :py:class:`aspose.slides.IBaseSlide`.'''
        ...

    @property
    def presentation(self) -> IPresentation:
        '''Returns the parent presentation of a slide.
                    Read-only :py:class:`aspose.slides.IPresentation`.'''
        ...

    @property
    def graphical_object_lock(self) -> IGraphicalObjectLock:
        ...

    @property
    def substitute_picture_format(self) -> IPictureFillFormat:
        ...

    @property
    def substitute_picture_title(self) -> str:
        ...

    @substitute_picture_title.setter
    def substitute_picture_title(self, value: str):
        ...

    @property
    def object_name(self) -> str:
        ...

    @object_name.setter
    def object_name(self, value: str):
        ...

    @property
    def object_prog_id(self) -> str:
        ...

    @object_prog_id.setter
    def object_prog_id(self, value: str):
        ...

    @property
    def link_file_name(self) -> str:
        ...

    @property
    def link_path_long(self) -> str:
        ...

    @link_path_long.setter
    def link_path_long(self, value: str):
        ...

    @property
    def link_path_relative(self) -> str:
        ...

    @property
    def embedded_file_label(self) -> str:
        ...

    @property
    def embedded_file_name(self) -> str:
        ...

    @property
    def embedded_data(self) -> IOleEmbeddedDataInfo:
        ...

    @property
    def is_object_icon(self) -> bool:
        ...

    @is_object_icon.setter
    def is_object_icon(self, value: bool):
        ...

    @property
    def is_object_link(self) -> bool:
        ...

    @property
    def as_i_graphical_object(self) -> IGraphicalObject:
        ...

    @property
    def update_automatic(self) -> bool:
        ...

    @update_automatic.setter
    def update_automatic(self, value: bool):
        ...

    @property
    def as_i_hyperlink_container(self) -> IHyperlinkContainer:
        ...

    @property
    def as_i_slide_component(self) -> ISlideComponent:
        ...

    @property
    def as_i_presentation_component(self) -> IPresentationComponent:
        ...

    @property
    def as_i_shape(self) -> IShape:
        ...

    ...

class PPImage:
    '''Represents an image in a presentation.'''
    @overload
    def replace_image(self, new_image_data: bytes) -> None:
        '''Replaces image data.'''
        ...

    @overload
    def replace_image(self, new_image: aspose.pydrawing.Image) -> None:
        '''Replaces image data. Attention: when Image is metafile - it will be rasterized due to restrictions of GDI+. Use ReplaceImage(byte[]) instead'''
        ...

    @overload
    def replace_image(self, new_image: IImage) -> None:
        '''Replaces image data. Attention: when Image is metafile - it will be rasterized. Use ReplaceImage(byte[]) instead'''
        ...

    @overload
    def replace_image(self, new_image: IPPImage) -> None:
        '''Replaces image data.'''
        ...

    @property
    def binary_data(self) -> bytes:
        ...

    @property
    def system_image(self) -> aspose.pydrawing.Image:
        ...

    @property
    def image(self) -> IImage:
        '''Returns the copy of an image.
                    Read-only :py:class:`aspose.slides.IImage`.'''
        ...

    @property
    def svg_image(self) -> ISvgImage:
        ...

    @svg_image.setter
    def svg_image(self, value: ISvgImage):
        ...

    @property
    def content_type(self) -> str:
        ...

    @property
    def width(self) -> int:
        '''Returns a width of an image.
                    Read-only :py:class:`int`.'''
        ...

    @property
    def height(self) -> int:
        '''Returns a height of an image.
                    Read-only :py:class:`int`.'''
        ...

    @property
    def x(self) -> int:
        '''Returns a X-offset of an image.
                    Read-only :py:class:`int`.'''
        ...

    @property
    def y(self) -> int:
        '''Returns a Y-offset of an image.
                    Read-only :py:class:`int`.'''
        ...

    ...

class PVIObject:
    '''Encapsulates basic service infrastructure for objects can be a subject of property value inheritance.'''
    @property
    def as_i_presentation_component(self) -> IPresentationComponent:
        ...

    @property
    def slide(self) -> IBaseSlide:
        ...

    @property
    def presentation(self) -> IPresentation:
        ...

    ...

class Paragraph:
    '''Represents a paragraph of text.'''
    def __init__(self):
        '''Initializes a new instance of the Paragraph class with default properties.'''
        ...

    def __init__(self, para: Paragraph):
        '''Copy constructor that initializes a new instance of a Paragraph class.'''
        ...

    def join_portions_with_same_formatting(self) -> None:
        '''Joins runs with same formatting.'''
        ...

    def get_rect(self) -> aspose.pydrawing.RectangleF:
        '''Get coordinates of rect that bounds paragraph. The rect includes all the lines of
                    text in paragraph, including empty ones.'''
        ...

    def get_lines_count(self) -> int:
        '''Get number of lines in a paragraph.
        :returns: Lines count in a paragraph'''
        ...

    @property
    def portions(self) -> IPortionCollection:
        '''Returns the collection of a text portions.
                    Read-only :py:class:`aspose.slides.IPortionCollection`.'''
        ...

    @property
    def paragraph_format(self) -> IParagraphFormat:
        ...

    @property
    def text(self) -> str:
        '''Gets or sets the the plain text of a paragraph.
                    Read/write :py:class:`str`.'''
        ...

    @text.setter
    def text(self, value: str):
        '''Gets or sets the the plain text of a paragraph.
                    Read/write :py:class:`str`.'''
        ...

    @property
    def end_paragraph_portion_format(self) -> IPortionFormat:
        ...

    @end_paragraph_portion_format.setter
    def end_paragraph_portion_format(self, value: IPortionFormat):
        ...

    @property
    def as_i_slide_component(self) -> ISlideComponent:
        ...

    @property
    def slide(self) -> IBaseSlide:
        ...

    @property
    def as_i_presentation_component(self) -> IPresentationComponent:
        ...

    @property
    def presentation(self) -> IPresentation:
        ...

    ...

class ParagraphCollection:
    '''Represents a collection of a paragraphs.'''
    @overload
    def add(self, value: IParagraph) -> None:
        '''Adds a Paragraph to the end of collection.
        :param value: The Paragraph to be added to the end of the collection.'''
        ...

    @overload
    def add(self, value: IParagraphCollection) -> int:
        '''Adds a content of ParagraphCollection to the end of collection.
        :param value: The ParagraphCollection to be added to the end of the collection.
        :returns: The index at which the Paragraph has been added or -1 if there are nothing to add.'''
        ...

    @overload
    def insert(self, index: int, value: IParagraph) -> None:
        '''Inserts a Paragraph into the collection at the specified index.
        :param index: The zero-based index at which Paragraph should be inserted.
        :param value: The Paragraph to insert.'''
        ...

    @overload
    def insert(self, index: int, value: IParagraphCollection) -> None:
        '''Inserts a content of ParagraphCollection into the collection at the specified index.
        :param index: The zero-based index at which paragraphs should be inserted.
        :param value: The paragraphs to insert.'''
        ...

    @overload
    def add_from_html(self, text: str) -> None:
        '''Adds text from specified html string to the collection.
        :param text: HTML text.'''
        ...

    @overload
    def add_from_html(self, text: str, resolver: aspose.slides.importing.IExternalResourceResolver, uri: str) -> None:
        '''Adds text from specified html string to the collection.
        :param text: HTML text.
        :param resolver: Resolver callback object which resolves URIs and fetches referrenced objects.
        :param uri: URI for adding HTML document. Used for resolving relative links.'''
        ...

    def index_of(self, item: IParagraph) -> int:
        '''Determines the index of a specific item in the :py:class:`System.Collections.Generic.IList`1`.
        :param item: The object to locate in the :py:class:`System.Collections.Generic.IList`1`.
        :returns: The index of ``item`` if found in the list; otherwise, -1.'''
        ...

    def clear(self) -> None:
        '''Removes all elements from the collection.'''
        ...

    def contains(self, item: IParagraph) -> bool:
        '''Determines whether the :py:class:`System.Collections.Generic.ICollection`1` contains a specific value.
        :param item: The object to locate in the :py:class:`System.Collections.Generic.ICollection`1`.
        :returns: true if ``item`` is found in the :py:class:`System.Collections.Generic.ICollection`1`; otherwise, false.'''
        ...

    def copy_to(self, array: List[IParagraph], array_index: int) -> None:
        '''Copies the elements of the :py:class:`System.Collections.Generic.ICollection`1` to an :py:class:`System.Array`, starting at a particular :py:class:`System.Array` index.
        :param array: The one-dimensional :py:class:`System.Array` that is the destination of the elements copied from :py:class:`System.Collections.Generic.ICollection`1`. The :py:class:`System.Array` must have zero-based indexing.
        :param array_index: The zero-based index in ``array`` at which copying begins.'''
        ...

    def remove_at(self, index: int) -> None:
        '''Removes the element at the specified index of the collection.
        :param index: The zero-based index of the element to remove.'''
        ...

    def remove(self, item: IParagraph) -> bool:
        '''Removes the first occurrence of a specific object from the :py:class:`System.Collections.Generic.ICollection`1`.
        :param item: The object to remove from the :py:class:`System.Collections.Generic.ICollection`1`.
        :returns: true if ``item`` was successfully removed from the :py:class:`System.Collections.Generic.ICollection`1`; otherwise, false. This method also returns false if ``item`` is not found in the original :py:class:`System.Collections.Generic.ICollection`1`.'''
        ...

    def export_to_html(self, first_paragraph_index: int, paragraphs_count: int, options: aspose.slides.export.ITextToHtmlConversionOptions) -> str:
        '''Converts specifying paragraphs to the HTML and returns it as String object.
        :param first_paragraph_index: First paragraph index :py:class:`int`
        :param paragraphs_count: Paragraph count :py:class:`int`
        :param options: Convert options :py:class:`aspose.slides.export.ITextToHtmlConversionOptions`
        :returns: Generated HTML.'''
        ...

    @property
    def count(self) -> int:
        '''Gets the number of elements actually contained in the collection.
                    Read-only :py:class:`int`.'''
        ...

    @property
    def is_read_only(self) -> bool:
        ...

    @property
    def as_i_slide_component(self) -> ISlideComponent:
        ...

    @property
    def as_i_enumerable(self) -> collections.abc.Iterable:
        ...

    @property
    def slide(self) -> IBaseSlide:
        ...

    @property
    def as_i_presentation_component(self) -> IPresentationComponent:
        ...

    @property
    def presentation(self) -> IPresentation:
        ...

    def __getitem__(self, key: int) -> IParagraph
        ...

    ...

class ParagraphFactory:
    '''Allows to create paragraphs'''
    def __init__(self):
        ...

    @overload
    def create_paragraph(self) -> IParagraph:
        '''Creates a new empty paragraph.
        :returns: Paragraph.'''
        ...

    @overload
    def create_paragraph(self, paragraph: IParagraph) -> IParagraph:
        '''Creates a new paragraph with specified paragraph data using.
        :param paragraph: A paragraph to use data.
        :returns: Paragraph.'''
        ...

    ...

class ParagraphFormat(PVIObject):
    '''This class contains the paragraph formatting properties. Unlike :py:class:`aspose.slides.IParagraphFormatEffectiveData`, all properties of this class are writeable.'''
    def __init__(self):
        '''Initializes a new instance of :py:class:`aspose.slides.ParagraphFormat` class.'''
        ...

    def get_effective(self) -> IParagraphFormatEffectiveData:
        '''Gets effective paragraph formatting data with the inheritance applied.
        :returns: A :py:class:`aspose.slides.IParagraphFormatEffectiveData`.'''
        ...

    @property
    def as_i_presentation_component(self) -> IPresentationComponent:
        ...

    @property
    def alignment(self) -> TextAlignment:
        '''Returns or sets the text alignment in a paragraph with no inheritance.
                    Read/write :py:enum:`aspose.slides.TextAlignment`.'''
        ...

    @alignment.setter
    def alignment(self, value: TextAlignment):
        '''Returns or sets the text alignment in a paragraph with no inheritance.
                    Read/write :py:enum:`aspose.slides.TextAlignment`.'''
        ...

    @property
    def space_within(self) -> float:
        ...

    @space_within.setter
    def space_within(self, value: float):
        ...

    @property
    def space_before(self) -> float:
        ...

    @space_before.setter
    def space_before(self, value: float):
        ...

    @property
    def space_after(self) -> float:
        ...

    @space_after.setter
    def space_after(self, value: float):
        ...

    @property
    def east_asian_line_break(self) -> NullableBool:
        ...

    @east_asian_line_break.setter
    def east_asian_line_break(self, value: NullableBool):
        ...

    @property
    def right_to_left(self) -> NullableBool:
        ...

    @right_to_left.setter
    def right_to_left(self, value: NullableBool):
        ...

    @property
    def latin_line_break(self) -> NullableBool:
        ...

    @latin_line_break.setter
    def latin_line_break(self, value: NullableBool):
        ...

    @property
    def hanging_punctuation(self) -> NullableBool:
        ...

    @hanging_punctuation.setter
    def hanging_punctuation(self, value: NullableBool):
        ...

    @property
    def margin_left(self) -> float:
        ...

    @margin_left.setter
    def margin_left(self, value: float):
        ...

    @property
    def margin_right(self) -> float:
        ...

    @margin_right.setter
    def margin_right(self, value: float):
        ...

    @property
    def indent(self) -> float:
        '''Returns or sets paragraph First Line Indent/Hanging Indent with no inheritance. Hanging Indent can be defined with negative values.
                    Read/write :py:class:`float`.'''
        ...

    @indent.setter
    def indent(self, value: float):
        '''Returns or sets paragraph First Line Indent/Hanging Indent with no inheritance. Hanging Indent can be defined with negative values.
                    Read/write :py:class:`float`.'''
        ...

    @property
    def default_tab_size(self) -> float:
        ...

    @default_tab_size.setter
    def default_tab_size(self, value: float):
        ...

    @property
    def tabs(self) -> ITabCollection:
        '''Returns tabulations of a paragraph. No inheritance applied.
                    Read-only :py:class:`aspose.slides.ITabCollection`.'''
        ...

    @property
    def font_alignment(self) -> FontAlignment:
        ...

    @font_alignment.setter
    def font_alignment(self, value: FontAlignment):
        ...

    @property
    def slide(self) -> IBaseSlide:
        ...

    @property
    def presentation(self) -> IPresentation:
        ...

    @property
    def bullet(self) -> IBulletFormat:
        ...

    @property
    def depth(self) -> int:
        ...

    @depth.setter
    def depth(self, value: int):
        ...

    @property
    def default_portion_format(self) -> IPortionFormat:
        ...

    ...

class PathSegment:
    '''Represents segment of graphics path of GeometryShape'''
    @property
    def segment_data(self) -> List[float]:
        ...

    @property
    def path_command(self) -> PathCommandType:
        ...

    ...

class PatternFormat(PVIObject):
    '''Represents a pattern to fill a shape.'''
    @overload
    def get_tile_image(self, background: aspose.pydrawing.Color, foreground: aspose.pydrawing.Color) -> aspose.pydrawing.Bitmap:
        '''Creates a tile image for the pattern fill with a specified colors.
        :param background: The background :py:class:`aspose.pydrawing.Color` for the pattern.
        :param foreground: The foreground :py:class:`aspose.pydrawing.Color` for the pattern.
        :returns: Tile :py:class:`aspose.pydrawing.Bitmap`.'''
        ...

    @overload
    def get_tile_image(self, style_color: aspose.pydrawing.Color) -> aspose.pydrawing.Bitmap:
        '''Creates a tile image for the pattern fill.
        :param style_color: The default :py:class:`aspose.pydrawing.Color`, 
                    defined in ShapeEx's StyleEx object. Fill's colors can depend on this.
        :returns: Tile :py:class:`aspose.pydrawing.Bitmap`.'''
        ...

    @overload
    def get_tile(self, background: aspose.pydrawing.Color, foreground: aspose.pydrawing.Color) -> IImage:
        '''Creates a tile image for the pattern fill with a specified colors.
        :param background: The background :py:class:`aspose.pydrawing.Color` for the pattern.
        :param foreground: The foreground :py:class:`aspose.pydrawing.Color` for the pattern.
        :returns: Tile :py:class:`aspose.slides.IImage`.'''
        ...

    @overload
    def get_tile(self, style_color: aspose.pydrawing.Color) -> IImage:
        '''Creates a tile image for the pattern fill.
        :param style_color: The default :py:class:`aspose.pydrawing.Color`
        :returns: Tile :py:class:`aspose.slides.IImage`.'''
        ...

    @property
    def as_i_presentation_component(self) -> IPresentationComponent:
        ...

    @property
    def pattern_style(self) -> PatternStyle:
        ...

    @pattern_style.setter
    def pattern_style(self, value: PatternStyle):
        ...

    @property
    def fore_color(self) -> IColorFormat:
        ...

    @property
    def back_color(self) -> IColorFormat:
        ...

    @property
    def slide(self) -> IBaseSlide:
        ...

    @property
    def presentation(self) -> IPresentation:
        ...

    ...

class Picture:
    '''Represents a picture in a presentation.'''
    @property
    def as_i_presentation_component(self) -> IPresentationComponent:
        ...

    @property
    def image(self) -> IPPImage:
        '''Returns or sets the embedded image.
                    Read/write :py:class:`aspose.slides.IPPImage`.'''
        ...

    @image.setter
    def image(self, value: IPPImage):
        '''Returns or sets the embedded image.
                    Read/write :py:class:`aspose.slides.IPPImage`.'''
        ...

    @property
    def link_path_long(self) -> str:
        ...

    @link_path_long.setter
    def link_path_long(self, value: str):
        ...

    @property
    def image_transform(self) -> aspose.slides.effects.IImageTransformOperationCollection:
        ...

    @property
    def presentation(self) -> IPresentation:
        '''Returns the presentation. 
                    Read-only :py:class:`aspose.slides.IPresentation`.'''
        ...

    @property
    def slide(self) -> IBaseSlide:
        '''Returns the parent slide of a picture.
                    Read-only :py:class:`aspose.slides.IBaseSlide`.'''
        ...

    @property
    def as_i_slide_component(self) -> ISlideComponent:
        ...

    ...

class PictureFillFormat(PVIObject):
    '''Represents a picture fill style.'''
    @overload
    def compress_image(self, delete_cropped_areas_of_image: bool, resolution: aspose.slides.export.PicturesCompression) -> bool:
        '''Compresses the image by reducing its size based on the shape size and specified resolution. Optionally, it also deletes cropped areas.
        :param delete_cropped_areas_of_image: If true, the method will remove the cropped areas of the image, potentially further reducing its size.
        :param resolution: The target resolution for compression, specified as a value of the :py:enum:`aspose.slides.export.PicturesCompression` enum.
        :returns: A :py:class:`bool` indicating whether the image was successfully compressed. Returns **True** if the image was resized or cropped, otherwise **False**.'''
        ...

    @overload
    def compress_image(self, delete_cropped_areas_of_image: bool, resolution: float) -> bool:
        '''Compresses the image by reducing its size based on the shape size and specified resolution. Optionally, it also deletes cropped areas.
        :param delete_cropped_areas_of_image: If true, the method will remove the cropped areas of the image, potentially further reducing its size.
        :param resolution: The target resolution in DPI. This value must be positive and defines how the image will be resized.
        :returns: A :py:class:`bool` indicating whether the image was successfully compressed. Returns **True** if the image was resized or cropped, otherwise **False**.'''
        ...

    def delete_picture_cropped_areas(self) -> IPPImage:
        '''Delete cropped areas of the fill Picture.
        :returns: Cropped image or origin image if cropping is not necessary.'''
        ...

    @property
    def as_i_presentation_component(self) -> IPresentationComponent:
        ...

    @property
    def dpi(self) -> int:
        '''Returns or sets the dpi which is used to fill a picture.
                    Read/write :py:class:`int`.'''
        ...

    @dpi.setter
    def dpi(self, value: int):
        '''Returns or sets the dpi which is used to fill a picture.
                    Read/write :py:class:`int`.'''
        ...

    @property
    def picture_fill_mode(self) -> PictureFillMode:
        ...

    @picture_fill_mode.setter
    def picture_fill_mode(self, value: PictureFillMode):
        ...

    @property
    def picture(self) -> ISlidesPicture:
        '''Returns the picture.
                    Read-only :py:class:`aspose.slides.ISlidesPicture`.'''
        ...

    @property
    def crop_left(self) -> float:
        ...

    @crop_left.setter
    def crop_left(self, value: float):
        ...

    @property
    def crop_top(self) -> float:
        ...

    @crop_top.setter
    def crop_top(self, value: float):
        ...

    @property
    def crop_right(self) -> float:
        ...

    @crop_right.setter
    def crop_right(self, value: float):
        ...

    @property
    def crop_bottom(self) -> float:
        ...

    @crop_bottom.setter
    def crop_bottom(self, value: float):
        ...

    @property
    def stretch_offset_left(self) -> float:
        ...

    @stretch_offset_left.setter
    def stretch_offset_left(self, value: float):
        ...

    @property
    def stretch_offset_top(self) -> float:
        ...

    @stretch_offset_top.setter
    def stretch_offset_top(self, value: float):
        ...

    @property
    def stretch_offset_right(self) -> float:
        ...

    @stretch_offset_right.setter
    def stretch_offset_right(self, value: float):
        ...

    @property
    def stretch_offset_bottom(self) -> float:
        ...

    @stretch_offset_bottom.setter
    def stretch_offset_bottom(self, value: float):
        ...

    @property
    def tile_offset_x(self) -> float:
        ...

    @tile_offset_x.setter
    def tile_offset_x(self, value: float):
        ...

    @property
    def tile_offset_y(self) -> float:
        ...

    @tile_offset_y.setter
    def tile_offset_y(self, value: float):
        ...

    @property
    def tile_scale_x(self) -> float:
        ...

    @tile_scale_x.setter
    def tile_scale_x(self, value: float):
        ...

    @property
    def tile_scale_y(self) -> float:
        ...

    @tile_scale_y.setter
    def tile_scale_y(self, value: float):
        ...

    @property
    def tile_alignment(self) -> RectangleAlignment:
        ...

    @tile_alignment.setter
    def tile_alignment(self, value: RectangleAlignment):
        ...

    @property
    def tile_flip(self) -> TileFlip:
        ...

    @tile_flip.setter
    def tile_flip(self, value: TileFlip):
        ...

    @property
    def slide(self) -> IBaseSlide:
        ...

    @property
    def presentation(self) -> IPresentation:
        ...

    @property
    def as_i_fill_param_source(self) -> IFillParamSource:
        ...

    ...

class PictureFrame(GeometryShape):
    '''Represents a frame with a picture inside.'''
    @overload
    def get_thumbnail(self) -> aspose.pydrawing.Bitmap:
        '''Returns shape thumbnail.
                    ShapeThumbnailBounds.Shape shape thumbnail bounds type is used by default.
        :returns: Shape thumbnail.'''
        ...

    @overload
    def get_thumbnail(self, bounds: ShapeThumbnailBounds, scale_x: float, scale_y: float) -> aspose.pydrawing.Bitmap:
        '''Returns shape thumbnail.
        :param bounds: Shape thumbnail bounds type.
        :param scale_x: X scale
        :param scale_y: Y scale
        :returns: Shape thumbnail or None in case when ShapeThumbnailBounds.Appearance is used and a shape doesn't have visible elements.'''
        ...

    @overload
    def get_image(self) -> IImage:
        '''Returns shape thumbnail.
                    ShapeThumbnailBounds.Shape shape thumbnail bounds type is used by default.
        :returns: Shape thumbnail.'''
        ...

    @overload
    def get_image(self, bounds: ShapeThumbnailBounds, scale_x: float, scale_y: float) -> IImage:
        '''Returns shape thumbnail.
        :param bounds: Shape thumbnail bounds type.
        :param scale_x: X scale
        :param scale_y: Y scale
        :returns: Shape thumbnail or None in case when ShapeThumbnailBounds.Appearance is used and a shape doesn't have visible elements.'''
        ...

    @overload
    def write_as_svg(self, stream: io.RawIOBase) -> None:
        '''Saves content of Shape as SVG file.
        :param stream: Target stream'''
        ...

    @overload
    def write_as_svg(self, stream: io.RawIOBase, svg_options: aspose.slides.export.ISVGOptions) -> None:
        '''Saves content of Shape as SVG file.
        :param stream: Target stream
        :param svg_options: SVG generation options'''
        ...

    def remove_placeholder(self) -> None:
        '''Defines that this shape isn't a placeholder.'''
        ...

    def add_placeholder(self, placeholder_to_copy_from: IPlaceholder) -> IPlaceholder:
        '''Adds a new placeholder if there is no and sets placeholder properties to a specified one.
        :param placeholder_to_copy_from: Placeholder to copy content from.
        :returns: New :py:attr:`aspose.slides.Shape.placeholder`.'''
        ...

    def get_base_placeholder(self) -> IShape:
        '''Returns a basic placeholder shape (shape from the layout and/or master slide that the current shape is inherited from).'''
        ...

    def get_geometry_paths(self) -> List[IGeometryPath]:
        '''Returns the copy of path of the geometry shape. Coordinates are relative to the left top corner of the shape.
        :returns: Array of :py:class:`aspose.slides.IGeometryPath`'''
        ...

    def set_geometry_path(self, geometry_path: IGeometryPath) -> None:
        '''Updates shape geometry from :py:class:`aspose.slides.IGeometryPath` object. Coordinates must be relative to the left
                     top corner of the shape.
                     Changes the type of the shape (:py:attr:`aspose.slides.GeometryShape.shape_type`) to :py:attr:`aspose.slides.ShapeType.CUSTOM`.
        :param geometry_path: Geometry path'''
        ...

    def set_geometry_paths(self, geometry_paths: List[IGeometryPath]) -> None:
        '''Updates shape geometry from array of :py:class:`aspose.slides.IGeometryPath`. Coordinates must be relative to the left
                     top corner of the shape.
                     Changes the type of the shape (:py:attr:`aspose.slides.GeometryShape.shape_type`) to :py:attr:`aspose.slides.ShapeType.CUSTOM`.
        :param geometry_paths: Array geometry paths'''
        ...

    def create_shape_elements(self) -> List[IShapeElement]:
        '''Creates and returns array of shape's elements.
        :returns: Array of :py:class:`aspose.slides.ShapeElement`'''
        ...

    @property
    def is_text_holder(self) -> bool:
        ...

    @property
    def placeholder(self) -> IPlaceholder:
        '''Returns the placeholder for a shape. Returns None if the shape has no placeholder.
                    Read-only :py:class:`aspose.slides.IPlaceholder`.'''
        ...

    @property
    def custom_data(self) -> ICustomData:
        ...

    @property
    def raw_frame(self) -> IShapeFrame:
        ...

    @raw_frame.setter
    def raw_frame(self, value: IShapeFrame):
        ...

    @property
    def frame(self) -> IShapeFrame:
        '''Returns or sets the shape frame's properties.
                    Read/write :py:class:`aspose.slides.IShapeFrame`.'''
        ...

    @frame.setter
    def frame(self, value: IShapeFrame):
        '''Returns or sets the shape frame's properties.
                    Read/write :py:class:`aspose.slides.IShapeFrame`.'''
        ...

    @property
    def line_format(self) -> ILineFormat:
        ...

    @property
    def three_d_format(self) -> IThreeDFormat:
        ...

    @property
    def effect_format(self) -> IEffectFormat:
        ...

    @property
    def fill_format(self) -> IFillFormat:
        ...

    @property
    def hyperlink_click(self) -> IHyperlink:
        ...

    @hyperlink_click.setter
    def hyperlink_click(self, value: IHyperlink):
        ...

    @property
    def hyperlink_mouse_over(self) -> IHyperlink:
        ...

    @hyperlink_mouse_over.setter
    def hyperlink_mouse_over(self, value: IHyperlink):
        ...

    @property
    def hyperlink_manager(self) -> IHyperlinkManager:
        ...

    @property
    def hidden(self) -> bool:
        '''Determines whether the shape is hidden.
                    Read/write :py:class:`bool`.'''
        ...

    @hidden.setter
    def hidden(self, value: bool):
        '''Determines whether the shape is hidden.
                    Read/write :py:class:`bool`.'''
        ...

    @property
    def z_order_position(self) -> int:
        ...

    @property
    def connection_site_count(self) -> int:
        ...

    @property
    def rotation(self) -> float:
        '''Returns or sets the number of degrees the specified shape is rotated around
                    the z-axis. A positive value indicates clockwise rotation; a negative value
                    indicates counterclockwise rotation.
                    Read/write :py:class:`float`.'''
        ...

    @rotation.setter
    def rotation(self, value: float):
        '''Returns or sets the number of degrees the specified shape is rotated around
                    the z-axis. A positive value indicates clockwise rotation; a negative value
                    indicates counterclockwise rotation.
                    Read/write :py:class:`float`.'''
        ...

    @property
    def x(self) -> float:
        '''Returns or sets the x-coordinate of the upper-left corner of the shape.
                    Read/write :py:class:`float`.'''
        ...

    @x.setter
    def x(self, value: float):
        '''Returns or sets the x-coordinate of the upper-left corner of the shape.
                    Read/write :py:class:`float`.'''
        ...

    @property
    def y(self) -> float:
        '''Returns or sets the y-coordinate of the upper-left corner of the shape.
                    Read/write :py:class:`float`.'''
        ...

    @y.setter
    def y(self, value: float):
        '''Returns or sets the y-coordinate of the upper-left corner of the shape.
                    Read/write :py:class:`float`.'''
        ...

    @property
    def width(self) -> float:
        '''Returns or sets the width of the shape.
                    Read/write :py:class:`float`.'''
        ...

    @width.setter
    def width(self, value: float):
        '''Returns or sets the width of the shape.
                    Read/write :py:class:`float`.'''
        ...

    @property
    def height(self) -> float:
        '''Returns or sets the height of the shape.
                    Read/write :py:class:`float`.'''
        ...

    @height.setter
    def height(self, value: float):
        '''Returns or sets the height of the shape.
                    Read/write :py:class:`float`.'''
        ...

    @property
    def black_white_mode(self) -> BlackWhiteMode:
        ...

    @black_white_mode.setter
    def black_white_mode(self, value: BlackWhiteMode):
        ...

    @property
    def unique_id(self) -> int:
        ...

    @property
    def office_interop_shape_id(self) -> int:
        ...

    @property
    def alternative_text(self) -> str:
        ...

    @alternative_text.setter
    def alternative_text(self, value: str):
        ...

    @property
    def alternative_text_title(self) -> str:
        ...

    @alternative_text_title.setter
    def alternative_text_title(self, value: str):
        ...

    @property
    def name(self) -> str:
        '''Returns or sets the name of a shape.
                    Must be not None. Use empty string value if needed.
                    Read/write :py:class:`str`.'''
        ...

    @name.setter
    def name(self, value: str):
        '''Returns or sets the name of a shape.
                    Must be not None. Use empty string value if needed.
                    Read/write :py:class:`str`.'''
        ...

    @property
    def is_decorative(self) -> bool:
        ...

    @is_decorative.setter
    def is_decorative(self, value: bool):
        ...

    @property
    def shape_lock(self) -> IPictureFrameLock:
        ...

    @property
    def is_grouped(self) -> bool:
        ...

    @property
    def parent_group(self) -> IGroupShape:
        ...

    @property
    def slide(self) -> IBaseSlide:
        '''Returns the parent slide of a shape.
                    Read-only :py:class:`aspose.slides.IBaseSlide`.'''
        ...

    @property
    def presentation(self) -> IPresentation:
        '''Returns the parent presentation of a slide.
                    Read-only :py:class:`aspose.slides.IPresentation`.'''
        ...

    @property
    def shape_style(self) -> IShapeStyle:
        ...

    @property
    def shape_type(self) -> ShapeType:
        ...

    @shape_type.setter
    def shape_type(self, value: ShapeType):
        ...

    @property
    def adjustments(self) -> IAdjustValueCollection:
        '''Returns a collection of shape's adjustment values.
                    Read-only :py:class:`aspose.slides.IAdjustValueCollection`.'''
        ...

    @property
    def picture_frame_lock(self) -> IPictureFrameLock:
        ...

    @property
    def picture_format(self) -> IPictureFillFormat:
        ...

    @property
    def relative_scale_height(self) -> float:
        ...

    @relative_scale_height.setter
    def relative_scale_height(self, value: float):
        ...

    @property
    def relative_scale_width(self) -> float:
        ...

    @relative_scale_width.setter
    def relative_scale_width(self, value: float):
        ...

    @property
    def is_cameo(self) -> bool:
        ...

    @property
    def as_i_hyperlink_container(self) -> IHyperlinkContainer:
        ...

    @property
    def as_i_slide_component(self) -> ISlideComponent:
        ...

    @property
    def as_i_presentation_component(self) -> IPresentationComponent:
        ...

    @property
    def as_i_shape(self) -> IShape:
        ...

    @property
    def as_i_geometry_shape(self) -> IGeometryShape:
        ...

    ...

class PictureFrameLock(BaseShapeLock):
    '''Determines which operations are disabled on the parent PictureFrame.'''
    @property
    def no_locks(self) -> bool:
        ...

    @property
    def grouping_locked(self) -> bool:
        ...

    @grouping_locked.setter
    def grouping_locked(self, value: bool):
        ...

    @property
    def select_locked(self) -> bool:
        ...

    @select_locked.setter
    def select_locked(self, value: bool):
        ...

    @property
    def rotation_locked(self) -> bool:
        ...

    @rotation_locked.setter
    def rotation_locked(self, value: bool):
        ...

    @property
    def aspect_ratio_locked(self) -> bool:
        ...

    @aspect_ratio_locked.setter
    def aspect_ratio_locked(self, value: bool):
        ...

    @property
    def position_locked(self) -> bool:
        ...

    @position_locked.setter
    def position_locked(self, value: bool):
        ...

    @property
    def size_locked(self) -> bool:
        ...

    @size_locked.setter
    def size_locked(self, value: bool):
        ...

    @property
    def edit_points_locked(self) -> bool:
        ...

    @edit_points_locked.setter
    def edit_points_locked(self, value: bool):
        ...

    @property
    def adjust_handles_locked(self) -> bool:
        ...

    @adjust_handles_locked.setter
    def adjust_handles_locked(self, value: bool):
        ...

    @property
    def arrowheads_locked(self) -> bool:
        ...

    @arrowheads_locked.setter
    def arrowheads_locked(self, value: bool):
        ...

    @property
    def shape_type_locked(self) -> bool:
        ...

    @shape_type_locked.setter
    def shape_type_locked(self, value: bool):
        ...

    @property
    def crop_locked(self) -> bool:
        ...

    @crop_locked.setter
    def crop_locked(self, value: bool):
        ...

    @property
    def as_i_base_shape_lock(self) -> IBaseShapeLock:
        ...

    ...

class Placeholder:
    '''Represents a placeholder on a slide.'''
    @property
    def orientation(self) -> Orientation:
        '''Gets or sets the orientation of a placeholder.
                    Read-only :py:enum:`aspose.slides.Orientation`.'''
        ...

    @property
    def size(self) -> PlaceholderSize:
        '''Gets or sets the size of a placeholder.
                    Read-only :py:enum:`aspose.slides.PlaceholderSize`.'''
        ...

    @property
    def type(self) -> PlaceholderType:
        '''Gets or sets the type of a placeholder.
                    Read-only :py:enum:`aspose.slides.PlaceholderType`.'''
        ...

    @property
    def index(self) -> int:
        '''Gets or sets the index of a placeholder.
                    Read-only :py:class:`int`.'''
        ...

    ...

class Portion:
    '''Represents a portion of text inside a text paragraph.'''
    def __init__(self):
        '''Initializes a new instance of the Portion class.'''
        ...

    def __init__(self, str: str):
        '''Initializes a new instance of the Portion class.'''
        ...

    def __init__(self, portion: Portion):
        '''Initializes a new instance of the Portion class.'''
        ...

    @overload
    def add_field(self, field_type: IFieldType) -> None:
        '''Converts this portion to the automaticaly updated field.'''
        ...

    @overload
    def add_field(self, internal_string: str) -> None:
        '''Converts this portion to the automaticaly updated field.
        :param internal_string: Internal name of FieldType.'''
        ...

    def remove_field(self) -> None:
        '''Converts this field portion to the simple portion.'''
        ...

    def get_rect(self) -> aspose.pydrawing.RectangleF:
        '''Get coordinates of rect that bounds portion. The rect includes all the lines of
                     text in portion, including empty ones.'''
        ...

    def get_coordinates(self) -> aspose.pydrawing.PointF:
        '''Get coordinates of the beginning of the portion. The X coordinate of point represents the 
                    portion beginning from the first character including left side bearing. The Y coordinate 
                    includes top side bearing.'''
        ...

    @property
    def portion_format(self) -> IPortionFormat:
        ...

    @property
    def text(self) -> str:
        '''Gets or sets the plain text of a portion.
                    Read/write :py:class:`str`.'''
        ...

    @text.setter
    def text(self, value: str):
        '''Gets or sets the plain text of a portion.
                    Read/write :py:class:`str`.'''
        ...

    @property
    def field(self) -> IField:
        '''Returns a field of this portion.
                    Read-only :py:class:`aspose.slides.IField`.'''
        ...

    @property
    def as_i_slide_component(self) -> ISlideComponent:
        ...

    @property
    def slide(self) -> IBaseSlide:
        ...

    @property
    def as_i_presentation_component(self) -> IPresentationComponent:
        ...

    @property
    def presentation(self) -> IPresentation:
        ...

    ...

class PortionCollection:
    '''Represents a collection of portions.'''
    def add(self, value: IPortion) -> None:
        '''Adds a Portion to the end of collection.
        :param value: The Portion to be added to the end of the collection.'''
        ...

    def index_of(self, item: IPortion) -> int:
        '''Determines the index of a specific item in the :py:class:`System.Collections.Generic.IList`1`.
        :param item: The object to locate in the :py:class:`System.Collections.Generic.IList`1`.
        :returns: The index of ``item`` if found in the list; otherwise, -1.'''
        ...

    def insert(self, index: int, value: IPortion) -> None:
        '''Inserts a Portion into the collection at the specified index.
        :param index: The zero-based index at which Portion should be inserted.
        :param value: The Portion to insert.'''
        ...

    def clear(self) -> None:
        '''Removes all elements from the collection.'''
        ...

    def contains(self, item: IPortion) -> bool:
        '''Determines whether the :py:class:`System.Collections.Generic.ICollection`1` contains a specific value.
        :param item: The object to locate in the :py:class:`System.Collections.Generic.ICollection`1`.
        :returns: true if ``item`` is found in the :py:class:`System.Collections.Generic.ICollection`1`; otherwise, false.'''
        ...

    def copy_to(self, array: List[IPortion], array_index: int) -> None:
        '''Copies the elements of the :py:class:`System.Collections.Generic.ICollection`1` to an :py:class:`System.Array`, starting at a particular :py:class:`System.Array` index.
        :param array: The one-dimensional :py:class:`System.Array` that is the destination of the elements copied from :py:class:`System.Collections.Generic.ICollection`1`. The :py:class:`System.Array` must have zero-based indexing.
        :param array_index: The zero-based index in ``array`` at which copying begins.'''
        ...

    def remove(self, item: IPortion) -> bool:
        '''Removes the first occurrence of a specific object from the :py:class:`System.Collections.Generic.ICollection`1`.
        :param item: The object to remove from the :py:class:`System.Collections.Generic.ICollection`1`.
        :returns: true if ``item`` was successfully removed from the :py:class:`System.Collections.Generic.ICollection`1`; otherwise, false. This method also returns false if ``item`` is not found in the original :py:class:`System.Collections.Generic.ICollection`1`.'''
        ...

    def remove_at(self, index: int) -> None:
        '''Removes the element at the specified index of the collection.
        :param index: The zero-based index of the element to remove.'''
        ...

    @property
    def count(self) -> int:
        '''Gets the number of elements actually contained in the collection.
                    Read-only :py:class:`int`.'''
        ...

    @property
    def is_read_only(self) -> bool:
        ...

    @property
    def as_i_enumerable(self) -> collections.abc.Iterable:
        ...

    def __getitem__(self, key: int) -> IPortion
        ...

    def __setitem__(self, key: int, value: IPortion
        ...

    ...

class PortionFactory:
    '''Allows to create test portions'''
    def __init__(self):
        ...

    @overload
    def create_portion(self) -> IPortion:
        '''Creates an empty text portion.
        :returns: Portion.'''
        ...

    @overload
    def create_portion(self, str: str) -> IPortion:
        '''Creates a text portion from specified string.
        :param str: String.
        :returns: Portion.'''
        ...

    @overload
    def create_portion(self, portion: IPortion) -> IPortion:
        '''Creates a portion with the using of a specified portion data.
        :param portion: A portion to use.
        :returns: Portion.'''
        ...

    ...

class PortionFormat(BasePortionFormat):
    '''This class contains the text portion formatting properties. Unlike :py:class:`aspose.slides.IPortionFormatEffectiveData`, all properties of this class are writeable.'''
    def __init__(self):
        '''Initializes a new instance of :py:class:`aspose.slides.PortionFormat` class.'''
        ...

    def get_effective(self) -> IPortionFormatEffectiveData:
        '''Gets effective portion formatting data with the inheritance applied.
        :returns: A :py:class:`aspose.slides.IPortionFormatEffectiveData`.'''
        ...

    @property
    def as_i_presentation_component(self) -> IPresentationComponent:
        ...

    @property
    def line_format(self) -> ILineFormat:
        ...

    @property
    def fill_format(self) -> IFillFormat:
        ...

    @property
    def effect_format(self) -> IEffectFormat:
        ...

    @property
    def highlight_color(self) -> IColorFormat:
        ...

    @property
    def underline_line_format(self) -> ILineFormat:
        ...

    @property
    def underline_fill_format(self) -> IFillFormat:
        ...

    @property
    def font_bold(self) -> NullableBool:
        ...

    @font_bold.setter
    def font_bold(self, value: NullableBool):
        ...

    @property
    def font_italic(self) -> NullableBool:
        ...

    @font_italic.setter
    def font_italic(self, value: NullableBool):
        ...

    @property
    def kumimoji(self) -> NullableBool:
        '''Determines whether the numbers should ignore text eastern language-specific vertical text layout. No inheritance applied.
                    Read/write :py:enum:`aspose.slides.NullableBool`.'''
        ...

    @kumimoji.setter
    def kumimoji(self, value: NullableBool):
        '''Determines whether the numbers should ignore text eastern language-specific vertical text layout. No inheritance applied.
                    Read/write :py:enum:`aspose.slides.NullableBool`.'''
        ...

    @property
    def normalise_height(self) -> NullableBool:
        ...

    @normalise_height.setter
    def normalise_height(self, value: NullableBool):
        ...

    @property
    def proof_disabled(self) -> NullableBool:
        ...

    @proof_disabled.setter
    def proof_disabled(self, value: NullableBool):
        ...

    @property
    def font_underline(self) -> TextUnderlineType:
        ...

    @font_underline.setter
    def font_underline(self, value: TextUnderlineType):
        ...

    @property
    def text_cap_type(self) -> TextCapType:
        ...

    @text_cap_type.setter
    def text_cap_type(self, value: TextCapType):
        ...

    @property
    def strikethrough_type(self) -> TextStrikethroughType:
        ...

    @strikethrough_type.setter
    def strikethrough_type(self, value: TextStrikethroughType):
        ...

    @property
    def is_hard_underline_line(self) -> NullableBool:
        ...

    @is_hard_underline_line.setter
    def is_hard_underline_line(self, value: NullableBool):
        ...

    @property
    def is_hard_underline_fill(self) -> NullableBool:
        ...

    @is_hard_underline_fill.setter
    def is_hard_underline_fill(self, value: NullableBool):
        ...

    @property
    def font_height(self) -> float:
        ...

    @font_height.setter
    def font_height(self, value: float):
        ...

    @property
    def latin_font(self) -> IFontData:
        ...

    @latin_font.setter
    def latin_font(self, value: IFontData):
        ...

    @property
    def east_asian_font(self) -> IFontData:
        ...

    @east_asian_font.setter
    def east_asian_font(self, value: IFontData):
        ...

    @property
    def complex_script_font(self) -> IFontData:
        ...

    @complex_script_font.setter
    def complex_script_font(self, value: IFontData):
        ...

    @property
    def symbol_font(self) -> IFontData:
        ...

    @symbol_font.setter
    def symbol_font(self, value: IFontData):
        ...

    @property
    def escapement(self) -> float:
        '''Returns or sets the superscript or subscript text.
                    Value from -100% (subscript) to 100% (superscript).
                    **float.NaN** means value is undefined and should be inherited from the Master.
                    Read/write :py:class:`float`.'''
        ...

    @escapement.setter
    def escapement(self, value: float):
        '''Returns or sets the superscript or subscript text.
                    Value from -100% (subscript) to 100% (superscript).
                    **float.NaN** means value is undefined and should be inherited from the Master.
                    Read/write :py:class:`float`.'''
        ...

    @property
    def kerning_minimal_size(self) -> float:
        ...

    @kerning_minimal_size.setter
    def kerning_minimal_size(self, value: float):
        ...

    @property
    def language_id(self) -> str:
        ...

    @language_id.setter
    def language_id(self, value: str):
        ...

    @property
    def alternative_language_id(self) -> str:
        ...

    @alternative_language_id.setter
    def alternative_language_id(self, value: str):
        ...

    @property
    def spacing(self) -> float:
        '''Returns or sets the intercharacter spacing increment.
                    **float.NaN** means value is undefined and should be inherited from the Master.
                    Read/write :py:class:`float`.'''
        ...

    @spacing.setter
    def spacing(self, value: float):
        '''Returns or sets the intercharacter spacing increment.
                    **float.NaN** means value is undefined and should be inherited from the Master.
                    Read/write :py:class:`float`.'''
        ...

    @property
    def bookmark_id(self) -> str:
        ...

    @bookmark_id.setter
    def bookmark_id(self, value: str):
        ...

    @property
    def smart_tag_clean(self) -> bool:
        ...

    @smart_tag_clean.setter
    def smart_tag_clean(self, value: bool):
        ...

    @property
    def hyperlink_click(self) -> IHyperlink:
        ...

    @hyperlink_click.setter
    def hyperlink_click(self, value: IHyperlink):
        ...

    @property
    def hyperlink_mouse_over(self) -> IHyperlink:
        ...

    @hyperlink_mouse_over.setter
    def hyperlink_mouse_over(self, value: IHyperlink):
        ...

    @property
    def hyperlink_manager(self) -> IHyperlinkManager:
        ...

    @property
    def slide(self) -> IBaseSlide:
        ...

    @property
    def presentation(self) -> IPresentation:
        ...

    @property
    def as_i_base_portion_format(self) -> IBasePortionFormat:
        ...

    @property
    def as_i_hyperlink_container(self) -> IHyperlinkContainer:
        ...

    ...

class PptCorruptFileException(PptReadException):
    '''Exception which thrown when presentation file is probably corrupt.'''
    def __init__(self):
        '''Default constructor.'''
        ...

    def __init__(self, message: str):
        '''Constructor allowing a message to be added to this exception.
        :param message: message'''
        ...

    ...

class PptEditException(PptException):
    '''Represents an exception thrown when edit presentation error is detected.'''
    def __init__(self):
        '''Default constructor.'''
        ...

    def __init__(self, message: str):
        '''Constructor allowing a message to be added to this exception.
        :param message: message'''
        ...

    ...

class PptException:
    '''Represents a standard internal exception type.'''
    def __init__(self):
        '''Default constructor.'''
        ...

    def __init__(self, message: str):
        '''Constructor allowing a message to be added to this exception.
        :param message: message'''
        ...

    ...

class PptReadException(PptException):
    '''Represents an exception which thrown on presentation reading errors.'''
    def __init__(self):
        '''Default constructor.'''
        ...

    def __init__(self, message: str):
        '''Constructor allowing a message to be added to this exception.
        :param message: message'''
        ...

    ...

class PptUnsupportedFormatException(PptReadException):
    '''Exception which thrown when presentation file format is unsupported.'''
    def __init__(self):
        '''Default constructor.'''
        ...

    def __init__(self, message: str):
        '''Constructor allowing a message to be added to this exception.
        :param message: message'''
        ...

    ...

class PptxCorruptFileException(PptxReadException):
    def __init__(self):
        '''Default constructor.'''
        ...

    def __init__(self, message: str):
        '''Constructor allowing a message to be added to this exception.
        :param message: message'''
        ...

    ...

class PptxEditException(PptxException):
    '''Represents an exception thrown when edit presentation error is detected.'''
    def __init__(self):
        '''Default constructor.'''
        ...

    def __init__(self, message: str):
        '''Constructor allowing a message to be added to this exception.
        :param message: message'''
        ...

    ...

class PptxException(OOXMLException):
    '''Represents a standard internal exception type.'''
    def __init__(self):
        '''Default constructor.'''
        ...

    def __init__(self, message: str):
        '''Constructor allowing a message to be added to this exception.
        :param message: message'''
        ...

    ...

class PptxReadException(PptxException):
    '''Represents an exception which thrown on presentation reading errors.'''
    def __init__(self):
        '''Default constructor.'''
        ...

    def __init__(self, message: str):
        '''Constructor allowing a message to be added to this exception.
        :param message: message'''
        ...

    ...

class PptxUnsupportedFormatException(PptxReadException):
    '''Exception which thrown when presentation file format is unsupported.'''
    def __init__(self):
        '''Default constructor.'''
        ...

    def __init__(self, message: str):
        '''Constructor allowing a message to be added to this exception.
        :param message: message'''
        ...

    ...

class Presentation:
    '''Represents a Microsoft PowerPoint presentation.'''
    def __init__(self):
        '''This constructor creates new presentation from scratch.
                    Created presentation has one empty slide.'''
        ...

    def __init__(self, load_options: LoadOptions):
        '''This constructor creates new presentation from scratch.
                    Created presentation has one empty slide.
        :param load_options: Additional load options.'''
        ...

    def __init__(self, stream: io.RawIOBase):
        '''This constructor is the primary mechanism for reading an existing Presentation.
        :param stream: Input stream.'''
        ...

    def __init__(self, stream: io.RawIOBase, load_options: LoadOptions):
        '''This constructor is the primary mechanism for reading an existing Presentation.
        :param stream: Input stream.
        :param load_options: Additional load options.'''
        ...

    def __init__(self, file: str):
        '''This constructor gets a source file path from which
                     the contents of the Presentation are read.
        :param file: Input file.'''
        ...

    def __init__(self, file: str, load_options: LoadOptions):
        '''This constructor gets a source file path from which
                    the contents of the Presentation are read.
        :param file: Input file.
        :param load_options: Additional load options.'''
        ...

    @overload
    def save(self, fname: str, format: aspose.slides.export.SaveFormat) -> None:
        '''Saves all slides of a presentation to a file with the specified format.
        :param fname: Path to the created file.
        :param format: Format of the exported data.'''
        ...

    @overload
    def save(self, stream: io.RawIOBase, format: aspose.slides.export.SaveFormat) -> None:
        '''Saves all slides of a presentation to a stream in the specified format.
        :param stream: Output stream.
        :param format: Format of the exported data.'''
        ...

    @overload
    def save(self, fname: str, format: aspose.slides.export.SaveFormat, options: aspose.slides.export.ISaveOptions) -> None:
        ...

    @overload
    def save(self, stream: io.RawIOBase, format: aspose.slides.export.SaveFormat, options: aspose.slides.export.ISaveOptions) -> None:
        '''Saves all slides of a presentation to a stream in the specified format and with additional options.
        :param stream: Output stream.
        :param format: Format of the exported data.
        :param options: Additional format options.'''
        ...

    @overload
    def save(self, options: aspose.slides.export.xaml.IXamlOptions) -> None:
        '''Saves all slides of a presentation to a set of files representing XAML markup.
        :param options: The XAML format options.'''
        ...

    @overload
    def save(self, fname: str, slides: List[int], format: aspose.slides.export.SaveFormat) -> None:
        '''Saves specified slides of a presentation to a file with the specified format with page number keeping.
        :param fname: Path to the created file.
        :param slides: Array with slide positions, starting from 1.
        :param format: Format of the exported data.'''
        ...

    @overload
    def save(self, fname: str, slides: List[int], format: aspose.slides.export.SaveFormat, options: aspose.slides.export.ISaveOptions) -> None:
        '''Saves specified slides of a presentation to a file with the specified format with page number keeping.
        :param fname: Path to the created file.
        :param slides: Array with slide positions, starting from 1.
        :param format: Format of the exported data.
        :param options: Additional format options.'''
        ...

    @overload
    def save(self, stream: io.RawIOBase, slides: List[int], format: aspose.slides.export.SaveFormat) -> None:
        '''Saves specified slides of a presentation to a stream in the specified format with page number keeping.
        :param stream: Output stream.
        :param slides: Array with slide positions, starting from 1.
        :param format: Format of the exported data.'''
        ...

    @overload
    def save(self, stream: io.RawIOBase, slides: List[int], format: aspose.slides.export.SaveFormat, options: aspose.slides.export.ISaveOptions) -> None:
        '''Saves specified slides of a presentation to a stream in the specified format with page number keeping.
        :param stream: Output stream.
        :param slides: Array with slide positions, starting from 1.
        :param format: Format of the exported data.
        :param options: Additional format options.'''
        ...

    @overload
    def get_thumbnails(self, options: aspose.slides.export.IRenderingOptions) -> List[aspose.pydrawing.Bitmap]:
        '''Returns a Thumbnail Bitmap objects for all slides of a presentation.
        :param options: Tiff options.
        :returns: Bitmap objects.'''
        ...

    @overload
    def get_thumbnails(self, options: aspose.slides.export.IRenderingOptions, slides: List[int]) -> List[aspose.pydrawing.Bitmap]:
        '''Returns a Thumbnail Bitmap objects for specified slides of a presentation.
        :param options: Tiff options.
        :param slides: Array with slide positions, starting from 1.
        :returns: Bitmap objects.'''
        ...

    @overload
    def get_thumbnails(self, options: aspose.slides.export.IRenderingOptions, scale_x: float, scale_y: float) -> List[aspose.pydrawing.Bitmap]:
        '''Returns a Thumbnail Bitmap objects for all slides of a presentation with custom scaling.
        :param options: Tiff options.
        :param scale_x: The value by which to scale this Thumbnail in the x-axis direction.
        :param scale_y: The value by which to scale this Thumbnail in the y-axis direction.
        :returns: Bitmap objects.'''
        ...

    @overload
    def get_thumbnails(self, options: aspose.slides.export.IRenderingOptions, slides: List[int], scale_x: float, scale_y: float) -> List[aspose.pydrawing.Bitmap]:
        '''Returns a Thumbnail Bitmap objects for specified slides of a presentation with custom scaling.
        :param options: Tiff options.
        :param slides: Array with slide positions, starting from 1.
        :param scale_x: The value by which to scale this Thumbnail in the x-axis direction.
        :param scale_y: The value by which to scale this Thumbnail in the y-axis direction.
        :returns: Bitmap objects.'''
        ...

    @overload
    def get_thumbnails(self, options: aspose.slides.export.IRenderingOptions, image_size: aspose.pydrawing.Size) -> List[aspose.pydrawing.Bitmap]:
        '''Returns a Thumbnail Bitmap objects for all slides of a presentation with specified size.
        :param options: Tiff options.
        :param image_size: Size of the image to create.
        :returns: Bitmap objects.'''
        ...

    @overload
    def get_thumbnails(self, options: aspose.slides.export.IRenderingOptions, slides: List[int], image_size: aspose.pydrawing.Size) -> List[aspose.pydrawing.Bitmap]:
        '''Returns a Thumbnail Bitmap objects for specified slides of a presentation with specified size.
        :param options: Tiff options.
        :param slides: Array with slide positions, starting from 1.
        :param image_size: Size of the image to create.
        :returns: Bitmap objects.'''
        ...

    @overload
    def get_images(self, options: aspose.slides.export.IRenderingOptions) -> List[IImage]:
        '''Returns a Image objects for all slides of a presentation.
        :param options: Tiff options.
        :returns: Image objects.'''
        ...

    @overload
    def get_images(self, options: aspose.slides.export.IRenderingOptions, slides: List[int]) -> List[IImage]:
        '''Returns a Thumbnail Image objects for specified slides of a presentation.
        :param options: Tiff options.
        :param slides: Array with slide positions, starting from 1.
        :returns: Image objects.'''
        ...

    @overload
    def get_images(self, options: aspose.slides.export.IRenderingOptions, scale_x: float, scale_y: float) -> List[IImage]:
        '''Returns a Thumbnail Image objects for all slides of a presentation with custom scaling.
        :param options: Tiff options.
        :param scale_x: The value by which to scale this Thumbnail in the x-axis direction.
        :param scale_y: The value by which to scale this Thumbnail in the y-axis direction.
        :returns: Image objects.'''
        ...

    @overload
    def get_images(self, options: aspose.slides.export.IRenderingOptions, slides: List[int], scale_x: float, scale_y: float) -> List[IImage]:
        '''Returns a Thumbnail Image objects for specified slides of a presentation with custom scaling.
        :param options: Tiff options.
        :param slides: Array with slide positions, starting from 1.
        :param scale_x: The value by which to scale this Thumbnail in the x-axis direction.
        :param scale_y: The value by which to scale this Thumbnail in the y-axis direction.
        :returns: Image objects.'''
        ...

    @overload
    def get_images(self, options: aspose.slides.export.IRenderingOptions, image_size: aspose.pydrawing.Size) -> List[IImage]:
        '''Returns a Thumbnail Image objects for all slides of a presentation with specified size.
        :param options: Tiff options.
        :param image_size: Size of the image to create.
        :returns: Image objects.'''
        ...

    @overload
    def get_images(self, options: aspose.slides.export.IRenderingOptions, slides: List[int], image_size: aspose.pydrawing.Size) -> List[IImage]:
        '''Returns a Thumbnail Image objects for specified slides of a presentation with specified size.
        :param options: Tiff options.
        :param slides: Array with slide positions, starting from 1.
        :param image_size: Size of the image to create.
        :returns: Image objects.'''
        ...

    @overload
    def print(self) -> None:
        '''Prints the whole presentation to the default printer.'''
        ...

    @overload
    def print(self, printer_settings: aspose.pydrawing.Printing.PrinterSettings) -> None:
        '''Prints the presentation according to the specified printer settings,
                    using the standard (no User Interface) print controller.
        :param printer_settings: The .NET printer settings to use.'''
        ...

    @overload
    def print(self, printer_name: str) -> None:
        '''Print the whole presentation to the specified printer,
                    using the standard (no User Interface) print controller.
        :param printer_name: The name of the printer.'''
        ...

    @overload
    def print(self, printer_settings: aspose.pydrawing.Printing.PrinterSettings, pres_name: str) -> None:
        '''Prints the document according to the specified printer settings, using
                    the standard (no User Interface) print controller and a presentation name.
        :param printer_settings: The .NET printer settings to use.
        :param pres_name: The presentation name to display (for example, in a print
                    status dialog box or printer queue) while printing the presentation.'''
        ...

    @overload
    def highlight_text(self, text: str, highlight_color: aspose.pydrawing.Color) -> None:
        '''Highlights all matches of the sample text with the specified color.
        :param text: The text to highlight.
        :param highlight_color: The color to highlight the text.'''
        ...

    @overload
    def highlight_text(self, text: str, highlight_color: aspose.pydrawing.Color, options: ITextSearchOptions, callback: IFindResultCallback) -> None:
        '''Highlights all matches of the sample text with the specified color.
        :param text: The text to highlight.
        :param highlight_color: The color to highlight the text.
        :param options: Text search options :py:class:`aspose.slides.ITextSearchOptions`.
        :param callback: The callback object for receiving search results :py:class:`aspose.slides.IFindResultCallback`.'''
        ...

    def get_slide_by_id(self, id: int) -> IBaseSlide:
        '''Returns a Slide, MasterSlide or LayoutSlide by Id.
        :param id: Id of a slide.
        :returns: IBaseSlide object.'''
        ...

    def join_portions_with_same_formatting(self) -> None:
        '''Joins runs with same formatting in all paragraphs in all acceptable shapes in all slides.'''
        ...

    def highlight_regex(self, regex: str, highlight_color: aspose.pydrawing.Color) -> None:
        '''Highlights all matches of the regular expression with the specified color.
        :param regex: The string contains regular expression to get strings to highlight.
        :param highlight_color: The color to highlight the text.'''
        ...

    def replace_text(self, old_text: str, new_text: str, options: ITextSearchOptions, callback: IFindResultCallback) -> None:
        '''Replaces all occurrences of the specified text with another specified text.
        :param old_text: The string to be replaced.
        :param new_text: The string to replace all occurrences of oldText.
        :param options: Text search options :py:class:`aspose.slides.ITextSearchOptions`.
        :param callback: The callback object for receiving search results :py:class:`aspose.slides.IFindResultCallback`.'''
        ...

    def replace_regex(self, regex: str, new_text: str) -> None:
        '''Replaces all matches of the regular expression with the specified string.
        :param regex: The string contains regular expression to get strings to replace.
        :param new_text: The string to replace all occurrences of the strings to be replaced.'''
        ...

    @property
    def current_date_time(self) -> DateTime:
        ...

    @current_date_time.setter
    def current_date_time(self, value: DateTime):
        ...

    @property
    def header_footer_manager(self) -> IPresentationHeaderFooterManager:
        ...

    @property
    def protection_manager(self) -> IProtectionManager:
        ...

    @property
    def slides(self) -> ISlideCollection:
        '''Returns a list of all slides that are defined in the presentation.
                    Read-only :py:class:`aspose.slides.ISlideCollection`.'''
        ...

    @property
    def sections(self) -> ISectionCollection:
        '''Returns a list of all slides sections that are defined in the presentation.
                    Read-only :py:class:`aspose.slides.ISectionCollection`.'''
        ...

    @property
    def slide_size(self) -> ISlideSize:
        ...

    @property
    def notes_size(self) -> INotesSize:
        ...

    @property
    def layout_slides(self) -> IGlobalLayoutSlideCollection:
        ...

    @property
    def masters(self) -> IMasterSlideCollection:
        '''Returns a list of all master slides that are defined in the presentation.
                    Read-only :py:class:`aspose.slides.IMasterSlideCollection`.'''
        ...

    @property
    def master_notes_slide_manager(self) -> IMasterNotesSlideManager:
        ...

    @property
    def master_handout_slide_manager(self) -> IMasterHandoutSlideManager:
        ...

    @property
    def fonts_manager(self) -> IFontsManager:
        ...

    @property
    def default_text_style(self) -> ITextStyle:
        ...

    @property
    def comment_authors(self) -> ICommentAuthorCollection:
        ...

    @property
    def document_properties(self) -> IDocumentProperties:
        ...

    @property
    def images(self) -> IImageCollection:
        '''Returns the collection of all images in the presentation.
                    Read-only :py:class:`aspose.slides.IImageCollection`.'''
        ...

    @property
    def audios(self) -> IAudioCollection:
        '''Returns the collection of all embedded audio files in the presentation.
                    Read-only :py:class:`aspose.slides.IAudioCollection`.'''
        ...

    @property
    def videos(self) -> IVideoCollection:
        '''Returns the collection of all embedded video files in the presentation.
                    Read-only :py:class:`aspose.slides.IVideoCollection`.'''
        ...

    @property
    def slide_show_settings(self) -> SlideShowSettings:
        ...

    @property
    def digital_signatures(self) -> IDigitalSignatureCollection:
        ...

    @property
    def custom_data(self) -> ICustomData:
        ...

    @property
    def all_custom_xml_parts(self) -> List[ICustomXmlPart]:
        ...

    @property
    def vba_project(self) -> aspose.slides.vba.IVbaProject:
        ...

    @vba_project.setter
    def vba_project(self, value: aspose.slides.vba.IVbaProject):
        ...

    @property
    def hyperlink_queries(self) -> IHyperlinkQueries:
        ...

    @property
    def view_properties(self) -> IViewProperties:
        ...

    @property
    def first_slide_number(self) -> int:
        ...

    @first_slide_number.setter
    def first_slide_number(self, value: int):
        ...

    @property
    def source_format(self) -> SourceFormat:
        ...

    @property
    def master_theme(self) -> aspose.slides.theme.IMasterTheme:
        ...

    @property
    def as_i_disposable(self) -> IDisposable:
        ...

    @property
    def as_i_presentation_component(self) -> IPresentationComponent:
        ...

    @property
    def presentation(self) -> IPresentation:
        ...

    ...

class PresentationFactory:
    '''Allows to create presentation via COM interface'''
    def __init__(self):
        ...

    @overload
    def create_presentation(self) -> IPresentation:
        '''Creates new presentation.
        :returns: New presentation'''
        ...

    @overload
    def create_presentation(self, options: ILoadOptions) -> IPresentation:
        '''Creates new presentation with additional load options
        :param options: Load options
        :returns: New presentation'''
        ...

    @overload
    def get_presentation_info(self, file: str) -> IPresentationInfo:
        '''Creates new PresentationInfo object from file and binds presentation to it.
        :param file: Presentation file.
        :returns: Presentation info binded to presentation.'''
        ...

    @overload
    def get_presentation_info(self, stream: io.RawIOBase) -> IPresentationInfo:
        '''Creates new PresentationInfo object from stream and binds presentation to it.
                    Gets info about presentation in specified stream.
        :param stream: Presentation stream.
        :returns: Presentation info binded to presentation.'''
        ...

    @overload
    def read_presentation(self, data: bytes) -> IPresentation:
        '''Reads an existing presentation from array
        :param data: Array to read
        :returns: Read presentation'''
        ...

    @overload
    def read_presentation(self, data: bytes, options: ILoadOptions) -> IPresentation:
        '''Reads an existing presentation from array with additional load options
        :param data: Array to read
        :param options: Load options
        :returns: Read presentation'''
        ...

    @overload
    def read_presentation(self, stream: io.RawIOBase) -> IPresentation:
        '''Reads an existing presentation from stream
        :param stream: Input stream to read
        :returns: Read presentation'''
        ...

    @overload
    def read_presentation(self, stream: io.RawIOBase, options: ILoadOptions) -> IPresentation:
        '''Reads an existing presentation from stream with additional load options
        :param stream: Input stream to read
        :param options: Load options
        :returns: Read presentation'''
        ...

    @overload
    def read_presentation(self, file: str) -> IPresentation:
        '''Reads an existing presentation from file
        :param file: File name
        :returns: Read presentation'''
        ...

    @overload
    def read_presentation(self, file: str, options: ILoadOptions) -> IPresentation:
        '''Reads an existing presentation from stream with additional load options
        :param file: File name
        :param options: Load options
        :returns: Read presentation'''
        ...

    @overload
    def get_presentation_text(self, file: str, mode: TextExtractionArrangingMode) -> IPresentationText:
        '''Retrieves the raw text from the slides
        :param file: Input file
        :param mode: Extraction mode
        :returns: The instance of PresentationText containing the SlideText array representing the raw slides text'''
        ...

    @overload
    def get_presentation_text(self, stream: io.RawIOBase, mode: TextExtractionArrangingMode) -> IPresentationText:
        '''Retrieves the raw text from the slides
        :param stream: Input stream
        :param mode: Extraction mode
        :returns: The instance of PresentationText containing the SlideText array representing the raw slides text'''
        ...

    @overload
    def get_presentation_text(self, stream: io.RawIOBase, mode: TextExtractionArrangingMode, options: ILoadOptions) -> IPresentationText:
        '''Retrieves the raw text from the slides
        :param stream: Input stream
        :param mode: Extraction mode
        :param options: Load options
        :returns: The instance of PresentationText containing the SlideText array representing the raw slides text'''
        ...

    @classmethod
    @property
    def instance(cls) -> PresentationFactory:
        '''Presentation factory static instance.
                    Read-only :py:class:`aspose.slides.PresentationFactory`.'''
        ...

    ...

class PresentationHeaderFooterManager(BaseHeaderFooterManager):
    '''Represents manager which holds behavior of all footer, date-time and page number placeholders of presentation.'''
    def set_all_headers_visibility(self, is_visible: bool) -> None:
        '''Changes all header placeholders visibility, including notes master, notes slides and handout master.
        :param is_visible: true - makes a header placeholders visible, otherwise - hides them.'''
        ...

    def set_all_footers_visibility(self, is_visible: bool) -> None:
        '''Changes all footer placeholders visibility, including master slides, layout slides, slides, 
                    notes master, notes slides and handout master.
        :param is_visible: true - makes a footer placeholders visible, otherwise - hides them.'''
        ...

    def set_all_slide_numbers_visibility(self, is_visible: bool) -> None:
        '''Changes all page number placeholders visibility, including master slides, layout slides, slides, 
                    notes master, notes slides and handout master.
        :param is_visible: true - makes a page number placeholders visible, otherwise - hides them.'''
        ...

    def set_all_date_times_visibility(self, is_visible: bool) -> None:
        '''Changes all date-time placeholders visibility, including master slides, layout slides, slides, 
                    notes master, notes slides and handout master.
        :param is_visible: true - makes a date-time placeholders visible, otherwise - hides them.'''
        ...

    def set_all_headers_text(self, text: str) -> None:
        '''Sets text to all header placeholders, including notes master, notes slides and handout master.
        :param text: Text to set.'''
        ...

    def set_all_footers_text(self, text: str) -> None:
        '''Sets text to all footer placeholders, including master slides, layout slides, slides, 
                    notes master, notes slides and handout master.
        :param text: Text to set.'''
        ...

    def set_all_date_times_text(self, text: str) -> None:
        '''Sets text to all date-time placeholders, including master slides, layout slides, slides, 
                    notes master, notes slides and handout master.
        :param text: Text to set.'''
        ...

    def set_visibility_on_all_title_slides(self, is_visible: bool) -> None:
        '''Changes the footer, date-time and page number placeholders visibility for all title slides and for first layout slide.
                    Title slides – slides based on first layout slide (regardless of type of this first layout).
        :param is_visible: true - makes a placeholders visible, otherwise - hides them.'''
        ...

    @property
    def as_i_base_header_footer_manager(self) -> IBaseHeaderFooterManager:
        ...

    ...

class PresentationInfo:
    '''Information about presentation file'''
    @overload
    def write_binded_presentation(self, stream: io.RawIOBase) -> None:
        '''Writes binded presentation to stream.
        :param stream: The stream must be seekable and writable.'''
        ...

    @overload
    def write_binded_presentation(self, file: str) -> None:
        '''Writes binded presentation to file.
        :param file: Presentation file.'''
        ...

    def check_password(self, password: str) -> bool:
        '''Checks whether a password is correct for a presentation protected with open password.
        :param password: The password to check.
        :returns: True if the presentation is protected with open password and the password is correct and false otherwise.'''
        ...

    def check_write_protection(self, password: str) -> bool:
        '''Checks whether a password to modify is correct for a write protected presentation.
        :param password: The password to check.
        :returns: True if the presentation is write protected and the password is correct. False otherwise.'''
        ...

    def read_document_properties(self) -> IDocumentProperties:
        '''Gets document properties of binded presentation.'''
        ...

    def update_document_properties(self, document_properties: IDocumentProperties) -> None:
        '''Updates properties of binded presentation.'''
        ...

    @property
    def is_encrypted(self) -> bool:
        ...

    @property
    def is_password_protected(self) -> bool:
        ...

    @property
    def is_write_protected(self) -> NullableBool:
        ...

    @property
    def load_format(self) -> LoadFormat:
        ...

    ...

class PresentationText:
    '''Represents the text extracted from the presentation'''
    @property
    def slides_text(self) -> List[ISlideText]:
        ...

    ...

class PresentedBySpeaker(SlideShowType):
    '''Presented by a speaker (full screen)'''
    def __init__(self):
        '''Initializes a new instance of the PresentedBySpeaker class.'''
        ...

    ...

class ProtectionManager:
    '''Presentation password protection management.'''
    def encrypt(self, encryption_password: str) -> None:
        '''Encrypts Presentation with specified password.
        :param encryption_password: The password.'''
        ...

    def remove_encryption(self) -> None:
        '''Removes the encryption.'''
        ...

    def set_write_protection(self, password: str) -> None:
        '''Set write protection for this presentation with specified password.
        :param password: The password.'''
        ...

    def remove_write_protection(self) -> None:
        '''Removes write protection for this presentation.'''
        ...

    def check_write_protection(self, password: str) -> bool:
        '''Determines whether a presentation is a password protected to modify.
        :param password: The password for checking.
        :returns: True if the password is valid; otherwise, false.'''
        ...

    @property
    def encrypt_document_properties(self) -> bool:
        ...

    @encrypt_document_properties.setter
    def encrypt_document_properties(self, value: bool):
        ...

    @property
    def is_encrypted(self) -> bool:
        ...

    @property
    def is_only_document_properties_loaded(self) -> bool:
        ...

    @property
    def is_write_protected(self) -> bool:
        ...

    @property
    def encryption_password(self) -> str:
        ...

    @property
    def read_only_recommended(self) -> bool:
        ...

    @read_only_recommended.setter
    def read_only_recommended(self, value: bool):
        ...

    ...

class Row(CellCollection):
    '''Represents a row in a table.'''
    @overload
    def set_text_format(self, source: IPortionFormat) -> None:
        '''Sets defined portion format properties to all row cells' portions.
        :param source: IPortionFormat object with necessary properties set.'''
        ...

    @overload
    def set_text_format(self, source: IParagraphFormat) -> None:
        '''Sets defined paragraph format properties to all row cells' paragraphs.
        :param source: IParagraphFormat object with necessary properties set.'''
        ...

    @overload
    def set_text_format(self, source: ITextFrameFormat) -> None:
        '''Sets defined text frame format properties to all row cells' text frames.
        :param source: ITextFrameFormat object with necessary properties set.'''
        ...

    @property
    def slide(self) -> IBaseSlide:
        '''Returns the parent slide of a CellCollection.
                    Read-only :py:class:`aspose.slides.IBaseSlide`.'''
        ...

    @property
    def presentation(self) -> IPresentation:
        '''Returns the parent presentation of a CellCollection.
                    Read-only :py:class:`aspose.slides.IPresentation`.'''
        ...

    @property
    def height(self) -> float:
        '''Returns the height of a row.
                    Read-only :py:class:`float`.'''
        ...

    @property
    def minimal_height(self) -> float:
        ...

    @minimal_height.setter
    def minimal_height(self, value: float):
        ...

    @property
    def row_format(self) -> IRowFormat:
        ...

    @property
    def as_i_slide_component(self) -> ISlideComponent:
        ...

    @property
    def as_i_presentation_component(self) -> IPresentationComponent:
        ...

    @property
    def as_i_collection(self) -> list:
        ...

    @property
    def as_i_enumerable(self) -> collections.abc.Iterable:
        ...

    @property
    def as_i_cell_collection(self) -> ICellCollection:
        ...

    @property
    def as_i_bulk_text_formattable(self) -> IBulkTextFormattable:
        ...

    def __getitem__(self, key: int) -> ICell
        ...

    ...

class RowCollection:
    '''Represents table row collection.'''
    def add_clone(self, templ: IRow, with_attached_rows: bool) -> List[IRow]:
        '''Creates a copy of the specified template row and inserts it at the bottom of a table.
        :param templ: Row which is used as a template.
        :param with_attached_rows: True to copy also all rows attached to the template row.
        :returns: Added rows.'''
        ...

    def insert_clone(self, index: int, templ: IRow, with_attached_rows: bool) -> List[IRow]:
        '''Creates a copy of the specified template row and insert it at the specified position in a table.
        :param index: Index of a new row.
        :param templ: Row which is used as a template.
        :param with_attached_rows: True to copy also all rows attached to the template row.
        :returns: Inserted rows.'''
        ...

    def remove_at(self, first_row_index: int, with_attached_rows: bool) -> None:
        '''Removes a row at the specified position from a table.
        :param first_row_index: Index of a row to delete.
        :param with_attached_rows: True to delete also all attached rows.'''
        ...

    @property
    def as_i_collection(self) -> list:
        ...

    @property
    def as_i_enumerable(self) -> collections.abc.Iterable:
        ...

    def __getitem__(self, key: int) -> IRow
        ...

    ...

class RowFormat:
    '''Represents format of a table row.'''
    def get_effective(self) -> IRowFormatEffectiveData:
        '''Gets effective table row formatting properties with inheritance and table styles applied.
        :returns: A :py:class:`aspose.slides.IRowFormatEffectiveData`.'''
        ...

    ...

class Section:
    '''Represents section of slides.'''
    def get_slides_list_of_section(self) -> ISectionSlideCollection:
        '''Returns list of slides in the section.
        :returns: List of slides.'''
        ...

    @property
    def name(self) -> str:
        '''Name of the section.'''
        ...

    @name.setter
    def name(self, value: str):
        '''Name of the section.'''
        ...

    @property
    def section_id(self) -> Guid:
        ...

    @property
    def started_from_slide(self) -> ISlide:
        ...

    ...

class SectionCollection:
    '''Represents a collection of sections.'''
    def add_section(self, name: str, started_from_slide: ISlide) -> ISection:
        '''Add slides section started form specific slide.
        :param name: Name of the section
        :param started_from_slide: First slide of section
        :returns: Added section.'''
        ...

    def append_empty_section(self, name: str) -> ISection:
        '''Add empty section to the end of the collection.
        :param name: Name of the section
        :returns: Added section.'''
        ...

    def add_empty_section(self, name: str, index: int) -> ISection:
        '''Add empty section to specified position of the collection.
        :param name: Name of the section
        :param index: Index of new section.
        :returns: Added section.'''
        ...

    def index_of(self, section: ISection) -> int:
        '''Returns an index of the specified section in the collection.
        :param section: Section to find.
        :returns: Index of a section or -1 if section not from this collection.'''
        ...

    def remove_section_with_slides(self, section: ISection) -> None:
        '''Remove section and slides contained in the section.
        :param section: The section to remove from the collection.'''
        ...

    def remove_section(self, section: ISection) -> None:
        '''Remove section. Slides contained in the section will be merged into previous section.
        :param section: The section to remove from the collection.'''
        ...

    def reorder_section_with_slides(self, section: ISection, index: int) -> None:
        '''Moves section and its slides from the collection to the specified position.
        :param index: Target index.
        :param section: Section to move.'''
        ...

    def clear(self) -> None:
        '''Removes all sections from the collection.'''
        ...

    @property
    def as_i_collection(self) -> list:
        ...

    @property
    def as_i_enumerable(self) -> collections.abc.Iterable:
        ...

    def __getitem__(self, key: int) -> ISection
        ...

    ...

class SectionSlideCollection:
    '''Represents a collection of slides in the section.'''
    @property
    def as_i_collection(self) -> list:
        ...

    @property
    def as_i_enumerable(self) -> collections.abc.Iterable:
        ...

    def __getitem__(self, key: int) -> ISlide
        ...

    ...

class SectionZoomFrame(ZoomObject):
    '''Represents a Section Zoom object in a slide.'''
    @overload
    def get_thumbnail(self) -> aspose.pydrawing.Bitmap:
        '''Returns shape thumbnail.
                    ShapeThumbnailBounds.Shape shape thumbnail bounds type is used by default.
        :returns: Shape thumbnail.'''
        ...

    @overload
    def get_thumbnail(self, bounds: ShapeThumbnailBounds, scale_x: float, scale_y: float) -> aspose.pydrawing.Bitmap:
        '''Returns shape thumbnail.
        :param bounds: Shape thumbnail bounds type.
        :param scale_x: X scale
        :param scale_y: Y scale
        :returns: Shape thumbnail or None in case when ShapeThumbnailBounds.Appearance is used and a shape doesn't have visible elements.'''
        ...

    @overload
    def get_image(self) -> IImage:
        '''Returns shape thumbnail.
                    ShapeThumbnailBounds.Shape shape thumbnail bounds type is used by default.
        :returns: Shape thumbnail.'''
        ...

    @overload
    def get_image(self, bounds: ShapeThumbnailBounds, scale_x: float, scale_y: float) -> IImage:
        '''Returns shape thumbnail.
        :param bounds: Shape thumbnail bounds type.
        :param scale_x: X scale
        :param scale_y: Y scale
        :returns: Shape thumbnail or None in case when ShapeThumbnailBounds.Appearance is used and a shape doesn't have visible elements.'''
        ...

    @overload
    def write_as_svg(self, stream: io.RawIOBase) -> None:
        '''Saves content of Shape as SVG file.
        :param stream: Target stream'''
        ...

    @overload
    def write_as_svg(self, stream: io.RawIOBase, svg_options: aspose.slides.export.ISVGOptions) -> None:
        '''Saves content of Shape as SVG file.
        :param stream: Target stream
        :param svg_options: SVG generation options'''
        ...

    def remove_placeholder(self) -> None:
        '''Defines that this shape isn't a placeholder.'''
        ...

    def add_placeholder(self, placeholder_to_copy_from: IPlaceholder) -> IPlaceholder:
        '''Adds a new placeholder if there is no and sets placeholder properties to a specified one.
        :param placeholder_to_copy_from: Placeholder to copy content from.
        :returns: New :py:attr:`aspose.slides.Shape.placeholder`.'''
        ...

    def get_base_placeholder(self) -> IShape:
        '''Returns a basic placeholder shape (shape from the layout and/or master slide that the current shape is inherited from).'''
        ...

    @property
    def is_text_holder(self) -> bool:
        ...

    @property
    def placeholder(self) -> IPlaceholder:
        '''Returns the placeholder for a shape. Returns None if the shape has no placeholder.
                    Read-only :py:class:`aspose.slides.IPlaceholder`.'''
        ...

    @property
    def custom_data(self) -> ICustomData:
        ...

    @property
    def raw_frame(self) -> IShapeFrame:
        ...

    @raw_frame.setter
    def raw_frame(self, value: IShapeFrame):
        ...

    @property
    def frame(self) -> IShapeFrame:
        '''Returns or sets the shape frame's properties.
                    Read/write :py:class:`aspose.slides.IShapeFrame`.'''
        ...

    @frame.setter
    def frame(self, value: IShapeFrame):
        '''Returns or sets the shape frame's properties.
                    Read/write :py:class:`aspose.slides.IShapeFrame`.'''
        ...

    @property
    def line_format(self) -> ILineFormat:
        ...

    @property
    def three_d_format(self) -> IThreeDFormat:
        ...

    @property
    def effect_format(self) -> IEffectFormat:
        ...

    @property
    def fill_format(self) -> IFillFormat:
        ...

    @property
    def hyperlink_click(self) -> IHyperlink:
        ...

    @hyperlink_click.setter
    def hyperlink_click(self, value: IHyperlink):
        ...

    @property
    def hyperlink_mouse_over(self) -> IHyperlink:
        ...

    @hyperlink_mouse_over.setter
    def hyperlink_mouse_over(self, value: IHyperlink):
        ...

    @property
    def hyperlink_manager(self) -> IHyperlinkManager:
        ...

    @property
    def hidden(self) -> bool:
        '''Determines whether the shape is hidden.
                    Read/write :py:class:`bool`.'''
        ...

    @hidden.setter
    def hidden(self, value: bool):
        '''Determines whether the shape is hidden.
                    Read/write :py:class:`bool`.'''
        ...

    @property
    def z_order_position(self) -> int:
        ...

    @property
    def connection_site_count(self) -> int:
        ...

    @property
    def rotation(self) -> float:
        '''Returns or sets the number of degrees the specified shape is rotated around
                    the z-axis. A positive value indicates clockwise rotation; a negative value
                    indicates counterclockwise rotation.
                    Read/write :py:class:`float`.'''
        ...

    @rotation.setter
    def rotation(self, value: float):
        '''Returns or sets the number of degrees the specified shape is rotated around
                    the z-axis. A positive value indicates clockwise rotation; a negative value
                    indicates counterclockwise rotation.
                    Read/write :py:class:`float`.'''
        ...

    @property
    def x(self) -> float:
        '''Returns or sets the x-coordinate of the upper-left corner of the shape.
                    Read/write :py:class:`float`.'''
        ...

    @x.setter
    def x(self, value: float):
        '''Returns or sets the x-coordinate of the upper-left corner of the shape.
                    Read/write :py:class:`float`.'''
        ...

    @property
    def y(self) -> float:
        '''Returns or sets the y-coordinate of the upper-left corner of the shape.
                    Read/write :py:class:`float`.'''
        ...

    @y.setter
    def y(self, value: float):
        '''Returns or sets the y-coordinate of the upper-left corner of the shape.
                    Read/write :py:class:`float`.'''
        ...

    @property
    def width(self) -> float:
        '''Returns or sets the width of the shape.
                    Read/write :py:class:`float`.'''
        ...

    @width.setter
    def width(self, value: float):
        '''Returns or sets the width of the shape.
                    Read/write :py:class:`float`.'''
        ...

    @property
    def height(self) -> float:
        '''Returns or sets the height of the shape.
                    Read/write :py:class:`float`.'''
        ...

    @height.setter
    def height(self, value: float):
        '''Returns or sets the height of the shape.
                    Read/write :py:class:`float`.'''
        ...

    @property
    def black_white_mode(self) -> BlackWhiteMode:
        ...

    @black_white_mode.setter
    def black_white_mode(self, value: BlackWhiteMode):
        ...

    @property
    def unique_id(self) -> int:
        ...

    @property
    def office_interop_shape_id(self) -> int:
        ...

    @property
    def alternative_text(self) -> str:
        ...

    @alternative_text.setter
    def alternative_text(self, value: str):
        ...

    @property
    def alternative_text_title(self) -> str:
        ...

    @alternative_text_title.setter
    def alternative_text_title(self, value: str):
        ...

    @property
    def name(self) -> str:
        '''Returns or sets the name of a shape.
                    Must be not None. Use empty string value if needed.
                    Read/write :py:class:`str`.'''
        ...

    @name.setter
    def name(self, value: str):
        '''Returns or sets the name of a shape.
                    Must be not None. Use empty string value if needed.
                    Read/write :py:class:`str`.'''
        ...

    @property
    def is_decorative(self) -> bool:
        ...

    @is_decorative.setter
    def is_decorative(self, value: bool):
        ...

    @property
    def shape_lock(self) -> IGraphicalObjectLock:
        ...

    @property
    def is_grouped(self) -> bool:
        ...

    @property
    def parent_group(self) -> IGroupShape:
        ...

    @property
    def slide(self) -> IBaseSlide:
        '''Returns the parent slide of a shape.
                    Read-only :py:class:`aspose.slides.IBaseSlide`.'''
        ...

    @property
    def presentation(self) -> IPresentation:
        '''Returns the parent presentation of a slide.
                    Read-only :py:class:`aspose.slides.IPresentation`.'''
        ...

    @property
    def graphical_object_lock(self) -> IGraphicalObjectLock:
        ...

    @property
    def image_type(self) -> ZoomImageType:
        ...

    @image_type.setter
    def image_type(self, value: ZoomImageType):
        ...

    @property
    def return_to_parent(self) -> bool:
        ...

    @return_to_parent.setter
    def return_to_parent(self, value: bool):
        ...

    @property
    def show_background(self) -> bool:
        ...

    @show_background.setter
    def show_background(self, value: bool):
        ...

    @property
    def zoom_image(self) -> IPPImage:
        ...

    @zoom_image.setter
    def zoom_image(self, value: IPPImage):
        ...

    @property
    def transition_duration(self) -> float:
        ...

    @transition_duration.setter
    def transition_duration(self, value: float):
        ...

    @property
    def target_section(self) -> ISection:
        ...

    @target_section.setter
    def target_section(self, value: ISection):
        ...

    @property
    def as_i_hyperlink_container(self) -> IHyperlinkContainer:
        ...

    @property
    def as_i_slide_component(self) -> ISlideComponent:
        ...

    @property
    def as_i_presentation_component(self) -> IPresentationComponent:
        ...

    @property
    def as_i_shape(self) -> IShape:
        ...

    @property
    def as_i_graphical_object(self) -> IGraphicalObject:
        ...

    @property
    def as_i_zoom_object(self) -> IZoomObject:
        ...

    ...

class Shape:
    '''Represents a shape on a slide.'''
    @overload
    def get_thumbnail(self) -> aspose.pydrawing.Bitmap:
        '''Returns shape thumbnail.
                    ShapeThumbnailBounds.Shape shape thumbnail bounds type is used by default.
        :returns: Shape thumbnail.'''
        ...

    @overload
    def get_thumbnail(self, bounds: ShapeThumbnailBounds, scale_x: float, scale_y: float) -> aspose.pydrawing.Bitmap:
        '''Returns shape thumbnail.
        :param bounds: Shape thumbnail bounds type.
        :param scale_x: X scale
        :param scale_y: Y scale
        :returns: Shape thumbnail or None in case when ShapeThumbnailBounds.Appearance is used and a shape doesn't have visible elements.'''
        ...

    @overload
    def get_image(self) -> IImage:
        '''Returns shape thumbnail.
                    ShapeThumbnailBounds.Shape shape thumbnail bounds type is used by default.
        :returns: Shape thumbnail.'''
        ...

    @overload
    def get_image(self, bounds: ShapeThumbnailBounds, scale_x: float, scale_y: float) -> IImage:
        '''Returns shape thumbnail.
        :param bounds: Shape thumbnail bounds type.
        :param scale_x: X scale
        :param scale_y: Y scale
        :returns: Shape thumbnail or None in case when ShapeThumbnailBounds.Appearance is used and a shape doesn't have visible elements.'''
        ...

    @overload
    def write_as_svg(self, stream: io.RawIOBase) -> None:
        '''Saves content of Shape as SVG file.
        :param stream: Target stream'''
        ...

    @overload
    def write_as_svg(self, stream: io.RawIOBase, svg_options: aspose.slides.export.ISVGOptions) -> None:
        '''Saves content of Shape as SVG file.
        :param stream: Target stream
        :param svg_options: SVG generation options'''
        ...

    def remove_placeholder(self) -> None:
        '''Defines that this shape isn't a placeholder.'''
        ...

    def add_placeholder(self, placeholder_to_copy_from: IPlaceholder) -> IPlaceholder:
        '''Adds a new placeholder if there is no and sets placeholder properties to a specified one.
        :param placeholder_to_copy_from: Placeholder to copy content from.
        :returns: New :py:attr:`aspose.slides.Shape.placeholder`.'''
        ...

    def get_base_placeholder(self) -> IShape:
        '''Returns a basic placeholder shape (shape from the layout and/or master slide that the current shape is inherited from).'''
        ...

    @property
    def is_text_holder(self) -> bool:
        ...

    @property
    def placeholder(self) -> IPlaceholder:
        '''Returns the placeholder for a shape. Returns None if the shape has no placeholder.
                    Read-only :py:class:`aspose.slides.IPlaceholder`.'''
        ...

    @property
    def custom_data(self) -> ICustomData:
        ...

    @property
    def raw_frame(self) -> IShapeFrame:
        ...

    @raw_frame.setter
    def raw_frame(self, value: IShapeFrame):
        ...

    @property
    def frame(self) -> IShapeFrame:
        '''Returns or sets the shape frame's properties.
                    Read/write :py:class:`aspose.slides.IShapeFrame`.'''
        ...

    @frame.setter
    def frame(self, value: IShapeFrame):
        '''Returns or sets the shape frame's properties.
                    Read/write :py:class:`aspose.slides.IShapeFrame`.'''
        ...

    @property
    def line_format(self) -> ILineFormat:
        ...

    @property
    def three_d_format(self) -> IThreeDFormat:
        ...

    @property
    def effect_format(self) -> IEffectFormat:
        ...

    @property
    def fill_format(self) -> IFillFormat:
        ...

    @property
    def hyperlink_click(self) -> IHyperlink:
        ...

    @hyperlink_click.setter
    def hyperlink_click(self, value: IHyperlink):
        ...

    @property
    def hyperlink_mouse_over(self) -> IHyperlink:
        ...

    @hyperlink_mouse_over.setter
    def hyperlink_mouse_over(self, value: IHyperlink):
        ...

    @property
    def hyperlink_manager(self) -> IHyperlinkManager:
        ...

    @property
    def hidden(self) -> bool:
        '''Determines whether the shape is hidden.
                    Read/write :py:class:`bool`.'''
        ...

    @hidden.setter
    def hidden(self, value: bool):
        '''Determines whether the shape is hidden.
                    Read/write :py:class:`bool`.'''
        ...

    @property
    def z_order_position(self) -> int:
        ...

    @property
    def connection_site_count(self) -> int:
        ...

    @property
    def rotation(self) -> float:
        '''Returns or sets the number of degrees the specified shape is rotated around
                    the z-axis. A positive value indicates clockwise rotation; a negative value
                    indicates counterclockwise rotation.
                    Read/write :py:class:`float`.'''
        ...

    @rotation.setter
    def rotation(self, value: float):
        '''Returns or sets the number of degrees the specified shape is rotated around
                    the z-axis. A positive value indicates clockwise rotation; a negative value
                    indicates counterclockwise rotation.
                    Read/write :py:class:`float`.'''
        ...

    @property
    def x(self) -> float:
        '''Returns or sets the x-coordinate of the upper-left corner of the shape.
                    Read/write :py:class:`float`.'''
        ...

    @x.setter
    def x(self, value: float):
        '''Returns or sets the x-coordinate of the upper-left corner of the shape.
                    Read/write :py:class:`float`.'''
        ...

    @property
    def y(self) -> float:
        '''Returns or sets the y-coordinate of the upper-left corner of the shape.
                    Read/write :py:class:`float`.'''
        ...

    @y.setter
    def y(self, value: float):
        '''Returns or sets the y-coordinate of the upper-left corner of the shape.
                    Read/write :py:class:`float`.'''
        ...

    @property
    def width(self) -> float:
        '''Returns or sets the width of the shape.
                    Read/write :py:class:`float`.'''
        ...

    @width.setter
    def width(self, value: float):
        '''Returns or sets the width of the shape.
                    Read/write :py:class:`float`.'''
        ...

    @property
    def height(self) -> float:
        '''Returns or sets the height of the shape.
                    Read/write :py:class:`float`.'''
        ...

    @height.setter
    def height(self, value: float):
        '''Returns or sets the height of the shape.
                    Read/write :py:class:`float`.'''
        ...

    @property
    def black_white_mode(self) -> BlackWhiteMode:
        ...

    @black_white_mode.setter
    def black_white_mode(self, value: BlackWhiteMode):
        ...

    @property
    def unique_id(self) -> int:
        ...

    @property
    def office_interop_shape_id(self) -> int:
        ...

    @property
    def alternative_text(self) -> str:
        ...

    @alternative_text.setter
    def alternative_text(self, value: str):
        ...

    @property
    def alternative_text_title(self) -> str:
        ...

    @alternative_text_title.setter
    def alternative_text_title(self, value: str):
        ...

    @property
    def name(self) -> str:
        '''Returns or sets the name of a shape.
                    Must be not None. Use empty string value if needed.
                    Read/write :py:class:`str`.'''
        ...

    @name.setter
    def name(self, value: str):
        '''Returns or sets the name of a shape.
                    Must be not None. Use empty string value if needed.
                    Read/write :py:class:`str`.'''
        ...

    @property
    def is_decorative(self) -> bool:
        ...

    @is_decorative.setter
    def is_decorative(self, value: bool):
        ...

    @property
    def shape_lock(self) -> IBaseShapeLock:
        ...

    @property
    def is_grouped(self) -> bool:
        ...

    @property
    def parent_group(self) -> IGroupShape:
        ...

    @property
    def slide(self) -> IBaseSlide:
        '''Returns the parent slide of a shape.
                    Read-only :py:class:`aspose.slides.IBaseSlide`.'''
        ...

    @property
    def presentation(self) -> IPresentation:
        '''Returns the parent presentation of a slide.
                    Read-only :py:class:`aspose.slides.IPresentation`.'''
        ...

    @property
    def as_i_hyperlink_container(self) -> IHyperlinkContainer:
        ...

    @property
    def as_i_slide_component(self) -> ISlideComponent:
        ...

    @property
    def as_i_presentation_component(self) -> IPresentationComponent:
        ...

    ...

class ShapeBevel(PVIObject):
    '''Contains the properties of shape's main face relief.'''
    def __init__(self, b_is_top_bevel: bool):
        '''Creates new instance.
        :param b_is_top_bevel: Is top bevel.'''
        ...

    @property
    def as_i_presentation_component(self) -> IPresentationComponent:
        ...

    @property
    def width(self) -> float:
        '''Bevel width.
                    Read/write :py:class:`float`.'''
        ...

    @width.setter
    def width(self, value: float):
        '''Bevel width.
                    Read/write :py:class:`float`.'''
        ...

    @property
    def height(self) -> float:
        '''Bevel height.
                    Read/write :py:class:`float`.'''
        ...

    @height.setter
    def height(self, value: float):
        '''Bevel height.
                    Read/write :py:class:`float`.'''
        ...

    @property
    def bevel_type(self) -> BevelPresetType:
        ...

    @bevel_type.setter
    def bevel_type(self, value: BevelPresetType):
        ...

    @property
    def slide(self) -> IBaseSlide:
        ...

    @property
    def presentation(self) -> IPresentation:
        ...

    ...

class ShapeCollection:
    '''Represents a collection of a shapes.'''
    @overload
    def add_chart(self, type: aspose.slides.charts.ChartType, x: float, y: float, width: float, height: float) -> aspose.slides.charts.IChart:
        '''Creates a new Chart, initialize it with sample series data and settings and adds 
                    it to the end of the collection.
        :param type: Type of chart.
        :param x: X coordinate of a new chart.
        :param y: Y coordinate of a new chart.
        :param width: Chart's width.
        :param height: Chart's height.
        :returns: Created chart.'''
        ...

    @overload
    def add_chart(self, type: aspose.slides.charts.ChartType, x: float, y: float, width: float, height: float, init_with_sample: bool) -> aspose.slides.charts.IChart:
        '''Creates a new Chart and adds it to the end of the collection.
        :param type: Type of chart.
        :param x: X coordinate of a new chart.
        :param y: Y coordinate of a new chart.
        :param width: Chart's width.
        :param height: Chart's height.
        :param init_with_sample: If true then new chart will be initialized with sample series data and settings.
                    If false then new chart will have no series and minimum settings. In this case 
                    chart creation will be more fast.
        :returns: Created chart.'''
        ...

    @overload
    def insert_chart(self, type: aspose.slides.charts.ChartType, x: float, y: float, width: float, height: float, index: int) -> aspose.slides.charts.IChart:
        '''Creates a new Chart, initialize it with sample series data and settings and inserts 
                    it to the specified position in the collection.
        :param type: Type of chart.
        :param x: X coordinate of a new chart.
        :param y: Y coordinate of a new chart.
        :param width: Chart's width.
        :param height: Chart's height.
        :param index: Chart's position in the collection.
        :returns: Created chart.'''
        ...

    @overload
    def insert_chart(self, type: aspose.slides.charts.ChartType, x: float, y: float, width: float, height: float, index: int, init_with_sample: bool) -> aspose.slides.charts.IChart:
        '''Creates a new Chart and inserts it to the specified position in the collection.
        :param type: Type of chart.
        :param x: X coordinate of a new chart.
        :param y: Y coordinate of a new chart.
        :param width: Chart's width.
        :param height: Chart's height.
        :param index: Chart's position in the collection.
        :param init_with_sample: If true then new chart will be initialized with sample series data and settings.
                    If false then new chart will have no series and minimum settings. In this case 
                    chart creation will be more fast.
        :returns: Created chart.'''
        ...

    @overload
    def add_zoom_frame(self, x: float, y: float, width: float, height: float, slide: ISlide) -> IZoomFrame:
        '''Adds a new Zoom object to the end of a collection.
        :param x: X coordinate of a new Zoom frame :py:class:`float`.
        :param y: Y coordinate of a new Zoom frame :py:class:`float`.
        :param width: Width of a new Zoom frame :py:class:`float`.
        :param height: Height of a new Zoom frame :py:class:`float`.
        :param slide: The slide object referenced by the Zoom frame :py:class:`aspose.slides.ISlide`.
        :returns: Created Zoom object :py:class:`aspose.slides.IZoomFrame`.'''
        ...

    @overload
    def add_zoom_frame(self, x: float, y: float, width: float, height: float, slide: ISlide, image: IPPImage) -> IZoomFrame:
        '''Adds a new Zoom object to the end of a collection.
        :param x: X coordinate of a new Zoom frame :py:class:`float`.
        :param y: Y coordinate of a new Zoom frame :py:class:`float`.
        :param width: Width of a new Zoom frame :py:class:`float`.
        :param height: Height of a new Zoom frame :py:class:`float`.
        :param slide: The slide object referenced by the Zoom frame :py:class:`aspose.slides.ISlide`.
        :param image: The image for the referenced slide :py:class:`aspose.slides.IPPImage`
        :returns: Created Zoom object :py:class:`aspose.slides.IZoomFrame`.'''
        ...

    @overload
    def insert_zoom_frame(self, index: int, x: float, y: float, width: float, height: float, slide: ISlide) -> IZoomFrame:
        '''Creates a new Zoom object and inserts it to a collection at the specified index.
        :param index: The zero-based index at which Zoom frame should be inserted.
        :param x: X coordinate of a new Zoom frame :py:class:`float`.
        :param y: Y coordinate of a new Zoom frame :py:class:`float`.
        :param width: Width of a new Zoom frame :py:class:`float`.
        :param height: Height of a new Zoom frame :py:class:`float`.
        :param slide: The slide object referenced by the Zoom frame :py:class:`aspose.slides.ISlide`.
        :returns: Created Zoom object :py:class:`aspose.slides.IZoomFrame`.'''
        ...

    @overload
    def insert_zoom_frame(self, index: int, x: float, y: float, width: float, height: float, slide: ISlide, image: IPPImage) -> IZoomFrame:
        '''Creates a new Zoom object and inserts it to a collection at the specified index.
        :param index: The zero-based index at which Zoom frame should be inserted.
        :param x: X coordinate of a new Zoom frame :py:class:`float`.
        :param y: Y coordinate of a new Zoom frame :py:class:`float`.
        :param width: Width of a new Zoom frame :py:class:`float`.
        :param height: Height of a new Zoom frame :py:class:`float`.
        :param slide: The slide object referenced by the Zoom frame :py:class:`aspose.slides.ISlide`.
        :param image: The image for the referenced slide :py:class:`aspose.slides.IPPImage`
        :returns: Created Zoom object :py:class:`aspose.slides.IZoomFrame`.'''
        ...

    @overload
    def add_section_zoom_frame(self, x: float, y: float, width: float, height: float, section: ISection) -> ISectionZoomFrame:
        '''Adds a new Section Zoom object to the end of a collection.
        :param x: X coordinate of a new Section Zoom frame :py:class:`float`.
        :param y: Y coordinate of a new Section Zoom frame :py:class:`float`.
        :param width: Width of a new Section Zoom frame :py:class:`float`.
        :param height: Height of a new Section Zoom frame :py:class:`float`.
        :param section: The section object referenced by the Section Zoom frame :py:class:`aspose.slides.ISection`.
        :returns: Created Section Zoom object :py:class:`aspose.slides.ISectionZoomFrame`.'''
        ...

    @overload
    def add_section_zoom_frame(self, x: float, y: float, width: float, height: float, section: ISection, image: IPPImage) -> ISectionZoomFrame:
        '''Adds a new Section Zoom object to the end of a collection with a predefined image.
        :param x: X coordinate of a new Section Zoom frame :py:class:`float`.
        :param y: Y coordinate of a new Section Zoom frame :py:class:`float`.
        :param width: Width of a new Section Zoom frame :py:class:`float`.
        :param height: Height of a new Section Zoom frame :py:class:`float`.
        :param section: The section object referenced by the Section Zoom frame :py:class:`aspose.slides.ISection`.
        :param image: The image for the referenced slide :py:class:`aspose.slides.IPPImage`
        :returns: Created Section Zoom object :py:class:`aspose.slides.ISectionZoomFrame`.'''
        ...

    @overload
    def insert_section_zoom_frame(self, index: int, x: float, y: float, width: float, height: float, section: ISection) -> ISectionZoomFrame:
        '''Creates a new Section Zoom object and inserts into to a collection at the specified index.
        :param index: The zero-based index at which Section Zoom frame should be inserted.
        :param x: X coordinate of a new Section Zoom frame :py:class:`float`.
        :param y: Y coordinate of a new Section Zoom frame :py:class:`float`.
        :param width: Width of a new Section Zoom frame :py:class:`float`.
        :param height: Height of a new Section Zoom frame :py:class:`float`.
        :param section: The slide object referenced by the Section Zoom frame :py:class:`aspose.slides.ISection`.
        :returns: Created Section Zoom object :py:class:`aspose.slides.ISectionZoomFrame`.'''
        ...

    @overload
    def insert_section_zoom_frame(self, index: int, x: float, y: float, width: float, height: float, section: ISection, image: IPPImage) -> ISectionZoomFrame:
        '''Creates a new Section Zoom object and inserts it to a collection at the specified index.
        :param index: The zero-based index at which Section Zoom frame should be inserted.
        :param x: X coordinate of a new Section Zoom frame :py:class:`float`.
        :param y: Y coordinate of a new Section Zoom frame :py:class:`float`.
        :param width: Width of a new Section Zoom frame :py:class:`float`.
        :param height: Height of a new Section Zoom frame :py:class:`float`.
        :param section: The slide object referenced by the Section Zoom frame :py:class:`aspose.slides.ISection`.
        :param image: The image for the referenced slide :py:class:`aspose.slides.IPPImage`
        :returns: Created Section Zoom object :py:class:`aspose.slides.ISectionZoomFrame`.'''
        ...

    @overload
    def add_ole_object_frame(self, x: float, y: float, width: float, height: float, data_info: IOleEmbeddedDataInfo) -> IOleObjectFrame:
        '''Adds a new OLE object to the end of a collection.
        :param x: X coordinate of a new OLE frame.
        :param y: Y coordinate of a new OLE frame.
        :param width: Width of a new OLE frame.
        :param height: Height of a new OLE frame.
        :param data_info: Embedded data info :py:class:`aspose.slides.IOleEmbeddedDataInfo`.
        :returns: Created OLE object.'''
        ...

    @overload
    def add_ole_object_frame(self, x: float, y: float, width: float, height: float, class_name: str, path: str) -> IOleObjectFrame:
        '''Adds a new OLE object to the end of a collection.
        :param x: X coordinate of a new OLE frame.
        :param y: Y coordinate of a new OLE frame.
        :param width: Width of a new OLE frame.
        :param height: Height of a new OLE frame.
        :param class_name: Name of an OLE class.
        :param path: Path to the linked file.
        The path is stored in the presentation as is. If a relative path is specified 
                    the corresponding file will be inaccessible when opening the presentation from a different directory.
        :returns: Created OLE object.'''
        ...

    @overload
    def insert_ole_object_frame(self, index: int, x: float, y: float, width: float, height: float, data_info: IOleEmbeddedDataInfo) -> IOleObjectFrame:
        '''Creates a new OLE object and inserts it to a collection at the specified index.
        :param index: The zero-based index at which OLE object should be inserted.
        :param x: X coordinate of a new OLE frame.
        :param y: Y coordinate of a new OLE frame.
        :param width: Width of a new OLE frame.
        :param height: Height of a new OLE frame.
        :param data_info: Embedded data info :py:class:`aspose.slides.IOleEmbeddedDataInfo`.
        :returns: Created OLE object.'''
        ...

    @overload
    def insert_ole_object_frame(self, index: int, x: float, y: float, width: float, height: float, class_name: str, path: str) -> IOleObjectFrame:
        '''Creates a new OLE object and inserts it to a collection at the specified index.
        :param index: The zero-based index at which OLE object should be inserted.
        :param x: X coordinate of a new OLE frame.
        :param y: Y coordinate of a new OLE frame.
        :param width: Width of a new OLE frame.
        :param height: Height of a new OLE frame.
        :param class_name: Name of an OLE class.
        :param path: Path to the linked file.
        :returns: Created OLE object.'''
        ...

    @overload
    def add_video_frame(self, x: float, y: float, width: float, height: float, fname: str) -> IVideoFrame:
        '''Adds a new video frame to the end of a collection.
        :param x: X coordinate of a new video frame.
        :param y: Y coordinate of a new video frame.
        :param width: Width of a new video frame.
        :param height: Height of a new video frame.
        :param fname: Video file name.
        :returns: Created VideoFrame object.'''
        ...

    @overload
    def add_video_frame(self, x: float, y: float, width: float, height: float, video: IVideo) -> IVideoFrame:
        '''Adds a new video frame to the end of a collection.
        :param x: X coordinate of a new video frame.
        :param y: Y coordinate of a new video frame.
        :param width: Width of a new video frame.
        :param height: Height of a new video frame.
        :param video: Video to add.
        :returns: Created VideoFrame object.'''
        ...

    @overload
    def add_audio_frame_embedded(self, x: float, y: float, width: float, height: float, audio_stream: io.RawIOBase) -> IAudioFrame:
        '''Adds a new audio frame with embedded audio file to the end of a collection.
                    Embedded audio file can be a WAV only.
                    It adds new audio into Presentation.Audios list.
        :param x: X coordinate of a new audio frame.
        :param y: Y coordinate of a new audio frame.
        :param width: Width of a new audio frame.
        :param height: Height of a new audio frame.
        :param audio_stream: Inout stream with audio data.
        :returns: Created AudioFrame object.'''
        ...

    @overload
    def add_audio_frame_embedded(self, x: float, y: float, width: float, height: float, audio: IAudio) -> IAudioFrame:
        '''Adds a new audio frame with embedded audio file to the end of a collection.
                    It uses audio file from Presentation.Audios list.
        :param x: X coordinate of a new audio frame.
        :param y: Y coordinate of a new audio frame.
        :param width: Width of a new audio frame.
        :param height: Height of a new audio frame.
        :param audio: Audio from Presentation.Audios list.
        :returns: Created AudioFrame object.'''
        ...

    @overload
    def insert_audio_frame_embedded(self, index: int, x: float, y: float, width: float, height: float, audio_stream: io.RawIOBase) -> IAudioFrame:
        '''Insert an AudioFrame with embedded audio file.
                    Embedded audio file sound can be a WAV only.
        :param index: The zero-based index at which value should be inserted.
        :param x: X coordinate of a new audio frame.
        :param y: Y coordinate of a new audio frame.
        :param width: Width of a new audio frame.
        :param height: Height of a new audio frame.
        :param audio_stream: Audio stream.
        :returns: Created AudioFrame object.'''
        ...

    @overload
    def insert_audio_frame_embedded(self, index: int, x: float, y: float, width: float, height: float, audio: IAudio) -> IAudioFrame:
        '''Insert an AudioFrame with embedded audio file.
                    It uses audio file from Presentation.Audios list.
        :param index: The zero-based index at which value should be inserted.
        :param x: X coordinate of a new audio frame.
        :param y: Y coordinate of a new audio frame.
        :param width: Width of a new audio frame.
        :param height: Height of a new audio frame.
        :param audio: Audio from Presentation.Audios list.
        :returns: Created AudioFrame object.'''
        ...

    @overload
    def to_array(self) -> List[IShape]:
        '''Creates and returns an array with all shapse in it.
        :returns: Array of :py:class:`aspose.slides.Shape`'''
        ...

    @overload
    def to_array(self, start_index: int, count: int) -> List[IShape]:
        '''Creates and returns an array with all shapes from the specified range in it.
        :returns: Array of :py:class:`aspose.slides.Shape`'''
        ...

    @overload
    def reorder(self, index: int, shape: IShape) -> None:
        '''Moves a shape from the collection to the specified position.
        :param index: Target index.
        :param shape: Shape to move.'''
        ...

    @overload
    def reorder(self, index: int, shapes: List[IShape]) -> None:
        '''Moves shapes from the collection to the specified position.
                    Shapes will be placed starting from index in order they appear in list.
        :param index: Target index.
        :param shapes: Shapes to move.'''
        ...

    @overload
    def add_auto_shape(self, shape_type: ShapeType, x: float, y: float, width: float, height: float) -> IAutoShape:
        '''Creates a new AutoShape, tunes it from default template and adds it to the end of the collection.
        :param shape_type: The :py:enum:`aspose.slides.ShapeType` of shape.
        :param x: The X-coordinate for a left side of shape's frame.
        :param y: The Y-coordinate for a top side of shape's frame.
        :param width: The width of shape's frame.
        :param height: The height of shape's frame.
        :returns: Created AutoShape object.'''
        ...

    @overload
    def add_auto_shape(self, shape_type: ShapeType, x: float, y: float, width: float, height: float, create_from_template: bool) -> IAutoShape:
        '''Creates a new AutoShape and adds it to the end of the collection.
        :param shape_type: The :py:enum:`aspose.slides.ShapeType` of shape.
        :param x: The X-coordinate for a left side of shape's frame.
        :param y: The Y-coordinate for a top side of shape's frame.
        :param width: The width of shape's frame.
        :param height: The height of shape's frame.
        :param create_from_template: If true then new shape will be tuned from default template. Not empty name, 
                    simple style, text centered will be assined to the new shape.
                    If false then all values of the properties of the new shape will have default values.
        :returns: Created AutoShape object.'''
        ...

    @overload
    def insert_auto_shape(self, index: int, shape_type: ShapeType, x: float, y: float, width: float, height: float) -> IAutoShape:
        '''Creates a new AutoShape, tunes it from default template and inserts it to 
                    the collection at the specified index.
                    Note: the type of the shape will be determined by the shapeType parameter.
        :param index: The zero-based index at which value should be inserted.
        :param shape_type: An :py:enum:`aspose.slides.ShapeType` of shape.
        :param x: The X-coordinate for a left side of shape's frame.
        :param y: The Y-coordinate for a top side of shape's frame.
        :param width: The width of shape's frame.
        :param height: The height of shape's frame.
        :returns: Created AutoShape object.'''
        ...

    @overload
    def insert_auto_shape(self, index: int, shape_type: ShapeType, x: float, y: float, width: float, height: float, create_from_template: bool) -> IAutoShape:
        '''Creates a new AutoShape and inserts it to the collection at the specified index.
                    Note: the type of the shape will be determined by the shapeType parameter.
        :param index: The zero-based index at which value should be inserted.
        :param shape_type: An :py:enum:`aspose.slides.ShapeType` of shape.
        :param x: The X-coordinate for a left side of shape's frame.
        :param y: The Y-coordinate for a top side of shape's frame.
        :param width: The width of shape's frame.
        :param height: The height of shape's frame.
        :param create_from_template: If true then new shape will be tuned from default template. Not empty name, 
                    simple style, text centered will be assined to the new shape.
                    If false then all values of the properties of the new shape will have default values.
        :returns: Created AutoShape object.'''
        ...

    @overload
    def add_group_shape(self) -> IGroupShape:
        '''Creates a new GroupShape and adds it to the end of the collection.
                    GroupShape frame size and position will be fitted to content when new shape will be added into the GroupShape.
        :returns: Created GroupShape object.'''
        ...

    @overload
    def add_group_shape(self, svg_image: ISvgImage, x: float, y: float, width: float, height: float) -> IGroupShape:
        '''Creates a new GroupShape, fills it with converted shapes from SVG and adds it to the end of the collection.
        :param svg_image: Svg image object :py:class:`aspose.slides.ISvgImage`
        :param x: The X coordinate for the left side of the shape group frame.
        :param y: The Y coordinate for the top side of the shape group frame.
        :param width: The width of the group of the shape group frame.
        :param height: The height of a group of the shape group frame.
        :returns: Created GroupShape object.'''
        ...

    @overload
    def add_connector(self, shape_type: ShapeType, x: float, y: float, width: float, height: float) -> IConnector:
        '''Creates a new Connector, tunes it from default template and adds it to the end of the collection.
        :param shape_type: The :py:enum:`aspose.slides.ShapeType` of shape.
        :param x: The X-coordinate for a left side of shape's frame.
        :param y: The Y-coordinate for a top side of shape's frame.
        :param width: The width of shape's frame.
        :param height: The height of shape's frame.
        :returns: The zero-based index of the created shape.
        :returns: Created Connector object.'''
        ...

    @overload
    def add_connector(self, shape_type: ShapeType, x: float, y: float, width: float, height: float, create_from_template: bool) -> IConnector:
        '''Creates a new Connector and adds it to the end of the collection.
        :param shape_type: The :py:enum:`aspose.slides.ShapeType` of shape.
        :param x: The X-coordinate for a left side of shape's frame.
        :param y: The Y-coordinate for a top side of shape's frame.
        :param width: The width of shape's frame.
        :param height: The height of shape's frame.
        :param create_from_template: If true then new shape will be tuned from default template. Not empty name, 
                    simple style, text centered will be assined to the new shape.
                    If false then all values of the properties of the new shape will have default values.
        :returns: The zero-based index of the created shape.
        :returns: Created Connector object.'''
        ...

    @overload
    def insert_connector(self, index: int, shape_type: ShapeType, x: float, y: float, width: float, height: float) -> IConnector:
        '''Creates a new Connector, tunes it from default template and inserts it to 
                    the collection at the specified index.
        :param index: The zero-based index at which value should be inserted.
        :param shape_type: An :py:enum:`aspose.slides.ShapeType` of shape.
        :param x: The X-coordinate for a left side of shape's frame.
        :param y: The Y-coordinate for a top side of shape's frame.
        :param width: The width of shape's frame.
        :param height: The height of shape's frame.
        :returns: Created Connector object.'''
        ...

    @overload
    def insert_connector(self, index: int, shape_type: ShapeType, x: float, y: float, width: float, height: float, create_from_template: bool) -> IConnector:
        '''Creates a new Connector and inserts it to the collection at the specified index.
        :param index: The zero-based index at which value should be inserted.
        :param shape_type: An :py:enum:`aspose.slides.ShapeType` of shape.
        :param x: The X-coordinate for a left side of shape's frame.
        :param y: The Y-coordinate for a top side of shape's frame.
        :param width: The width of shape's frame.
        :param height: The height of shape's frame.
        :param create_from_template: If true then new shape will be tuned from default template. Not empty name, 
                    simple style, text centered will be assined to the new shape.
                    If false then all values of the properties of the new shape will have default values.
        :returns: Created Connector object.'''
        ...

    @overload
    def add_clone(self, source_shape: IShape, x: float, y: float, width: float, height: float) -> IShape:
        '''Adds a copy of a specified shape to the end of the collection.
        :param source_shape: Shape to clone.
        :param x: X coordinate of a new shape.
        :param y: Y coordinate of a new shape.
        :param width: Width of a new shape.
        :param height: Height of a new shape.
        :returns: New shape.'''
        ...

    @overload
    def add_clone(self, source_shape: IShape, x: float, y: float) -> IShape:
        '''Adds a copy of a specified shape to the end of the collection.
                    Width and Height of the new shape are equal to Width and Height of the ``sourceShape``.
        :param source_shape: Shape to clone.
        :param x: X coordinate of a new shape.
        :param y: Y coordinate of a new shape.
        :returns: New shape.'''
        ...

    @overload
    def add_clone(self, source_shape: IShape) -> IShape:
        '''Adds a copy of a specified shape to the end of the collection.
                    X, Y, Width and Height of the new shape are equal to X, Y, Width and Height of the ``sourceShape``.
        :param source_shape: Shape to clone.
        :returns: New shape.'''
        ...

    @overload
    def insert_clone(self, index: int, source_shape: IShape, x: float, y: float, width: float, height: float) -> IShape:
        '''Inserts a copy of a specified shape to specified position of the collection.
        :param index: Index of new shape.
        :param source_shape: Shape to clone.
        :param x: X coordinate of a new shape.
        :param y: Y coordinate of a new shape.
        :param width: Width of a new shape.
        :param height: Height of a new shape.
        :returns: Inserted shape.'''
        ...

    @overload
    def insert_clone(self, index: int, source_shape: IShape, x: float, y: float) -> IShape:
        '''Inserts a copy of a specified shape to specified position of the collection.
                    Width and Height of the new shape are equal to Width and Height of the ``sourceShape``.
        :param index: Index of new shape.
        :param source_shape: Shape to clone.
        :param x: X coordinate of a new shape.
        :param y: Y coordinate of a new shape.
        :returns: Inserted shape.'''
        ...

    @overload
    def insert_clone(self, index: int, source_shape: IShape) -> IShape:
        '''Inserts a copy of a specified shape to specified position of the collection.
                    X, Y, Width and Height of the new shape are equal to X, Y, Width and Height of the ``sourceShape``.
        :param index: Index of new shape.
        :param source_shape: Shape to clone.
        :returns: Inserted shape.'''
        ...

    def add_smart_art(self, x: float, y: float, width: float, height: float, layout_type: aspose.slides.smartart.SmartArtLayoutType) -> aspose.slides.smartart.ISmartArt:
        '''Add SmartArt diagram.
        :param x: The X-coordinate for a left side of diagram's frame.
        :param y: The Y-coordinate for a left side of diagram's frame.
        :param width: The width of diagram's frame.
        :param height: The height of diagram's frame.
        :param layout_type: The type of SmartArt diagram
        :returns: Create SmartArt diagram'''
        ...

    def add_summary_zoom_frame(self, x: float, y: float, width: float, height: float) -> ISummaryZoomFrame:
        '''Adds a new Summary Zoom object to the end of a collection.
        :param x: X coordinate of a new Section Zoom frame :py:class:`float`.
        :param y: Y coordinate of a new Section Zoom frame :py:class:`float`.
        :param width: Width of a new Section Zoom frame :py:class:`float`.
        :param height: Height of a new Section Zoom frame :py:class:`float`.
        :returns: Created Summary Zoom object :py:class:`aspose.slides.ISummaryZoomFrame`.'''
        ...

    def insert_summary_zoom_frame(self, index: int, x: float, y: float, width: float, height: float) -> ISummaryZoomFrame:
        '''Creates a new Summary Zoom object and inserts it to a collection at the specified index.
        :param index: The zero-based index at which Section Zoom frame should be inserted.
        :param x: X coordinate of a new Section Zoom frame :py:class:`float`.
        :param y: Y coordinate of a new Section Zoom frame :py:class:`float`.
        :param width: Width of a new Section Zoom frame :py:class:`float`.
        :param height: Height of a new Section Zoom frame :py:class:`float`.
        :returns: Created Summary Zoom object :py:class:`aspose.slides.ISummaryZoomFrame`.'''
        ...

    def insert_video_frame(self, index: int, x: float, y: float, width: float, height: float, fname: str) -> IVideoFrame:
        '''Creates a new video frame and inserts it to a collection at the specified index.
        :param index: The zero-based index at which video frame should be inserted.
        :param x: X coordinate of a new video frame.
        :param y: Y coordinate of a new video frame.
        :param width: Width of a new video frame.
        :param height: Height of a new video frame.
        :param fname: Video file name.
        :returns: Created VideoFrame object.'''
        ...

    def add_audio_frame_cd(self, x: float, y: float, width: float, height: float) -> IAudioFrame:
        '''Adds an AudioFrame with CD to the end of collection.
        :param x: X coordinate of a new audio frame.
        :param y: Y coordinate of a new audio frame.
        :param width: Width of a new audio frame.
        :param height: Height of a new audio frame.
        :returns: Created AudioFrame object.'''
        ...

    def insert_audio_frame_cd(self, index: int, x: float, y: float, width: float, height: float) -> IAudioFrame:
        '''Insert an AudioFrame with CD.
        :param index: The zero-based index at which video frame should be inserted.
        :param x: X coordinate of a new audio frame.
        :param y: Y coordinate of a new audio frame.
        :param width: Width of a new audio frame.
        :param height: Height of a new audio frame.
        :returns: Created AudioFrame object.'''
        ...

    def add_audio_frame_linked(self, x: float, y: float, width: float, height: float, fname: str) -> IAudioFrame:
        '''Adds a new audio frame with linked audio file to the end of a collection.
        :param x: X coordinate of a new audio frame.
        :param y: Y coordinate of a new audio frame.
        :param width: Width of a new audio frame.
        :param height: Height of a new audio frame.
        :param fname: Audio file name.
        :returns: Created AudioFrame object.'''
        ...

    def insert_audio_frame_linked(self, index: int, x: float, y: float, width: float, height: float, fname: str) -> IAudioFrame:
        '''Creates a new audio frame with linked audio file and inserts it to a collection at the specified index.
        :param index: The zero-based index at which audio frame should be inserted.
        :param x: X coordinate of a new audio frame.
        :param y: Y coordinate of a new audio frame.
        :param width: Width of a new audio frame.
        :param height: Height of a new audio frame.
        :param fname: Audio file name.
        :returns: Created AudioFrame object.'''
        ...

    def index_of(self, shape: IShape) -> int:
        '''Returns the zero-based index of the first occurrence of a shape in the collection.
        :param shape: The shape to locate in the collection.
        :returns: The zero-based index of the first occurrence of shape within
                    the collection, if found; otherwise, -1.'''
        ...

    def add_math_shape(self, x: float, y: float, width: float, height: float) -> IAutoShape:
        '''Creates a new Autoshape tuned from default template to math content and adds it to the end of the collection.
        :param x: The X-coordinate for a left side of shape's frame.
        :param y: The Y-coordinate for a top side of shape's frame.
        :param width: The width of shape's frame.
        :param height: The height of shape's frame.
        :returns: Created AutoShape object.'''
        ...

    def insert_group_shape(self, index: int) -> IGroupShape:
        '''Creates a new GroupShape and inserts it to the collection at the specified index.
                    GroupShape frame size and position will be fitted to content when new shape will be added into the GroupShape.
        :param index: The zero-based index at which value should be inserted.
        :returns: Created GroupShape object.'''
        ...

    def add_picture_frame(self, shape_type: ShapeType, x: float, y: float, width: float, height: float, image: IPPImage) -> IPictureFrame:
        '''Creates a new PictureFrame and adds it to the end of the collection.
        :param shape_type: The shape contained in the set :py:enum:`aspose.slides.ShapeType`
                    of shapes, except all sorts of lines:
        
            ShapeType.Line,
        
            ShapeType.StraightConnector1,
        
            ShapeType.BentConnector2,
        
            ShapeType.BentConnector3,
        
            ShapeType.BentConnector4,
        
            ShapeType.BentConnector5,
        
            ShapeType.CurvedConnector2,
        
            ShapeType.CurvedConnector3,
        
            ShapeType.CurvedConnector4,
        
            ShapeType.CurvedConnector5.
        :param x: The X-coordinate for a left side of shape's frame.
        :param y: The Y-coordinate for a top side of shape's frame.
        :param width: The width of shape's frame.
        :param height: The height of shape's frame.
        :param image: The image of picture frame.
        :returns: Created PictureFrame object.'''
        ...

    def insert_picture_frame(self, index: int, shape_type: ShapeType, x: float, y: float, width: float, height: float, image: IPPImage) -> IPictureFrame:
        '''Creates a new PictureFrame and inserts it to the collection at the specified index.
        :param index: The zero-based index at which value should be inserted.
        :param shape_type: The shape contained in the set :py:enum:`aspose.slides.ShapeType`
                    of shapes, except all sorts of lines:
        
            ShapeType.Line,
        
            ShapeType.StraightConnector1,
        
            ShapeType.BentConnector2,
        
            ShapeType.BentConnector3,
        
            ShapeType.BentConnector4,
        
            ShapeType.BentConnector5,
        
            ShapeType.CurvedConnector2,
        
            ShapeType.CurvedConnector3,
        
            ShapeType.CurvedConnector4,
        
            ShapeType.CurvedConnector5.
        :param x: The X-coordinate for a left side of shape's frame.
        :param y: The Y-coordinate for a top side of shape's frame.
        :param width: The width of shape's frame.
        :param height: The height of shape's frame.
        :param image: The image of picture frame.
        :returns: Created PictureFrame object.'''
        ...

    def add_table(self, x: float, y: float, column_widths: List[float], row_heights: List[float]) -> ITable:
        '''Creates a new Table and adds it to the end of the collection.
        :param x: The X-coordinate for a left side of shape's frame.
        :param y: The Y-coordinate for a top side of shape's frame.
        :param column_widths: Array of doubles which represents widths of columns in the table.
        :param row_heights: Array of doubles which represents heights of rows in the table.
        :returns: Created Table object.'''
        ...

    def insert_table(self, index: int, x: float, y: float, column_widths: List[float], row_heights: List[float]) -> ITable:
        '''Creates a new Table and inserts it to the collection at the specified index.
        :param index: The zero-based index at which value should be inserted.
        :param x: The X-coordinate for a left side of shape's frame.
        :param y: The Y-coordinate for a top side of shape's frame.
        :param column_widths: Array of doubles which represents widths of columns in the table.
        :param row_heights: Array of doubles which represents heights of rows in the table.
        :returns: Created Table object.'''
        ...

    def remove_at(self, index: int) -> None:
        '''Removes the element at the specified index of the collection.
        :param index: The zero-based index of the element to remove.'''
        ...

    def remove(self, shape: IShape) -> None:
        '''Removes the first occurrence of a specific shape from the collection.
        :param shape: The shape to remove from the collection.'''
        ...

    def clear(self) -> None:
        '''Removes all shapes from the collection.'''
        ...

    @property
    def parent_group(self) -> IGroupShape:
        ...

    @property
    def as_i_collection(self) -> list:
        ...

    @property
    def as_i_enumerable(self) -> collections.abc.Iterable:
        ...

    def __getitem__(self, key: int) -> IShape
        ...

    ...

class ShapeElement:
    '''Represents a part of shape with same outline and fill properties.'''
    @property
    def parent_shape(self) -> Shape:
        ...

    @property
    def graphics_path(self) -> aspose.pydrawing.Drawing2D.GraphicsPath:
        ...

    @property
    def fill_source(self) -> ShapeElementFillSource:
        ...

    @property
    def stroke_source(self) -> ShapeElementStrokeSource:
        ...

    ...

class ShapeFrame:
    '''Represents shape frame's properties.'''
    def __init__(self, x: float, y: float, width: float, height: float, flip_h: NullableBool, flip_v: NullableBool, rotation_angle: float):
        '''Creates new shape frame's properties.
        :param x: X coordinate of a frame.
        :param y: Y coordinate of a frame.
        :param width: Width of a frame.
        :param height: Height of a frame.
        :param flip_h: True if a frame flipped horizontally.
        :param flip_v: True if a frame flipped vertivally.
        :param rotation_angle: Number of degrees a frame is rotated.'''
        ...

    def clone(self) -> any:
        '''Clones
        :returns: Cloned shape frame.'''
        ...

    def clone_t(self) -> IShapeFrame:
        '''Clones.
        :returns: Cloned shape frame.'''
        ...

    def equals(self, value: ShapeFrame) -> bool:
        '''Returns a value indicating whether this instance is equal to a specified object.
        :param value: The ShapeFRameEx to compare with this instance.
        :returns: **True** if value is a ShapeFrame that has the same value as this instance; otherwise, **false**.'''
        ...

    @property
    def x(self) -> float:
        '''Returns the X coordinate of the upper-left corner of a frame.
                    Read-only :py:class:`float`.'''
        ...

    @property
    def y(self) -> float:
        '''Returns the Y coordinate of the upper-left corner of a frame.
                    Read-only :py:class:`float`.'''
        ...

    @property
    def width(self) -> float:
        '''Returns the width of a frame.
                    Read-only :py:class:`float`.'''
        ...

    @property
    def height(self) -> float:
        '''Returns the height of a frame.
                    Read-only :py:class:`float`.'''
        ...

    @property
    def rotation(self) -> float:
        '''Returns the number of degrees a frame is rotated around the z-axis.
                    A positive value indicates clockwise rotation; a negative value
                    indicates counterclockwise rotation.
                    Read-only :py:class:`float`.'''
        ...

    @property
    def center_x(self) -> float:
        ...

    @property
    def center_y(self) -> float:
        ...

    @property
    def flip_h(self) -> NullableBool:
        ...

    @property
    def flip_v(self) -> NullableBool:
        ...

    @property
    def rectangle(self) -> aspose.pydrawing.RectangleF:
        '''Returns the coordinates of a frame.
                    Read-only :py:class:`aspose.pydrawing.RectangleF`.'''
        ...

    ...

class ShapeStyle:
    '''Represent shape's style reference.'''
    @property
    def line_color(self) -> IColorFormat:
        ...

    @property
    def line_style_index(self) -> int:
        ...

    @line_style_index.setter
    def line_style_index(self, value: int):
        ...

    @property
    def fill_color(self) -> IColorFormat:
        ...

    @property
    def fill_style_index(self) -> int:
        ...

    @fill_style_index.setter
    def fill_style_index(self, value: int):
        ...

    @property
    def effect_color(self) -> IColorFormat:
        ...

    @property
    def effect_style_index(self) -> int:
        ...

    @effect_style_index.setter
    def effect_style_index(self, value: int):
        ...

    @property
    def font_color(self) -> IColorFormat:
        ...

    @property
    def font_collection_index(self) -> FontCollectionIndex:
        ...

    @font_collection_index.setter
    def font_collection_index(self, value: FontCollectionIndex):
        ...

    ...

class SketchFormat(PVIObject):
    '''Represents properties for lines sketch format.'''
    @property
    def as_i_presentation_component(self) -> IPresentationComponent:
        ...

    @property
    def sketch_type(self) -> LineSketchType:
        ...

    @sketch_type.setter
    def sketch_type(self, value: LineSketchType):
        ...

    @property
    def slide(self) -> IBaseSlide:
        ...

    @property
    def presentation(self) -> IPresentation:
        ...

    ...

class Slide(BaseSlide):
    '''Represents a slide in a presentation.'''
    @overload
    def join_portions_with_same_formatting(self) -> None:
        '''Joins runs with same formatting in all paragraphs in all acceptable shapes.'''
        ...

    @overload
    def join_portions_with_same_formatting(self, collection: IShapeCollection) -> None:
        '''Joins runs with same formatting in all paragraphs in all acceptable shapes.'''
        ...

    @overload
    def get_thumbnail(self, scale_x: float, scale_y: float) -> aspose.pydrawing.Bitmap:
        '''Returns a Thumbnail Bitmap object with custom scaling.
        :param scale_x: The value by which to scale this Thumbnail in the x-axis direction.
        :param scale_y: The value by which to scale this Thumbnail in the y-axis direction.
        :returns: Bitmap object.'''
        ...

    @overload
    def get_thumbnail(self) -> aspose.pydrawing.Bitmap:
        '''Returns a Thumbnail Image object (20% of real size).'''
        ...

    @overload
    def get_thumbnail(self, options: aspose.slides.export.IRenderingOptions) -> aspose.pydrawing.Bitmap:
        '''Returns a Thumbnail Bitmap object.
        :param options: Rendering options.
        :returns: Bitmap objects.'''
        ...

    @overload
    def get_thumbnail(self, image_size: aspose.pydrawing.Size) -> aspose.pydrawing.Bitmap:
        '''Returns a Thumbnail Bitmap object with specified size.
        :param image_size: Size of the image to create.
        :returns: Bitmap object.'''
        ...

    @overload
    def get_thumbnail(self, options: aspose.slides.export.ITiffOptions) -> aspose.pydrawing.Bitmap:
        '''Returns a Thumbnail tiff bitmap object with specified parameters.
        :param options: Tiff options.
        :returns: Bitmap object.'''
        ...

    @overload
    def get_thumbnail(self, options: aspose.slides.export.IRenderingOptions, scale_x: float, scale_y: float) -> aspose.pydrawing.Bitmap:
        '''Returns a Thumbnail Bitmap object with custom scaling.
        :param options: Rendering options.
        :param scale_x: The value by which to scale this Thumbnail in the x-axis direction.
        :param scale_y: The value by which to scale this Thumbnail in the y-axis direction.
        :returns: Bitmap objects.'''
        ...

    @overload
    def get_thumbnail(self, options: aspose.slides.export.IRenderingOptions, image_size: aspose.pydrawing.Size) -> aspose.pydrawing.Bitmap:
        '''Returns a Thumbnail Bitmap object with specified size.
        :param options: Rendering options.
        :param image_size: Size of the image to create.
        :returns: Bitmap objects.'''
        ...

    @overload
    def get_image(self, scale_x: float, scale_y: float) -> IImage:
        '''Returns a Thumbnail Image object with custom scaling.
        :param scale_x: The value by which to scale this Thumbnail in the x-axis direction.
        :param scale_y: The value by which to scale this Thumbnail in the y-axis direction.
        :returns: IImage object.'''
        ...

    @overload
    def get_image(self) -> IImage:
        '''Returns a Thumbnail Image object (20% of real size).'''
        ...

    @overload
    def get_image(self, image_size: aspose.pydrawing.Size) -> IImage:
        '''Returns a Thumbnail Image object with specified size.
        :param image_size: Size of the image to create.
        :returns: Image object.'''
        ...

    @overload
    def get_image(self, options: aspose.slides.export.ITiffOptions) -> IImage:
        '''Returns a Thumbnail tiff image object with specified parameters.
        :param options: Tiff options.
        :returns: Image object.'''
        ...

    @overload
    def get_image(self, options: aspose.slides.export.IRenderingOptions) -> IImage:
        '''Returns a Thumbnail Image object.
        :param options: Rendering options.
        :returns: Image object.'''
        ...

    @overload
    def get_image(self, options: aspose.slides.export.IRenderingOptions, scale_x: float, scale_y: float) -> IImage:
        '''Returns a Thumbnail Image object with custom scaling.
        :param options: Rendering options.
        :param scale_x: The value by which to scale this Thumbnail in the x-axis direction.
        :param scale_y: The value by which to scale this Thumbnail in the y-axis direction.
        :returns: Bitmap objects.'''
        ...

    @overload
    def get_image(self, options: aspose.slides.export.IRenderingOptions, image_size: aspose.pydrawing.Size) -> IImage:
        '''Returns a Thumbnail Image object with specified size.
        :param options: Rendering options.
        :param image_size: Size of the image to create.
        :returns: Image object.'''
        ...

    @overload
    def render_to_graphics(self, options: aspose.slides.export.IRenderingOptions, graphics: aspose.pydrawing.Graphics) -> None:
        '''Renders certain slide to a Graphics object.
        :param options: Rendering options.
        :param graphics: The object where to render to.'''
        ...

    @overload
    def render_to_graphics(self, options: aspose.slides.export.IRenderingOptions, graphics: aspose.pydrawing.Graphics, scale_x: float, scale_y: float) -> None:
        '''Renders certain slide to a Graphics object with custom scaling.
        :param options: Rendering options.
        :param graphics: The object where to render to.
        :param scale_x: The scale for rendering the slide (1.0 is 100%) in the x-axis direction.
        :param scale_y: The scale for rendering the slide (1.0 is 100%) in the y-axis direction.'''
        ...

    @overload
    def render_to_graphics(self, options: aspose.slides.export.IRenderingOptions, graphics: aspose.pydrawing.Graphics, rendering_size: aspose.pydrawing.Size) -> None:
        '''Renders certain slide to a Graphics object using specified size.
        :param options: Rendering options.
        :param graphics: The object where to render to.
        :param rendering_size: The maximum dimensions (in pixels) that can be occupied by the rendered slide.'''
        ...

    @overload
    def write_as_svg(self, stream: io.RawIOBase) -> None:
        '''Saves the slide content as an SVG file.
        :param stream: Target stream'''
        ...

    @overload
    def write_as_svg(self, stream: io.RawIOBase, svg_options: aspose.slides.export.ISVGOptions) -> None:
        '''Saves the slide content as an SVG file.
        :param stream: Target stream
        :param svg_options: SVG generation options'''
        ...

    def equals(self, slide: IBaseSlide) -> bool:
        '''Determines whether the two IBaseSlide instances are equal.
                    Returning value is calculated based on slide's structure and static content.
                    Two slides are equal if all shapes, styles, texts, animation and other settings. etc. are equal. The comparison doesn't take into account unique identifier values, e.g. SlideId and dynamic content, e.g. current date value in Date Placeholder.
        :param slide: The IBaseSlide to compare with the current IBaseSlide.
        :returns: **true** if the specified IBaseSlide is equal to the current IBaseSlide; 
                    otherwise, **false**.'''
        ...

    def create_theme_effective(self) -> aspose.slides.theme.IThemeEffectiveData:
        '''Returns an effective theme for this slide.'''
        ...

    def find_shape_by_alt_text(self, alt_text: str) -> IShape:
        '''Finds first occurrence of a shape with the specified alternative text.
        :param alt_text: Alternative text.
        :returns: Shape object or None.'''
        ...

    def write_as_emf(self, stream: io.RawIOBase) -> None:
        '''Saves the slide content as an EMF file.
        :param stream: Target stream'''
        ...

    def remove(self) -> None:
        '''Removes slide from presentation.'''
        ...

    def reset(self) -> None:
        '''Resets position, size and formatting of every shape that has a prototype on LayoutSlide.'''
        ...

    def get_slide_comments(self, author: ICommentAuthor) -> List[IComment]:
        '''Returns all slide comments added by specific author.
        :param author: Author of comments to find or None to return all comments.
        :returns: Array of :py:class:`aspose.slides.Comment`.'''
        ...

    @property
    def shapes(self) -> IShapeCollection:
        '''Returns the shapes of a slide.
                    Read-only :py:class:`aspose.slides.IShapeCollection`.'''
        ...

    @property
    def controls(self) -> IControlCollection:
        '''Returns the collection of ActiveX controls on a slide.
                    Read-only :py:class:`aspose.slides.IControlCollection`.'''
        ...

    @property
    def name(self) -> str:
        '''Returns or sets the name of a slide.
                    Read/write :py:class:`str`.'''
        ...

    @name.setter
    def name(self, value: str):
        '''Returns or sets the name of a slide.
                    Read/write :py:class:`str`.'''
        ...

    @property
    def slide_id(self) -> int:
        ...

    @property
    def custom_data(self) -> ICustomData:
        ...

    @property
    def timeline(self) -> IAnimationTimeLine:
        '''Returns animation timeline object.
                    Read-only :py:class:`aspose.slides.IAnimationTimeLine`.'''
        ...

    @property
    def slide_show_transition(self) -> ISlideShowTransition:
        ...

    @property
    def background(self) -> IBackground:
        '''Returns slide's background.
                    Read-only :py:class:`aspose.slides.IBackground`.'''
        ...

    @property
    def hyperlink_queries(self) -> IHyperlinkQueries:
        ...

    @property
    def show_master_shapes(self) -> bool:
        ...

    @show_master_shapes.setter
    def show_master_shapes(self, value: bool):
        ...

    @property
    def presentation(self) -> IPresentation:
        '''Returns IPresentation interface.
                    Read-only :py:class:`aspose.slides.IPresentation`.'''
        ...

    @property
    def header_footer_manager(self) -> ISlideHeaderFooterManager:
        ...

    @property
    def theme_manager(self) -> aspose.slides.theme.IOverrideThemeManager:
        ...

    @property
    def slide_number(self) -> int:
        ...

    @slide_number.setter
    def slide_number(self, value: int):
        ...

    @property
    def hidden(self) -> bool:
        '''Determines whether the specified slide is hidden during a slide show.
                    Read/write :py:class:`bool`.'''
        ...

    @hidden.setter
    def hidden(self, value: bool):
        '''Determines whether the specified slide is hidden during a slide show.
                    Read/write :py:class:`bool`.'''
        ...

    @property
    def layout_slide(self) -> ILayoutSlide:
        ...

    @layout_slide.setter
    def layout_slide(self, value: ILayoutSlide):
        ...

    @property
    def notes_slide_manager(self) -> INotesSlideManager:
        ...

    @property
    def as_i_slide_component(self) -> ISlideComponent:
        ...

    @property
    def slide(self) -> IBaseSlide:
        ...

    @property
    def as_i_presentation_component(self) -> IPresentationComponent:
        ...

    @property
    def as_i_base_slide(self) -> IBaseSlide:
        ...

    @property
    def as_i_override_themeable(self) -> aspose.slides.theme.IOverrideThemeable:
        ...

    ...

class SlideCollection:
    '''Represents a collection of a slides.'''
    @overload
    def add_clone(self, source_slide: ISlide) -> ISlide:
        '''Adds a copy of a specified slide to the end of the collection.
        :param source_slide: Slide to clone.
        :returns: New slide.'''
        ...

    @overload
    def add_clone(self, source_slide: ISlide, section: ISection) -> ISlide:
        '''Adds a copy of a specified slide to the end of the specified section.
        :param source_slide: Slide to clone.
        :param section: Section for a new slide.
        :returns: New slide.'''
        ...

    @overload
    def add_clone(self, source_slide: ISlide, dest_layout: ILayoutSlide) -> ISlide:
        '''Adds a copy of a specified slide to the end of the collection.
        :param source_slide: Slide to clone.
        :param dest_layout: Layout slide for a new slide.
        :returns: New slide.'''
        ...

    @overload
    def add_clone(self, source_slide: ISlide, dest_master: IMasterSlide, allow_clone_missing_layout: bool) -> ISlide:
        '''Adds a copy of a specified source slide to the end of the collection.
                    Appropriate layout will be selected automatically from the specified 
                    master (appropriate layout is the layout with the same Type or Name as 
                    of layout of the source slide). If there is no appropriate layout then
                    layout of the source slide will be cloned (if allowCloneMissingLayout 
                    is true) or PptxEditException will be thrown (if allowCloneMissingLayout
                    is false).
        :param source_slide: Slide to clone.
        :param dest_master: Master slide for a new slide.
        :param allow_clone_missing_layout: If there is no appropriate layout in specified master then layout of the 
                    source slide will be cloned (if allowCloneMissingLayout is true) or 
                    PptxEditException will be thrown (if allowCloneMissingLayout is false).
        :returns: New slide.'''
        ...

    @overload
    def insert_clone(self, index: int, source_slide: ISlide) -> ISlide:
        '''Inserts a copy of a specified slide to specified position of the collection.
        :param index: Index of new slide.
        :param source_slide: Slide to clone.
        :returns: Inserted slide.'''
        ...

    @overload
    def insert_clone(self, index: int, source_slide: ISlide, dest_layout: ILayoutSlide) -> ISlide:
        '''Inserts a copy of a specified slide to specified position of the collection.
        :param index: Index of new slide.
        :param source_slide: Slide to clone.
        :param dest_layout: Layout slide for a new slide.
        :returns: Inserted slide.'''
        ...

    @overload
    def insert_clone(self, index: int, source_slide: ISlide, dest_master: IMasterSlide, allow_clone_missing_layout: bool) -> ISlide:
        '''Inserts a copy of a specified source slide to specified position of the collection.
                    Appropriate layout will be selected automatically from the specified 
                    master (appropriate layout is the layout with the same Type or Name as 
                    of layout of the source slide). If there is no appropriate layout then
                    layout of the source slide will be cloned (if allowCloneMissingLayout 
                    is true) or PptxEditException will be thrown (if allowCloneMissingLayout
                    is false).
        :param index: Index of new slide.
        :param source_slide: Slide to clone.
        :param dest_master: Master slide for a new slide.
        :param allow_clone_missing_layout: If there is no appropriate layout in specified master then layout of the 
                    source slide will be cloned (if allowCloneMissingLayout is true) or 
                    PptxEditException will be thrown (if allowCloneMissingLayout is false).
        :returns: Inserted slide.'''
        ...

    @overload
    def to_array(self) -> List[ISlide]:
        '''Creates and returns an array with all slides in it.
        :returns: Array of :py:class:`aspose.slides.Slide`'''
        ...

    @overload
    def to_array(self, start_index: int, count: int) -> List[ISlide]:
        '''Creates and returns an array with all slides from the specified range in it.
        :returns: Array of :py:class:`aspose.slides.Slide`'''
        ...

    @overload
    def reorder(self, index: int, slide: ISlide) -> None:
        '''Moves slide from the collection to the specified position.
        :param index: Target index.
        :param slide: Slide to move.'''
        ...

    @overload
    def reorder(self, index: int, slides: List[ISlide]) -> None:
        '''Moves slides from the collection to the specified position.
                    Slides will be placed starting from index in order they appear in list.
        :param index: Target index.
        :param slides: Slides to move.'''
        ...

    @overload
    def add_from_pdf(self, path: str) -> List[ISlide]:
        '''Creates slides from the PDF document and adds them to the end of the collection.
        :param path: A path to the PDF document
        :returns: Added slides'''
        ...

    @overload
    def add_from_pdf(self, path: str, pdf_import_options: aspose.slides.importing.PdfImportOptions) -> List[ISlide]:
        '''Creates slides from the PDF document and adds them to the end of the collection considering the pdf import options.
        :param path: A path to the PDF document
        :param pdf_import_options: Options for pdf import
        :returns: Added slides'''
        ...

    @overload
    def add_from_pdf(self, pdf_stream: io.RawIOBase) -> List[ISlide]:
        '''Creates slides from the PDF document and adds them to the end of the collection.
        :param pdf_stream: A stream which will be used as a source of the PDF document
        :returns: Added slides'''
        ...

    @overload
    def add_from_pdf(self, pdf_stream: io.RawIOBase, pdf_import_options: aspose.slides.importing.PdfImportOptions) -> List[ISlide]:
        '''Creates slides from the PDF document and adds them to the end of the collection.
        :param pdf_stream: A stream which will be used as a source of the PDF document
        :param pdf_import_options: Options for pdf import
        :returns: Added slides'''
        ...

    @overload
    def add_from_html(self, html_text: str, resolver: aspose.slides.importing.IExternalResourceResolver, uri: str) -> List[ISlide]:
        '''Creates slides from HTML text and adds them to the end of the collection.
        :param html_text: Html to add.
        :param resolver: A callback object used to fetch external objects. If this parameter is None all external objects will be ignored.
        :param uri: An URI of the specified HTML. Used to resolve relative links.
        :returns: Added slides.'''
        ...

    @overload
    def add_from_html(self, html_text: str) -> List[ISlide]:
        '''Creates slides from HTML text and adds them to the end of the collection.
        :param html_text: Html to add.
        :returns: Added slides'''
        ...

    @overload
    def add_from_html(self, html_stream: io.RawIOBase, resolver: aspose.slides.importing.IExternalResourceResolver, uri: str) -> List[ISlide]:
        '''Creates slides from HTML text and adds them to the end of the collection.
        :param html_stream: A Stream object which will be used as a source of a HTML file.
        :param resolver: A callback object used to fetch external objects. If this parameter is None all external objects will be ignored.
        :param uri: An URI of the specified HTML. Used to resolve relative links.
        :returns: Added slides.'''
        ...

    @overload
    def add_from_html(self, html_stream: io.RawIOBase) -> List[ISlide]:
        '''Creates slides from HTML text and adds them to the end of the collection.
        :param html_stream: A Stream object which will be used as a source of a HTML file.
        :returns: Added slides'''
        ...

    @overload
    def insert_from_html(self, index: int, html_text: str, resolver: aspose.slides.importing.IExternalResourceResolver, uri: str) -> List[ISlide]:
        '''Creates slides from HTML text and inserts them to the collection at the specified position.
        :param index: Position to insert.
        :param html_text: Html to add.
        :param resolver: A callback object used to fetch external objects. If this parameter is None all external objects will be ignored.
        :param uri: An URI of the specified HTML. Used to resolve relative links.
        :returns: Added slides.'''
        ...

    @overload
    def insert_from_html(self, index: int, html_text: str, resolver: aspose.slides.importing.IExternalResourceResolver, uri: str, use_slide_with_index_as_start: bool) -> List[ISlide]:
        '''Creates slides from HTML text and inserts them to the collection at the specified position.
        :param index: Position to insert.
        :param html_text: Html to add.
        :param resolver: A callback object used to fetch external objects. If this parameter is None all external objects will be ignored.
        :param uri: An URI of the specified HTML. Used to resolve relative links.
        :param use_slide_with_index_as_start: This flag determines how to start insertion: from a new slide or from the slide with the specified index.
                    If **true**, then data insertion will start from an empty space on the slide with the specified index.
                    If **false**, then data will be added to the created slides.
        :returns: Added slides.'''
        ...

    @overload
    def insert_from_html(self, index: int, html_text: str) -> List[ISlide]:
        '''Creates slides from HTML text and inserts them to the collection at the specified position.
        :param index: Position to insert.
        :param html_text: Html to add.
        :returns: Added slides'''
        ...

    @overload
    def insert_from_html(self, index: int, html_text: str, use_slide_with_index_as_start: bool) -> List[ISlide]:
        '''Creates slides from HTML text and inserts them to the collection at the specified position.
        :param index: Position to insert.
        :param html_text: Html to add.
        :param use_slide_with_index_as_start: This flag determines how to start insertion: from a new slide or from the slide with the specified index.
                    If **true**, then data insertion will start from an empty space on the slide with the specified index.
                    If **false**, then data will be added to the created slides.
        :returns: Added slides'''
        ...

    @overload
    def insert_from_html(self, index: int, html_stream: io.RawIOBase, resolver: aspose.slides.importing.IExternalResourceResolver, uri: str) -> List[ISlide]:
        '''Creates slides from HTML text and inserts them to the collection at the specified position.
        :param index: Position to insert.
        :param html_stream: A Stream object which will be used as a source of a HTML file.
        :param resolver: A callback object used to fetch external objects. If this parameter is None all external objects will be ignored.
        :param uri: An URI of the specified HTML. Used to resolve relative links.
        :returns: Added slides.'''
        ...

    @overload
    def insert_from_html(self, index: int, html_stream: io.RawIOBase, resolver: aspose.slides.importing.IExternalResourceResolver, uri: str, use_slide_with_index_as_start: bool) -> List[ISlide]:
        '''Creates slides from HTML text and inserts them to the collection at the specified position.
        :param index: Position to insert.
        :param html_stream: A Stream object which will be used as a source of a HTML file.
        :param resolver: A callback object used to fetch external objects. If this parameter is None all external objects will be ignored.
        :param uri: An URI of the specified HTML. Used to resolve relative links.
        :param use_slide_with_index_as_start: This flag determines how to start insertion: from a new slide or from the slide with the specified index.
                    If **true**, then data insertion will start from an empty space on the slide with the specified index.
                    If **false**, then data will be added to the created slides.
        :returns: Added slides.'''
        ...

    @overload
    def insert_from_html(self, index: int, html_stream: io.RawIOBase) -> List[ISlide]:
        '''Creates slides from HTML text and inserts them to the collection at the specified position.
        :param index: Position to insert.
        :param html_stream: A Stream object which will be used as a source of a HTML file.
        :returns: Added slides'''
        ...

    @overload
    def insert_from_html(self, index: int, html_stream: io.RawIOBase, use_slide_with_index_as_start: bool) -> List[ISlide]:
        '''Creates slides from HTML text and inserts them to the collection at the specified position.
        :param index: Position to insert.
        :param html_stream: A Stream object which will be used as a source of a HTML file.
        :param use_slide_with_index_as_start: This flag determines how to start insertion: from a new slide or from the slide with the specified index.
                    If **true**, then data insertion will start from an empty space on the slide with the specified index.
                    If **false**, then data will be added to the created slides.
        :returns: Added slides'''
        ...

    def add_empty_slide(self, layout: ILayoutSlide) -> ISlide:
        '''Adds a new empty slide to the end of the collection.
        :param layout: Layout for a slide.
        :returns: Added slide.'''
        ...

    def insert_empty_slide(self, index: int, layout: ILayoutSlide) -> ISlide:
        '''Inserts a copy of a specified slide to specified position of the collection.
        :param index: Index of a new slide.
        :param layout: Layout for a slide.
        :returns: Inserted slide.'''
        ...

    def remove(self, value: ISlide) -> None:
        '''Removes the first occurrence of a specific object from the collection.
        :param value: The slide to remove from the collection.'''
        ...

    def remove_at(self, index: int) -> None:
        '''Removes the element at the specified index of the collection.
        :param index: The zero-based index of the element to remove.'''
        ...

    def index_of(self, slide: ISlide) -> int:
        '''Returns an index of the specified slide in the collection.
        :param slide: Slide to find.
        :returns: Index of a slide or -1 if slide not from this collection.'''
        ...

    @property
    def as_i_collection(self) -> list:
        ...

    @property
    def as_i_enumerable(self) -> collections.abc.Iterable:
        ...

    def __getitem__(self, key: int) -> ISlide
        ...

    ...

class SlideHeaderFooterManager(BaseSlideHeaderFooterManager):
    '''Represents manager which holds behavior of the slide footer, date-time, page number placeholders.'''
    def set_footer_visibility(self, is_visible: bool) -> None:
        '''Changes slide footer placeholder visibility.
        :param is_visible: true - makes a footer placeholder visible, otherwise - hides it.'''
        ...

    def set_slide_number_visibility(self, is_visible: bool) -> None:
        '''Changes slide page number placeholder visibility.
        :param is_visible: true - makes a page number placeholder visible, otherwise - hides it.'''
        ...

    def set_date_time_visibility(self, is_visible: bool) -> None:
        '''Changes slide date-time placeholder visibility.
        :param is_visible: true - makes a date-time placeholder visible, otherwise - hides it.'''
        ...

    def set_footer_text(self, text: str) -> None:
        '''Sets text to slide footer placeholder.
        :param text: Text to set.'''
        ...

    def set_date_time_text(self, text: str) -> None:
        '''Sets text to slide date-time placeholder.
        :param text: Text to set.'''
        ...

    @property
    def is_footer_visible(self) -> bool:
        ...

    @property
    def is_slide_number_visible(self) -> bool:
        ...

    @property
    def is_date_time_visible(self) -> bool:
        ...

    @property
    def as_i_base_slide_header_footer_manager(self) -> IBaseSlideHeaderFooterManager:
        ...

    @property
    def as_i_base_header_footer_manager(self) -> IBaseHeaderFooterManager:
        ...

    ...

class SlideShowSettings:
    '''Represents the slide show settings for the presentation.'''
    @property
    def slide_show_type(self) -> SlideShowType:
        ...

    @slide_show_type.setter
    def slide_show_type(self, value: SlideShowType):
        ...

    @property
    def loop(self) -> bool:
        '''Loop Slide Show'''
        ...

    @loop.setter
    def loop(self, value: bool):
        '''Loop Slide Show'''
        ...

    @property
    def show_narration(self) -> bool:
        ...

    @show_narration.setter
    def show_narration(self, value: bool):
        ...

    @property
    def show_animation(self) -> bool:
        ...

    @show_animation.setter
    def show_animation(self, value: bool):
        ...

    @property
    def pen_color(self) -> IColorFormat:
        ...

    @property
    def slides(self) -> SlidesRange:
        '''Slides range'''
        ...

    @slides.setter
    def slides(self, value: SlidesRange):
        '''Slides range'''
        ...

    @property
    def use_timings(self) -> bool:
        ...

    @use_timings.setter
    def use_timings(self, value: bool):
        ...

    @property
    def show_media_controls(self) -> bool:
        ...

    @show_media_controls.setter
    def show_media_controls(self, value: bool):
        ...

    ...

class SlideShowType:
    '''Base slide show settings. Ancestors represent types of the slide show:
                 :py:class:`aspose.slides.PresentedBySpeaker` Presented by a speaker (full screen)
                 :py:class:`aspose.slides.BrowsedByIndividual` Browsed by individual (window)
                 :py:class:`aspose.slides.BrowsedAtKiosk` Browsed at a kiosk (full screen)'''
    ...

class SlideSize:
    '''Represents a size of slide.'''
    @overload
    def set_size(self, type: SlideSizeType, scale_type: SlideSizeScaleType) -> None:
        '''Sets the type of slide size and scales content using scale type.
        :param type: Slide size type.
        :param scale_type: Scale type of slide content.'''
        ...

    @overload
    def set_size(self, width: float, height: float, scale_type: SlideSizeScaleType) -> None:
        '''Sets the size in points and scales content using scale type.
        :param width: Width.
        :param height: Height.
        :param scale_type: Scale type of slide content.'''
        ...

    @property
    def size(self) -> aspose.pydrawing.SizeF:
        '''Returns or sets the size in points.
                    
                    Read/write :py:class:`aspose.pydrawing.SizeF`.'''
        ...

    @property
    def type(self) -> SlideSizeType:
        '''Returns or sets the type of slide size.
                    
                    Read/write :py:enum:`aspose.slides.SlideSizeType`.'''
        ...

    @property
    def orientation(self) -> SlideOrientation:
        '''Returns or sets the slide orientation.
                    
                    Read/write :py:enum:`aspose.slides.SlideOrientation`.'''
        ...

    @orientation.setter
    def orientation(self, value: SlideOrientation):
        '''Returns or sets the slide orientation.
                    
                    Read/write :py:enum:`aspose.slides.SlideOrientation`.'''
        ...

    ...

class SlidesRange:
    '''Slides range'''
    def __init__(self):
        ...

    @property
    def start(self) -> int:
        '''Start'''
        ...

    @start.setter
    def start(self, value: int):
        '''Start'''
        ...

    @property
    def end(self) -> int:
        '''End'''
        ...

    @end.setter
    def end(self, value: int):
        '''End'''
        ...

    ...

class SpreadsheetOptions:
    '''Represents options which can be used to specify additional spreadsheets behavior.'''
    def __init__(self):
        '''Initializes a new instance of the :py:class:`aspose.slides.SpreadsheetOptions` class.'''
        ...

    @property
    def recover_workbook_from_chart_cache(self) -> bool:
        ...

    @recover_workbook_from_chart_cache.setter
    def recover_workbook_from_chart_cache(self, value: bool):
        ...

    ...

class StreamWrapper:
    '''Aspose.IO.Stream wrapper for COM interface.'''
    def close(self) -> None:
        '''Closes the current stream and releases any resources.'''
        ...

    def flush(self) -> None:
        '''Clears all buffers for this stream and causes any buffered data to be written to the underlying device.'''
        ...

    def read(self, buffer: bytes, offset: int, count: int) -> None:
        '''Reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.'''
        ...

    def read_byte(self) -> int:
        '''Reads a byte from the stream and advances the position within the stream by one byte, or returns -1 if at the end of the stream.'''
        ...

    def seek(self, offset: int, origin: System.IO.SeekOrigin) -> int:
        '''Sets the position within the current stream'''
        ...

    def write(self, buffer: bytes, offset: int, count: int) -> None:
        '''writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.'''
        ...

    def write_byte(self, value: int) -> None:
        '''Writes a byte to the current position in the stream and advances the position within the stream by one byte.'''
        ...

    @property
    def stream(self) -> io.RawIOBase:
        '''Gets a stream.
                    Read-only :py:class:`io.RawIOBase`.'''
        ...

    @property
    def can_read(self) -> bool:
        ...

    @property
    def can_seek(self) -> bool:
        ...

    @property
    def can_write(self) -> bool:
        ...

    @property
    def length(self) -> int:
        '''Gets the length in bytes of the stream.
                    Read-only :py:class:`int`.'''
        ...

    @property
    def position(self) -> int:
        '''Gets or sets the position within the current stream.
                    Read-only :py:class:`int`.'''
        ...

    @property
    def as_i_disposable(self) -> IDisposable:
        ...

    ...

class StreamWrapperFactory:
    '''Factory of StreamWrappers. For COM interface.'''
    def __init__(self):
        ...

    @overload
    def create_memory_stream_wrapper(self) -> IStreamWrapper:
        '''Creates MemoryStream wrapper.'''
        ...

    @overload
    def create_memory_stream_wrapper(self, buffer: bytes) -> IStreamWrapper:
        '''Creates MemoryStream wrapper based on the specified byte array.'''
        ...

    @overload
    def create_file_stream_wrapper(self, file_name: str, file_mode: System.IO.FileMode) -> IStreamWrapper:
        '''Creates FileStream with the specified path and creation mode.'''
        ...

    @overload
    def create_file_stream_wrapper(self, file_name: str, file_mode: System.IO.FileMode, file_access: System.IO.FileAccess) -> IStreamWrapper:
        '''Creates FileStream with the specified path, creation mode, and read/write permission.'''
        ...

    ...

class SummaryZoomFrame(GraphicalObject):
    '''Represents a Summary Zoom object in a slide.'''
    @overload
    def get_thumbnail(self) -> aspose.pydrawing.Bitmap:
        '''Returns shape thumbnail.
                    ShapeThumbnailBounds.Shape shape thumbnail bounds type is used by default.
        :returns: Shape thumbnail.'''
        ...

    @overload
    def get_thumbnail(self, bounds: ShapeThumbnailBounds, scale_x: float, scale_y: float) -> aspose.pydrawing.Bitmap:
        '''Returns shape thumbnail.
        :param bounds: Shape thumbnail bounds type.
        :param scale_x: X scale
        :param scale_y: Y scale
        :returns: Shape thumbnail or None in case when ShapeThumbnailBounds.Appearance is used and a shape doesn't have visible elements.'''
        ...

    @overload
    def get_image(self) -> IImage:
        '''Returns shape thumbnail.
                    ShapeThumbnailBounds.Shape shape thumbnail bounds type is used by default.
        :returns: Shape thumbnail.'''
        ...

    @overload
    def get_image(self, bounds: ShapeThumbnailBounds, scale_x: float, scale_y: float) -> IImage:
        '''Returns shape thumbnail.
        :param bounds: Shape thumbnail bounds type.
        :param scale_x: X scale
        :param scale_y: Y scale
        :returns: Shape thumbnail or None in case when ShapeThumbnailBounds.Appearance is used and a shape doesn't have visible elements.'''
        ...

    @overload
    def write_as_svg(self, stream: io.RawIOBase) -> None:
        '''Saves content of Shape as SVG file.
        :param stream: Target stream'''
        ...

    @overload
    def write_as_svg(self, stream: io.RawIOBase, svg_options: aspose.slides.export.ISVGOptions) -> None:
        '''Saves content of Shape as SVG file.
        :param stream: Target stream
        :param svg_options: SVG generation options'''
        ...

    def remove_placeholder(self) -> None:
        '''Defines that this shape isn't a placeholder.'''
        ...

    def add_placeholder(self, placeholder_to_copy_from: IPlaceholder) -> IPlaceholder:
        '''Adds a new placeholder if there is no and sets placeholder properties to a specified one.
        :param placeholder_to_copy_from: Placeholder to copy content from.
        :returns: New :py:attr:`aspose.slides.Shape.placeholder`.'''
        ...

    def get_base_placeholder(self) -> IShape:
        '''Returns a basic placeholder shape (shape from the layout and/or master slide that the current shape is inherited from).'''
        ...

    @property
    def is_text_holder(self) -> bool:
        ...

    @property
    def placeholder(self) -> IPlaceholder:
        '''Returns the placeholder for a shape. Returns None if the shape has no placeholder.
                    Read-only :py:class:`aspose.slides.IPlaceholder`.'''
        ...

    @property
    def custom_data(self) -> ICustomData:
        ...

    @property
    def raw_frame(self) -> IShapeFrame:
        ...

    @raw_frame.setter
    def raw_frame(self, value: IShapeFrame):
        ...

    @property
    def frame(self) -> IShapeFrame:
        '''Returns or sets the shape frame's properties.
                    Read/write :py:class:`aspose.slides.IShapeFrame`.'''
        ...

    @frame.setter
    def frame(self, value: IShapeFrame):
        '''Returns or sets the shape frame's properties.
                    Read/write :py:class:`aspose.slides.IShapeFrame`.'''
        ...

    @property
    def line_format(self) -> ILineFormat:
        ...

    @property
    def three_d_format(self) -> IThreeDFormat:
        ...

    @property
    def effect_format(self) -> IEffectFormat:
        ...

    @property
    def fill_format(self) -> IFillFormat:
        ...

    @property
    def hyperlink_click(self) -> IHyperlink:
        ...

    @hyperlink_click.setter
    def hyperlink_click(self, value: IHyperlink):
        ...

    @property
    def hyperlink_mouse_over(self) -> IHyperlink:
        ...

    @hyperlink_mouse_over.setter
    def hyperlink_mouse_over(self, value: IHyperlink):
        ...

    @property
    def hyperlink_manager(self) -> IHyperlinkManager:
        ...

    @property
    def hidden(self) -> bool:
        '''Determines whether the shape is hidden.
                    Read/write :py:class:`bool`.'''
        ...

    @hidden.setter
    def hidden(self, value: bool):
        '''Determines whether the shape is hidden.
                    Read/write :py:class:`bool`.'''
        ...

    @property
    def z_order_position(self) -> int:
        ...

    @property
    def connection_site_count(self) -> int:
        ...

    @property
    def rotation(self) -> float:
        '''Returns or sets the number of degrees the specified shape is rotated around
                    the z-axis. A positive value indicates clockwise rotation; a negative value
                    indicates counterclockwise rotation.
                    Read/write :py:class:`float`.'''
        ...

    @rotation.setter
    def rotation(self, value: float):
        '''Returns or sets the number of degrees the specified shape is rotated around
                    the z-axis. A positive value indicates clockwise rotation; a negative value
                    indicates counterclockwise rotation.
                    Read/write :py:class:`float`.'''
        ...

    @property
    def x(self) -> float:
        '''Returns or sets the x-coordinate of the upper-left corner of the shape.
                    Read/write :py:class:`float`.'''
        ...

    @x.setter
    def x(self, value: float):
        '''Returns or sets the x-coordinate of the upper-left corner of the shape.
                    Read/write :py:class:`float`.'''
        ...

    @property
    def y(self) -> float:
        '''Returns or sets the y-coordinate of the upper-left corner of the shape.
                    Read/write :py:class:`float`.'''
        ...

    @y.setter
    def y(self, value: float):
        '''Returns or sets the y-coordinate of the upper-left corner of the shape.
                    Read/write :py:class:`float`.'''
        ...

    @property
    def width(self) -> float:
        '''Returns or sets the width of the shape.
                    Read/write :py:class:`float`.'''
        ...

    @width.setter
    def width(self, value: float):
        '''Returns or sets the width of the shape.
                    Read/write :py:class:`float`.'''
        ...

    @property
    def height(self) -> float:
        '''Returns or sets the height of the shape.
                    Read/write :py:class:`float`.'''
        ...

    @height.setter
    def height(self, value: float):
        '''Returns or sets the height of the shape.
                    Read/write :py:class:`float`.'''
        ...

    @property
    def black_white_mode(self) -> BlackWhiteMode:
        ...

    @black_white_mode.setter
    def black_white_mode(self, value: BlackWhiteMode):
        ...

    @property
    def unique_id(self) -> int:
        ...

    @property
    def office_interop_shape_id(self) -> int:
        ...

    @property
    def alternative_text(self) -> str:
        ...

    @alternative_text.setter
    def alternative_text(self, value: str):
        ...

    @property
    def alternative_text_title(self) -> str:
        ...

    @alternative_text_title.setter
    def alternative_text_title(self, value: str):
        ...

    @property
    def name(self) -> str:
        '''Returns or sets the name of a shape.
                    Must be not None. Use empty string value if needed.
                    Read/write :py:class:`str`.'''
        ...

    @name.setter
    def name(self, value: str):
        '''Returns or sets the name of a shape.
                    Must be not None. Use empty string value if needed.
                    Read/write :py:class:`str`.'''
        ...

    @property
    def is_decorative(self) -> bool:
        ...

    @is_decorative.setter
    def is_decorative(self, value: bool):
        ...

    @property
    def shape_lock(self) -> IGraphicalObjectLock:
        ...

    @property
    def is_grouped(self) -> bool:
        ...

    @property
    def parent_group(self) -> IGroupShape:
        ...

    @property
    def slide(self) -> IBaseSlide:
        '''Returns the parent slide of a shape.
                    Read-only :py:class:`aspose.slides.IBaseSlide`.'''
        ...

    @property
    def presentation(self) -> IPresentation:
        '''Returns the parent presentation of a slide.
                    Read-only :py:class:`aspose.slides.IPresentation`.'''
        ...

    @property
    def graphical_object_lock(self) -> IGraphicalObjectLock:
        ...

    @property
    def layout(self) -> ZoomLayout:
        '''Gets layout of Summary Zoom Sections in the frame.
                    Default value is GridLayout.'''
        ...

    @property
    def summary_zoom_collection(self) -> ISummaryZoomSectionCollection:
        ...

    @property
    def as_i_hyperlink_container(self) -> IHyperlinkContainer:
        ...

    @property
    def as_i_slide_component(self) -> ISlideComponent:
        ...

    @property
    def as_i_presentation_component(self) -> IPresentationComponent:
        ...

    @property
    def as_i_shape(self) -> IShape:
        ...

    @property
    def as_i_graphical_object(self) -> IGraphicalObject:
        ...

    ...

class SummaryZoomSection(SectionZoomFrame):
    '''Represents a Summary Zoom Section object in a Summary Zoom frame.'''
    @overload
    def get_thumbnail(self) -> aspose.pydrawing.Bitmap:
        '''Returns shape thumbnail.
                    ShapeThumbnailBounds.Shape shape thumbnail bounds type is used by default.
        :returns: Shape thumbnail.'''
        ...

    @overload
    def get_thumbnail(self, bounds: ShapeThumbnailBounds, scale_x: float, scale_y: float) -> aspose.pydrawing.Bitmap:
        '''Returns shape thumbnail.
        :param bounds: Shape thumbnail bounds type.
        :param scale_x: X scale
        :param scale_y: Y scale
        :returns: Shape thumbnail or None in case when ShapeThumbnailBounds.Appearance is used and a shape doesn't have visible elements.'''
        ...

    @overload
    def get_image(self) -> IImage:
        '''Returns shape thumbnail.
                    ShapeThumbnailBounds.Shape shape thumbnail bounds type is used by default.
        :returns: Shape thumbnail.'''
        ...

    @overload
    def get_image(self, bounds: ShapeThumbnailBounds, scale_x: float, scale_y: float) -> IImage:
        '''Returns shape thumbnail.
        :param bounds: Shape thumbnail bounds type.
        :param scale_x: X scale
        :param scale_y: Y scale
        :returns: Shape thumbnail or None in case when ShapeThumbnailBounds.Appearance is used and a shape doesn't have visible elements.'''
        ...

    @overload
    def write_as_svg(self, stream: io.RawIOBase) -> None:
        '''Saves content of Shape as SVG file.
        :param stream: Target stream'''
        ...

    @overload
    def write_as_svg(self, stream: io.RawIOBase, svg_options: aspose.slides.export.ISVGOptions) -> None:
        '''Saves content of Shape as SVG file.
        :param stream: Target stream
        :param svg_options: SVG generation options'''
        ...

    def remove_placeholder(self) -> None:
        '''Defines that this shape isn't a placeholder.'''
        ...

    def add_placeholder(self, placeholder_to_copy_from: IPlaceholder) -> IPlaceholder:
        '''Adds a new placeholder if there is no and sets placeholder properties to a specified one.
        :param placeholder_to_copy_from: Placeholder to copy content from.
        :returns: New :py:attr:`aspose.slides.Shape.placeholder`.'''
        ...

    def get_base_placeholder(self) -> IShape:
        '''Returns a basic placeholder shape (shape from the layout and/or master slide that the current shape is inherited from).'''
        ...

    @property
    def is_text_holder(self) -> bool:
        ...

    @property
    def placeholder(self) -> IPlaceholder:
        '''Returns the placeholder for a shape. Returns None if the shape has no placeholder.
                    Read-only :py:class:`aspose.slides.IPlaceholder`.'''
        ...

    @property
    def custom_data(self) -> ICustomData:
        ...

    @property
    def raw_frame(self) -> IShapeFrame:
        ...

    @raw_frame.setter
    def raw_frame(self, value: IShapeFrame):
        ...

    @property
    def frame(self) -> IShapeFrame:
        '''Returns or sets the shape frame's properties.
                    Read/write :py:class:`aspose.slides.IShapeFrame`.'''
        ...

    @frame.setter
    def frame(self, value: IShapeFrame):
        '''Returns or sets the shape frame's properties.
                    Read/write :py:class:`aspose.slides.IShapeFrame`.'''
        ...

    @property
    def line_format(self) -> ILineFormat:
        ...

    @property
    def three_d_format(self) -> IThreeDFormat:
        ...

    @property
    def effect_format(self) -> IEffectFormat:
        ...

    @property
    def fill_format(self) -> IFillFormat:
        ...

    @property
    def hyperlink_click(self) -> IHyperlink:
        ...

    @hyperlink_click.setter
    def hyperlink_click(self, value: IHyperlink):
        ...

    @property
    def hyperlink_mouse_over(self) -> IHyperlink:
        ...

    @hyperlink_mouse_over.setter
    def hyperlink_mouse_over(self, value: IHyperlink):
        ...

    @property
    def hyperlink_manager(self) -> IHyperlinkManager:
        ...

    @property
    def hidden(self) -> bool:
        '''Determines whether the shape is hidden.
                    Read/write :py:class:`bool`.'''
        ...

    @hidden.setter
    def hidden(self, value: bool):
        '''Determines whether the shape is hidden.
                    Read/write :py:class:`bool`.'''
        ...

    @property
    def z_order_position(self) -> int:
        ...

    @property
    def connection_site_count(self) -> int:
        ...

    @property
    def rotation(self) -> float:
        '''Returns or sets the number of degrees the specified shape is rotated around
                    the z-axis. A positive value indicates clockwise rotation; a negative value
                    indicates counterclockwise rotation.
                    Read/write :py:class:`float`.'''
        ...

    @rotation.setter
    def rotation(self, value: float):
        '''Returns or sets the number of degrees the specified shape is rotated around
                    the z-axis. A positive value indicates clockwise rotation; a negative value
                    indicates counterclockwise rotation.
                    Read/write :py:class:`float`.'''
        ...

    @property
    def x(self) -> float:
        '''Returns or sets the x-coordinate of the upper-left corner of the shape.
                    Read/write :py:class:`float`.'''
        ...

    @x.setter
    def x(self, value: float):
        '''Returns or sets the x-coordinate of the upper-left corner of the shape.
                    Read/write :py:class:`float`.'''
        ...

    @property
    def y(self) -> float:
        '''Returns or sets the y-coordinate of the upper-left corner of the shape.
                    Read/write :py:class:`float`.'''
        ...

    @y.setter
    def y(self, value: float):
        '''Returns or sets the y-coordinate of the upper-left corner of the shape.
                    Read/write :py:class:`float`.'''
        ...

    @property
    def width(self) -> float:
        '''Returns or sets the width of the shape.
                    Read/write :py:class:`float`.'''
        ...

    @width.setter
    def width(self, value: float):
        '''Returns or sets the width of the shape.
                    Read/write :py:class:`float`.'''
        ...

    @property
    def height(self) -> float:
        '''Returns or sets the height of the shape.
                    Read/write :py:class:`float`.'''
        ...

    @height.setter
    def height(self, value: float):
        '''Returns or sets the height of the shape.
                    Read/write :py:class:`float`.'''
        ...

    @property
    def black_white_mode(self) -> BlackWhiteMode:
        ...

    @black_white_mode.setter
    def black_white_mode(self, value: BlackWhiteMode):
        ...

    @property
    def unique_id(self) -> int:
        ...

    @property
    def office_interop_shape_id(self) -> int:
        ...

    @property
    def alternative_text(self) -> str:
        ...

    @alternative_text.setter
    def alternative_text(self, value: str):
        ...

    @property
    def alternative_text_title(self) -> str:
        ...

    @alternative_text_title.setter
    def alternative_text_title(self, value: str):
        ...

    @property
    def name(self) -> str:
        '''Returns or sets the name of a shape.
                    Must be not None. Use empty string value if needed.
                    Read/write :py:class:`str`.'''
        ...

    @name.setter
    def name(self, value: str):
        '''Returns or sets the name of a shape.
                    Must be not None. Use empty string value if needed.
                    Read/write :py:class:`str`.'''
        ...

    @property
    def is_decorative(self) -> bool:
        ...

    @is_decorative.setter
    def is_decorative(self, value: bool):
        ...

    @property
    def shape_lock(self) -> IGraphicalObjectLock:
        ...

    @property
    def is_grouped(self) -> bool:
        ...

    @property
    def parent_group(self) -> IGroupShape:
        ...

    @property
    def slide(self) -> IBaseSlide:
        '''Returns the parent slide of a shape.
                    Read-only :py:class:`aspose.slides.IBaseSlide`.'''
        ...

    @property
    def presentation(self) -> IPresentation:
        '''Returns the parent presentation of a slide.
                    Read-only :py:class:`aspose.slides.IPresentation`.'''
        ...

    @property
    def graphical_object_lock(self) -> IGraphicalObjectLock:
        ...

    @property
    def image_type(self) -> ZoomImageType:
        ...

    @image_type.setter
    def image_type(self, value: ZoomImageType):
        ...

    @property
    def return_to_parent(self) -> bool:
        ...

    @return_to_parent.setter
    def return_to_parent(self, value: bool):
        ...

    @property
    def show_background(self) -> bool:
        ...

    @show_background.setter
    def show_background(self, value: bool):
        ...

    @property
    def zoom_image(self) -> IPPImage:
        ...

    @zoom_image.setter
    def zoom_image(self, value: IPPImage):
        ...

    @property
    def transition_duration(self) -> float:
        ...

    @transition_duration.setter
    def transition_duration(self, value: float):
        ...

    @property
    def target_section(self) -> ISection:
        ...

    @target_section.setter
    def target_section(self, value: ISection):
        ...

    @property
    def title(self) -> str:
        '''Returns the text title of the Summary Zoom Section object.'''
        ...

    @title.setter
    def title(self, value: str):
        '''Returns the text title of the Summary Zoom Section object.'''
        ...

    @property
    def description(self) -> str:
        '''Returns the text description of the Summary Zoom Section object.'''
        ...

    @description.setter
    def description(self, value: str):
        '''Returns the text description of the Summary Zoom Section object.'''
        ...

    @property
    def as_i_hyperlink_container(self) -> IHyperlinkContainer:
        ...

    @property
    def as_i_slide_component(self) -> ISlideComponent:
        ...

    @property
    def as_i_presentation_component(self) -> IPresentationComponent:
        ...

    @property
    def as_i_shape(self) -> IShape:
        ...

    @property
    def as_i_graphical_object(self) -> IGraphicalObject:
        ...

    @property
    def as_i_zoom_object(self) -> IZoomObject:
        ...

    @property
    def as_i_section_zoom_frame(self) -> ISectionZoomFrame:
        ...

    ...

class SummaryZoomSectionCollection:
    '''Represents a collection of Summary Zoom Section objects.'''
    def add_summary_zoom_section(self, section: ISection) -> ISummaryZoomSection:
        '''Creates new Summary Zoom Section object and add it to the collection
        :param section: Section for a new Summary Zoom Section element :py:class:`aspose.slides.ISection`
        :returns: Added :py:class:`aspose.slides.ISummaryZoomFrame` element'''
        ...

    def index_of(self, summary_zoom_section: ISummaryZoomSection) -> int:
        '''Returns an index of the specified SummaryZoomSection object.
        :param summary_zoom_section: SummaryZoomSection object to find :py:class:`aspose.slides.ISummaryZoomSection`.
        :returns: Index of a SummaryZoomSection object or -1 if SummaryZoomSection object not from this collection.'''
        ...

    def remove_summary_zoom_section(self, section: ISection) -> None:
        '''Remove Summary Zoom Section object from the collection.
        :param section: Section for which the Summary Zoom Section element is to be removed :py:class:`aspose.slides.ISection`.'''
        ...

    def get_summary_section(self, section: ISection) -> ISummaryZoomSection:
        '''Returns Summary Zoom Section element for the given section.
        :param section: Section to find :py:class:`aspose.slides.ISection`
        :returns: :py:class:`aspose.slides.ISummaryZoomSection` or None if collection does not contains element for the section.'''
        ...

    def clear(self) -> None:
        '''Removes all SummaryZoomSection objects from the collection.'''
        ...

    @property
    def as_i_collection(self) -> list:
        ...

    @property
    def as_i_enumerable(self) -> collections.abc.Iterable:
        ...

    def __getitem__(self, key: int) -> ISummaryZoomSection
        ...

    ...

class SvgImage:
    '''Represents an SVG image.'''
    def __init__(self, data: bytes):
        '''Creates new SvgImage object.
        :param data: Svg data.'''
        ...

    def __init__(self, svg_content: str):
        '''Creates new SvgImage object.
        :param svg_content: Svg content.'''
        ...

    def __init__(self, stream: io.RawIOBase):
        '''Creates new SvgImage object.
        :param stream: Svg stream.'''
        ...

    def __init__(self, data: bytes, external_res_resolver: aspose.slides.importing.IExternalResourceResolver, base_uri: str):
        '''Creates new SvgImage object.
        :param data: Svg data.
        :param external_res_resolver: A callback object used to fetch external objects. If this parameter is None all external objects will be ignored.
        :param base_uri: Base URI of the specified Svg. Used to resolve relative links.'''
        ...

    def __init__(self, svg_content: str, external_res_resolver: aspose.slides.importing.IExternalResourceResolver, base_uri: str):
        '''Creates new SvgImage object.
        :param svg_content: Svg content.
        :param external_res_resolver: A callback object used to fetch external objects. If this parameter is None all external objects will be ignored.
        :param base_uri: Base URI of the specified Svg. Used to resolve relative links.'''
        ...

    def __init__(self, stream: io.RawIOBase, external_res_resolver: aspose.slides.importing.IExternalResourceResolver, base_uri: str):
        '''Creates new SvgImage object.
        :param stream: Svg stream.
        :param external_res_resolver: A callback object used to fetch external objects. If this parameter is None all external objects will be ignored.
        :param base_uri: Base URI of the specified Svg. Used to resolve relative links.'''
        ...

    def write_as_emf(self, stream: io.RawIOBase) -> None:
        '''Saves the SVG image as an EMF file.
        :param stream: Target stream'''
        ...

    @property
    def svg_data(self) -> bytes:
        ...

    @property
    def external_resource_resolver(self) -> aspose.slides.importing.IExternalResourceResolver:
        ...

    @property
    def base_uri(self) -> str:
        ...

    @property
    def svg_content(self) -> str:
        ...

    ...

class Tab(PVIObject):
    '''Represents a tabulation for a text.'''
    def __init__(self, position: float, align: TabAlignment):
        '''Creates new Tab
        :param position: Tab position.
        :param align: Align.'''
        ...

    def compare_to(self, obj: any) -> int:
        '''Compares the current instance with another object of the same type.
        :param obj: An object to compare with this instance.
        :returns: A 32-bit integer that indicates the relative order of the comparands.
                    The return value has these meanings:
                    
        * 
        
        * 
        
        *'''
        ...

    @property
    def as_i_presentation_component(self) -> IPresentationComponent:
        ...

    @property
    def position(self) -> float:
        '''Returns or sets position of a tab.
                    Assigning this property can change tab's index in collection and invalidate Enumerator.
                    Read/write :py:class:`float`.'''
        ...

    @position.setter
    def position(self, value: float):
        '''Returns or sets position of a tab.
                    Assigning this property can change tab's index in collection and invalidate Enumerator.
                    Read/write :py:class:`float`.'''
        ...

    @property
    def alignment(self) -> TabAlignment:
        '''Returns or sets align style of a tab.
                    Read/write :py:enum:`aspose.slides.TabAlignment`.'''
        ...

    @alignment.setter
    def alignment(self, value: TabAlignment):
        '''Returns or sets align style of a tab.
                    Read/write :py:enum:`aspose.slides.TabAlignment`.'''
        ...

    @property
    def slide(self) -> IBaseSlide:
        ...

    @property
    def presentation(self) -> IPresentation:
        ...

    ...

class TabCollection:
    '''Represents a collection of tabs.'''
    @overload
    def add(self, position: float, align: TabAlignment) -> ITab:
        '''Adds a Tab to the collection.
        :returns: Added tab.'''
        ...

    @overload
    def add(self, value: ITab) -> int:
        '''Adds a Tab to the collection.
        :param value: The Tab object to be added at the end of the collection.
        :returns: The index at which the tab was added.'''
        ...

    def clear(self) -> None:
        '''Removes all elements from the collection.'''
        ...

    def remove_at(self, index: int) -> None:
        '''Removes the element at the specified index of the collection.
        :param index: The zero-based index of the element to remove.'''
        ...

    @property
    def as_i_collection(self) -> list:
        ...

    @property
    def as_i_enumerable(self) -> collections.abc.Iterable:
        ...

    def __getitem__(self, key: int) -> ITab
        ...

    ...

class TabFactory:
    '''Allows to create ITab instances'''
    def __init__(self):
        ...

    def create_tab(self, position: float, align: TabAlignment) -> ITab:
        '''Creates a new ITab instance.
        :param position: Tab position.
        :param align: Align.
        :returns: Created tab.'''
        ...

    ...

class Table(GraphicalObject):
    '''Represents a table on a slide.'''
    @overload
    def get_thumbnail(self) -> aspose.pydrawing.Bitmap:
        '''Returns shape thumbnail.
                    ShapeThumbnailBounds.Shape shape thumbnail bounds type is used by default.
        :returns: Shape thumbnail.'''
        ...

    @overload
    def get_thumbnail(self, bounds: ShapeThumbnailBounds, scale_x: float, scale_y: float) -> aspose.pydrawing.Bitmap:
        '''Returns shape thumbnail.
        :param bounds: Shape thumbnail bounds type.
        :param scale_x: X scale
        :param scale_y: Y scale
        :returns: Shape thumbnail or None in case when ShapeThumbnailBounds.Appearance is used and a shape doesn't have visible elements.'''
        ...

    @overload
    def get_image(self) -> IImage:
        '''Returns shape thumbnail.
                    ShapeThumbnailBounds.Shape shape thumbnail bounds type is used by default.
        :returns: Shape thumbnail.'''
        ...

    @overload
    def get_image(self, bounds: ShapeThumbnailBounds, scale_x: float, scale_y: float) -> IImage:
        '''Returns shape thumbnail.
        :param bounds: Shape thumbnail bounds type.
        :param scale_x: X scale
        :param scale_y: Y scale
        :returns: Shape thumbnail or None in case when ShapeThumbnailBounds.Appearance is used and a shape doesn't have visible elements.'''
        ...

    @overload
    def write_as_svg(self, stream: io.RawIOBase) -> None:
        '''Saves content of Shape as SVG file.
        :param stream: Target stream'''
        ...

    @overload
    def write_as_svg(self, stream: io.RawIOBase, svg_options: aspose.slides.export.ISVGOptions) -> None:
        '''Saves content of Shape as SVG file.
        :param stream: Target stream
        :param svg_options: SVG generation options'''
        ...

    @overload
    def set_text_format(self, source: IPortionFormat) -> None:
        '''Sets defined portion format properties to all table cells' portions.
        :param source: IPortionFormat object with necessary properties set.'''
        ...

    @overload
    def set_text_format(self, source: IParagraphFormat) -> None:
        '''Sets defined paragraph format properties to all table cells' paragraphs.
        :param source: IParagraphFormat object with necessary properties set.'''
        ...

    @overload
    def set_text_format(self, source: ITextFrameFormat) -> None:
        '''Sets defined text frame format properties to all table cells' text frames.
        :param source: ITextFrameFormat object with necessary properties set.'''
        ...

    def remove_placeholder(self) -> None:
        '''Defines that this shape isn't a placeholder.'''
        ...

    def add_placeholder(self, placeholder_to_copy_from: IPlaceholder) -> IPlaceholder:
        '''Adds a new placeholder if there is no and sets placeholder properties to a specified one.
        :param placeholder_to_copy_from: Placeholder to copy content from.
        :returns: New :py:attr:`aspose.slides.Shape.placeholder`.'''
        ...

    def get_base_placeholder(self) -> IShape:
        '''Returns a basic placeholder shape (shape from the layout and/or master slide that the current shape is inherited from).'''
        ...

    def merge_cells(self, cell1: ICell, cell2: ICell, allow_splitting: bool) -> ICell:
        '''Merges neighbour cells.
        :param cell1: Cell to merge.
        :param cell2: Cell to merge.
        :param allow_splitting: True to allow cells splitting.
        :returns: Merged cell.'''
        ...

    @property
    def is_text_holder(self) -> bool:
        ...

    @property
    def placeholder(self) -> IPlaceholder:
        '''Returns the placeholder for a shape. Returns None if the shape has no placeholder.
                    Read-only :py:class:`aspose.slides.IPlaceholder`.'''
        ...

    @property
    def custom_data(self) -> ICustomData:
        ...

    @property
    def raw_frame(self) -> IShapeFrame:
        ...

    @raw_frame.setter
    def raw_frame(self, value: IShapeFrame):
        ...

    @property
    def frame(self) -> IShapeFrame:
        '''Returns or sets the shape frame's properties.
                    Read/write :py:class:`aspose.slides.IShapeFrame`.'''
        ...

    @frame.setter
    def frame(self, value: IShapeFrame):
        '''Returns or sets the shape frame's properties.
                    Read/write :py:class:`aspose.slides.IShapeFrame`.'''
        ...

    @property
    def line_format(self) -> ILineFormat:
        ...

    @property
    def three_d_format(self) -> IThreeDFormat:
        ...

    @property
    def effect_format(self) -> IEffectFormat:
        ...

    @property
    def fill_format(self) -> IFillFormat:
        ...

    @property
    def hyperlink_click(self) -> IHyperlink:
        ...

    @hyperlink_click.setter
    def hyperlink_click(self, value: IHyperlink):
        ...

    @property
    def hyperlink_mouse_over(self) -> IHyperlink:
        ...

    @hyperlink_mouse_over.setter
    def hyperlink_mouse_over(self, value: IHyperlink):
        ...

    @property
    def hyperlink_manager(self) -> IHyperlinkManager:
        ...

    @property
    def hidden(self) -> bool:
        '''Determines whether the shape is hidden.
                    Read/write :py:class:`bool`.'''
        ...

    @hidden.setter
    def hidden(self, value: bool):
        '''Determines whether the shape is hidden.
                    Read/write :py:class:`bool`.'''
        ...

    @property
    def z_order_position(self) -> int:
        ...

    @property
    def connection_site_count(self) -> int:
        ...

    @property
    def rotation(self) -> float:
        '''Returns or sets the number of degrees the specified shape is rotated around
                    the z-axis. A positive value indicates clockwise rotation; a negative value
                    indicates counterclockwise rotation.
                    Read/write :py:class:`float`.'''
        ...

    @rotation.setter
    def rotation(self, value: float):
        '''Returns or sets the number of degrees the specified shape is rotated around
                    the z-axis. A positive value indicates clockwise rotation; a negative value
                    indicates counterclockwise rotation.
                    Read/write :py:class:`float`.'''
        ...

    @property
    def x(self) -> float:
        '''Returns or sets the x-coordinate of the upper-left corner of the shape.
                    Read/write :py:class:`float`.'''
        ...

    @x.setter
    def x(self, value: float):
        '''Returns or sets the x-coordinate of the upper-left corner of the shape.
                    Read/write :py:class:`float`.'''
        ...

    @property
    def y(self) -> float:
        '''Returns or sets the y-coordinate of the upper-left corner of the shape.
                    Read/write :py:class:`float`.'''
        ...

    @y.setter
    def y(self, value: float):
        '''Returns or sets the y-coordinate of the upper-left corner of the shape.
                    Read/write :py:class:`float`.'''
        ...

    @property
    def width(self) -> float:
        '''Returns or sets the width of the shape.
                    Read/write :py:class:`float`.'''
        ...

    @width.setter
    def width(self, value: float):
        '''Returns or sets the width of the shape.
                    Read/write :py:class:`float`.'''
        ...

    @property
    def height(self) -> float:
        '''Returns or sets the height of the shape.
                    Read/write :py:class:`float`.'''
        ...

    @height.setter
    def height(self, value: float):
        '''Returns or sets the height of the shape.
                    Read/write :py:class:`float`.'''
        ...

    @property
    def black_white_mode(self) -> BlackWhiteMode:
        ...

    @black_white_mode.setter
    def black_white_mode(self, value: BlackWhiteMode):
        ...

    @property
    def unique_id(self) -> int:
        ...

    @property
    def office_interop_shape_id(self) -> int:
        ...

    @property
    def alternative_text(self) -> str:
        ...

    @alternative_text.setter
    def alternative_text(self, value: str):
        ...

    @property
    def alternative_text_title(self) -> str:
        ...

    @alternative_text_title.setter
    def alternative_text_title(self, value: str):
        ...

    @property
    def name(self) -> str:
        '''Returns or sets the name of a shape.
                    Must be not None. Use empty string value if needed.
                    Read/write :py:class:`str`.'''
        ...

    @name.setter
    def name(self, value: str):
        '''Returns or sets the name of a shape.
                    Must be not None. Use empty string value if needed.
                    Read/write :py:class:`str`.'''
        ...

    @property
    def is_decorative(self) -> bool:
        ...

    @is_decorative.setter
    def is_decorative(self, value: bool):
        ...

    @property
    def shape_lock(self) -> IGraphicalObjectLock:
        ...

    @property
    def is_grouped(self) -> bool:
        ...

    @property
    def parent_group(self) -> IGroupShape:
        ...

    @property
    def slide(self) -> IBaseSlide:
        '''Returns the parent slide of a shape.
                    Read-only :py:class:`aspose.slides.IBaseSlide`.'''
        ...

    @property
    def presentation(self) -> IPresentation:
        '''Returns the parent presentation of a slide.
                    Read-only :py:class:`aspose.slides.IPresentation`.'''
        ...

    @property
    def graphical_object_lock(self) -> IGraphicalObjectLock:
        ...

    @property
    def rows(self) -> IRowCollection:
        '''Returns the collectoin of rows.
                    Read-only :py:class:`aspose.slides.IRowCollection`.'''
        ...

    @property
    def columns(self) -> IColumnCollection:
        '''Returns the collectoin of columns.
                    Read-only :py:class:`aspose.slides.IColumnCollection`.'''
        ...

    @property
    def table_format(self) -> ITableFormat:
        ...

    @property
    def style_preset(self) -> TableStylePreset:
        ...

    @style_preset.setter
    def style_preset(self, value: TableStylePreset):
        ...

    @property
    def right_to_left(self) -> bool:
        ...

    @right_to_left.setter
    def right_to_left(self, value: bool):
        ...

    @property
    def first_row(self) -> bool:
        ...

    @first_row.setter
    def first_row(self, value: bool):
        ...

    @property
    def first_col(self) -> bool:
        ...

    @first_col.setter
    def first_col(self, value: bool):
        ...

    @property
    def last_row(self) -> bool:
        ...

    @last_row.setter
    def last_row(self, value: bool):
        ...

    @property
    def last_col(self) -> bool:
        ...

    @last_col.setter
    def last_col(self, value: bool):
        ...

    @property
    def horizontal_banding(self) -> bool:
        ...

    @horizontal_banding.setter
    def horizontal_banding(self, value: bool):
        ...

    @property
    def vertical_banding(self) -> bool:
        ...

    @vertical_banding.setter
    def vertical_banding(self, value: bool):
        ...

    @property
    def as_i_hyperlink_container(self) -> IHyperlinkContainer:
        ...

    @property
    def as_i_slide_component(self) -> ISlideComponent:
        ...

    @property
    def as_i_presentation_component(self) -> IPresentationComponent:
        ...

    @property
    def as_i_shape(self) -> IShape:
        ...

    @property
    def as_i_graphical_object(self) -> IGraphicalObject:
        ...

    @property
    def as_i_bulk_text_formattable(self) -> IBulkTextFormattable:
        ...

    ...

class TableFormat:
    '''Represents format of a table.'''
    def get_effective(self) -> ITableFormatEffectiveData:
        '''Gets effective table formatting properties with inheritance and table styles applied.
        :returns: A :py:class:`aspose.slides.ITableFormatEffectiveData`.'''
        ...

    @property
    def fill_format(self) -> IFillFormat:
        ...

    @property
    def transparency(self) -> float:
        '''Gets or sets the transparency of the fill color.
                    Read/write :py:class:`float`.'''
        ...

    @transparency.setter
    def transparency(self, value: float):
        '''Gets or sets the transparency of the fill color.
                    Read/write :py:class:`float`.'''
        ...

    ...

class TagCollection:
    '''Represents the collection of tags (user defined pairs of strings)'''
    def add(self, name: str, value: str) -> int:
        '''Adds a new tag to collection.
        :param name: The name of the tag.
        :param value: The value of the tag.
        :returns: The index of the added tag.'''
        ...

    def remove(self, name: str) -> None:
        '''Removes the tag with a specified name from the collection.
        :param name: The name of tag to remove.'''
        ...

    def index_of_name(self, name: str) -> int:
        '''Returns the zero-based index of the specified key in the collection.
        :param name: The name to locate in the collection.
        :returns: The zero-based index of key, if key is found in the collection; otherwise, -1.'''
        ...

    def remove_at(self, index: int) -> None:
        '''Removes the tag at the specified index.
        :param index: The zero-based index of the tag to remove.'''
        ...

    def clear(self) -> None:
        '''Removes all tags from the collection.'''
        ...

    def get_value_by_index(self, index: int) -> str:
        '''Returns value of a tag at the specified index.
        :param index: Index of a tag to return.
        :returns: Value of a tag.'''
        ...

    def get_name_by_index(self, index: int) -> str:
        '''Returns key of a tag at the specified index.
        :param index: Index of a tag to return.
        :returns: Key of a tag.'''
        ...

    def get_names_of_tags(self) -> List[str]:
        '''Returns names of tags.
        :returns: Names of tags.'''
        ...

    @property
    def as_i_collection(self) -> list:
        ...

    @property
    def as_i_enumerable(self) -> collections.abc.Iterable:
        ...

    ...

class TextFrame:
    '''Represents a TextFrame.'''
    @overload
    def highlight_text(self, text: str, highlight_color: aspose.pydrawing.Color) -> None:
        '''Highlights all matches of the sample text with the specified color.
        :param text: Text sample to highlight.
        :param highlight_color: The color to highlight the text.'''
        ...

    @overload
    def highlight_text(self, text: str, highlight_color: aspose.pydrawing.Color, options: ITextHighlightingOptions) -> None:
        '''Highlights all matches of the sample text with the specified color.
        :param text: The text to highlight.
        :param highlight_color: The color to highlight the text.
        :param options: Highlighting options.'''
        ...

    @overload
    def highlight_text(self, text: str, highlight_color: aspose.pydrawing.Color, options: ITextSearchOptions, callback: IFindResultCallback) -> None:
        '''Highlights all matches of the sample text with the specified color.
        :param text: The text to highlight.
        :param highlight_color: The color to highlight the text.
        :param options: Text search options :py:class:`aspose.slides.ITextSearchOptions`.
        :param callback: The callback object for receiving search results :py:class:`aspose.slides.IFindResultCallback`.'''
        ...

    @overload
    def highlight_regex(self, regex: str, highlight_color: aspose.pydrawing.Color, options: ITextHighlightingOptions) -> None:
        '''Highlights all matches of the regular expression with the specified color.
        :param regex: Text of regular expression to get text to highlight.
        :param highlight_color: The color to highlight the text.
        :param options: Highlighting options.'''
        ...

    @overload
    def highlight_regex(self, regex: str, highlight_color: aspose.pydrawing.Color) -> None:
        '''Highlights all matches of the regular expression with the specified color.
        :param regex: The string contains regular expression to get strings to highlight.
        :param highlight_color: The color to highlight the text.'''
        ...

    def join_portions_with_same_formatting(self) -> None:
        '''Joins runs with same formatting in all paragraphs.'''
        ...

    def split_text_by_columns(self) -> List[str]:
        '''Splits the text content of the :py:class:`aspose.slides.ITextFrame` into an array of strings,  
                    where each element corresponds to a separate text column within the frame.
        :returns: An array of strings, where each string represents the text content of a specific column  
                    in the :py:class:`aspose.slides.ITextFrame`.'''
        ...

    def replace_text(self, old_text: str, new_text: str, options: ITextSearchOptions, callback: IFindResultCallback) -> None:
        '''Replaces all occurrences of the specified text with another specified text.
        :param old_text: The string to be replaced.
        :param new_text: The string to replace all occurrences of oldText.
        :param options: Text search options :py:class:`aspose.slides.ITextSearchOptions`.
        :param callback: Callback object for saving replacement operation result :py:class:`aspose.slides.IFindResultCallback`.'''
        ...

    def replace_regex(self, regex: str, new_text: str) -> None:
        '''Replaces all matches of regular expression with specified string.
        :param regex: The string contains regular expression to get strings to be replaced.
        :param new_text: The string to replace all occurrences of strings to be replaced.'''
        ...

    @property
    def paragraphs(self) -> IParagraphCollection:
        '''Returns the list of all paragraphs in a frame.
                    Read-only :py:class:`aspose.slides.IParagraphCollection`.'''
        ...

    @property
    def text(self) -> str:
        '''Gets or sets the plain text for a TextFrame.
                    Read/write :py:class:`str`.'''
        ...

    @text.setter
    def text(self, value: str):
        '''Gets or sets the plain text for a TextFrame.
                    Read/write :py:class:`str`.'''
        ...

    @property
    def text_frame_format(self) -> ITextFrameFormat:
        ...

    @property
    def hyperlink_queries(self) -> IHyperlinkQueries:
        ...

    @property
    def slide(self) -> IBaseSlide:
        '''Returns the parent slide of a TextFrame.
                    Read-only :py:class:`aspose.slides.IBaseSlide`.'''
        ...

    @property
    def presentation(self) -> IPresentation:
        '''Returns the parent presentation of a TextFrame.
                    Read-only :py:class:`aspose.slides.IPresentation`.'''
        ...

    @property
    def parent_shape(self) -> IShape:
        ...

    @property
    def parent_cell(self) -> ICell:
        ...

    @property
    def as_i_slide_component(self) -> ISlideComponent:
        ...

    @property
    def as_i_presentation_component(self) -> IPresentationComponent:
        ...

    ...

class TextFrameFormat(PVIObject):
    '''Contains the TextFrame's formatTextFrameFormatting properties.'''
    def __init__(self):
        '''Initializes a new instance of :py:class:`aspose.slides.TextFrameFormat` class.'''
        ...

    def get_effective(self) -> ITextFrameFormatEffectiveData:
        '''Gets effective text frame formatting data with the inheritance applied.
        :returns: A :py:class:`aspose.slides.ITextFrameFormatEffectiveData`.'''
        ...

    @property
    def as_i_presentation_component(self) -> IPresentationComponent:
        ...

    @property
    def three_d_format(self) -> IThreeDFormat:
        ...

    @property
    def margin_left(self) -> float:
        ...

    @margin_left.setter
    def margin_left(self, value: float):
        ...

    @property
    def margin_right(self) -> float:
        ...

    @margin_right.setter
    def margin_right(self, value: float):
        ...

    @property
    def margin_top(self) -> float:
        ...

    @margin_top.setter
    def margin_top(self, value: float):
        ...

    @property
    def margin_bottom(self) -> float:
        ...

    @margin_bottom.setter
    def margin_bottom(self, value: float):
        ...

    @property
    def wrap_text(self) -> NullableBool:
        ...

    @wrap_text.setter
    def wrap_text(self, value: NullableBool):
        ...

    @property
    def anchoring_type(self) -> TextAnchorType:
        ...

    @anchoring_type.setter
    def anchoring_type(self, value: TextAnchorType):
        ...

    @property
    def center_text(self) -> NullableBool:
        ...

    @center_text.setter
    def center_text(self, value: NullableBool):
        ...

    @property
    def text_vertical_type(self) -> TextVerticalType:
        ...

    @text_vertical_type.setter
    def text_vertical_type(self, value: TextVerticalType):
        ...

    @property
    def autofit_type(self) -> TextAutofitType:
        ...

    @autofit_type.setter
    def autofit_type(self, value: TextAutofitType):
        ...

    @property
    def column_count(self) -> int:
        ...

    @column_count.setter
    def column_count(self, value: int):
        ...

    @property
    def column_spacing(self) -> float:
        ...

    @column_spacing.setter
    def column_spacing(self, value: float):
        ...

    @property
    def rotation_angle(self) -> float:
        ...

    @rotation_angle.setter
    def rotation_angle(self, value: float):
        ...

    @property
    def transform(self) -> TextShapeType:
        '''Gets or sets text wrapping shape.
                    Read/write :py:enum:`aspose.slides.TextShapeType`.'''
        ...

    @transform.setter
    def transform(self, value: TextShapeType):
        '''Gets or sets text wrapping shape.
                    Read/write :py:enum:`aspose.slides.TextShapeType`.'''
        ...

    @property
    def keep_text_flat(self) -> bool:
        ...

    @keep_text_flat.setter
    def keep_text_flat(self, value: bool):
        ...

    @property
    def slide(self) -> IBaseSlide:
        ...

    @property
    def presentation(self) -> IPresentation:
        ...

    @property
    def text_style(self) -> ITextStyle:
        ...

    ...

class TextHighlightingOptions:
    '''Represents options which can be used to highlight text in text frame.'''
    def __init__(self):
        '''Creates new default text highlighting options.'''
        ...

    @property
    def case_sensitive(self) -> bool:
        ...

    @case_sensitive.setter
    def case_sensitive(self, value: bool):
        ...

    @property
    def whole_words_only(self) -> bool:
        ...

    @whole_words_only.setter
    def whole_words_only(self, value: bool):
        ...

    ...

class TextSearchOptions:
    '''Represents options that can be used to search for text in a Presentation, Slide or TextFrame.'''
    def __init__(self):
        '''Creates new default text search options.'''
        ...

    @property
    def case_sensitive(self) -> bool:
        ...

    @case_sensitive.setter
    def case_sensitive(self, value: bool):
        ...

    @property
    def whole_words_only(self) -> bool:
        ...

    @whole_words_only.setter
    def whole_words_only(self, value: bool):
        ...

    ...

class TextStyle(PVIObject):
    '''This class contains the text style formatting properties.'''
    def get_level(self, index: int) -> IParagraphFormat:
        '''If level of style exist returns it, otherwise returns None.
        :param index: Zero-based index of level. Must lay in 0..8 interval.
        :returns: Formatting of level :py:class:`aspose.slides.IParagraphFormat`.'''
        ...

    def get_effective(self) -> ITextStyleEffectiveData:
        '''Gets effective text style formatting data with the inheritance applied.
        :returns: A :py:class:`aspose.slides.ITextStyleEffectiveData`.'''
        ...

    @property
    def as_i_presentation_component(self) -> IPresentationComponent:
        ...

    @property
    def default_paragraph_format(self) -> IParagraphFormat:
        ...

    @property
    def slide(self) -> IBaseSlide:
        ...

    @property
    def presentation(self) -> IPresentation:
        ...

    ...

class ThreeDFormat(PVIObject):
    '''Represents 3-D properties.'''
    def get_effective(self) -> IThreeDFormatEffectiveData:
        '''Gets effective 3-D formatting data with the inheritance applied.
        :returns: A :py:class:`aspose.slides.IThreeDFormatEffectiveData`.'''
        ...

    @property
    def as_i_presentation_component(self) -> IPresentationComponent:
        ...

    @property
    def contour_width(self) -> float:
        ...

    @contour_width.setter
    def contour_width(self, value: float):
        ...

    @property
    def extrusion_height(self) -> float:
        ...

    @extrusion_height.setter
    def extrusion_height(self, value: float):
        ...

    @property
    def depth(self) -> float:
        '''Returns or sets the depth of a 3D shape.
                    Read/write :py:class:`float`.'''
        ...

    @depth.setter
    def depth(self, value: float):
        '''Returns or sets the depth of a 3D shape.
                    Read/write :py:class:`float`.'''
        ...

    @property
    def bevel_top(self) -> IShapeBevel:
        ...

    @property
    def bevel_bottom(self) -> IShapeBevel:
        ...

    @property
    def contour_color(self) -> IColorFormat:
        ...

    @property
    def extrusion_color(self) -> IColorFormat:
        ...

    @property
    def camera(self) -> ICamera:
        '''Returns or sets the settings of a camera.
                    Read-only :py:class:`aspose.slides.ICamera`.'''
        ...

    @property
    def light_rig(self) -> ILightRig:
        ...

    @property
    def material(self) -> MaterialPresetType:
        '''Returns or sets the type of a material.
                    Read/write :py:enum:`aspose.slides.MaterialPresetType`.'''
        ...

    @material.setter
    def material(self, value: MaterialPresetType):
        '''Returns or sets the type of a material.
                    Read/write :py:enum:`aspose.slides.MaterialPresetType`.'''
        ...

    @property
    def slide(self) -> IBaseSlide:
        ...

    @property
    def presentation(self) -> IPresentation:
        ...

    @property
    def as_i_three_d_param_source(self) -> IThreeDParamSource:
        ...

    ...

class Video:
    '''Represents an image embedded into a presentation.'''
    def get_stream(self) -> io.RawIOBase:
        '''Returns Stream stream for reading.
                    Use 'using' or close stream after using.
        :returns: Stream for reading.'''
        ...

    @property
    def content_type(self) -> str:
        ...

    @property
    def binary_data(self) -> bytes:
        ...

    ...

class VideoCollection:
    '''Represents a collection of Video objects.'''
    @overload
    def add_video(self, video: IVideo) -> IVideo:
        '''Adds a copy of an video file from an another presentation.
        :param video: Source video.
        :returns: Added video.'''
        ...

    @overload
    def add_video(self, stream: io.RawIOBase, loading_stream_behavior: LoadingStreamBehavior) -> IVideo:
        '''Creates and adds a video to a presentation from stream.
        :param stream: Stream to add video file from.
        :param loading_stream_behavior: The behavior which will be applied to the stream.
        :returns: Added :py:class:`aspose.slides.IVideo`.'''
        ...

    @overload
    def add_video(self, video_data: bytes) -> IVideo:
        '''Creates and adds a video to a presentation from byte array.
        :param video_data: Video bytes.
        :returns: Added video.'''
        ...

    @property
    def as_i_collection(self) -> list:
        ...

    @property
    def as_i_enumerable(self) -> collections.abc.Iterable:
        ...

    def __getitem__(self, key: int) -> IVideo
        ...

    ...

class VideoFrame(PictureFrame):
    '''Represents a video clip on a slide.'''
    @overload
    def get_thumbnail(self) -> aspose.pydrawing.Bitmap:
        '''Returns shape thumbnail.
                    ShapeThumbnailBounds.Shape shape thumbnail bounds type is used by default.
        :returns: Shape thumbnail.'''
        ...

    @overload
    def get_thumbnail(self, bounds: ShapeThumbnailBounds, scale_x: float, scale_y: float) -> aspose.pydrawing.Bitmap:
        '''Returns shape thumbnail.
        :param bounds: Shape thumbnail bounds type.
        :param scale_x: X scale
        :param scale_y: Y scale
        :returns: Shape thumbnail or None in case when ShapeThumbnailBounds.Appearance is used and a shape doesn't have visible elements.'''
        ...

    @overload
    def get_image(self) -> IImage:
        '''Returns shape thumbnail.
                    ShapeThumbnailBounds.Shape shape thumbnail bounds type is used by default.
        :returns: Shape thumbnail.'''
        ...

    @overload
    def get_image(self, bounds: ShapeThumbnailBounds, scale_x: float, scale_y: float) -> IImage:
        '''Returns shape thumbnail.
        :param bounds: Shape thumbnail bounds type.
        :param scale_x: X scale
        :param scale_y: Y scale
        :returns: Shape thumbnail or None in case when ShapeThumbnailBounds.Appearance is used and a shape doesn't have visible elements.'''
        ...

    @overload
    def write_as_svg(self, stream: io.RawIOBase) -> None:
        '''Saves content of Shape as SVG file.
        :param stream: Target stream'''
        ...

    @overload
    def write_as_svg(self, stream: io.RawIOBase, svg_options: aspose.slides.export.ISVGOptions) -> None:
        '''Saves content of Shape as SVG file.
        :param stream: Target stream
        :param svg_options: SVG generation options'''
        ...

    def remove_placeholder(self) -> None:
        '''Defines that this shape isn't a placeholder.'''
        ...

    def add_placeholder(self, placeholder_to_copy_from: IPlaceholder) -> IPlaceholder:
        '''Adds a new placeholder if there is no and sets placeholder properties to a specified one.
        :param placeholder_to_copy_from: Placeholder to copy content from.
        :returns: New :py:attr:`aspose.slides.Shape.placeholder`.'''
        ...

    def get_base_placeholder(self) -> IShape:
        '''Returns a basic placeholder shape (shape from the layout and/or master slide that the current shape is inherited from).'''
        ...

    def get_geometry_paths(self) -> List[IGeometryPath]:
        '''Returns the copy of path of the geometry shape. Coordinates are relative to the left top corner of the shape.
        :returns: Array of :py:class:`aspose.slides.IGeometryPath`'''
        ...

    def set_geometry_path(self, geometry_path: IGeometryPath) -> None:
        '''Updates shape geometry from :py:class:`aspose.slides.IGeometryPath` object. Coordinates must be relative to the left
                     top corner of the shape.
                     Changes the type of the shape (:py:attr:`aspose.slides.GeometryShape.shape_type`) to :py:attr:`aspose.slides.ShapeType.CUSTOM`.
        :param geometry_path: Geometry path'''
        ...

    def set_geometry_paths(self, geometry_paths: List[IGeometryPath]) -> None:
        '''Updates shape geometry from array of :py:class:`aspose.slides.IGeometryPath`. Coordinates must be relative to the left
                     top corner of the shape.
                     Changes the type of the shape (:py:attr:`aspose.slides.GeometryShape.shape_type`) to :py:attr:`aspose.slides.ShapeType.CUSTOM`.
        :param geometry_paths: Array geometry paths'''
        ...

    def create_shape_elements(self) -> List[IShapeElement]:
        '''Creates and returns array of shape's elements.
        :returns: Array of :py:class:`aspose.slides.ShapeElement`'''
        ...

    @property
    def is_text_holder(self) -> bool:
        ...

    @property
    def placeholder(self) -> IPlaceholder:
        '''Returns the placeholder for a shape. Returns None if the shape has no placeholder.
                    Read-only :py:class:`aspose.slides.IPlaceholder`.'''
        ...

    @property
    def custom_data(self) -> ICustomData:
        ...

    @property
    def raw_frame(self) -> IShapeFrame:
        ...

    @raw_frame.setter
    def raw_frame(self, value: IShapeFrame):
        ...

    @property
    def frame(self) -> IShapeFrame:
        '''Returns or sets the shape frame's properties.
                    Read/write :py:class:`aspose.slides.IShapeFrame`.'''
        ...

    @frame.setter
    def frame(self, value: IShapeFrame):
        '''Returns or sets the shape frame's properties.
                    Read/write :py:class:`aspose.slides.IShapeFrame`.'''
        ...

    @property
    def line_format(self) -> ILineFormat:
        ...

    @property
    def three_d_format(self) -> IThreeDFormat:
        ...

    @property
    def effect_format(self) -> IEffectFormat:
        ...

    @property
    def fill_format(self) -> IFillFormat:
        ...

    @property
    def hyperlink_click(self) -> IHyperlink:
        ...

    @hyperlink_click.setter
    def hyperlink_click(self, value: IHyperlink):
        ...

    @property
    def hyperlink_mouse_over(self) -> IHyperlink:
        ...

    @hyperlink_mouse_over.setter
    def hyperlink_mouse_over(self, value: IHyperlink):
        ...

    @property
    def hyperlink_manager(self) -> IHyperlinkManager:
        ...

    @property
    def hidden(self) -> bool:
        '''Determines whether the shape is hidden.
                    Read/write :py:class:`bool`.'''
        ...

    @hidden.setter
    def hidden(self, value: bool):
        '''Determines whether the shape is hidden.
                    Read/write :py:class:`bool`.'''
        ...

    @property
    def z_order_position(self) -> int:
        ...

    @property
    def connection_site_count(self) -> int:
        ...

    @property
    def rotation(self) -> float:
        '''Returns or sets the number of degrees the specified shape is rotated around
                    the z-axis. A positive value indicates clockwise rotation; a negative value
                    indicates counterclockwise rotation.
                    Read/write :py:class:`float`.'''
        ...

    @rotation.setter
    def rotation(self, value: float):
        '''Returns or sets the number of degrees the specified shape is rotated around
                    the z-axis. A positive value indicates clockwise rotation; a negative value
                    indicates counterclockwise rotation.
                    Read/write :py:class:`float`.'''
        ...

    @property
    def x(self) -> float:
        '''Returns or sets the x-coordinate of the upper-left corner of the shape.
                    Read/write :py:class:`float`.'''
        ...

    @x.setter
    def x(self, value: float):
        '''Returns or sets the x-coordinate of the upper-left corner of the shape.
                    Read/write :py:class:`float`.'''
        ...

    @property
    def y(self) -> float:
        '''Returns or sets the y-coordinate of the upper-left corner of the shape.
                    Read/write :py:class:`float`.'''
        ...

    @y.setter
    def y(self, value: float):
        '''Returns or sets the y-coordinate of the upper-left corner of the shape.
                    Read/write :py:class:`float`.'''
        ...

    @property
    def width(self) -> float:
        '''Returns or sets the width of the shape.
                    Read/write :py:class:`float`.'''
        ...

    @width.setter
    def width(self, value: float):
        '''Returns or sets the width of the shape.
                    Read/write :py:class:`float`.'''
        ...

    @property
    def height(self) -> float:
        '''Returns or sets the height of the shape.
                    Read/write :py:class:`float`.'''
        ...

    @height.setter
    def height(self, value: float):
        '''Returns or sets the height of the shape.
                    Read/write :py:class:`float`.'''
        ...

    @property
    def black_white_mode(self) -> BlackWhiteMode:
        ...

    @black_white_mode.setter
    def black_white_mode(self, value: BlackWhiteMode):
        ...

    @property
    def unique_id(self) -> int:
        ...

    @property
    def office_interop_shape_id(self) -> int:
        ...

    @property
    def alternative_text(self) -> str:
        ...

    @alternative_text.setter
    def alternative_text(self, value: str):
        ...

    @property
    def alternative_text_title(self) -> str:
        ...

    @alternative_text_title.setter
    def alternative_text_title(self, value: str):
        ...

    @property
    def name(self) -> str:
        '''Returns or sets the name of a shape.
                    Must be not None. Use empty string value if needed.
                    Read/write :py:class:`str`.'''
        ...

    @name.setter
    def name(self, value: str):
        '''Returns or sets the name of a shape.
                    Must be not None. Use empty string value if needed.
                    Read/write :py:class:`str`.'''
        ...

    @property
    def is_decorative(self) -> bool:
        ...

    @is_decorative.setter
    def is_decorative(self, value: bool):
        ...

    @property
    def shape_lock(self) -> IPictureFrameLock:
        ...

    @property
    def is_grouped(self) -> bool:
        ...

    @property
    def parent_group(self) -> IGroupShape:
        ...

    @property
    def slide(self) -> IBaseSlide:
        '''Returns the parent slide of a shape.
                    Read-only :py:class:`aspose.slides.IBaseSlide`.'''
        ...

    @property
    def presentation(self) -> IPresentation:
        '''Returns the parent presentation of a slide.
                    Read-only :py:class:`aspose.slides.IPresentation`.'''
        ...

    @property
    def shape_style(self) -> IShapeStyle:
        ...

    @property
    def shape_type(self) -> ShapeType:
        ...

    @shape_type.setter
    def shape_type(self, value: ShapeType):
        ...

    @property
    def adjustments(self) -> IAdjustValueCollection:
        '''Returns a collection of shape's adjustment values.
                    Read-only :py:class:`aspose.slides.IAdjustValueCollection`.'''
        ...

    @property
    def picture_frame_lock(self) -> IPictureFrameLock:
        ...

    @property
    def picture_format(self) -> IPictureFillFormat:
        ...

    @property
    def relative_scale_height(self) -> float:
        ...

    @relative_scale_height.setter
    def relative_scale_height(self, value: float):
        ...

    @property
    def relative_scale_width(self) -> float:
        ...

    @relative_scale_width.setter
    def relative_scale_width(self, value: float):
        ...

    @property
    def is_cameo(self) -> bool:
        ...

    @property
    def rewind_video(self) -> bool:
        ...

    @rewind_video.setter
    def rewind_video(self, value: bool):
        ...

    @property
    def play_loop_mode(self) -> bool:
        ...

    @play_loop_mode.setter
    def play_loop_mode(self, value: bool):
        ...

    @property
    def hide_at_showing(self) -> bool:
        ...

    @hide_at_showing.setter
    def hide_at_showing(self, value: bool):
        ...

    @property
    def volume(self) -> AudioVolumeMode:
        '''Returns or sets the audio volume.
                    Read/write :py:enum:`aspose.slides.AudioVolumeMode`.'''
        ...

    @volume.setter
    def volume(self, value: AudioVolumeMode):
        '''Returns or sets the audio volume.
                    Read/write :py:enum:`aspose.slides.AudioVolumeMode`.'''
        ...

    @property
    def play_mode(self) -> VideoPlayModePreset:
        ...

    @play_mode.setter
    def play_mode(self, value: VideoPlayModePreset):
        ...

    @property
    def full_screen_mode(self) -> bool:
        ...

    @full_screen_mode.setter
    def full_screen_mode(self, value: bool):
        ...

    @property
    def link_path_long(self) -> str:
        ...

    @link_path_long.setter
    def link_path_long(self, value: str):
        ...

    @property
    def embedded_video(self) -> IVideo:
        ...

    @embedded_video.setter
    def embedded_video(self, value: IVideo):
        ...

    @property
    def trim_from_start(self) -> float:
        ...

    @trim_from_start.setter
    def trim_from_start(self, value: float):
        ...

    @property
    def trim_from_end(self) -> float:
        ...

    @trim_from_end.setter
    def trim_from_end(self, value: float):
        ...

    @property
    def caption_tracks(self) -> ICaptionsCollection:
        ...

    @property
    def as_i_hyperlink_container(self) -> IHyperlinkContainer:
        ...

    @property
    def as_i_slide_component(self) -> ISlideComponent:
        ...

    @property
    def as_i_presentation_component(self) -> IPresentationComponent:
        ...

    @property
    def as_i_shape(self) -> IShape:
        ...

    @property
    def as_i_geometry_shape(self) -> IGeometryShape:
        ...

    @property
    def as_i_picture_frame(self) -> IPictureFrame:
        ...

    ...

class ViewProperties:
    '''Presentation wide view properties.'''
    @property
    def last_view(self) -> ViewType:
        ...

    @last_view.setter
    def last_view(self, value: ViewType):
        ...

    @property
    def show_comments(self) -> NullableBool:
        ...

    @show_comments.setter
    def show_comments(self, value: NullableBool):
        ...

    @property
    def normal_view_properties(self) -> INormalViewProperties:
        ...

    @property
    def slide_view_properties(self) -> ICommonSlideViewProperties:
        ...

    @property
    def notes_view_properties(self) -> ICommonSlideViewProperties:
        ...

    @property
    def grid_spacing(self) -> float:
        ...

    @grid_spacing.setter
    def grid_spacing(self, value: float):
        ...

    ...

class ZoomFrame(ZoomObject):
    '''Represents a Slide Zoom object in a slide.'''
    @overload
    def get_thumbnail(self) -> aspose.pydrawing.Bitmap:
        '''Returns shape thumbnail.
                    ShapeThumbnailBounds.Shape shape thumbnail bounds type is used by default.
        :returns: Shape thumbnail.'''
        ...

    @overload
    def get_thumbnail(self, bounds: ShapeThumbnailBounds, scale_x: float, scale_y: float) -> aspose.pydrawing.Bitmap:
        '''Returns shape thumbnail.
        :param bounds: Shape thumbnail bounds type.
        :param scale_x: X scale
        :param scale_y: Y scale
        :returns: Shape thumbnail or None in case when ShapeThumbnailBounds.Appearance is used and a shape doesn't have visible elements.'''
        ...

    @overload
    def get_image(self) -> IImage:
        '''Returns shape thumbnail.
                    ShapeThumbnailBounds.Shape shape thumbnail bounds type is used by default.
        :returns: Shape thumbnail.'''
        ...

    @overload
    def get_image(self, bounds: ShapeThumbnailBounds, scale_x: float, scale_y: float) -> IImage:
        '''Returns shape thumbnail.
        :param bounds: Shape thumbnail bounds type.
        :param scale_x: X scale
        :param scale_y: Y scale
        :returns: Shape thumbnail or None in case when ShapeThumbnailBounds.Appearance is used and a shape doesn't have visible elements.'''
        ...

    @overload
    def write_as_svg(self, stream: io.RawIOBase) -> None:
        '''Saves content of Shape as SVG file.
        :param stream: Target stream'''
        ...

    @overload
    def write_as_svg(self, stream: io.RawIOBase, svg_options: aspose.slides.export.ISVGOptions) -> None:
        '''Saves content of Shape as SVG file.
        :param stream: Target stream
        :param svg_options: SVG generation options'''
        ...

    def remove_placeholder(self) -> None:
        '''Defines that this shape isn't a placeholder.'''
        ...

    def add_placeholder(self, placeholder_to_copy_from: IPlaceholder) -> IPlaceholder:
        '''Adds a new placeholder if there is no and sets placeholder properties to a specified one.
        :param placeholder_to_copy_from: Placeholder to copy content from.
        :returns: New :py:attr:`aspose.slides.Shape.placeholder`.'''
        ...

    def get_base_placeholder(self) -> IShape:
        '''Returns a basic placeholder shape (shape from the layout and/or master slide that the current shape is inherited from).'''
        ...

    @property
    def is_text_holder(self) -> bool:
        ...

    @property
    def placeholder(self) -> IPlaceholder:
        '''Returns the placeholder for a shape. Returns None if the shape has no placeholder.
                    Read-only :py:class:`aspose.slides.IPlaceholder`.'''
        ...

    @property
    def custom_data(self) -> ICustomData:
        ...

    @property
    def raw_frame(self) -> IShapeFrame:
        ...

    @raw_frame.setter
    def raw_frame(self, value: IShapeFrame):
        ...

    @property
    def frame(self) -> IShapeFrame:
        '''Returns or sets the shape frame's properties.
                    Read/write :py:class:`aspose.slides.IShapeFrame`.'''
        ...

    @frame.setter
    def frame(self, value: IShapeFrame):
        '''Returns or sets the shape frame's properties.
                    Read/write :py:class:`aspose.slides.IShapeFrame`.'''
        ...

    @property
    def line_format(self) -> ILineFormat:
        ...

    @property
    def three_d_format(self) -> IThreeDFormat:
        ...

    @property
    def effect_format(self) -> IEffectFormat:
        ...

    @property
    def fill_format(self) -> IFillFormat:
        ...

    @property
    def hyperlink_click(self) -> IHyperlink:
        ...

    @hyperlink_click.setter
    def hyperlink_click(self, value: IHyperlink):
        ...

    @property
    def hyperlink_mouse_over(self) -> IHyperlink:
        ...

    @hyperlink_mouse_over.setter
    def hyperlink_mouse_over(self, value: IHyperlink):
        ...

    @property
    def hyperlink_manager(self) -> IHyperlinkManager:
        ...

    @property
    def hidden(self) -> bool:
        '''Determines whether the shape is hidden.
                    Read/write :py:class:`bool`.'''
        ...

    @hidden.setter
    def hidden(self, value: bool):
        '''Determines whether the shape is hidden.
                    Read/write :py:class:`bool`.'''
        ...

    @property
    def z_order_position(self) -> int:
        ...

    @property
    def connection_site_count(self) -> int:
        ...

    @property
    def rotation(self) -> float:
        '''Returns or sets the number of degrees the specified shape is rotated around
                    the z-axis. A positive value indicates clockwise rotation; a negative value
                    indicates counterclockwise rotation.
                    Read/write :py:class:`float`.'''
        ...

    @rotation.setter
    def rotation(self, value: float):
        '''Returns or sets the number of degrees the specified shape is rotated around
                    the z-axis. A positive value indicates clockwise rotation; a negative value
                    indicates counterclockwise rotation.
                    Read/write :py:class:`float`.'''
        ...

    @property
    def x(self) -> float:
        '''Returns or sets the x-coordinate of the upper-left corner of the shape.
                    Read/write :py:class:`float`.'''
        ...

    @x.setter
    def x(self, value: float):
        '''Returns or sets the x-coordinate of the upper-left corner of the shape.
                    Read/write :py:class:`float`.'''
        ...

    @property
    def y(self) -> float:
        '''Returns or sets the y-coordinate of the upper-left corner of the shape.
                    Read/write :py:class:`float`.'''
        ...

    @y.setter
    def y(self, value: float):
        '''Returns or sets the y-coordinate of the upper-left corner of the shape.
                    Read/write :py:class:`float`.'''
        ...

    @property
    def width(self) -> float:
        '''Returns or sets the width of the shape.
                    Read/write :py:class:`float`.'''
        ...

    @width.setter
    def width(self, value: float):
        '''Returns or sets the width of the shape.
                    Read/write :py:class:`float`.'''
        ...

    @property
    def height(self) -> float:
        '''Returns or sets the height of the shape.
                    Read/write :py:class:`float`.'''
        ...

    @height.setter
    def height(self, value: float):
        '''Returns or sets the height of the shape.
                    Read/write :py:class:`float`.'''
        ...

    @property
    def black_white_mode(self) -> BlackWhiteMode:
        ...

    @black_white_mode.setter
    def black_white_mode(self, value: BlackWhiteMode):
        ...

    @property
    def unique_id(self) -> int:
        ...

    @property
    def office_interop_shape_id(self) -> int:
        ...

    @property
    def alternative_text(self) -> str:
        ...

    @alternative_text.setter
    def alternative_text(self, value: str):
        ...

    @property
    def alternative_text_title(self) -> str:
        ...

    @alternative_text_title.setter
    def alternative_text_title(self, value: str):
        ...

    @property
    def name(self) -> str:
        '''Returns or sets the name of a shape.
                    Must be not None. Use empty string value if needed.
                    Read/write :py:class:`str`.'''
        ...

    @name.setter
    def name(self, value: str):
        '''Returns or sets the name of a shape.
                    Must be not None. Use empty string value if needed.
                    Read/write :py:class:`str`.'''
        ...

    @property
    def is_decorative(self) -> bool:
        ...

    @is_decorative.setter
    def is_decorative(self, value: bool):
        ...

    @property
    def shape_lock(self) -> IGraphicalObjectLock:
        ...

    @property
    def is_grouped(self) -> bool:
        ...

    @property
    def parent_group(self) -> IGroupShape:
        ...

    @property
    def slide(self) -> IBaseSlide:
        '''Returns the parent slide of a shape.
                    Read-only :py:class:`aspose.slides.IBaseSlide`.'''
        ...

    @property
    def presentation(self) -> IPresentation:
        '''Returns the parent presentation of a slide.
                    Read-only :py:class:`aspose.slides.IPresentation`.'''
        ...

    @property
    def graphical_object_lock(self) -> IGraphicalObjectLock:
        ...

    @property
    def image_type(self) -> ZoomImageType:
        ...

    @image_type.setter
    def image_type(self, value: ZoomImageType):
        ...

    @property
    def return_to_parent(self) -> bool:
        ...

    @return_to_parent.setter
    def return_to_parent(self, value: bool):
        ...

    @property
    def show_background(self) -> bool:
        ...

    @show_background.setter
    def show_background(self, value: bool):
        ...

    @property
    def zoom_image(self) -> IPPImage:
        ...

    @zoom_image.setter
    def zoom_image(self, value: IPPImage):
        ...

    @property
    def transition_duration(self) -> float:
        ...

    @transition_duration.setter
    def transition_duration(self, value: float):
        ...

    @property
    def target_slide(self) -> ISlide:
        ...

    @target_slide.setter
    def target_slide(self, value: ISlide):
        ...

    @property
    def as_i_hyperlink_container(self) -> IHyperlinkContainer:
        ...

    @property
    def as_i_slide_component(self) -> ISlideComponent:
        ...

    @property
    def as_i_presentation_component(self) -> IPresentationComponent:
        ...

    @property
    def as_i_shape(self) -> IShape:
        ...

    @property
    def as_i_graphical_object(self) -> IGraphicalObject:
        ...

    @property
    def as_i_zoom_object(self) -> IZoomObject:
        ...

    ...

class ZoomObject(GraphicalObject):
    '''Represents an Zoom object in a slide.'''
    @overload
    def get_thumbnail(self) -> aspose.pydrawing.Bitmap:
        '''Returns shape thumbnail.
                    ShapeThumbnailBounds.Shape shape thumbnail bounds type is used by default.
        :returns: Shape thumbnail.'''
        ...

    @overload
    def get_thumbnail(self, bounds: ShapeThumbnailBounds, scale_x: float, scale_y: float) -> aspose.pydrawing.Bitmap:
        '''Returns shape thumbnail.
        :param bounds: Shape thumbnail bounds type.
        :param scale_x: X scale
        :param scale_y: Y scale
        :returns: Shape thumbnail or None in case when ShapeThumbnailBounds.Appearance is used and a shape doesn't have visible elements.'''
        ...

    @overload
    def get_image(self) -> IImage:
        '''Returns shape thumbnail.
                    ShapeThumbnailBounds.Shape shape thumbnail bounds type is used by default.
        :returns: Shape thumbnail.'''
        ...

    @overload
    def get_image(self, bounds: ShapeThumbnailBounds, scale_x: float, scale_y: float) -> IImage:
        '''Returns shape thumbnail.
        :param bounds: Shape thumbnail bounds type.
        :param scale_x: X scale
        :param scale_y: Y scale
        :returns: Shape thumbnail or None in case when ShapeThumbnailBounds.Appearance is used and a shape doesn't have visible elements.'''
        ...

    @overload
    def write_as_svg(self, stream: io.RawIOBase) -> None:
        '''Saves content of Shape as SVG file.
        :param stream: Target stream'''
        ...

    @overload
    def write_as_svg(self, stream: io.RawIOBase, svg_options: aspose.slides.export.ISVGOptions) -> None:
        '''Saves content of Shape as SVG file.
        :param stream: Target stream
        :param svg_options: SVG generation options'''
        ...

    def remove_placeholder(self) -> None:
        '''Defines that this shape isn't a placeholder.'''
        ...

    def add_placeholder(self, placeholder_to_copy_from: IPlaceholder) -> IPlaceholder:
        '''Adds a new placeholder if there is no and sets placeholder properties to a specified one.
        :param placeholder_to_copy_from: Placeholder to copy content from.
        :returns: New :py:attr:`aspose.slides.Shape.placeholder`.'''
        ...

    def get_base_placeholder(self) -> IShape:
        '''Returns a basic placeholder shape (shape from the layout and/or master slide that the current shape is inherited from).'''
        ...

    @property
    def is_text_holder(self) -> bool:
        ...

    @property
    def placeholder(self) -> IPlaceholder:
        '''Returns the placeholder for a shape. Returns None if the shape has no placeholder.
                    Read-only :py:class:`aspose.slides.IPlaceholder`.'''
        ...

    @property
    def custom_data(self) -> ICustomData:
        ...

    @property
    def raw_frame(self) -> IShapeFrame:
        ...

    @raw_frame.setter
    def raw_frame(self, value: IShapeFrame):
        ...

    @property
    def frame(self) -> IShapeFrame:
        '''Returns or sets the shape frame's properties.
                    Read/write :py:class:`aspose.slides.IShapeFrame`.'''
        ...

    @frame.setter
    def frame(self, value: IShapeFrame):
        '''Returns or sets the shape frame's properties.
                    Read/write :py:class:`aspose.slides.IShapeFrame`.'''
        ...

    @property
    def line_format(self) -> ILineFormat:
        ...

    @property
    def three_d_format(self) -> IThreeDFormat:
        ...

    @property
    def effect_format(self) -> IEffectFormat:
        ...

    @property
    def fill_format(self) -> IFillFormat:
        ...

    @property
    def hyperlink_click(self) -> IHyperlink:
        ...

    @hyperlink_click.setter
    def hyperlink_click(self, value: IHyperlink):
        ...

    @property
    def hyperlink_mouse_over(self) -> IHyperlink:
        ...

    @hyperlink_mouse_over.setter
    def hyperlink_mouse_over(self, value: IHyperlink):
        ...

    @property
    def hyperlink_manager(self) -> IHyperlinkManager:
        ...

    @property
    def hidden(self) -> bool:
        '''Determines whether the shape is hidden.
                    Read/write :py:class:`bool`.'''
        ...

    @hidden.setter
    def hidden(self, value: bool):
        '''Determines whether the shape is hidden.
                    Read/write :py:class:`bool`.'''
        ...

    @property
    def z_order_position(self) -> int:
        ...

    @property
    def connection_site_count(self) -> int:
        ...

    @property
    def rotation(self) -> float:
        '''Returns or sets the number of degrees the specified shape is rotated around
                    the z-axis. A positive value indicates clockwise rotation; a negative value
                    indicates counterclockwise rotation.
                    Read/write :py:class:`float`.'''
        ...

    @rotation.setter
    def rotation(self, value: float):
        '''Returns or sets the number of degrees the specified shape is rotated around
                    the z-axis. A positive value indicates clockwise rotation; a negative value
                    indicates counterclockwise rotation.
                    Read/write :py:class:`float`.'''
        ...

    @property
    def x(self) -> float:
        '''Returns or sets the x-coordinate of the upper-left corner of the shape.
                    Read/write :py:class:`float`.'''
        ...

    @x.setter
    def x(self, value: float):
        '''Returns or sets the x-coordinate of the upper-left corner of the shape.
                    Read/write :py:class:`float`.'''
        ...

    @property
    def y(self) -> float:
        '''Returns or sets the y-coordinate of the upper-left corner of the shape.
                    Read/write :py:class:`float`.'''
        ...

    @y.setter
    def y(self, value: float):
        '''Returns or sets the y-coordinate of the upper-left corner of the shape.
                    Read/write :py:class:`float`.'''
        ...

    @property
    def width(self) -> float:
        '''Returns or sets the width of the shape.
                    Read/write :py:class:`float`.'''
        ...

    @width.setter
    def width(self, value: float):
        '''Returns or sets the width of the shape.
                    Read/write :py:class:`float`.'''
        ...

    @property
    def height(self) -> float:
        '''Returns or sets the height of the shape.
                    Read/write :py:class:`float`.'''
        ...

    @height.setter
    def height(self, value: float):
        '''Returns or sets the height of the shape.
                    Read/write :py:class:`float`.'''
        ...

    @property
    def black_white_mode(self) -> BlackWhiteMode:
        ...

    @black_white_mode.setter
    def black_white_mode(self, value: BlackWhiteMode):
        ...

    @property
    def unique_id(self) -> int:
        ...

    @property
    def office_interop_shape_id(self) -> int:
        ...

    @property
    def alternative_text(self) -> str:
        ...

    @alternative_text.setter
    def alternative_text(self, value: str):
        ...

    @property
    def alternative_text_title(self) -> str:
        ...

    @alternative_text_title.setter
    def alternative_text_title(self, value: str):
        ...

    @property
    def name(self) -> str:
        '''Returns or sets the name of a shape.
                    Must be not None. Use empty string value if needed.
                    Read/write :py:class:`str`.'''
        ...

    @name.setter
    def name(self, value: str):
        '''Returns or sets the name of a shape.
                    Must be not None. Use empty string value if needed.
                    Read/write :py:class:`str`.'''
        ...

    @property
    def is_decorative(self) -> bool:
        ...

    @is_decorative.setter
    def is_decorative(self, value: bool):
        ...

    @property
    def shape_lock(self) -> IGraphicalObjectLock:
        ...

    @property
    def is_grouped(self) -> bool:
        ...

    @property
    def parent_group(self) -> IGroupShape:
        ...

    @property
    def slide(self) -> IBaseSlide:
        '''Returns the parent slide of a shape.
                    Read-only :py:class:`aspose.slides.IBaseSlide`.'''
        ...

    @property
    def presentation(self) -> IPresentation:
        '''Returns the parent presentation of a slide.
                    Read-only :py:class:`aspose.slides.IPresentation`.'''
        ...

    @property
    def graphical_object_lock(self) -> IGraphicalObjectLock:
        ...

    @property
    def image_type(self) -> ZoomImageType:
        ...

    @image_type.setter
    def image_type(self, value: ZoomImageType):
        ...

    @property
    def return_to_parent(self) -> bool:
        ...

    @return_to_parent.setter
    def return_to_parent(self, value: bool):
        ...

    @property
    def show_background(self) -> bool:
        ...

    @show_background.setter
    def show_background(self, value: bool):
        ...

    @property
    def zoom_image(self) -> IPPImage:
        ...

    @zoom_image.setter
    def zoom_image(self, value: IPPImage):
        ...

    @property
    def transition_duration(self) -> float:
        ...

    @transition_duration.setter
    def transition_duration(self, value: float):
        ...

    @property
    def as_i_hyperlink_container(self) -> IHyperlinkContainer:
        ...

    @property
    def as_i_slide_component(self) -> ISlideComponent:
        ...

    @property
    def as_i_presentation_component(self) -> IPresentationComponent:
        ...

    @property
    def as_i_shape(self) -> IShape:
        ...

    @property
    def as_i_graphical_object(self) -> IGraphicalObject:
        ...

    ...

class AudioPlayModePreset:
    '''Constants which define how a sound is played.'''
    @classmethod
    @property
    def MIXED(cls) -> AudioPlayModePreset:
        ...

    @classmethod
    @property
    def AUTO(cls) -> AudioPlayModePreset:
        '''Play automatically.'''
        ...

    @classmethod
    @property
    def ON_CLICK(cls) -> AudioPlayModePreset:
        '''Play only when the icon is clicked on.'''
        ...

    @classmethod
    @property
    def ALL_SLIDES(cls) -> AudioPlayModePreset:
        '''Play on all slides. 
                    Please use :py:attr:`aspose.slides.IAudioFrame.play_across_slides` property instead.'''
        ...

    @classmethod
    @property
    def IN_CLICK_SEQUENCE(cls) -> AudioPlayModePreset:
        '''Play automatically with a click.'''
        ...

    ...

class AudioVolumeMode:
    '''Constants which define audio volume.'''
    @classmethod
    @property
    def MIXED(cls) -> AudioVolumeMode:
        ...

    @classmethod
    @property
    def MUTE(cls) -> AudioVolumeMode:
        '''Zero sound volume.'''
        ...

    @classmethod
    @property
    def LOW(cls) -> AudioVolumeMode:
        '''Low sound volume.'''
        ...

    @classmethod
    @property
    def MEDIUM(cls) -> AudioVolumeMode:
        '''Medium sound volume.'''
        ...

    @classmethod
    @property
    def LOUD(cls) -> AudioVolumeMode:
        '''Loud sound volume.'''
        ...

    ...

class BackgroundType:
    '''Defines the slide background fill source.'''
    @classmethod
    @property
    def NOT_DEFINED(cls) -> BackgroundType:
        ...

    @classmethod
    @property
    def THEMED(cls) -> BackgroundType:
        ...

    @classmethod
    @property
    def OWN_BACKGROUND(cls) -> BackgroundType:
        ...

    ...

class BevelPresetType:
    '''Constants which define 3D bevel of shape.'''
    @classmethod
    @property
    def NOT_DEFINED(cls) -> BevelPresetType:
        ...

    @classmethod
    @property
    def ANGLE(cls) -> BevelPresetType:
        ...

    @classmethod
    @property
    def ART_DECO(cls) -> BevelPresetType:
        ...

    @classmethod
    @property
    def CIRCLE(cls) -> BevelPresetType:
        ...

    @classmethod
    @property
    def CONVEX(cls) -> BevelPresetType:
        ...

    @classmethod
    @property
    def COOL_SLANT(cls) -> BevelPresetType:
        ...

    @classmethod
    @property
    def CROSS(cls) -> BevelPresetType:
        ...

    @classmethod
    @property
    def DIVOT(cls) -> BevelPresetType:
        ...

    @classmethod
    @property
    def HARD_EDGE(cls) -> BevelPresetType:
        ...

    @classmethod
    @property
    def RELAXED_INSET(cls) -> BevelPresetType:
        ...

    @classmethod
    @property
    def RIBLET(cls) -> BevelPresetType:
        ...

    @classmethod
    @property
    def SLOPE(cls) -> BevelPresetType:
        ...

    @classmethod
    @property
    def SOFT_ROUND(cls) -> BevelPresetType:
        ...

    ...

class BlackWhiteMode:
    '''Determines how colored shape should be transformed into black and white.'''
    @classmethod
    @property
    def NOT_DEFINED(cls) -> BlackWhiteMode:
        '''The property isn't set'''
        ...

    @classmethod
    @property
    def COLOR(cls) -> BlackWhiteMode:
        '''The object is rendered with normal coloring'''
        ...

    @classmethod
    @property
    def AUTOMATIC(cls) -> BlackWhiteMode:
        '''The object is rendered with automatic coloring'''
        ...

    @classmethod
    @property
    def GRAY(cls) -> BlackWhiteMode:
        '''The object is rendered with gray coloring'''
        ...

    @classmethod
    @property
    def LIGHT_GRAY(cls) -> BlackWhiteMode:
        '''The object is rendered with light gray coloring'''
        ...

    @classmethod
    @property
    def INVERSE_GRAY(cls) -> BlackWhiteMode:
        '''The object is rendered with inverse gray coloring'''
        ...

    @classmethod
    @property
    def GRAY_WHITE(cls) -> BlackWhiteMode:
        '''The object is rendered with gray and white coloring'''
        ...

    @classmethod
    @property
    def BLACK_GRAY(cls) -> BlackWhiteMode:
        '''The object is rendered with black and gray coloring'''
        ...

    @classmethod
    @property
    def BLACK_WHITE(cls) -> BlackWhiteMode:
        '''The object is rendered with black and white coloring'''
        ...

    @classmethod
    @property
    def BLACK(cls) -> BlackWhiteMode:
        '''The object is rendered only with black coloring'''
        ...

    @classmethod
    @property
    def WHITE(cls) -> BlackWhiteMode:
        '''The object is rendered with white coloring'''
        ...

    @classmethod
    @property
    def HIDDEN(cls) -> BlackWhiteMode:
        '''The object is not rendered'''
        ...

    ...

class BulletType:
    '''Represents the type of the extended bullets.'''
    @classmethod
    @property
    def NOT_DEFINED(cls) -> BulletType:
        ...

    @classmethod
    @property
    def NONE(cls) -> BulletType:
        ...

    @classmethod
    @property
    def SYMBOL(cls) -> BulletType:
        '''Sysmbol bullets.'''
        ...

    @classmethod
    @property
    def NUMBERED(cls) -> BulletType:
        '''Numbered bullets.'''
        ...

    @classmethod
    @property
    def PICTURE(cls) -> BulletType:
        '''Picture bullets.'''
        ...

    ...

class CameraPresetType:
    '''Constants which define camera preset type.'''
    @classmethod
    @property
    def NOT_DEFINED(cls) -> CameraPresetType:
        ...

    @classmethod
    @property
    def ISOMETRIC_BOTTOM_DOWN(cls) -> CameraPresetType:
        ...

    @classmethod
    @property
    def ISOMETRIC_BOTTOM_UP(cls) -> CameraPresetType:
        ...

    @classmethod
    @property
    def ISOMETRIC_LEFT_DOWN(cls) -> CameraPresetType:
        ...

    @classmethod
    @property
    def ISOMETRIC_LEFT_UP(cls) -> CameraPresetType:
        ...

    @classmethod
    @property
    def ISOMETRIC_OFF_AXIS_1_LEFT(cls) -> CameraPresetType:
        ...

    @classmethod
    @property
    def ISOMETRIC_OFF_AXIS_1_RIGHT(cls) -> CameraPresetType:
        ...

    @classmethod
    @property
    def ISOMETRIC_OFF_AXIS_1_TOP(cls) -> CameraPresetType:
        ...

    @classmethod
    @property
    def ISOMETRIC_OFF_AXIS_2_LEFT(cls) -> CameraPresetType:
        ...

    @classmethod
    @property
    def ISOMETRIC_OFF_AXIS_2_RIGHT(cls) -> CameraPresetType:
        ...

    @classmethod
    @property
    def ISOMETRIC_OFF_AXIS_2_TOP(cls) -> CameraPresetType:
        ...

    @classmethod
    @property
    def ISOMETRIC_OFF_AXIS_3_BOTTOM(cls) -> CameraPresetType:
        ...

    @classmethod
    @property
    def ISOMETRIC_OFF_AXIS_3_LEFT(cls) -> CameraPresetType:
        ...

    @classmethod
    @property
    def ISOMETRIC_OFF_AXIS_3_RIGHT(cls) -> CameraPresetType:
        ...

    @classmethod
    @property
    def ISOMETRIC_OFF_AXIS_4_BOTTOM(cls) -> CameraPresetType:
        ...

    @classmethod
    @property
    def ISOMETRIC_OFF_AXIS_4_LEFT(cls) -> CameraPresetType:
        ...

    @classmethod
    @property
    def ISOMETRIC_OFF_AXIS_4_RIGHT(cls) -> CameraPresetType:
        ...

    @classmethod
    @property
    def ISOMETRIC_RIGHT_DOWN(cls) -> CameraPresetType:
        ...

    @classmethod
    @property
    def ISOMETRIC_RIGHT_UP(cls) -> CameraPresetType:
        ...

    @classmethod
    @property
    def ISOMETRIC_TOP_DOWN(cls) -> CameraPresetType:
        ...

    @classmethod
    @property
    def ISOMETRIC_TOP_UP(cls) -> CameraPresetType:
        ...

    @classmethod
    @property
    def LEGACY_OBLIQUE_BOTTOM(cls) -> CameraPresetType:
        ...

    @classmethod
    @property
    def LEGACY_OBLIQUE_BOTTOM_LEFT(cls) -> CameraPresetType:
        ...

    @classmethod
    @property
    def LEGACY_OBLIQUE_BOTTOM_RIGHT(cls) -> CameraPresetType:
        ...

    @classmethod
    @property
    def LEGACY_OBLIQUE_FRONT(cls) -> CameraPresetType:
        ...

    @classmethod
    @property
    def LEGACY_OBLIQUE_LEFT(cls) -> CameraPresetType:
        ...

    @classmethod
    @property
    def LEGACY_OBLIQUE_RIGHT(cls) -> CameraPresetType:
        ...

    @classmethod
    @property
    def LEGACY_OBLIQUE_TOP(cls) -> CameraPresetType:
        ...

    @classmethod
    @property
    def LEGACY_OBLIQUE_TOP_LEFT(cls) -> CameraPresetType:
        ...

    @classmethod
    @property
    def LEGACY_OBLIQUE_TOP_RIGHT(cls) -> CameraPresetType:
        ...

    @classmethod
    @property
    def LEGACY_PERSPECTIVE_BOTTOM(cls) -> CameraPresetType:
        ...

    @classmethod
    @property
    def LEGACY_PERSPECTIVE_BOTTOM_LEFT(cls) -> CameraPresetType:
        ...

    @classmethod
    @property
    def LEGACY_PERSPECTIVE_BOTTOM_RIGHT(cls) -> CameraPresetType:
        ...

    @classmethod
    @property
    def LEGACY_PERSPECTIVE_FRONT(cls) -> CameraPresetType:
        ...

    @classmethod
    @property
    def LEGACY_PERSPECTIVE_LEFT(cls) -> CameraPresetType:
        ...

    @classmethod
    @property
    def LEGACY_PERSPECTIVE_RIGHT(cls) -> CameraPresetType:
        ...

    @classmethod
    @property
    def LEGACY_PERSPECTIVE_TOP(cls) -> CameraPresetType:
        ...

    @classmethod
    @property
    def LEGACY_PERSPECTIVE_TOP_LEFT(cls) -> CameraPresetType:
        ...

    @classmethod
    @property
    def LEGACY_PERSPECTIVE_TOP_RIGHT(cls) -> CameraPresetType:
        ...

    @classmethod
    @property
    def OBLIQUE_BOTTOM(cls) -> CameraPresetType:
        ...

    @classmethod
    @property
    def OBLIQUE_BOTTOM_LEFT(cls) -> CameraPresetType:
        ...

    @classmethod
    @property
    def OBLIQUE_BOTTOM_RIGHT(cls) -> CameraPresetType:
        ...

    @classmethod
    @property
    def OBLIQUE_LEFT(cls) -> CameraPresetType:
        ...

    @classmethod
    @property
    def OBLIQUE_RIGHT(cls) -> CameraPresetType:
        ...

    @classmethod
    @property
    def OBLIQUE_TOP(cls) -> CameraPresetType:
        ...

    @classmethod
    @property
    def OBLIQUE_TOP_LEFT(cls) -> CameraPresetType:
        ...

    @classmethod
    @property
    def OBLIQUE_TOP_RIGHT(cls) -> CameraPresetType:
        ...

    @classmethod
    @property
    def ORTHOGRAPHIC_FRONT(cls) -> CameraPresetType:
        ...

    @classmethod
    @property
    def PERSPECTIVE_ABOVE(cls) -> CameraPresetType:
        ...

    @classmethod
    @property
    def PERSPECTIVE_ABOVE_LEFT_FACING(cls) -> CameraPresetType:
        ...

    @classmethod
    @property
    def PERSPECTIVE_ABOVE_RIGHT_FACING(cls) -> CameraPresetType:
        ...

    @classmethod
    @property
    def PERSPECTIVE_BELOW(cls) -> CameraPresetType:
        ...

    @classmethod
    @property
    def PERSPECTIVE_CONTRASTING_LEFT_FACING(cls) -> CameraPresetType:
        ...

    @classmethod
    @property
    def PERSPECTIVE_CONTRASTING_RIGHT_FACING(cls) -> CameraPresetType:
        ...

    @classmethod
    @property
    def PERSPECTIVE_FRONT(cls) -> CameraPresetType:
        ...

    @classmethod
    @property
    def PERSPECTIVE_HEROIC_EXTREME_LEFT_FACING(cls) -> CameraPresetType:
        ...

    @classmethod
    @property
    def PERSPECTIVE_HEROIC_EXTREME_RIGHT_FACING(cls) -> CameraPresetType:
        ...

    @classmethod
    @property
    def PERSPECTIVE_HEROIC_LEFT_FACING(cls) -> CameraPresetType:
        ...

    @classmethod
    @property
    def PERSPECTIVE_HEROIC_RIGHT_FACING(cls) -> CameraPresetType:
        ...

    @classmethod
    @property
    def PERSPECTIVE_LEFT(cls) -> CameraPresetType:
        ...

    @classmethod
    @property
    def PERSPECTIVE_RELAXED(cls) -> CameraPresetType:
        ...

    @classmethod
    @property
    def PERSPECTIVE_RELAXED_MODERATELY(cls) -> CameraPresetType:
        ...

    @classmethod
    @property
    def PERSPECTIVE_RIGHT(cls) -> CameraPresetType:
        ...

    ...

class ColorSchemeIndex:
    '''Represents an index in a colorscheme.'''
    @classmethod
    @property
    def DARK1(cls) -> ColorSchemeIndex:
        '''Dark 1.'''
        ...

    @classmethod
    @property
    def LIGHT1(cls) -> ColorSchemeIndex:
        '''Light 1.'''
        ...

    @classmethod
    @property
    def DARK2(cls) -> ColorSchemeIndex:
        '''Dark 2.'''
        ...

    @classmethod
    @property
    def LIGHT2(cls) -> ColorSchemeIndex:
        '''Light 2.'''
        ...

    @classmethod
    @property
    def ACCENT1(cls) -> ColorSchemeIndex:
        '''Accent 1.'''
        ...

    @classmethod
    @property
    def ACCENT2(cls) -> ColorSchemeIndex:
        '''Accent 2.'''
        ...

    @classmethod
    @property
    def ACCENT3(cls) -> ColorSchemeIndex:
        '''Accent 3.'''
        ...

    @classmethod
    @property
    def ACCENT4(cls) -> ColorSchemeIndex:
        '''Accent 4.'''
        ...

    @classmethod
    @property
    def ACCENT5(cls) -> ColorSchemeIndex:
        '''Accent 5.'''
        ...

    @classmethod
    @property
    def ACCENT6(cls) -> ColorSchemeIndex:
        '''Accent 6.'''
        ...

    @classmethod
    @property
    def HYPERLINK(cls) -> ColorSchemeIndex:
        '''Hyperlink.'''
        ...

    @classmethod
    @property
    def FOLLOWED_HYPERLINK(cls) -> ColorSchemeIndex:
        '''Followed Hyperlink.'''
        ...

    ...

class ColorStringFormat:
    '''Represents a type of hyperlink action.'''
    @classmethod
    @property
    def VML(cls) -> ColorStringFormat:
        '''VML color string format.'''
        ...

    ...

class ColorTransformOperation:
    '''Defines color transform operation.'''
    @classmethod
    @property
    def TINT(cls) -> ColorTransformOperation:
        '''Tints the color. Parameter is in range between 0 (original color) and 1 (white).'''
        ...

    @classmethod
    @property
    def SHADE(cls) -> ColorTransformOperation:
        '''Shades the color. Parameter is in range between 0 (original color) and 1 (black).'''
        ...

    @classmethod
    @property
    def COMPLEMENT(cls) -> ColorTransformOperation:
        '''Changes the color to a RGB complementary one.
                    m = Max(r, g, b);
                    r = m - r;
                    g = m - g;
                    b = m - b;'''
        ...

    @classmethod
    @property
    def INVERSE(cls) -> ColorTransformOperation:
        '''Changes the color to an inverted color.
                    r = 1 - r;
                    g = 1 - g;
                    b = 1 - b;'''
        ...

    @classmethod
    @property
    def GRAYSCALE(cls) -> ColorTransformOperation:
        '''Changes the color to a gray one with same lightness. Parameter ignored.'''
        ...

    @classmethod
    @property
    def SET_ALPHA(cls) -> ColorTransformOperation:
        '''Defines an alpha component of the color. Parameter is in range between 0 (transparent) and 1 (opaque).'''
        ...

    @classmethod
    @property
    def ADD_ALPHA(cls) -> ColorTransformOperation:
        '''Adds a parameter's value to an alpha component of the color. Parameter is in range between -1 and 1.'''
        ...

    @classmethod
    @property
    def MULTIPLY_ALPHA(cls) -> ColorTransformOperation:
        '''Multiplies an alpha component to a parameter's value.'''
        ...

    @classmethod
    @property
    def SET_HUE(cls) -> ColorTransformOperation:
        '''Changes a hue component of the color to a parameter's value. Parameter is in range between 0 and 360.'''
        ...

    @classmethod
    @property
    def ADD_HUE(cls) -> ColorTransformOperation:
        '''Adds parameter's value to hue component of the color. Parameter is in range between -360 and 360.'''
        ...

    @classmethod
    @property
    def MULTIPLY_HUE(cls) -> ColorTransformOperation:
        '''Multiplies a hue component to a parameter's value.'''
        ...

    @classmethod
    @property
    def SET_SATURATION(cls) -> ColorTransformOperation:
        '''Changes a saturation component of the color to a parameter's value. Parameter is in range between 0 and 1.'''
        ...

    @classmethod
    @property
    def ADD_SATURATION(cls) -> ColorTransformOperation:
        '''Adds a parameter's value to a saturation component of the color. Parameter is in range between -1 and 1.'''
        ...

    @classmethod
    @property
    def MULTIPLY_SATURATION(cls) -> ColorTransformOperation:
        '''Multiplies a saturation component to a parameter's value.'''
        ...

    @classmethod
    @property
    def SET_LUMINANCE(cls) -> ColorTransformOperation:
        '''Changes a luminance component of the color to a parameter's value. Parameter is in range between 0 and 1.'''
        ...

    @classmethod
    @property
    def ADD_LUMINANCE(cls) -> ColorTransformOperation:
        '''Adds a parameter's value to a luminance component of the color. Parameter is in range between -1 and 1.'''
        ...

    @classmethod
    @property
    def MULTIPLY_LUMINANCE(cls) -> ColorTransformOperation:
        '''Multiplies a luminance component to a parameter's value.'''
        ...

    @classmethod
    @property
    def SET_RED(cls) -> ColorTransformOperation:
        '''Changes a red component of the color to a parameter's value. Parameter is in range between 0 and 1.'''
        ...

    @classmethod
    @property
    def ADD_RED(cls) -> ColorTransformOperation:
        '''Adds a parameter's value to a red component of the color. Parameter is in range between -1 and 1.'''
        ...

    @classmethod
    @property
    def MULTIPLY_RED(cls) -> ColorTransformOperation:
        '''Multiplies a red component to a parameter.'''
        ...

    @classmethod
    @property
    def SET_GREEN(cls) -> ColorTransformOperation:
        '''Changes a green component of the color to a parameter's value value. Parameter is in range between 0 and 1.'''
        ...

    @classmethod
    @property
    def ADD_GREEN(cls) -> ColorTransformOperation:
        '''Adds a parameter to a green component of the color. Parameter is in range between -1 and 1.'''
        ...

    @classmethod
    @property
    def MULTIPLY_GREEN(cls) -> ColorTransformOperation:
        '''Multiplies a green component of the color to a parameter's value.'''
        ...

    @classmethod
    @property
    def SET_BLUE(cls) -> ColorTransformOperation:
        '''Changes a blue component of the color to a parameter's value. Parameter is in range between 0 and 360.'''
        ...

    @classmethod
    @property
    def ADD_BLUE(cls) -> ColorTransformOperation:
        '''Adds a parameter's value to a blue component of the color. Parameter is in range between -1 and 1.'''
        ...

    @classmethod
    @property
    def MULTIPLY_BLUE(cls) -> ColorTransformOperation:
        '''Multiplies a blue component of the color to a parameter's value.'''
        ...

    @classmethod
    @property
    def GAMMA(cls) -> ColorTransformOperation:
        '''Gamma correction. Parameter ignored.'''
        ...

    @classmethod
    @property
    def INVERSE_GAMMA(cls) -> ColorTransformOperation:
        '''Inverse gamma correction. Parameter ignored.'''
        ...

    ...

class ColorType:
    '''Represents different color modes.'''
    @classmethod
    @property
    def NOT_DEFINED(cls) -> ColorType:
        '''Color is not defined at all.'''
        ...

    @classmethod
    @property
    def RGB(cls) -> ColorType:
        '''Standard 24bit RGB color.'''
        ...

    @classmethod
    @property
    def RGB_PERCENTAGE(cls) -> ColorType:
        '''High definition RGB color.'''
        ...

    @classmethod
    @property
    def HSL(cls) -> ColorType:
        '''High definition HSL color.'''
        ...

    @classmethod
    @property
    def SCHEME(cls) -> ColorType:
        '''Scheme color.'''
        ...

    @classmethod
    @property
    def SYSTEM(cls) -> ColorType:
        '''System color.'''
        ...

    @classmethod
    @property
    def PRESET(cls) -> ColorType:
        '''Preset Color.'''
        ...

    ...

class ControlType:
    '''Defines a control type which should be embedded by :py:func:`Aspose.Slides.IControlCollection.AddControl(Aspose.Slides.ControlType,System.Single,System.Single,System.Single,Syste.`.'''
    @classmethod
    @property
    def WINDOWS_MEDIA_PLAYER(cls) -> ControlType:
        '''Windows Media Player control.'''
        ...

    ...

class EmbeddingLevel:
    '''Represents the licensing rights for embedding the font.'''
    @classmethod
    @property
    def INSTALLABLE(cls) -> EmbeddingLevel:
        '''Fonts with this setting indicate that they may be embedded and permanently installed on the remote system by an application. 
                    The user of the remote system acquires the identical rights, obligations and licenses for that font as the original purchaser of the font, 
                    and is subject to the same end-user license agreement, copyright, design patent, and/or trademark as was the original purchaser.'''
        ...

    @classmethod
    @property
    def RESTRICTED(cls) -> EmbeddingLevel:
        '''Fonts that have only this bit set must not be modified, embedded or exchanged in any manner without first obtaining permission of the legal owner.'''
        ...

    @classmethod
    @property
    def PREVIEW_PRINT(cls) -> EmbeddingLevel:
        '''When this bit is set, the font may be embedded, and temporarily loaded on the remote system. Documents containing Preview & 
                    Print fonts must be opened "read-only;" no edits can be applied to the document.'''
        ...

    @classmethod
    @property
    def EDITABLE(cls) -> EmbeddingLevel:
        '''When this bit is set, the font may be embedded but must only be installed temporarily on other systems. In contrast to Preview & 
                    Print fonts, documents containing Editable fonts may be opened for reading, editing is permitted, and changes may be saved.'''
        ...

    @classmethod
    @property
    def NO_SUBSETTING(cls) -> EmbeddingLevel:
        '''When this bit is set, the font may not be subsetted prior to embedding. Other embedding restrictions specified in bits 0-3 and 9 also apply.'''
        ...

    @classmethod
    @property
    def BITMAP_ONLY(cls) -> EmbeddingLevel:
        '''When this bit is set, only bitmaps contained in the font may be embedded. No outline data may be embedded. If there are no bitmaps available in the font, 
                    then the font is considered unembeddable and the embedding services will fail.'''
        ...

    ...

class FillBlendMode:
    '''Determines blend mode.'''
    @classmethod
    @property
    def DARKEN(cls) -> FillBlendMode:
        '''Darken blend mode.'''
        ...

    @classmethod
    @property
    def LIGHTEN(cls) -> FillBlendMode:
        '''Lighten blend mode.'''
        ...

    @classmethod
    @property
    def MULTIPLY(cls) -> FillBlendMode:
        '''Multiply blend mode.'''
        ...

    @classmethod
    @property
    def OVERLAY(cls) -> FillBlendMode:
        '''Overlay blend mode.'''
        ...

    @classmethod
    @property
    def SCREEN(cls) -> FillBlendMode:
        '''Screen blend mode.'''
        ...

    ...

class FillType:
    '''Specifies the interior fill type of various visual objects.'''
    @classmethod
    @property
    def NOT_DEFINED(cls) -> FillType:
        '''The fill type is not defined.'''
        ...

    @classmethod
    @property
    def NO_FILL(cls) -> FillType:
        '''No fill applied.'''
        ...

    @classmethod
    @property
    def SOLID(cls) -> FillType:
        '''Filled with a solid color.'''
        ...

    @classmethod
    @property
    def GRADIENT(cls) -> FillType:
        '''The fill is gradient.'''
        ...

    @classmethod
    @property
    def PATTERN(cls) -> FillType:
        '''Repeating pattern is used to fill the object.'''
        ...

    @classmethod
    @property
    def PICTURE(cls) -> FillType:
        '''A single picture is used to fill the object.'''
        ...

    @classmethod
    @property
    def GROUP(cls) -> FillType:
        '''The visual object inherits the fill properties from the group.'''
        ...

    ...

class FontAlignment:
    '''Represents vertical font alignment.'''
    @classmethod
    @property
    def DEFAULT(cls) -> FontAlignment:
        ...

    @classmethod
    @property
    def AUTOMATIC(cls) -> FontAlignment:
        ...

    @classmethod
    @property
    def TOP(cls) -> FontAlignment:
        ...

    @classmethod
    @property
    def CENTER(cls) -> FontAlignment:
        ...

    @classmethod
    @property
    def BOTTOM(cls) -> FontAlignment:
        ...

    @classmethod
    @property
    def BASELINE(cls) -> FontAlignment:
        ...

    ...

class FontCollectionIndex:
    '''Represents font's index in a collection.'''
    @classmethod
    @property
    def NONE(cls) -> FontCollectionIndex:
        ...

    @classmethod
    @property
    def MINOR(cls) -> FontCollectionIndex:
        ...

    @classmethod
    @property
    def MAJOR(cls) -> FontCollectionIndex:
        ...

    ...

class FontSubstCondition:
    '''Represents a rule fot font substitution'''
    @classmethod
    @property
    def WHEN_INACCESSIBLE(cls) -> FontSubstCondition:
        '''Substitute when font is not found'''
        ...

    @classmethod
    @property
    def ALWAYS(cls) -> FontSubstCondition:
        '''Substitute always'''
        ...

    ...

class GradientDirection:
    '''Represents the gradient style.'''
    @classmethod
    @property
    def NOT_DEFINED(cls) -> GradientDirection:
        '''Not defined'''
        ...

    @classmethod
    @property
    def FROM_CORNER1(cls) -> GradientDirection:
        '''From Top Left Corner'''
        ...

    @classmethod
    @property
    def FROM_CORNER2(cls) -> GradientDirection:
        '''From Top Right Corner'''
        ...

    @classmethod
    @property
    def FROM_CORNER3(cls) -> GradientDirection:
        '''From Bottom Left Corner'''
        ...

    @classmethod
    @property
    def FROM_CORNER4(cls) -> GradientDirection:
        '''From Bottom Right Corner'''
        ...

    @classmethod
    @property
    def FROM_CENTER(cls) -> GradientDirection:
        '''From Center'''
        ...

    ...

class GradientShape:
    '''Represents the shape of gradient fill.'''
    @classmethod
    @property
    def NOT_DEFINED(cls) -> GradientShape:
        ...

    @classmethod
    @property
    def LINEAR(cls) -> GradientShape:
        ...

    @classmethod
    @property
    def RECTANGLE(cls) -> GradientShape:
        ...

    @classmethod
    @property
    def RADIAL(cls) -> GradientShape:
        ...

    @classmethod
    @property
    def PATH(cls) -> GradientShape:
        ...

    ...

class GradientStyle:
    '''Represents the available gradient styles.'''
    @classmethod
    @property
    def DEFAULT(cls) -> GradientStyle:
        '''The default gradient style.'''
        ...

    @classmethod
    @property
    def POWER_POINT_UI(cls) -> GradientStyle:
        '''The gradient style as it appears in the PowerPoint user interface.'''
        ...

    ...

class HyperlinkActionType:
    '''Represents a type of hyperlink action.'''
    @classmethod
    @property
    def UNKNOWN(cls) -> HyperlinkActionType:
        '''Unrecognized action type.'''
        ...

    @classmethod
    @property
    def NO_ACTION(cls) -> HyperlinkActionType:
        '''No action.'''
        ...

    @classmethod
    @property
    def HYPERLINK(cls) -> HyperlinkActionType:
        '''Usual hyperlink.'''
        ...

    @classmethod
    @property
    def JUMP_FIRST_SLIDE(cls) -> HyperlinkActionType:
        '''Jump to the first slide of the presentation.'''
        ...

    @classmethod
    @property
    def JUMP_PREVIOUS_SLIDE(cls) -> HyperlinkActionType:
        '''Jump to the previous slide.'''
        ...

    @classmethod
    @property
    def JUMP_NEXT_SLIDE(cls) -> HyperlinkActionType:
        '''Jump to the next slide.'''
        ...

    @classmethod
    @property
    def JUMP_LAST_SLIDE(cls) -> HyperlinkActionType:
        '''Jump to the last slide of the presentation.'''
        ...

    @classmethod
    @property
    def JUMP_END_SHOW(cls) -> HyperlinkActionType:
        '''Jump to the end of slideshow.'''
        ...

    @classmethod
    @property
    def JUMP_LAST_VIEWED_SLIDE(cls) -> HyperlinkActionType:
        '''Jump to the last viewed slide.'''
        ...

    @classmethod
    @property
    def JUMP_SPECIFIC_SLIDE(cls) -> HyperlinkActionType:
        '''Jump to the specific slide, referred by :py:attr:`aspose.slides.IHyperlink.target_slide` property.'''
        ...

    @classmethod
    @property
    def START_CUSTOM_SLIDE_SHOW(cls) -> HyperlinkActionType:
        '''Start custom slideshow.'''
        ...

    @classmethod
    @property
    def OPEN_FILE(cls) -> HyperlinkActionType:
        '''Open referenced file.'''
        ...

    @classmethod
    @property
    def OPEN_PRESENTATION(cls) -> HyperlinkActionType:
        '''Open referenced presentation.'''
        ...

    @classmethod
    @property
    def START_STOP_MEDIA(cls) -> HyperlinkActionType:
        '''Start/stop playing mediafile.'''
        ...

    @classmethod
    @property
    def START_MACRO(cls) -> HyperlinkActionType:
        '''Start executing macro script.'''
        ...

    @classmethod
    @property
    def START_PROGRAM(cls) -> HyperlinkActionType:
        '''Start program.'''
        ...

    ...

class HyperlinkColorSource:
    '''Represents source of hyperlink color.'''
    @classmethod
    @property
    def STYLES(cls) -> HyperlinkColorSource:
        '''Styles.'''
        ...

    @classmethod
    @property
    def PORTION_FORMAT(cls) -> HyperlinkColorSource:
        '''Portion format.'''
        ...

    ...

class ImageFormat:
    '''Represents the file format of the image.'''
    @classmethod
    @property
    def MEMORY_BMP(cls) -> ImageFormat:
        '''Represents the format of a bitmap in memory.'''
        ...

    @classmethod
    @property
    def BMP(cls) -> ImageFormat:
        '''Represents the bitmap (BMP) image format.'''
        ...

    @classmethod
    @property
    def EMF(cls) -> ImageFormat:
        '''Represents the enhanced metafile (EMF) image format.'''
        ...

    @classmethod
    @property
    def WMF(cls) -> ImageFormat:
        '''Represents the Windows metafile (WMF) image format.'''
        ...

    @classmethod
    @property
    def GIF(cls) -> ImageFormat:
        '''Represents the Graphics Interchange Format (GIF) image format.'''
        ...

    @classmethod
    @property
    def JPEG(cls) -> ImageFormat:
        '''Represents the Joint Photographic Experts Group (JPEG) image format.'''
        ...

    @classmethod
    @property
    def PNG(cls) -> ImageFormat:
        '''Represents the W3C Portable Network Graphics (PNG) image format.'''
        ...

    @classmethod
    @property
    def TIFF(cls) -> ImageFormat:
        '''Represents the Tagged Image File Format (TIFF) image format.'''
        ...

    @classmethod
    @property
    def EXIF(cls) -> ImageFormat:
        '''Represents the Exchangeable Image File (Exif) format.'''
        ...

    @classmethod
    @property
    def ICON(cls) -> ImageFormat:
        '''Represents the Windows icon image format.'''
        ...

    ...

class LightRigPresetType:
    '''Constants which define light preset types.'''
    @classmethod
    @property
    def NOT_DEFINED(cls) -> LightRigPresetType:
        ...

    @classmethod
    @property
    def BALANCED(cls) -> LightRigPresetType:
        ...

    @classmethod
    @property
    def BRIGHT_ROOM(cls) -> LightRigPresetType:
        ...

    @classmethod
    @property
    def CHILLY(cls) -> LightRigPresetType:
        ...

    @classmethod
    @property
    def CONTRASTING(cls) -> LightRigPresetType:
        ...

    @classmethod
    @property
    def FLAT(cls) -> LightRigPresetType:
        ...

    @classmethod
    @property
    def FLOOD(cls) -> LightRigPresetType:
        ...

    @classmethod
    @property
    def FREEZING(cls) -> LightRigPresetType:
        ...

    @classmethod
    @property
    def GLOW(cls) -> LightRigPresetType:
        ...

    @classmethod
    @property
    def HARSH(cls) -> LightRigPresetType:
        ...

    @classmethod
    @property
    def LEGACY_FLAT1(cls) -> LightRigPresetType:
        ...

    @classmethod
    @property
    def LEGACY_FLAT2(cls) -> LightRigPresetType:
        ...

    @classmethod
    @property
    def LEGACY_FLAT3(cls) -> LightRigPresetType:
        ...

    @classmethod
    @property
    def LEGACY_FLAT4(cls) -> LightRigPresetType:
        ...

    @classmethod
    @property
    def LEGACY_HARSH1(cls) -> LightRigPresetType:
        ...

    @classmethod
    @property
    def LEGACY_HARSH2(cls) -> LightRigPresetType:
        ...

    @classmethod
    @property
    def LEGACY_HARSH3(cls) -> LightRigPresetType:
        ...

    @classmethod
    @property
    def LEGACY_HARSH4(cls) -> LightRigPresetType:
        ...

    @classmethod
    @property
    def LEGACY_NORMAL1(cls) -> LightRigPresetType:
        ...

    @classmethod
    @property
    def LEGACY_NORMAL2(cls) -> LightRigPresetType:
        ...

    @classmethod
    @property
    def LEGACY_NORMAL3(cls) -> LightRigPresetType:
        ...

    @classmethod
    @property
    def LEGACY_NORMAL4(cls) -> LightRigPresetType:
        ...

    @classmethod
    @property
    def MORNING(cls) -> LightRigPresetType:
        ...

    @classmethod
    @property
    def SOFT(cls) -> LightRigPresetType:
        ...

    @classmethod
    @property
    def SUNRISE(cls) -> LightRigPresetType:
        ...

    @classmethod
    @property
    def SUNSET(cls) -> LightRigPresetType:
        ...

    @classmethod
    @property
    def THREE_PT(cls) -> LightRigPresetType:
        ...

    @classmethod
    @property
    def TWO_PT(cls) -> LightRigPresetType:
        ...

    ...

class LightingDirection:
    '''Constants which define light directions.'''
    @classmethod
    @property
    def NOT_DEFINED(cls) -> LightingDirection:
        ...

    @classmethod
    @property
    def TOP_LEFT(cls) -> LightingDirection:
        ...

    @classmethod
    @property
    def TOP(cls) -> LightingDirection:
        ...

    @classmethod
    @property
    def TOP_RIGHT(cls) -> LightingDirection:
        ...

    @classmethod
    @property
    def RIGHT(cls) -> LightingDirection:
        ...

    @classmethod
    @property
    def BOTTOM_RIGHT(cls) -> LightingDirection:
        ...

    @classmethod
    @property
    def BOTTOM(cls) -> LightingDirection:
        ...

    @classmethod
    @property
    def BOTTOM_LEFT(cls) -> LightingDirection:
        ...

    @classmethod
    @property
    def LEFT(cls) -> LightingDirection:
        ...

    ...

class LineAlignment:
    '''Represents the lines alignment type.'''
    @classmethod
    @property
    def NOT_DEFINED(cls) -> LineAlignment:
        ...

    @classmethod
    @property
    def CENTER(cls) -> LineAlignment:
        ...

    @classmethod
    @property
    def INSET(cls) -> LineAlignment:
        ...

    ...

class LineArrowheadLength:
    '''Represents the length of an arrowhead.'''
    @classmethod
    @property
    def NOT_DEFINED(cls) -> LineArrowheadLength:
        ...

    @classmethod
    @property
    def SHORT(cls) -> LineArrowheadLength:
        ...

    @classmethod
    @property
    def MEDIUM(cls) -> LineArrowheadLength:
        ...

    @classmethod
    @property
    def LONG(cls) -> LineArrowheadLength:
        ...

    ...

class LineArrowheadStyle:
    '''Represents the style of an arrowhead.'''
    @classmethod
    @property
    def NOT_DEFINED(cls) -> LineArrowheadStyle:
        ...

    @classmethod
    @property
    def NONE(cls) -> LineArrowheadStyle:
        ...

    @classmethod
    @property
    def TRIANGLE(cls) -> LineArrowheadStyle:
        ...

    @classmethod
    @property
    def STEALTH(cls) -> LineArrowheadStyle:
        ...

    @classmethod
    @property
    def DIAMOND(cls) -> LineArrowheadStyle:
        ...

    @classmethod
    @property
    def OVAL(cls) -> LineArrowheadStyle:
        ...

    @classmethod
    @property
    def OPEN(cls) -> LineArrowheadStyle:
        ...

    ...

class LineArrowheadWidth:
    '''Represents the width of an arrowhead.'''
    @classmethod
    @property
    def NOT_DEFINED(cls) -> LineArrowheadWidth:
        ...

    @classmethod
    @property
    def NARROW(cls) -> LineArrowheadWidth:
        ...

    @classmethod
    @property
    def MEDIUM(cls) -> LineArrowheadWidth:
        ...

    @classmethod
    @property
    def WIDE(cls) -> LineArrowheadWidth:
        ...

    ...

class LineCapStyle:
    '''Represents the line cap style.'''
    @classmethod
    @property
    def NOT_DEFINED(cls) -> LineCapStyle:
        ...

    @classmethod
    @property
    def ROUND(cls) -> LineCapStyle:
        ...

    @classmethod
    @property
    def SQUARE(cls) -> LineCapStyle:
        ...

    @classmethod
    @property
    def FLAT(cls) -> LineCapStyle:
        ...

    ...

class LineDashStyle:
    '''Represents the line dash style.'''
    @classmethod
    @property
    def NOT_DEFINED(cls) -> LineDashStyle:
        ...

    @classmethod
    @property
    def SOLID(cls) -> LineDashStyle:
        ...

    @classmethod
    @property
    def DOT(cls) -> LineDashStyle:
        ...

    @classmethod
    @property
    def DASH(cls) -> LineDashStyle:
        ...

    @classmethod
    @property
    def LARGE_DASH(cls) -> LineDashStyle:
        ...

    @classmethod
    @property
    def DASH_DOT(cls) -> LineDashStyle:
        ...

    @classmethod
    @property
    def LARGE_DASH_DOT(cls) -> LineDashStyle:
        ...

    @classmethod
    @property
    def LARGE_DASH_DOT_DOT(cls) -> LineDashStyle:
        ...

    @classmethod
    @property
    def SYSTEM_DASH(cls) -> LineDashStyle:
        ...

    @classmethod
    @property
    def SYSTEM_DOT(cls) -> LineDashStyle:
        ...

    @classmethod
    @property
    def SYSTEM_DASH_DOT(cls) -> LineDashStyle:
        ...

    @classmethod
    @property
    def SYSTEM_DASH_DOT_DOT(cls) -> LineDashStyle:
        ...

    @classmethod
    @property
    def CUSTOM(cls) -> LineDashStyle:
        ...

    ...

class LineJoinStyle:
    '''Represents the lines join style.'''
    @classmethod
    @property
    def NOT_DEFINED(cls) -> LineJoinStyle:
        ...

    @classmethod
    @property
    def ROUND(cls) -> LineJoinStyle:
        ...

    @classmethod
    @property
    def BEVEL(cls) -> LineJoinStyle:
        ...

    @classmethod
    @property
    def MITER(cls) -> LineJoinStyle:
        ...

    ...

class LineSketchType:
    '''Represents which sketch type or effect a shape has been assigned.'''
    @classmethod
    @property
    def NOT_DEFINED(cls) -> LineSketchType:
        '''Specifies that a shape Sketch effect is undefined.'''
        ...

    @classmethod
    @property
    def NONE(cls) -> LineSketchType:
        '''Specifies that a shape has no Sketch effect. This is equivalent to this property being empty.'''
        ...

    @classmethod
    @property
    def CURVED(cls) -> LineSketchType:
        '''Specifies that a shape has the Curved effect, which turns each edge of the shape into one big gentle curve.'''
        ...

    @classmethod
    @property
    def FREEHAND(cls) -> LineSketchType:
        '''Specifies that a shape has the Freehand effect, which most closely resembles an imperfectly drawn line.'''
        ...

    @classmethod
    @property
    def SCRIBBLE(cls) -> LineSketchType:
        '''Specifies that a shape has the Scribble effect, which has exaggerated oscillation as if drawn purposely messy.'''
        ...

    ...

class LineStyle:
    '''Represents the style of a line.'''
    @classmethod
    @property
    def NOT_DEFINED(cls) -> LineStyle:
        ...

    @classmethod
    @property
    def SINGLE(cls) -> LineStyle:
        ...

    @classmethod
    @property
    def THIN_THIN(cls) -> LineStyle:
        ...

    @classmethod
    @property
    def THICK_THIN(cls) -> LineStyle:
        ...

    @classmethod
    @property
    def THIN_THICK(cls) -> LineStyle:
        ...

    @classmethod
    @property
    def THICK_BETWEEN_THIN(cls) -> LineStyle:
        ...

    ...

class LoadFormat:
    '''Indicates the format of the document that is to be loaded.'''
    @classmethod
    @property
    def AUTO(cls) -> LoadFormat:
        '''Instructs Aspose.Slides to recognize the format automatically.'''
        ...

    @classmethod
    @property
    def PPT(cls) -> LoadFormat:
        '''Microsoft PowerPoint 97-2003 Presentation.'''
        ...

    @classmethod
    @property
    def PPS(cls) -> LoadFormat:
        '''Microsoft PowerPoint 97-2003 SlideShow.'''
        ...

    @classmethod
    @property
    def PPTX(cls) -> LoadFormat:
        '''Microsoft Office Open XML PresentationML Document.'''
        ...

    @classmethod
    @property
    def PPSX(cls) -> LoadFormat:
        '''Microsoft Office Open XML PresentationML SlideShow.'''
        ...

    @classmethod
    @property
    def ODP(cls) -> LoadFormat:
        '''OpenOffice ODF Presentation.'''
        ...

    @classmethod
    @property
    def POTX(cls) -> LoadFormat:
        '''Microsoft Office Open XML PresentationML Template.'''
        ...

    @classmethod
    @property
    def PPTM(cls) -> LoadFormat:
        '''Microsoft Office Open XML PresentationML Macro-enabled Document.'''
        ...

    @classmethod
    @property
    def PPSM(cls) -> LoadFormat:
        '''Microsoft Office Open XML PresentationML Macro-enabled SlideShow.'''
        ...

    @classmethod
    @property
    def POTM(cls) -> LoadFormat:
        '''Microsoft Office Open XML PresentationML Macro-enabled Template.'''
        ...

    @classmethod
    @property
    def OTP(cls) -> LoadFormat:
        '''OpenOffice OTP Presentation template.'''
        ...

    @classmethod
    @property
    def PPT95(cls) -> LoadFormat:
        '''Microsoft PowerPoint 95 Presentation.'''
        ...

    @classmethod
    @property
    def POT(cls) -> LoadFormat:
        '''Microsoft PowerPoint 97-2003 Presentation Template.'''
        ...

    @classmethod
    @property
    def FODP(cls) -> LoadFormat:
        '''Flat XML ODF Presentation.'''
        ...

    @classmethod
    @property
    def UNKNOWN(cls) -> LoadFormat:
        '''Unknown file format'''
        ...

    ...

class LoadingStreamBehavior:
    '''The :py:class:`io.RawIOBase` passed to a method is considered as a Binary Large Object (BLOB) (see 
                :py:class:`aspose.slides.IBlobManagementOptions` description). Values of this enumeration identify how 
                the :py:class:`io.RawIOBase` should be treated when it passed to the method. Depending on the 
                requirements, different decisions could be made to provide the most efficient behavior.'''
    @classmethod
    @property
    def READ_STREAM_AND_RELEASE(cls) -> LoadingStreamBehavior:
        '''The stream will be read to the end and then released - i.e. it will be guaranteed that this stream 
                    will not be used by :py:class:`aspose.slides.IPresentation` instance in the future. It can be closed by the client 
                    code or used in any other way.'''
        ...

    @classmethod
    @property
    def KEEP_LOCKED(cls) -> LoadingStreamBehavior:
        '''The stream will be locked inside the :py:class:`aspose.slides.IPresentation` object, i.e. the ownership of 
                    the stream will be transferred. The :py:class:`aspose.slides.IPresentation` object will be responsible to 
                    correctly dispose the stream when this object will be disposed itself. 
                    This behavior is extremely useful when you need to serialize a large BLOB file (such as a large 
                    video or audio -see :py:class:`aspose.slides.IBlobManagementOptions` description) and want to prevent loading 
                    this file into memory or other performance issues. You may just open the :py:class:`System.IO.FileStream` 
                    for this file and pass to a method, choosing :py:attr:`aspose.slides.LoadingStreamBehavior.KEEP_LOCKED` LoadingStreamBehavior.'''
        ...

    ...

class MaterialPresetType:
    '''Constants which define material of shape.'''
    @classmethod
    @property
    def NOT_DEFINED(cls) -> MaterialPresetType:
        ...

    @classmethod
    @property
    def CLEAR(cls) -> MaterialPresetType:
        ...

    @classmethod
    @property
    def DK_EDGE(cls) -> MaterialPresetType:
        ...

    @classmethod
    @property
    def FLAT(cls) -> MaterialPresetType:
        ...

    @classmethod
    @property
    def LEGACY_MATTE(cls) -> MaterialPresetType:
        ...

    @classmethod
    @property
    def LEGACY_METAL(cls) -> MaterialPresetType:
        ...

    @classmethod
    @property
    def LEGACY_PLASTIC(cls) -> MaterialPresetType:
        ...

    @classmethod
    @property
    def LEGACY_WIREFRAME(cls) -> MaterialPresetType:
        ...

    @classmethod
    @property
    def MATTE(cls) -> MaterialPresetType:
        ...

    @classmethod
    @property
    def METAL(cls) -> MaterialPresetType:
        ...

    @classmethod
    @property
    def PLASTIC(cls) -> MaterialPresetType:
        ...

    @classmethod
    @property
    def POWDER(cls) -> MaterialPresetType:
        ...

    @classmethod
    @property
    def SOFT_EDGE(cls) -> MaterialPresetType:
        ...

    @classmethod
    @property
    def SOFTMETAL(cls) -> MaterialPresetType:
        ...

    @classmethod
    @property
    def TRANSLUCENT_POWDER(cls) -> MaterialPresetType:
        ...

    @classmethod
    @property
    def WARM_MATTE(cls) -> MaterialPresetType:
        ...

    ...

class ModernCommentStatus:
    '''Represents the status of a modern comment.'''
    @classmethod
    @property
    def NOT_DEFINED(cls) -> ModernCommentStatus:
        '''Not Defined.'''
        ...

    @classmethod
    @property
    def ACTIVE(cls) -> ModernCommentStatus:
        '''Active.'''
        ...

    @classmethod
    @property
    def RESOLVED(cls) -> ModernCommentStatus:
        '''Resolved.'''
        ...

    @classmethod
    @property
    def CLOSED(cls) -> ModernCommentStatus:
        '''Closed.'''
        ...

    ...

class NullableBool:
    '''Represents triple boolean values.'''
    @classmethod
    @property
    def NOT_DEFINED(cls) -> NullableBool:
        '''Boolean value is undefined.'''
        ...

    @classmethod
    @property
    def FALSE(cls) -> NullableBool:
        '''False value.'''
        ...

    @classmethod
    @property
    def TRUE(cls) -> NullableBool:
        '''True value.'''
        ...

    ...

class NumberedBulletStyle:
    '''Represents the style of the numbered bullets.'''
    @classmethod
    @property
    def NOT_DEFINED(cls) -> NumberedBulletStyle:
        '''Not defined.'''
        ...

    @classmethod
    @property
    def BULLET_ALPHA_LC_PERIOD(cls) -> NumberedBulletStyle:
        '''Lowercase alphabetical characters with a period. Sample: a., b., c., ...'''
        ...

    @classmethod
    @property
    def BULLET_ALPHA_UC_PERIOD(cls) -> NumberedBulletStyle:
        '''Uppercase alphabetical characters with a period. Sample: A., B., C., ...'''
        ...

    @classmethod
    @property
    def BULLET_ARABIC_PAREN_RIGHT(cls) -> NumberedBulletStyle:
        '''Arabic numerals with closing parenthesis. Sample: 1), 2), 3), ...'''
        ...

    @classmethod
    @property
    def BULLET_ARABIC_PERIOD(cls) -> NumberedBulletStyle:
        '''Arabic numerals with a period. Sample: 1., 2., 3., ...'''
        ...

    @classmethod
    @property
    def BULLET_ROMAN_LC_PAREN_BOTH(cls) -> NumberedBulletStyle:
        '''Lowercase Roman numerals with both parentheses. Sample: (i), (ii), (iii), ...'''
        ...

    @classmethod
    @property
    def BULLET_ROMAN_LC_PAREN_RIGHT(cls) -> NumberedBulletStyle:
        '''Lowercase Roman numerals with closing parenthesis. Sample: i), ii), iii), ...'''
        ...

    @classmethod
    @property
    def BULLET_ROMAN_LC_PERIOD(cls) -> NumberedBulletStyle:
        '''Lowercase Roman numerals with period. Sample: i., ii., iii., ...'''
        ...

    @classmethod
    @property
    def BULLET_ROMAN_UC_PERIOD(cls) -> NumberedBulletStyle:
        '''Uppercase Roman numerals with period. Sample: I., II., III., ...'''
        ...

    @classmethod
    @property
    def BULLET_ALPHA_LC_PAREN_BOTH(cls) -> NumberedBulletStyle:
        '''Lowercase alphabetical characters with both parentheses. Sample: (a), (b), (c), ...'''
        ...

    @classmethod
    @property
    def BULLET_ALPHA_LC_PAREN_RIGHT(cls) -> NumberedBulletStyle:
        '''Lowercase alphabetical characters with closing parenthesis. Sample: a), b), c), ...'''
        ...

    @classmethod
    @property
    def BULLET_ALPHA_UC_PAREN_BOTH(cls) -> NumberedBulletStyle:
        '''Uppercase alphabetical characters with both parentheses. Sample: (A), (B), (C), ...'''
        ...

    @classmethod
    @property
    def BULLET_ALPHA_UC_PAREN_RIGHT(cls) -> NumberedBulletStyle:
        '''Uppercase alphabetical characters with closing parenthesis. Sample: A), B), C), ...'''
        ...

    @classmethod
    @property
    def BULLET_ARABIC_PAREN_BOTH(cls) -> NumberedBulletStyle:
        '''Arabic numerals with both parentheses. Sample: (1), (2), (3), ...'''
        ...

    @classmethod
    @property
    def BULLET_ARABIC_PLAIN(cls) -> NumberedBulletStyle:
        '''Arabic numerals. Sample: 1, 2, 3, ...'''
        ...

    @classmethod
    @property
    def BULLET_ROMAN_UC_PAREN_BOTH(cls) -> NumberedBulletStyle:
        '''Uppercase Roman numerals with both parentheses. Sample: (I), (II), (III), ...'''
        ...

    @classmethod
    @property
    def BULLET_ROMAN_UC_PAREN_RIGHT(cls) -> NumberedBulletStyle:
        '''Uppercase Roman numerals with closing parenthesis. Sample: I), II), III), ...'''
        ...

    @classmethod
    @property
    def BULLET_SIMP_CHIN_PLAIN(cls) -> NumberedBulletStyle:
        '''Simplified Chinese without a period.'''
        ...

    @classmethod
    @property
    def BULLET_SIMP_CHIN_PERIOD(cls) -> NumberedBulletStyle:
        '''Simplified Chinese with a period.'''
        ...

    @classmethod
    @property
    def BULLET_CIRCLE_NUM_DB_PLAIN(cls) -> NumberedBulletStyle:
        '''Double-byte circled number for values up to 10, from  11 - arabic numbers.'''
        ...

    @classmethod
    @property
    def BULLET_CIRCLE_NUM_WD_WHITE_PLAIN(cls) -> NumberedBulletStyle:
        '''Text colored number with same color circle drawn around it (Wingdings white circle numbers). From  11 - arabic numbers.'''
        ...

    @classmethod
    @property
    def BULLET_CIRCLE_NUM_WD_BLACK_PLAIN(cls) -> NumberedBulletStyle:
        '''Shadow color number with circular background of normal text color (Wingdings black circle numbers).'''
        ...

    @classmethod
    @property
    def BULLET_TRAD_CHIN_PLAIN(cls) -> NumberedBulletStyle:
        '''Traditional Chinese without a period.'''
        ...

    @classmethod
    @property
    def BULLET_TRAD_CHIN_PERIOD(cls) -> NumberedBulletStyle:
        '''Traditional Chinese with a period.'''
        ...

    @classmethod
    @property
    def BULLET_ARABIC_ALPHA_DASH(cls) -> NumberedBulletStyle:
        '''Arabic language alphabetical characters with a dash.'''
        ...

    @classmethod
    @property
    def BULLET_ARABIC_ABJAD_DASH(cls) -> NumberedBulletStyle:
        '''Arabic Abjad alphabets with a dash.'''
        ...

    @classmethod
    @property
    def BULLET_HEBREW_ALPHA_DASH(cls) -> NumberedBulletStyle:
        '''Hebrew language alphabetical characters with a dash.'''
        ...

    @classmethod
    @property
    def BULLET_KANJI_KOREAN_PLAIN(cls) -> NumberedBulletStyle:
        '''Japanese/Korean numbers without a period.'''
        ...

    @classmethod
    @property
    def BULLET_KANJI_KOREAN_PERIOD(cls) -> NumberedBulletStyle:
        '''Japanese/Korean numbers with a period.'''
        ...

    @classmethod
    @property
    def BULLET_ARABIC_DB_PLAIN(cls) -> NumberedBulletStyle:
        '''Double-byte Arabic numbering scheme (no punctuation).'''
        ...

    @classmethod
    @property
    def BULLET_ARABIC_DB_PERIOD(cls) -> NumberedBulletStyle:
        '''Double-byte Arabic numbering scheme with double-byte period.'''
        ...

    @classmethod
    @property
    def BULLET_THAI_ALPHA_PERIOD(cls) -> NumberedBulletStyle:
        '''Thai alphabet period.'''
        ...

    @classmethod
    @property
    def BULLET_THAI_ALPHA_PAREN_RIGHT(cls) -> NumberedBulletStyle:
        '''Thai alphabet parentheses - right.'''
        ...

    @classmethod
    @property
    def BULLET_THAI_ALPHA_PAREN_BOTH(cls) -> NumberedBulletStyle:
        '''Thai alphabet parentheses - both.'''
        ...

    @classmethod
    @property
    def BULLET_THAI_NUM_PERIOD(cls) -> NumberedBulletStyle:
        '''Thai numerical period.'''
        ...

    @classmethod
    @property
    def BULLET_THAI_NUM_PAREN_RIGHT(cls) -> NumberedBulletStyle:
        '''Thai numerical parentheses - right.'''
        ...

    @classmethod
    @property
    def BULLET_THAI_NUM_PAREN_BOTH(cls) -> NumberedBulletStyle:
        '''Thai numerical parentheses - both.'''
        ...

    @classmethod
    @property
    def BULLET_HINDI_ALPHA_PERIOD(cls) -> NumberedBulletStyle:
        '''Hindi alphabet period - vowels.'''
        ...

    @classmethod
    @property
    def BULLET_HINDI_NUM_PERIOD(cls) -> NumberedBulletStyle:
        '''Hindi numerical period.'''
        ...

    @classmethod
    @property
    def BULLET_KANJI_SIMP_CHIN_DB_PERIOD(cls) -> NumberedBulletStyle:
        '''Kanji Simple Chinese DBPeriod.'''
        ...

    @classmethod
    @property
    def BULLET_HINDI_NUM_PAREN_RIGHT(cls) -> NumberedBulletStyle:
        '''Hindi numerical parentheses - right.'''
        ...

    @classmethod
    @property
    def BULLET_HINDI_ALPHA_1_PERIOD(cls) -> NumberedBulletStyle:
        '''Hindi alphabet period - consonants.'''
        ...

    ...

class Orientation:
    '''Represents the orientation of a shape.'''
    @classmethod
    @property
    def HORIZONTAL(cls) -> Orientation:
        '''Horizontal.'''
        ...

    @classmethod
    @property
    def VERTICAL(cls) -> Orientation:
        '''Vertical.'''
        ...

    ...

class PPImageFormat:
    '''Image formats. This enum is replacement for ``System.Drawing.Imaging.ImageFormat`` class.
                It's needed for COM compatibility.'''
    @classmethod
    @property
    def BMP(cls) -> PPImageFormat:
        '''Gets the bitmap (BMP) image format.'''
        ...

    @classmethod
    @property
    def EMF(cls) -> PPImageFormat:
        '''Gets the enhanced metafile (EMF) image format.'''
        ...

    @classmethod
    @property
    def EXIF(cls) -> PPImageFormat:
        '''Gets the Exchangeable Image File (Exif) format.'''
        ...

    @classmethod
    @property
    def GIF(cls) -> PPImageFormat:
        '''Gets the Graphics Interchange Format (GIF) image format.'''
        ...

    @classmethod
    @property
    def ICON(cls) -> PPImageFormat:
        '''Gets the Windows icon image format.'''
        ...

    @classmethod
    @property
    def JPEG(cls) -> PPImageFormat:
        '''Gets the Joint Photographic Experts Group (JPEG) image format.'''
        ...

    @classmethod
    @property
    def MEMORY_BMP(cls) -> PPImageFormat:
        '''Gets the format of a bitmap in memory.'''
        ...

    @classmethod
    @property
    def PNG(cls) -> PPImageFormat:
        '''Gets the W3C Portable Network Graphics (PNG) image format.'''
        ...

    @classmethod
    @property
    def TIFF(cls) -> PPImageFormat:
        '''Gets the Tagged Image File Format (TIFF) image format.'''
        ...

    @classmethod
    @property
    def WMF(cls) -> PPImageFormat:
        '''Gets the Windows metafile (WMF) image format.'''
        ...

    ...

class PathCommandType:
    '''Represents graphics path commands'''
    @classmethod
    @property
    def CLOSE(cls) -> PathCommandType:
        '''Closes geometry path'''
        ...

    @classmethod
    @property
    def MOVE_TO(cls) -> PathCommandType:
        '''Sets next point position of the geometry path'''
        ...

    @classmethod
    @property
    def LINE_TO(cls) -> PathCommandType:
        '''Appends line to the geometry path'''
        ...

    @classmethod
    @property
    def ARC_TO(cls) -> PathCommandType:
        '''Appends the specified arc to the geometry path.'''
        ...

    @classmethod
    @property
    def QUAD_BEZIER_TO(cls) -> PathCommandType:
        '''Appends quadratic Bezier curve to the geometry path'''
        ...

    @classmethod
    @property
    def CUBIC_BEZIER_TO(cls) -> PathCommandType:
        '''Appends cubic Bezier curve to the geometry path'''
        ...

    ...

class PathFillModeType:
    '''Specifies the manner in which a path should be filled'''
    @classmethod
    @property
    def NONE(cls) -> PathFillModeType:
        '''No Path Fill
                    This specifies that the corresponding path should have no fill.'''
        ...

    @classmethod
    @property
    def NORMAL(cls) -> PathFillModeType:
        '''Normal Path Fill
                    This specifies that the corresponding path should have a normally shaded color applied to it’s fill.'''
        ...

    @classmethod
    @property
    def LIGHTEN(cls) -> PathFillModeType:
        '''Lighten Path Fill
                    This specifies that the corresponding path should have  a lightly shaded color applied to it’s fill.'''
        ...

    @classmethod
    @property
    def LIGHTEN_LESS(cls) -> PathFillModeType:
        '''Lighten Path Fill Less
                    This specifies that the corresponding path should have a slightly lighter shaded color applied to it’s fill.'''
        ...

    @classmethod
    @property
    def DARKEN(cls) -> PathFillModeType:
        '''Darken Path Fill
                    This specifies that the corresponding path should have a darker shaded color applied to it’s fill.'''
        ...

    @classmethod
    @property
    def DARKEN_LESS(cls) -> PathFillModeType:
        '''Darken Path Fill Less
                    This specifies that the corresponding path should have a slightly darker shaded color applied to it’s fill.'''
        ...

    ...

class PatternStyle:
    '''Represents the pattern style.'''
    @classmethod
    @property
    def NOT_DEFINED(cls) -> PatternStyle:
        ...

    @classmethod
    @property
    def UNKNOWN(cls) -> PatternStyle:
        ...

    @classmethod
    @property
    def PERCENT05(cls) -> PatternStyle:
        ...

    @classmethod
    @property
    def PERCENT10(cls) -> PatternStyle:
        ...

    @classmethod
    @property
    def PERCENT20(cls) -> PatternStyle:
        ...

    @classmethod
    @property
    def PERCENT25(cls) -> PatternStyle:
        ...

    @classmethod
    @property
    def PERCENT30(cls) -> PatternStyle:
        ...

    @classmethod
    @property
    def PERCENT40(cls) -> PatternStyle:
        ...

    @classmethod
    @property
    def PERCENT50(cls) -> PatternStyle:
        ...

    @classmethod
    @property
    def PERCENT60(cls) -> PatternStyle:
        ...

    @classmethod
    @property
    def PERCENT70(cls) -> PatternStyle:
        ...

    @classmethod
    @property
    def PERCENT75(cls) -> PatternStyle:
        ...

    @classmethod
    @property
    def PERCENT80(cls) -> PatternStyle:
        ...

    @classmethod
    @property
    def PERCENT90(cls) -> PatternStyle:
        ...

    @classmethod
    @property
    def DARK_HORIZONTAL(cls) -> PatternStyle:
        ...

    @classmethod
    @property
    def DARK_VERTICAL(cls) -> PatternStyle:
        ...

    @classmethod
    @property
    def DARK_DOWNWARD_DIAGONAL(cls) -> PatternStyle:
        ...

    @classmethod
    @property
    def DARK_UPWARD_DIAGONAL(cls) -> PatternStyle:
        ...

    @classmethod
    @property
    def SMALL_CHECKER_BOARD(cls) -> PatternStyle:
        ...

    @classmethod
    @property
    def TRELLIS(cls) -> PatternStyle:
        ...

    @classmethod
    @property
    def LIGHT_HORIZONTAL(cls) -> PatternStyle:
        ...

    @classmethod
    @property
    def LIGHT_VERTICAL(cls) -> PatternStyle:
        ...

    @classmethod
    @property
    def LIGHT_DOWNWARD_DIAGONAL(cls) -> PatternStyle:
        ...

    @classmethod
    @property
    def LIGHT_UPWARD_DIAGONAL(cls) -> PatternStyle:
        ...

    @classmethod
    @property
    def SMALL_GRID(cls) -> PatternStyle:
        ...

    @classmethod
    @property
    def DOTTED_DIAMOND(cls) -> PatternStyle:
        ...

    @classmethod
    @property
    def WIDE_DOWNWARD_DIAGONAL(cls) -> PatternStyle:
        ...

    @classmethod
    @property
    def WIDE_UPWARD_DIAGONAL(cls) -> PatternStyle:
        ...

    @classmethod
    @property
    def DASHED_DOWNWARD_DIAGONAL(cls) -> PatternStyle:
        ...

    @classmethod
    @property
    def DASHED_UPWARD_DIAGONAL(cls) -> PatternStyle:
        ...

    @classmethod
    @property
    def NARROW_VERTICAL(cls) -> PatternStyle:
        ...

    @classmethod
    @property
    def NARROW_HORIZONTAL(cls) -> PatternStyle:
        ...

    @classmethod
    @property
    def DASHED_VERTICAL(cls) -> PatternStyle:
        ...

    @classmethod
    @property
    def DASHED_HORIZONTAL(cls) -> PatternStyle:
        ...

    @classmethod
    @property
    def LARGE_CONFETTI(cls) -> PatternStyle:
        ...

    @classmethod
    @property
    def LARGE_GRID(cls) -> PatternStyle:
        ...

    @classmethod
    @property
    def HORIZONTAL_BRICK(cls) -> PatternStyle:
        ...

    @classmethod
    @property
    def LARGE_CHECKER_BOARD(cls) -> PatternStyle:
        ...

    @classmethod
    @property
    def SMALL_CONFETTI(cls) -> PatternStyle:
        ...

    @classmethod
    @property
    def ZIGZAG(cls) -> PatternStyle:
        ...

    @classmethod
    @property
    def SOLID_DIAMOND(cls) -> PatternStyle:
        ...

    @classmethod
    @property
    def DIAGONAL_BRICK(cls) -> PatternStyle:
        ...

    @classmethod
    @property
    def OUTLINED_DIAMOND(cls) -> PatternStyle:
        ...

    @classmethod
    @property
    def PLAID(cls) -> PatternStyle:
        ...

    @classmethod
    @property
    def SPHERE(cls) -> PatternStyle:
        ...

    @classmethod
    @property
    def WEAVE(cls) -> PatternStyle:
        ...

    @classmethod
    @property
    def DOTTED_GRID(cls) -> PatternStyle:
        ...

    @classmethod
    @property
    def DIVOT(cls) -> PatternStyle:
        ...

    @classmethod
    @property
    def SHINGLE(cls) -> PatternStyle:
        ...

    @classmethod
    @property
    def WAVE(cls) -> PatternStyle:
        ...

    @classmethod
    @property
    def HORIZONTAL(cls) -> PatternStyle:
        ...

    @classmethod
    @property
    def VERTICAL(cls) -> PatternStyle:
        ...

    @classmethod
    @property
    def CROSS(cls) -> PatternStyle:
        ...

    @classmethod
    @property
    def DOWNWARD_DIAGONAL(cls) -> PatternStyle:
        ...

    @classmethod
    @property
    def UPWARD_DIAGONAL(cls) -> PatternStyle:
        ...

    @classmethod
    @property
    def DIAGONAL_CROSS(cls) -> PatternStyle:
        ...

    ...

class PersistenceType:
    '''Specifies the method used to store properties of the ActiveX control.'''
    @classmethod
    @property
    def NOT_DEFINED(cls) -> PersistenceType:
        '''Persistance id not specified.'''
        ...

    @classmethod
    @property
    def PERSIST_PROPERTY_BAG(cls) -> PersistenceType:
        '''Specifies that the ActiveX control is persisted using property-bag-based persistence. 
                     Property-bag-based persistence stores an ActiveX control by means of a collection of name 
                     and value pairs which specify the data persisted by the ActiveX control.'''
        ...

    @classmethod
    @property
    def PERSIST_STREAM(cls) -> PersistenceType:
        '''Specifies that the ActiveX control is persisted using a stream-based persistence 
                     that does not support initialization of the ActiveX control to a default state.'''
        ...

    @classmethod
    @property
    def PERSIST_STREAM_INIT(cls) -> PersistenceType:
        '''Specifies that the ActiveX control is persisted using a stream-based persistence 
                     that supports initialization of the ActiveX control to a default state.'''
        ...

    @classmethod
    @property
    def PERSIST_STORAGE(cls) -> PersistenceType:
        '''Specifies that the ActiveX control is persisted using storage-based persistence.'''
        ...

    ...

class PictureFillMode:
    '''Determines how picture will fill area.'''
    @classmethod
    @property
    def TILE(cls) -> PictureFillMode:
        ...

    @classmethod
    @property
    def STRETCH(cls) -> PictureFillMode:
        ...

    ...

class PlaceholderSize:
    '''Represents the size of a placeholder.'''
    @classmethod
    @property
    def FULL(cls) -> PlaceholderSize:
        '''Full.'''
        ...

    @classmethod
    @property
    def HALF(cls) -> PlaceholderSize:
        '''Half.'''
        ...

    @classmethod
    @property
    def QUARTER(cls) -> PlaceholderSize:
        '''Quarter.'''
        ...

    ...

class PlaceholderType:
    '''Represents the type of a placeholder.'''
    @classmethod
    @property
    def TITLE(cls) -> PlaceholderType:
        '''Title.'''
        ...

    @classmethod
    @property
    def BODY(cls) -> PlaceholderType:
        '''Body.'''
        ...

    @classmethod
    @property
    def CENTERED_TITLE(cls) -> PlaceholderType:
        '''Centered Title.'''
        ...

    @classmethod
    @property
    def SUBTITLE(cls) -> PlaceholderType:
        '''Subtitle.'''
        ...

    @classmethod
    @property
    def DATE_AND_TIME(cls) -> PlaceholderType:
        '''Date and Time.'''
        ...

    @classmethod
    @property
    def SLIDE_NUMBER(cls) -> PlaceholderType:
        '''Slide Number.'''
        ...

    @classmethod
    @property
    def FOOTER(cls) -> PlaceholderType:
        '''Footer.'''
        ...

    @classmethod
    @property
    def HEADER(cls) -> PlaceholderType:
        '''Header.'''
        ...

    @classmethod
    @property
    def OBJECT(cls) -> PlaceholderType:
        '''Object.'''
        ...

    @classmethod
    @property
    def CHART(cls) -> PlaceholderType:
        '''Chart.'''
        ...

    @classmethod
    @property
    def TABLE(cls) -> PlaceholderType:
        '''Table.'''
        ...

    @classmethod
    @property
    def CLIP_ART(cls) -> PlaceholderType:
        '''Clip Art.'''
        ...

    @classmethod
    @property
    def DIAGRAM(cls) -> PlaceholderType:
        '''Diagram.'''
        ...

    @classmethod
    @property
    def MEDIA(cls) -> PlaceholderType:
        '''Media.'''
        ...

    @classmethod
    @property
    def SLIDE_IMAGE(cls) -> PlaceholderType:
        '''Slide Image.'''
        ...

    @classmethod
    @property
    def PICTURE(cls) -> PlaceholderType:
        '''Picture.'''
        ...

    ...

class PresentationLockingBehavior:
    '''Represents the behavior regarding treating the :py:class:`aspose.slides.IPresentation` source (file or 
                :py:class:`io.RawIOBase`) while loading and working with an instance of :py:class:`aspose.slides.IPresentation`.'''
    @classmethod
    @property
    def LOAD_AND_RELEASE(cls) -> PresentationLockingBehavior:
        '''The source will be locked only for a time of :py:class:`aspose.slides.IPresentation` constructor execution.'''
        ...

    @classmethod
    @property
    def KEEP_LOCKED(cls) -> PresentationLockingBehavior:
        '''The source will be locked for a whole lifetime of :py:class:`aspose.slides.IPresentation` instance, until it will 
                    be disposed.'''
        ...

    ...

class PresetColor:
    '''Represents predefined color presets.'''
    @classmethod
    @property
    def NOT_DEFINED(cls) -> PresetColor:
        '''Color preset is not defined.'''
        ...

    @classmethod
    @property
    def ALICE_BLUE(cls) -> PresetColor:
        ...

    @classmethod
    @property
    def ANTIQUE_WHITE(cls) -> PresetColor:
        ...

    @classmethod
    @property
    def AQUA(cls) -> PresetColor:
        ...

    @classmethod
    @property
    def AQUAMARINE(cls) -> PresetColor:
        ...

    @classmethod
    @property
    def AZURE(cls) -> PresetColor:
        ...

    @classmethod
    @property
    def BEIGE(cls) -> PresetColor:
        ...

    @classmethod
    @property
    def BISQUE(cls) -> PresetColor:
        ...

    @classmethod
    @property
    def BLACK(cls) -> PresetColor:
        ...

    @classmethod
    @property
    def BLANCHED_ALMOND(cls) -> PresetColor:
        ...

    @classmethod
    @property
    def BLUE(cls) -> PresetColor:
        ...

    @classmethod
    @property
    def BLUE_VIOLET(cls) -> PresetColor:
        ...

    @classmethod
    @property
    def BROWN(cls) -> PresetColor:
        ...

    @classmethod
    @property
    def BURLY_WOOD(cls) -> PresetColor:
        ...

    @classmethod
    @property
    def CADET_BLUE(cls) -> PresetColor:
        ...

    @classmethod
    @property
    def CHARTREUSE(cls) -> PresetColor:
        ...

    @classmethod
    @property
    def CHOCOLATE(cls) -> PresetColor:
        ...

    @classmethod
    @property
    def CORAL(cls) -> PresetColor:
        ...

    @classmethod
    @property
    def CORNFLOWER_BLUE(cls) -> PresetColor:
        ...

    @classmethod
    @property
    def CORNSILK(cls) -> PresetColor:
        ...

    @classmethod
    @property
    def CRIMSON(cls) -> PresetColor:
        ...

    @classmethod
    @property
    def CYAN(cls) -> PresetColor:
        ...

    @classmethod
    @property
    def DARK_BLUE(cls) -> PresetColor:
        ...

    @classmethod
    @property
    def DARK_CYAN(cls) -> PresetColor:
        ...

    @classmethod
    @property
    def DARK_GOLDENROD(cls) -> PresetColor:
        ...

    @classmethod
    @property
    def DARK_GRAY(cls) -> PresetColor:
        ...

    @classmethod
    @property
    def DARK_GREEN(cls) -> PresetColor:
        ...

    @classmethod
    @property
    def DARK_KHAKI(cls) -> PresetColor:
        ...

    @classmethod
    @property
    def DARK_MAGENTA(cls) -> PresetColor:
        ...

    @classmethod
    @property
    def DARK_OLIVE_GREEN(cls) -> PresetColor:
        ...

    @classmethod
    @property
    def DARK_ORANGE(cls) -> PresetColor:
        ...

    @classmethod
    @property
    def DARK_ORCHID(cls) -> PresetColor:
        ...

    @classmethod
    @property
    def DARK_RED(cls) -> PresetColor:
        ...

    @classmethod
    @property
    def DARK_SALMON(cls) -> PresetColor:
        ...

    @classmethod
    @property
    def DARK_SEA_GREEN(cls) -> PresetColor:
        ...

    @classmethod
    @property
    def DARK_SLATE_BLUE(cls) -> PresetColor:
        ...

    @classmethod
    @property
    def DARK_SLATE_GRAY(cls) -> PresetColor:
        ...

    @classmethod
    @property
    def DARK_TURQUOISE(cls) -> PresetColor:
        ...

    @classmethod
    @property
    def DARK_VIOLET(cls) -> PresetColor:
        ...

    @classmethod
    @property
    def DEEP_PINK(cls) -> PresetColor:
        ...

    @classmethod
    @property
    def DEEP_SKY_BLUE(cls) -> PresetColor:
        ...

    @classmethod
    @property
    def DIM_GRAY(cls) -> PresetColor:
        ...

    @classmethod
    @property
    def DODGER_BLUE(cls) -> PresetColor:
        ...

    @classmethod
    @property
    def FIREBRICK(cls) -> PresetColor:
        ...

    @classmethod
    @property
    def FLORAL_WHITE(cls) -> PresetColor:
        ...

    @classmethod
    @property
    def FOREST_GREEN(cls) -> PresetColor:
        ...

    @classmethod
    @property
    def FUCHSIA(cls) -> PresetColor:
        ...

    @classmethod
    @property
    def GAINSBORO(cls) -> PresetColor:
        ...

    @classmethod
    @property
    def GHOST_WHITE(cls) -> PresetColor:
        ...

    @classmethod
    @property
    def GOLD(cls) -> PresetColor:
        ...

    @classmethod
    @property
    def GOLDENROD(cls) -> PresetColor:
        ...

    @classmethod
    @property
    def GRAY(cls) -> PresetColor:
        ...

    @classmethod
    @property
    def GREEN(cls) -> PresetColor:
        ...

    @classmethod
    @property
    def GREEN_YELLOW(cls) -> PresetColor:
        ...

    @classmethod
    @property
    def HONEYDEW(cls) -> PresetColor:
        ...

    @classmethod
    @property
    def HOT_PINK(cls) -> PresetColor:
        ...

    @classmethod
    @property
    def INDIAN_RED(cls) -> PresetColor:
        ...

    @classmethod
    @property
    def INDIGO(cls) -> PresetColor:
        ...

    @classmethod
    @property
    def IVORY(cls) -> PresetColor:
        ...

    @classmethod
    @property
    def KHAKI(cls) -> PresetColor:
        ...

    @classmethod
    @property
    def LAVENDER(cls) -> PresetColor:
        ...

    @classmethod
    @property
    def LAVENDER_BLUSH(cls) -> PresetColor:
        ...

    @classmethod
    @property
    def LAWN_GREEN(cls) -> PresetColor:
        ...

    @classmethod
    @property
    def LEMON_CHIFFON(cls) -> PresetColor:
        ...

    @classmethod
    @property
    def LIGHT_BLUE(cls) -> PresetColor:
        ...

    @classmethod
    @property
    def LIGHT_CORAL(cls) -> PresetColor:
        ...

    @classmethod
    @property
    def LIGHT_CYAN(cls) -> PresetColor:
        ...

    @classmethod
    @property
    def LIGHT_GOLDENROD_YELLOW(cls) -> PresetColor:
        ...

    @classmethod
    @property
    def LIGHT_GRAY(cls) -> PresetColor:
        ...

    @classmethod
    @property
    def LIGHT_GREEN(cls) -> PresetColor:
        ...

    @classmethod
    @property
    def LIGHT_PINK(cls) -> PresetColor:
        ...

    @classmethod
    @property
    def LIGHT_SALMON(cls) -> PresetColor:
        ...

    @classmethod
    @property
    def LIGHT_SEA_GREEN(cls) -> PresetColor:
        ...

    @classmethod
    @property
    def LIGHT_SKY_BLUE(cls) -> PresetColor:
        ...

    @classmethod
    @property
    def LIGHT_SLATE_GRAY(cls) -> PresetColor:
        ...

    @classmethod
    @property
    def LIGHT_STEEL_BLUE(cls) -> PresetColor:
        ...

    @classmethod
    @property
    def LIGHT_YELLOW(cls) -> PresetColor:
        ...

    @classmethod
    @property
    def LIME(cls) -> PresetColor:
        ...

    @classmethod
    @property
    def LIME_GREEN(cls) -> PresetColor:
        ...

    @classmethod
    @property
    def LINEN(cls) -> PresetColor:
        ...

    @classmethod
    @property
    def MAGENTA(cls) -> PresetColor:
        ...

    @classmethod
    @property
    def MAROON(cls) -> PresetColor:
        ...

    @classmethod
    @property
    def MEDIUM_AQUAMARINE(cls) -> PresetColor:
        ...

    @classmethod
    @property
    def MEDIUM_BLUE(cls) -> PresetColor:
        ...

    @classmethod
    @property
    def MEDIUM_ORCHID(cls) -> PresetColor:
        ...

    @classmethod
    @property
    def MEDIUM_PURPLE(cls) -> PresetColor:
        ...

    @classmethod
    @property
    def MEDIUM_SEA_GREEN(cls) -> PresetColor:
        ...

    @classmethod
    @property
    def MEDIUM_SLATE_BLUE(cls) -> PresetColor:
        ...

    @classmethod
    @property
    def MEDIUM_SPRING_GREEN(cls) -> PresetColor:
        ...

    @classmethod
    @property
    def MEDIUM_TURQUOISE(cls) -> PresetColor:
        ...

    @classmethod
    @property
    def MEDIUM_VIOLET_RED(cls) -> PresetColor:
        ...

    @classmethod
    @property
    def MIDNIGHT_BLUE(cls) -> PresetColor:
        ...

    @classmethod
    @property
    def MINT_CREAM(cls) -> PresetColor:
        ...

    @classmethod
    @property
    def MISTY_ROSE(cls) -> PresetColor:
        ...

    @classmethod
    @property
    def MOCCASIN(cls) -> PresetColor:
        ...

    @classmethod
    @property
    def NAVAJO_WHITE(cls) -> PresetColor:
        ...

    @classmethod
    @property
    def NAVY(cls) -> PresetColor:
        ...

    @classmethod
    @property
    def OLD_LACE(cls) -> PresetColor:
        ...

    @classmethod
    @property
    def OLIVE(cls) -> PresetColor:
        ...

    @classmethod
    @property
    def OLIVE_DRAB(cls) -> PresetColor:
        ...

    @classmethod
    @property
    def ORANGE(cls) -> PresetColor:
        ...

    @classmethod
    @property
    def ORANGE_RED(cls) -> PresetColor:
        ...

    @classmethod
    @property
    def ORCHID(cls) -> PresetColor:
        ...

    @classmethod
    @property
    def PALE_GOLDENROD(cls) -> PresetColor:
        ...

    @classmethod
    @property
    def PALE_GREEN(cls) -> PresetColor:
        ...

    @classmethod
    @property
    def PALE_TURQUOISE(cls) -> PresetColor:
        ...

    @classmethod
    @property
    def PALE_VIOLET_RED(cls) -> PresetColor:
        ...

    @classmethod
    @property
    def PAPAYA_WHIP(cls) -> PresetColor:
        ...

    @classmethod
    @property
    def PEACH_PUFF(cls) -> PresetColor:
        ...

    @classmethod
    @property
    def PERU(cls) -> PresetColor:
        ...

    @classmethod
    @property
    def PINK(cls) -> PresetColor:
        ...

    @classmethod
    @property
    def PLUM(cls) -> PresetColor:
        ...

    @classmethod
    @property
    def POWDER_BLUE(cls) -> PresetColor:
        ...

    @classmethod
    @property
    def PURPLE(cls) -> PresetColor:
        ...

    @classmethod
    @property
    def RED(cls) -> PresetColor:
        ...

    @classmethod
    @property
    def ROSY_BROWN(cls) -> PresetColor:
        ...

    @classmethod
    @property
    def ROYAL_BLUE(cls) -> PresetColor:
        ...

    @classmethod
    @property
    def SADDLE_BROWN(cls) -> PresetColor:
        ...

    @classmethod
    @property
    def SALMON(cls) -> PresetColor:
        ...

    @classmethod
    @property
    def SANDY_BROWN(cls) -> PresetColor:
        ...

    @classmethod
    @property
    def SEA_GREEN(cls) -> PresetColor:
        ...

    @classmethod
    @property
    def SEA_SHELL(cls) -> PresetColor:
        ...

    @classmethod
    @property
    def SIENNA(cls) -> PresetColor:
        ...

    @classmethod
    @property
    def SILVER(cls) -> PresetColor:
        ...

    @classmethod
    @property
    def SKY_BLUE(cls) -> PresetColor:
        ...

    @classmethod
    @property
    def SLATE_BLUE(cls) -> PresetColor:
        ...

    @classmethod
    @property
    def SLATE_GRAY(cls) -> PresetColor:
        ...

    @classmethod
    @property
    def SNOW(cls) -> PresetColor:
        ...

    @classmethod
    @property
    def SPRING_GREEN(cls) -> PresetColor:
        ...

    @classmethod
    @property
    def STEEL_BLUE(cls) -> PresetColor:
        ...

    @classmethod
    @property
    def TAN(cls) -> PresetColor:
        ...

    @classmethod
    @property
    def TEAL(cls) -> PresetColor:
        ...

    @classmethod
    @property
    def THISTLE(cls) -> PresetColor:
        ...

    @classmethod
    @property
    def TOMATO(cls) -> PresetColor:
        ...

    @classmethod
    @property
    def TURQUOISE(cls) -> PresetColor:
        ...

    @classmethod
    @property
    def VIOLET(cls) -> PresetColor:
        ...

    @classmethod
    @property
    def WHEAT(cls) -> PresetColor:
        ...

    @classmethod
    @property
    def WHITE(cls) -> PresetColor:
        ...

    @classmethod
    @property
    def WHITE_SMOKE(cls) -> PresetColor:
        ...

    @classmethod
    @property
    def YELLOW(cls) -> PresetColor:
        ...

    @classmethod
    @property
    def YELLOW_GREEN(cls) -> PresetColor:
        ...

    ...

class PresetShadowType:
    '''Represents a preset for a shadow effect.'''
    @classmethod
    @property
    def TOP_LEFT_DROP_SHADOW(cls) -> PresetShadowType:
        '''Represents Top Left Drop Shadow.'''
        ...

    @classmethod
    @property
    def TOP_LEFT_LARGE_DROP_SHADOW(cls) -> PresetShadowType:
        '''Represents Top Left Large Drop Shadow.'''
        ...

    @classmethod
    @property
    def BACK_LEFT_LONG_PERSPECTIVE_SHADOW(cls) -> PresetShadowType:
        '''Represents Back Left Long Perspective Shadow'''
        ...

    @classmethod
    @property
    def BACK_RIGHT_LONG_PERSPECTIVE_SHADOW(cls) -> PresetShadowType:
        '''Represents Back Right Long Perspective Shadow'''
        ...

    @classmethod
    @property
    def TOP_LEFT_DOUBLE_DROP_SHADOW(cls) -> PresetShadowType:
        '''Represents Top Left Double Drop Shadow.'''
        ...

    @classmethod
    @property
    def BOTTOM_RIGHT_SMALL_DROP_SHADOW(cls) -> PresetShadowType:
        '''Represents Bottom Right Small Drop Shadow.'''
        ...

    @classmethod
    @property
    def FRONT_LEFT_LONG_PERSPECTIVE_SHADOW(cls) -> PresetShadowType:
        '''Represents Front Left Long Perspective Shadow.'''
        ...

    @classmethod
    @property
    def FRONT_RIGHT_LONG_PERSPECTIVE_SHADOW(cls) -> PresetShadowType:
        '''Represents Front Right Long Perspective Shadow.'''
        ...

    @classmethod
    @property
    def OUTER_BOX_SHADOW_3D(cls) -> PresetShadowType:
        '''Represents Outer Box Shadow 3D.'''
        ...

    @classmethod
    @property
    def INNER_BOX_SHADOW_3D(cls) -> PresetShadowType:
        '''Represents Inner Box Shadow 3D.'''
        ...

    @classmethod
    @property
    def BACK_CENTER_PERSPECTIVE_SHADOW(cls) -> PresetShadowType:
        '''Represents Back Center Perspective Shadow.'''
        ...

    @classmethod
    @property
    def TOP_RIGHT_DROP_SHADOW(cls) -> PresetShadowType:
        '''Represents Top Right Drop Shadow.'''
        ...

    @classmethod
    @property
    def FRONT_BOTTOM_SHADOW(cls) -> PresetShadowType:
        '''Represents Front Bottom Shadow.'''
        ...

    @classmethod
    @property
    def BACK_LEFT_PERSPECTIVE_SHADOW(cls) -> PresetShadowType:
        '''Represents Back Left Perspective Shadow.'''
        ...

    @classmethod
    @property
    def BACK_RIGHT_PERSPECTIVE_SHADOW(cls) -> PresetShadowType:
        '''Represents Back Right Perspective Shadow.'''
        ...

    @classmethod
    @property
    def BOTTOM_LEFT_DROP_SHADOW(cls) -> PresetShadowType:
        '''Represents Bottom Left Drop Shadow.'''
        ...

    @classmethod
    @property
    def BOTTOM_RIGHT_DROP_SHADOW(cls) -> PresetShadowType:
        '''Represents Bottom Right Drop Shadow.'''
        ...

    @classmethod
    @property
    def FRONT_LEFT_PERSPECTIVE_SHADOW(cls) -> PresetShadowType:
        '''Represents Front Left Perspective Shadow.'''
        ...

    @classmethod
    @property
    def FRONT_RIGHT_PERSPECTIVE_SHADOW(cls) -> PresetShadowType:
        '''Represents Front Right Perspective Shadow.'''
        ...

    @classmethod
    @property
    def TOP_LEFT_SMALL_DROP_SHADOW(cls) -> PresetShadowType:
        '''Represents Top Left Small Drop Shadow.'''
        ...

    ...

class RectangleAlignment:
    '''Defines 2-dimension allignment.'''
    @classmethod
    @property
    def NOT_DEFINED(cls) -> RectangleAlignment:
        ...

    @classmethod
    @property
    def TOP_LEFT(cls) -> RectangleAlignment:
        ...

    @classmethod
    @property
    def TOP(cls) -> RectangleAlignment:
        ...

    @classmethod
    @property
    def TOP_RIGHT(cls) -> RectangleAlignment:
        ...

    @classmethod
    @property
    def LEFT(cls) -> RectangleAlignment:
        ...

    @classmethod
    @property
    def CENTER(cls) -> RectangleAlignment:
        ...

    @classmethod
    @property
    def RIGHT(cls) -> RectangleAlignment:
        ...

    @classmethod
    @property
    def BOTTOM_LEFT(cls) -> RectangleAlignment:
        ...

    @classmethod
    @property
    def BOTTOM(cls) -> RectangleAlignment:
        ...

    @classmethod
    @property
    def BOTTOM_RIGHT(cls) -> RectangleAlignment:
        ...

    ...

class ResourceLoadingAction:
    '''Specifies the mode of external resource loading.'''
    @classmethod
    @property
    def DEFAULT(cls) -> ResourceLoadingAction:
        '''Aspose.Slides will load external resource as usual.'''
        ...

    @classmethod
    @property
    def SKIP(cls) -> ResourceLoadingAction:
        '''Aspose.Slides will skip loading of external resource. Only link without data will be stored for an image.'''
        ...

    @classmethod
    @property
    def USER_PROVIDED(cls) -> ResourceLoadingAction:
        '''Aspose.Slides will use byte array provided by user in :py:func:`Aspose.Slides.IResourceLoadingArgs.SetData(Syste.` as image data.'''
        ...

    ...

class SchemeColor:
    '''Represents colors in a color scheme.'''
    @classmethod
    @property
    def NOT_DEFINED(cls) -> SchemeColor:
        '''Color scheme is not defined.'''
        ...

    @classmethod
    @property
    def BACKGROUND1(cls) -> SchemeColor:
        ...

    @classmethod
    @property
    def TEXT1(cls) -> SchemeColor:
        ...

    @classmethod
    @property
    def BACKGROUND2(cls) -> SchemeColor:
        ...

    @classmethod
    @property
    def TEXT2(cls) -> SchemeColor:
        ...

    @classmethod
    @property
    def ACCENT1(cls) -> SchemeColor:
        ...

    @classmethod
    @property
    def ACCENT2(cls) -> SchemeColor:
        ...

    @classmethod
    @property
    def ACCENT3(cls) -> SchemeColor:
        ...

    @classmethod
    @property
    def ACCENT4(cls) -> SchemeColor:
        ...

    @classmethod
    @property
    def ACCENT5(cls) -> SchemeColor:
        ...

    @classmethod
    @property
    def ACCENT6(cls) -> SchemeColor:
        ...

    @classmethod
    @property
    def HYPERLINK(cls) -> SchemeColor:
        ...

    @classmethod
    @property
    def FOLLOWED_HYPERLINK(cls) -> SchemeColor:
        ...

    @classmethod
    @property
    def STYLE_COLOR(cls) -> SchemeColor:
        ...

    @classmethod
    @property
    def DARK1(cls) -> SchemeColor:
        ...

    @classmethod
    @property
    def LIGHT1(cls) -> SchemeColor:
        ...

    @classmethod
    @property
    def DARK2(cls) -> SchemeColor:
        ...

    @classmethod
    @property
    def LIGHT2(cls) -> SchemeColor:
        ...

    ...

class ShapeAdjustmentType:
    '''Specifies different types of shape adjustment values.'''
    @classmethod
    @property
    def CUSTOM(cls) -> ShapeAdjustmentType:
        '''Custom type (unknown adjustment)'''
        ...

    @classmethod
    @property
    def CORNER_SIZE(cls) -> ShapeAdjustmentType:
        '''Controls the size of the corners.'''
        ...

    @classmethod
    @property
    def LEFT_UP_CORNER(cls) -> ShapeAdjustmentType:
        '''Controls the up left corner.'''
        ...

    @classmethod
    @property
    def RIGHT_UP_CORNER(cls) -> ShapeAdjustmentType:
        '''Controls the up right corner.'''
        ...

    @classmethod
    @property
    def UP_CORNERS(cls) -> ShapeAdjustmentType:
        '''Controls the upper corners.'''
        ...

    @classmethod
    @property
    def DOWN_CORNERS(cls) -> ShapeAdjustmentType:
        '''Controls the down corners.'''
        ...

    @classmethod
    @property
    def THICKNESS(cls) -> ShapeAdjustmentType:
        '''Controls the thickness of the figure.'''
        ...

    @classmethod
    @property
    def ARROW_TAIL_THICKNESS(cls) -> ShapeAdjustmentType:
        '''Controls the thickness of the arrow tail.'''
        ...

    @classmethod
    @property
    def ARROWHEAD_LENGTH(cls) -> ShapeAdjustmentType:
        '''Controls the length of the arrowhead.'''
        ...

    @classmethod
    @property
    def ARROWHEAD_WIDTH(cls) -> ShapeAdjustmentType:
        '''Controls the width of the arrowhead.'''
        ...

    @classmethod
    @property
    def RADIUS(cls) -> ShapeAdjustmentType:
        '''Controls the size of the radius of the shape or its part.'''
        ...

    @classmethod
    @property
    def DEPTH(cls) -> ShapeAdjustmentType:
        '''Controls the depth of the gear teeth or the bevel effect.'''
        ...

    @classmethod
    @property
    def SHAPE_PART_OFFSET(cls) -> ShapeAdjustmentType:
        '''Controls the offset of one part of the figure relative to another.'''
        ...

    @classmethod
    @property
    def ANGLE(cls) -> ShapeAdjustmentType:
        '''Controls the angle for figure or its part.'''
        ...

    @classmethod
    @property
    def START_ANGLE(cls) -> ShapeAdjustmentType:
        '''Start angle for pie and arc shapes.'''
        ...

    @classmethod
    @property
    def END_ANGLE(cls) -> ShapeAdjustmentType:
        '''End angle for pie and arc shapes.'''
        ...

    @classmethod
    @property
    def START_POINT_X(cls) -> ShapeAdjustmentType:
        '''Controls the callout start point X position.'''
        ...

    @classmethod
    @property
    def START_POINT_Y(cls) -> ShapeAdjustmentType:
        '''Controls the callout start point Y position.'''
        ...

    @classmethod
    @property
    def CONNECTOR_POINT_1X(cls) -> ShapeAdjustmentType:
        '''Controls the horizontal position of the callout angle adjustment point.'''
        ...

    @classmethod
    @property
    def CONNECTOR_POINT_1Y(cls) -> ShapeAdjustmentType:
        '''Controls the vertical position of the callout angle adjustment point.'''
        ...

    @classmethod
    @property
    def CONNECTOR_POINT_2X(cls) -> ShapeAdjustmentType:
        '''Controls the horizontal position of the callout angle adjustment point.'''
        ...

    @classmethod
    @property
    def CONNECTOR_POINT_2Y(cls) -> ShapeAdjustmentType:
        '''Controls the vertical position of the callout angle adjustment point.'''
        ...

    @classmethod
    @property
    def CONNECTOR_BEND_POSITION_X(cls) -> ShapeAdjustmentType:
        '''Controls the horizontal position of the bend in the connector.'''
        ...

    @classmethod
    @property
    def CONNECTOR_BEND_POSITION_Y(cls) -> ShapeAdjustmentType:
        '''Controls the vertical position of the bend in the connector.'''
        ...

    @classmethod
    @property
    def ATTACH_Y(cls) -> ShapeAdjustmentType:
        '''Controls the vertical attachment point of the figure.'''
        ...

    @classmethod
    @property
    def ATTACH_X(cls) -> ShapeAdjustmentType:
        '''Controls the horizontal attachment point of the figure.'''
        ...

    @classmethod
    @property
    def CALLOUT_HEIGHT(cls) -> ShapeAdjustmentType:
        '''Controls the vertical size of the callout.'''
        ...

    @classmethod
    @property
    def CALLOUT_WIDTH(cls) -> ShapeAdjustmentType:
        '''Controls the horizontal size of the callout.'''
        ...

    @classmethod
    @property
    def CALLOUT_SIZE(cls) -> ShapeAdjustmentType:
        '''Controls the size of the callout.'''
        ...

    @classmethod
    @property
    def CURVATURE(cls) -> ShapeAdjustmentType:
        '''Curvature of a bent, braces, curved arrow or shape.'''
        ...

    @classmethod
    @property
    def HORIZONTAL_THICKNESS(cls) -> ShapeAdjustmentType:
        '''Controls the horizontal thickness of the corner shape.'''
        ...

    @classmethod
    @property
    def VERTICAL_THICKNESS(cls) -> ShapeAdjustmentType:
        '''Controls the vertical thickness of the corner shape.'''
        ...

    @classmethod
    @property
    def VERTICAL_SIZE(cls) -> ShapeAdjustmentType:
        '''Controls the vertical size of the shape.'''
        ...

    @classmethod
    @property
    def HORIZONTAL_SIZE(cls) -> ShapeAdjustmentType:
        '''Controls the horizontal size of the shape.'''
        ...

    @classmethod
    @property
    def TOP(cls) -> ShapeAdjustmentType:
        '''Controls the top side of a shape.'''
        ...

    ...

class ShapeElementFillSource:
    '''Represents how shape element should be filled.'''
    @classmethod
    @property
    def NO_FILL(cls) -> ShapeElementFillSource:
        '''Don't fill primitive.'''
        ...

    @classmethod
    @property
    def SHAPE(cls) -> ShapeElementFillSource:
        '''Use shape's fill.'''
        ...

    @classmethod
    @property
    def LIGHTEN(cls) -> ShapeElementFillSource:
        '''Use lighten shape's fill.'''
        ...

    @classmethod
    @property
    def LIGHTEN_LESS(cls) -> ShapeElementFillSource:
        '''Use less lighten shape's fill.'''
        ...

    @classmethod
    @property
    def DARKEN(cls) -> ShapeElementFillSource:
        '''Use darken shape's fill.'''
        ...

    @classmethod
    @property
    def DARKEN_LESS(cls) -> ShapeElementFillSource:
        '''Use less darken shape's fill.'''
        ...

    ...

class ShapeElementStrokeSource:
    '''Represents how shape element should be drawn.'''
    @classmethod
    @property
    def NO_STROKE(cls) -> ShapeElementStrokeSource:
        '''Don't stroke primitive.'''
        ...

    @classmethod
    @property
    def SHAPE(cls) -> ShapeElementStrokeSource:
        '''Use shape's LineFormat.'''
        ...

    @classmethod
    @property
    def OWN_STROKE(cls) -> ShapeElementStrokeSource:
        '''Use own stroke.'''
        ...

    ...

class ShapeThumbnailBounds:
    '''Enumeration of types of shape thumbnail bounds.'''
    @classmethod
    @property
    def SLIDE(cls) -> ShapeThumbnailBounds:
        '''Shape thumbnail will have the size equal to slide size.
                    Shape position will be saved.'''
        ...

    @classmethod
    @property
    def SHAPE(cls) -> ShapeThumbnailBounds:
        '''Shape thumbnail will have size equal to the shape bounds rectangle
                    with taking into account shape outline settings.'''
        ...

    @classmethod
    @property
    def APPEARANCE(cls) -> ShapeThumbnailBounds:
        '''Shape thumbnail will have size equal to the shape appearance (in bounds of a slide). 
                    It can be cases when shape appearance doesn't fit into the shape bounds. E.g.
                    rotation, miter join of acute angle , 3D effects, etc.'''
        ...

    ...

class ShapeType:
    '''Represents preset geometry of geometry shapes.'''
    @classmethod
    @property
    def NOT_DEFINED(cls) -> ShapeType:
        '''Not defined.'''
        ...

    @classmethod
    @property
    def CUSTOM(cls) -> ShapeType:
        '''Custom shape.
                    This is return-only value.'''
        ...

    @classmethod
    @property
    def LINE(cls) -> ShapeType:
        '''Line Shape.'''
        ...

    @classmethod
    @property
    def LINE_INVERSE(cls) -> ShapeType:
        '''Line Inverse Shape.'''
        ...

    @classmethod
    @property
    def TRIANGLE(cls) -> ShapeType:
        '''Triangle Shape.'''
        ...

    @classmethod
    @property
    def RIGHT_TRIANGLE(cls) -> ShapeType:
        '''Right Triangle Shape.'''
        ...

    @classmethod
    @property
    def RECTANGLE(cls) -> ShapeType:
        '''Rectangle Shape.'''
        ...

    @classmethod
    @property
    def DIAMOND(cls) -> ShapeType:
        '''Diamond Shape.'''
        ...

    @classmethod
    @property
    def PARALLELOGRAM(cls) -> ShapeType:
        '''Parallelogram Shape.'''
        ...

    @classmethod
    @property
    def TRAPEZOID(cls) -> ShapeType:
        '''Trapezoid Shape.'''
        ...

    @classmethod
    @property
    def NON_ISOSCELES_TRAPEZOID(cls) -> ShapeType:
        '''Non-Isosceles Trapezoid Shape.'''
        ...

    @classmethod
    @property
    def PENTAGON(cls) -> ShapeType:
        '''Pentagon Shape.'''
        ...

    @classmethod
    @property
    def HEXAGON(cls) -> ShapeType:
        '''Hexagon Shape.'''
        ...

    @classmethod
    @property
    def HEPTAGON(cls) -> ShapeType:
        '''Heptagon Shape.'''
        ...

    @classmethod
    @property
    def OCTAGON(cls) -> ShapeType:
        '''Octagon Shape.'''
        ...

    @classmethod
    @property
    def DECAGON(cls) -> ShapeType:
        '''Decagon Shape.'''
        ...

    @classmethod
    @property
    def DODECAGON(cls) -> ShapeType:
        '''Dodecagon Shape.'''
        ...

    @classmethod
    @property
    def FOUR_POINTED_STAR(cls) -> ShapeType:
        '''Four Pointed Star Shape.'''
        ...

    @classmethod
    @property
    def FIVE_POINTED_STAR(cls) -> ShapeType:
        '''Five Pointed Star Shape.'''
        ...

    @classmethod
    @property
    def SIX_POINTED_STAR(cls) -> ShapeType:
        '''Six Pointed Star Shape.'''
        ...

    @classmethod
    @property
    def SEVEN_POINTED_STAR(cls) -> ShapeType:
        '''Seven Pointed Star Shape.'''
        ...

    @classmethod
    @property
    def EIGHT_POINTED_STAR(cls) -> ShapeType:
        '''Eight Pointed Star Shape.'''
        ...

    @classmethod
    @property
    def TEN_POINTED_STAR(cls) -> ShapeType:
        '''Ten Pointed Star Shape.'''
        ...

    @classmethod
    @property
    def TWELVE_POINTED_STAR(cls) -> ShapeType:
        '''Twelve Pointed Star Shape.'''
        ...

    @classmethod
    @property
    def SIXTEEN_POINTED_STAR(cls) -> ShapeType:
        '''Sixteen Pointed Star Shape.'''
        ...

    @classmethod
    @property
    def TWENTY_FOUR_POINTED_STAR(cls) -> ShapeType:
        '''Twenty Four Pointed Star Shape.'''
        ...

    @classmethod
    @property
    def THIRTY_TWO_POINTED_STAR(cls) -> ShapeType:
        '''Thirty Two Pointed Star Shape.'''
        ...

    @classmethod
    @property
    def ROUND_CORNER_RECTANGLE(cls) -> ShapeType:
        '''Round Corner Rectangle Shape.'''
        ...

    @classmethod
    @property
    def ONE_ROUND_CORNER_RECTANGLE(cls) -> ShapeType:
        '''One Round Corner Rectangle Shape.'''
        ...

    @classmethod
    @property
    def TWO_SAMESIDE_ROUND_CORNER_RECTANGLE(cls) -> ShapeType:
        '''Two Same-side Round Corner Rectangle Shape.'''
        ...

    @classmethod
    @property
    def TWO_DIAGONAL_ROUND_CORNER_RECTANGLE(cls) -> ShapeType:
        '''Two Diagonal Round Corner Rectangle Shape.'''
        ...

    @classmethod
    @property
    def ONE_SNIP_ONE_ROUND_CORNER_RECTANGLE(cls) -> ShapeType:
        '''One Snip One Round Corner Rectangle Shape.'''
        ...

    @classmethod
    @property
    def ONE_SNIP_CORNER_RECTANGLE(cls) -> ShapeType:
        '''One Snip Corner Rectangle Shape.'''
        ...

    @classmethod
    @property
    def TWO_SAMESIDE_SNIP_CORNER_RECTANGLE(cls) -> ShapeType:
        '''Two Same-side Snip Corner Rectangle Shape.'''
        ...

    @classmethod
    @property
    def TWO_DIAGONAL_SNIP_CORNER_RECTANGLE(cls) -> ShapeType:
        '''Two Diagonal Snip Corner Rectangle Shape.'''
        ...

    @classmethod
    @property
    def PLAQUE(cls) -> ShapeType:
        '''Plaque Shape.'''
        ...

    @classmethod
    @property
    def ELLIPSE(cls) -> ShapeType:
        '''Ellipse Shape.'''
        ...

    @classmethod
    @property
    def TEARDROP(cls) -> ShapeType:
        '''Teardrop Shape.'''
        ...

    @classmethod
    @property
    def HOME_PLATE(cls) -> ShapeType:
        '''Home Plate Shape.'''
        ...

    @classmethod
    @property
    def CHEVRON(cls) -> ShapeType:
        '''Chevron Shape.'''
        ...

    @classmethod
    @property
    def PIE_WEDGE(cls) -> ShapeType:
        '''Pie Wedge Shape.'''
        ...

    @classmethod
    @property
    def PIE(cls) -> ShapeType:
        '''Pie Shape.'''
        ...

    @classmethod
    @property
    def BLOCK_ARC(cls) -> ShapeType:
        '''Block Arc Shape.'''
        ...

    @classmethod
    @property
    def DONUT(cls) -> ShapeType:
        '''Donut Shape.'''
        ...

    @classmethod
    @property
    def NO_SMOKING(cls) -> ShapeType:
        '''No Smoking Shape.'''
        ...

    @classmethod
    @property
    def RIGHT_ARROW(cls) -> ShapeType:
        '''Right Arrow Shape.'''
        ...

    @classmethod
    @property
    def LEFT_ARROW(cls) -> ShapeType:
        '''Left Arrow Shape.'''
        ...

    @classmethod
    @property
    def UP_ARROW(cls) -> ShapeType:
        '''Up Arrow Shape.'''
        ...

    @classmethod
    @property
    def DOWN_ARROW(cls) -> ShapeType:
        '''Down Arrow Shape.'''
        ...

    @classmethod
    @property
    def STRIPED_RIGHT_ARROW(cls) -> ShapeType:
        '''Striped Right Arrow Shape.'''
        ...

    @classmethod
    @property
    def NOTCHED_RIGHT_ARROW(cls) -> ShapeType:
        '''Notched Right Arrow Shape.'''
        ...

    @classmethod
    @property
    def BENT_UP_ARROW(cls) -> ShapeType:
        '''Bent Up Arrow Shape.'''
        ...

    @classmethod
    @property
    def LEFT_RIGHT_ARROW(cls) -> ShapeType:
        '''Left Right Arrow Shape.'''
        ...

    @classmethod
    @property
    def UP_DOWN_ARROW(cls) -> ShapeType:
        '''Up Down Arrow Shape.'''
        ...

    @classmethod
    @property
    def LEFT_UP_ARROW(cls) -> ShapeType:
        '''Left Up Arrow Shape.'''
        ...

    @classmethod
    @property
    def LEFT_RIGHT_UP_ARROW(cls) -> ShapeType:
        '''Left Right Up Arrow Shape.'''
        ...

    @classmethod
    @property
    def QUAD_ARROW(cls) -> ShapeType:
        '''Quad-Arrow Shape.'''
        ...

    @classmethod
    @property
    def CALLOUT_LEFT_ARROW(cls) -> ShapeType:
        '''Callout Left Arrow Shape.'''
        ...

    @classmethod
    @property
    def CALLOUT_RIGHT_ARROW(cls) -> ShapeType:
        '''Callout Right Arrow Shape.'''
        ...

    @classmethod
    @property
    def CALLOUT_UP_ARROW(cls) -> ShapeType:
        '''Callout Up Arrow Shape.'''
        ...

    @classmethod
    @property
    def CALLOUT_DOWN_ARROW(cls) -> ShapeType:
        '''Callout Down Arrow Shape.'''
        ...

    @classmethod
    @property
    def CALLOUT_LEFT_RIGHT_ARROW(cls) -> ShapeType:
        '''Callout Left Right Arrow Shape.'''
        ...

    @classmethod
    @property
    def CALLOUT_UP_DOWN_ARROW(cls) -> ShapeType:
        '''Callout Up Down Arrow Shape.'''
        ...

    @classmethod
    @property
    def CALLOUT_QUAD_ARROW(cls) -> ShapeType:
        '''Callout Quad-Arrow Shape.'''
        ...

    @classmethod
    @property
    def BENT_ARROW(cls) -> ShapeType:
        '''Bent Arrow Shape.'''
        ...

    @classmethod
    @property
    def U_TURN_ARROW(cls) -> ShapeType:
        '''U-Turn Arrow Shape.'''
        ...

    @classmethod
    @property
    def CIRCULAR_ARROW(cls) -> ShapeType:
        '''Circular Arrow Shape.'''
        ...

    @classmethod
    @property
    def LEFT_CIRCULAR_ARROW(cls) -> ShapeType:
        '''Left Circular Arrow Shape.'''
        ...

    @classmethod
    @property
    def LEFT_RIGHT_CIRCULAR_ARROW(cls) -> ShapeType:
        '''Left Right Circular Arrow Shape.'''
        ...

    @classmethod
    @property
    def CURVED_RIGHT_ARROW(cls) -> ShapeType:
        '''Curved Right Arrow Shape.'''
        ...

    @classmethod
    @property
    def CURVED_LEFT_ARROW(cls) -> ShapeType:
        '''Curved Left Arrow Shape.'''
        ...

    @classmethod
    @property
    def CURVED_UP_ARROW(cls) -> ShapeType:
        '''Curved Up Arrow Shape.'''
        ...

    @classmethod
    @property
    def CURVED_DOWN_ARROW(cls) -> ShapeType:
        '''Curved Down Arrow Shape.'''
        ...

    @classmethod
    @property
    def SWOOSH_ARROW(cls) -> ShapeType:
        '''Swoosh Arrow Shape.'''
        ...

    @classmethod
    @property
    def CUBE(cls) -> ShapeType:
        '''Cube Shape.'''
        ...

    @classmethod
    @property
    def CAN(cls) -> ShapeType:
        '''Can Shape.'''
        ...

    @classmethod
    @property
    def LIGHTNING_BOLT(cls) -> ShapeType:
        '''Lightning Bolt Shape.'''
        ...

    @classmethod
    @property
    def HEART(cls) -> ShapeType:
        '''Heart Shape.'''
        ...

    @classmethod
    @property
    def SUN(cls) -> ShapeType:
        '''Sun Shape.'''
        ...

    @classmethod
    @property
    def MOON(cls) -> ShapeType:
        '''Moon Shape.'''
        ...

    @classmethod
    @property
    def SMILEY_FACE(cls) -> ShapeType:
        '''Smiley Face Shape.'''
        ...

    @classmethod
    @property
    def IRREGULAR_SEAL1(cls) -> ShapeType:
        '''Irregular Seal 1 Shape.'''
        ...

    @classmethod
    @property
    def IRREGULAR_SEAL2(cls) -> ShapeType:
        '''Irregular Seal 2 Shape.'''
        ...

    @classmethod
    @property
    def FOLDED_CORNER(cls) -> ShapeType:
        '''Folded Corner Shape.'''
        ...

    @classmethod
    @property
    def BEVEL(cls) -> ShapeType:
        '''Bevel Shape.'''
        ...

    @classmethod
    @property
    def FRAME(cls) -> ShapeType:
        '''Frame Shape.'''
        ...

    @classmethod
    @property
    def HALF_FRAME(cls) -> ShapeType:
        '''Half Frame Shape.'''
        ...

    @classmethod
    @property
    def CORNER(cls) -> ShapeType:
        '''Corner Shape.'''
        ...

    @classmethod
    @property
    def DIAGONAL_STRIPE(cls) -> ShapeType:
        '''Diagonal Stripe Shape.'''
        ...

    @classmethod
    @property
    def CHORD(cls) -> ShapeType:
        '''Chord Shape.'''
        ...

    @classmethod
    @property
    def CURVED_ARC(cls) -> ShapeType:
        '''Curved Arc Shape.'''
        ...

    @classmethod
    @property
    def LEFT_BRACKET(cls) -> ShapeType:
        '''Left Bracket Shape.'''
        ...

    @classmethod
    @property
    def RIGHT_BRACKET(cls) -> ShapeType:
        '''Right Bracket Shape.'''
        ...

    @classmethod
    @property
    def LEFT_BRACE(cls) -> ShapeType:
        '''Left Brace Shape.'''
        ...

    @classmethod
    @property
    def RIGHT_BRACE(cls) -> ShapeType:
        '''Right Brace Shape.'''
        ...

    @classmethod
    @property
    def BRACKET_PAIR(cls) -> ShapeType:
        '''Bracket Pair Shape.'''
        ...

    @classmethod
    @property
    def BRACE_PAIR(cls) -> ShapeType:
        '''Brace Pair Shape.'''
        ...

    @classmethod
    @property
    def STRAIGHT_CONNECTOR1(cls) -> ShapeType:
        '''Straight Connector 1 Shape.'''
        ...

    @classmethod
    @property
    def BENT_CONNECTOR2(cls) -> ShapeType:
        '''Bent Connector 2 Shape.'''
        ...

    @classmethod
    @property
    def BENT_CONNECTOR3(cls) -> ShapeType:
        '''Bent Connector 3 Shape.'''
        ...

    @classmethod
    @property
    def BENT_CONNECTOR4(cls) -> ShapeType:
        '''Bent Connector 4 Shape.'''
        ...

    @classmethod
    @property
    def BENT_CONNECTOR5(cls) -> ShapeType:
        '''Bent Connector 5 Shape.'''
        ...

    @classmethod
    @property
    def CURVED_CONNECTOR2(cls) -> ShapeType:
        '''Curved Connector 2 Shape.'''
        ...

    @classmethod
    @property
    def CURVED_CONNECTOR3(cls) -> ShapeType:
        '''Curved Connector 3 Shape.'''
        ...

    @classmethod
    @property
    def CURVED_CONNECTOR4(cls) -> ShapeType:
        '''Curved Connector 4 Shape.'''
        ...

    @classmethod
    @property
    def CURVED_CONNECTOR5(cls) -> ShapeType:
        '''Curved Connector 5 Shape.'''
        ...

    @classmethod
    @property
    def CALLOUT1(cls) -> ShapeType:
        '''Callout 1 Shape.'''
        ...

    @classmethod
    @property
    def CALLOUT2(cls) -> ShapeType:
        '''Callout 2 Shape.'''
        ...

    @classmethod
    @property
    def CALLOUT3(cls) -> ShapeType:
        '''Callout 3 Shape.'''
        ...

    @classmethod
    @property
    def CALLOUT_1_WITH_ACCENT(cls) -> ShapeType:
        '''Callout 1 with Accent Shape.'''
        ...

    @classmethod
    @property
    def CALLOUT_2_WITH_ACCENT(cls) -> ShapeType:
        '''Callout 2 with Accent Shape.'''
        ...

    @classmethod
    @property
    def CALLOUT_3_WITH_ACCENT(cls) -> ShapeType:
        '''Callout 3 with Accent Shape.'''
        ...

    @classmethod
    @property
    def CALLOUT_1_WITH_BORDER(cls) -> ShapeType:
        '''Callout 1 with Border Shape.'''
        ...

    @classmethod
    @property
    def CALLOUT_2_WITH_BORDER(cls) -> ShapeType:
        '''Callout 2 with Border Shape.'''
        ...

    @classmethod
    @property
    def CALLOUT_3_WITH_BORDER(cls) -> ShapeType:
        '''Callout 3 with Border Shape.'''
        ...

    @classmethod
    @property
    def CALLOUT_1_WITH_BORDER_AND_ACCENT(cls) -> ShapeType:
        '''Callout 1 with Border and Accent Shape.'''
        ...

    @classmethod
    @property
    def CALLOUT_2_WITH_BORDER_AND_ACCENT(cls) -> ShapeType:
        '''Callout 2 with Border and Accent Shape.'''
        ...

    @classmethod
    @property
    def CALLOUT_3_WITH_BORDER_AND_ACCENT(cls) -> ShapeType:
        '''Callout 3 with Border and Accent Shape.'''
        ...

    @classmethod
    @property
    def CALLOUT_WEDGE_RECTANGLE(cls) -> ShapeType:
        '''Callout Wedge Rectangle Shape.'''
        ...

    @classmethod
    @property
    def CALLOUT_WEDGE_ROUND_RECTANGLE(cls) -> ShapeType:
        '''Callout Wedge Round Rectangle Shape.'''
        ...

    @classmethod
    @property
    def CALLOUT_WEDGE_ELLIPSE(cls) -> ShapeType:
        '''Callout Wedge Ellipse Shape.'''
        ...

    @classmethod
    @property
    def CALLOUT_CLOUD(cls) -> ShapeType:
        '''Callout Cloud Shape.'''
        ...

    @classmethod
    @property
    def CLOUD(cls) -> ShapeType:
        '''Cloud Shape.'''
        ...

    @classmethod
    @property
    def RIBBON(cls) -> ShapeType:
        '''Ribbon Shape.'''
        ...

    @classmethod
    @property
    def RIBBON2(cls) -> ShapeType:
        '''Ribbon 2 Shape.'''
        ...

    @classmethod
    @property
    def ELLIPSE_RIBBON(cls) -> ShapeType:
        '''Ellipse Ribbon Shape.'''
        ...

    @classmethod
    @property
    def ELLIPSE_RIBBON2(cls) -> ShapeType:
        '''Ellipse Ribbon 2 Shape.'''
        ...

    @classmethod
    @property
    def LEFT_RIGHT_RIBBON(cls) -> ShapeType:
        '''Left Right Ribbon Shape.'''
        ...

    @classmethod
    @property
    def VERTICAL_SCROLL(cls) -> ShapeType:
        '''Vertical Scroll Shape.'''
        ...

    @classmethod
    @property
    def HORIZONTAL_SCROLL(cls) -> ShapeType:
        '''Horizontal Scroll Shape.'''
        ...

    @classmethod
    @property
    def WAVE(cls) -> ShapeType:
        '''Wave Shape.'''
        ...

    @classmethod
    @property
    def DOUBLE_WAVE(cls) -> ShapeType:
        '''Double Wave Shape.'''
        ...

    @classmethod
    @property
    def PLUS(cls) -> ShapeType:
        '''Plus Shape.'''
        ...

    @classmethod
    @property
    def PROCESS_FLOW(cls) -> ShapeType:
        '''Process Flow Shape.'''
        ...

    @classmethod
    @property
    def DECISION_FLOW(cls) -> ShapeType:
        '''Decision Flow Shape.'''
        ...

    @classmethod
    @property
    def INPUT_OUTPUT_FLOW(cls) -> ShapeType:
        '''Input Output Flow Shape.'''
        ...

    @classmethod
    @property
    def PREDEFINED_PROCESS_FLOW(cls) -> ShapeType:
        '''Predefined Process Flow Shape.'''
        ...

    @classmethod
    @property
    def INTERNAL_STORAGE_FLOW(cls) -> ShapeType:
        '''Internal Storage Flow Shape.'''
        ...

    @classmethod
    @property
    def DOCUMENT_FLOW(cls) -> ShapeType:
        '''Document Flow Shape.'''
        ...

    @classmethod
    @property
    def MULTI_DOCUMENT_FLOW(cls) -> ShapeType:
        '''Multi-Document Flow Shape.'''
        ...

    @classmethod
    @property
    def TERMINATOR_FLOW(cls) -> ShapeType:
        '''Terminator Flow Shape.'''
        ...

    @classmethod
    @property
    def PREPARATION_FLOW(cls) -> ShapeType:
        '''Preparation Flow Shape.'''
        ...

    @classmethod
    @property
    def MANUAL_INPUT_FLOW(cls) -> ShapeType:
        '''Manual Input Flow Shape.'''
        ...

    @classmethod
    @property
    def MANUAL_OPERATION_FLOW(cls) -> ShapeType:
        '''Manual Operation Flow Shape.'''
        ...

    @classmethod
    @property
    def CONNECTOR_FLOW(cls) -> ShapeType:
        '''Connector Flow Shape.'''
        ...

    @classmethod
    @property
    def PUNCHED_CARD_FLOW(cls) -> ShapeType:
        '''Punched Card Flow Shape.'''
        ...

    @classmethod
    @property
    def PUNCHED_TAPE_FLOW(cls) -> ShapeType:
        '''Punched Tape Flow Shape.'''
        ...

    @classmethod
    @property
    def SUMMING_JUNCTION_FLOW(cls) -> ShapeType:
        '''Summing Junction Flow Shape.'''
        ...

    @classmethod
    @property
    def OR_FLOW(cls) -> ShapeType:
        '''Or Flow Shape.'''
        ...

    @classmethod
    @property
    def COLLATE_FLOW(cls) -> ShapeType:
        '''Collate Flow Shape.'''
        ...

    @classmethod
    @property
    def SORT_FLOW(cls) -> ShapeType:
        '''Sort Flow Shape.'''
        ...

    @classmethod
    @property
    def EXTRACT_FLOW(cls) -> ShapeType:
        '''Extract Flow Shape.'''
        ...

    @classmethod
    @property
    def MERGE_FLOW(cls) -> ShapeType:
        '''Merge Flow Shape.'''
        ...

    @classmethod
    @property
    def OFFLINE_STORAGE_FLOW(cls) -> ShapeType:
        '''Offline Storage Flow Shape.'''
        ...

    @classmethod
    @property
    def ONLINE_STORAGE_FLOW(cls) -> ShapeType:
        '''Online Storage Flow Shape.'''
        ...

    @classmethod
    @property
    def MAGNETIC_TAPE_FLOW(cls) -> ShapeType:
        '''Magnetic Tape Flow Shape.'''
        ...

    @classmethod
    @property
    def MAGNETIC_DISK_FLOW(cls) -> ShapeType:
        '''Magnetic Disk Flow Shape.'''
        ...

    @classmethod
    @property
    def MAGNETIC_DRUM_FLOW(cls) -> ShapeType:
        '''Magnetic Drum Flow Shape.'''
        ...

    @classmethod
    @property
    def DISPLAY_FLOW(cls) -> ShapeType:
        '''Display Flow Shape.'''
        ...

    @classmethod
    @property
    def DELAY_FLOW(cls) -> ShapeType:
        '''Delay Flow Shape.'''
        ...

    @classmethod
    @property
    def ALTERNATE_PROCESS_FLOW(cls) -> ShapeType:
        '''Alternate Process Flow Shape.'''
        ...

    @classmethod
    @property
    def OFF_PAGE_CONNECTOR_FLOW(cls) -> ShapeType:
        '''Off-Page Connector Flow Shape.'''
        ...

    @classmethod
    @property
    def BLANK_BUTTON(cls) -> ShapeType:
        '''Blank Button Shape.'''
        ...

    @classmethod
    @property
    def HOME_BUTTON(cls) -> ShapeType:
        '''Home Button Shape.'''
        ...

    @classmethod
    @property
    def HELP_BUTTON(cls) -> ShapeType:
        '''Help Button Shape.'''
        ...

    @classmethod
    @property
    def INFORMATION_BUTTON(cls) -> ShapeType:
        '''Information Button Shape.'''
        ...

    @classmethod
    @property
    def FORWARD_OR_NEXT_BUTTON(cls) -> ShapeType:
        '''Forward or Next Button Shape.'''
        ...

    @classmethod
    @property
    def BACK_OR_PREVIOUS_BUTTON(cls) -> ShapeType:
        '''Back or Previous Button Shape.'''
        ...

    @classmethod
    @property
    def END_BUTTON(cls) -> ShapeType:
        '''End Button Shape.'''
        ...

    @classmethod
    @property
    def BEGINNING_BUTTON(cls) -> ShapeType:
        '''Beginning Button Shape.'''
        ...

    @classmethod
    @property
    def RETURN_BUTTON(cls) -> ShapeType:
        '''Return Button Shape.'''
        ...

    @classmethod
    @property
    def DOCUMENT_BUTTON(cls) -> ShapeType:
        '''Document Button Shape.'''
        ...

    @classmethod
    @property
    def SOUND_BUTTON(cls) -> ShapeType:
        '''Sound Button Shape.'''
        ...

    @classmethod
    @property
    def MOVIE_BUTTON(cls) -> ShapeType:
        '''Movie Button Shape.'''
        ...

    @classmethod
    @property
    def GEAR6(cls) -> ShapeType:
        '''Gear 6 Shape.'''
        ...

    @classmethod
    @property
    def GEAR9(cls) -> ShapeType:
        '''Gear 9 Shape.'''
        ...

    @classmethod
    @property
    def FUNNEL(cls) -> ShapeType:
        '''Funnel Shape.'''
        ...

    @classmethod
    @property
    def PLUS_MATH(cls) -> ShapeType:
        '''Plus Math Shape.'''
        ...

    @classmethod
    @property
    def MINUS_MATH(cls) -> ShapeType:
        '''Minus Math Shape.'''
        ...

    @classmethod
    @property
    def MULTIPLY_MATH(cls) -> ShapeType:
        '''Multiply Math Shape.'''
        ...

    @classmethod
    @property
    def DIVIDE_MATH(cls) -> ShapeType:
        '''Divide Math Shape.'''
        ...

    @classmethod
    @property
    def EQUAL_MATH(cls) -> ShapeType:
        '''Equal Math Shape.'''
        ...

    @classmethod
    @property
    def NOT_EQUAL_MATH(cls) -> ShapeType:
        '''Not Equal Math Shape.'''
        ...

    @classmethod
    @property
    def CORNER_TABS(cls) -> ShapeType:
        '''Corner Tabs Shape.'''
        ...

    @classmethod
    @property
    def SQUARE_TABS(cls) -> ShapeType:
        '''Square Tabs Shape.'''
        ...

    @classmethod
    @property
    def PLAQUE_TABS(cls) -> ShapeType:
        '''Plaque Tabs Shape.'''
        ...

    @classmethod
    @property
    def CHART_X(cls) -> ShapeType:
        '''Chart X Shape.'''
        ...

    @classmethod
    @property
    def CHART_STAR(cls) -> ShapeType:
        '''Chart Star Shape.'''
        ...

    @classmethod
    @property
    def CHART_PLUS(cls) -> ShapeType:
        '''Chart Plus Shape.'''
        ...

    ...

class ShapesAlignmentType:
    '''Defines a way to change the placement of selected shapes on the slide.'''
    @classmethod
    @property
    def ALIGN_LEFT(cls) -> ShapesAlignmentType:
        '''Align left'''
        ...

    @classmethod
    @property
    def ALIGN_RIGHT(cls) -> ShapesAlignmentType:
        '''Align right'''
        ...

    @classmethod
    @property
    def ALIGN_CENTER(cls) -> ShapesAlignmentType:
        '''Align center'''
        ...

    @classmethod
    @property
    def ALIGN_TOP(cls) -> ShapesAlignmentType:
        '''Align top'''
        ...

    @classmethod
    @property
    def ALIGN_MIDDLE(cls) -> ShapesAlignmentType:
        '''Align middle'''
        ...

    @classmethod
    @property
    def ALIGN_BOTTOM(cls) -> ShapesAlignmentType:
        '''Align bottom'''
        ...

    @classmethod
    @property
    def DISTRIBUTE_HORIZONTALLY(cls) -> ShapesAlignmentType:
        '''Distribute horizontally'''
        ...

    @classmethod
    @property
    def DISTRIBUTE_VERTICALLY(cls) -> ShapesAlignmentType:
        '''Distribute vertically'''
        ...

    ...

class SlideLayoutType:
    '''Represents the slide layout type.'''
    @classmethod
    @property
    def CUSTOM(cls) -> SlideLayoutType:
        '''Custom'''
        ...

    @classmethod
    @property
    def TITLE(cls) -> SlideLayoutType:
        '''Title'''
        ...

    @classmethod
    @property
    def TEXT(cls) -> SlideLayoutType:
        '''Text'''
        ...

    @classmethod
    @property
    def TWO_COLUMN_TEXT(cls) -> SlideLayoutType:
        '''Two Column Text'''
        ...

    @classmethod
    @property
    def TABLE(cls) -> SlideLayoutType:
        '''Table'''
        ...

    @classmethod
    @property
    def TEXT_AND_CHART(cls) -> SlideLayoutType:
        '''Text and Chart'''
        ...

    @classmethod
    @property
    def CHART_AND_TEXT(cls) -> SlideLayoutType:
        '''Chart and Text'''
        ...

    @classmethod
    @property
    def DIAGRAM(cls) -> SlideLayoutType:
        '''Diagram'''
        ...

    @classmethod
    @property
    def CHART(cls) -> SlideLayoutType:
        '''Chart'''
        ...

    @classmethod
    @property
    def TEXT_AND_CLIP_ART(cls) -> SlideLayoutType:
        '''Text and Clip Art'''
        ...

    @classmethod
    @property
    def CLIP_ART_AND_TEXT(cls) -> SlideLayoutType:
        '''Clip Art and Text'''
        ...

    @classmethod
    @property
    def TITLE_ONLY(cls) -> SlideLayoutType:
        '''Title Only'''
        ...

    @classmethod
    @property
    def BLANK(cls) -> SlideLayoutType:
        '''Blank'''
        ...

    @classmethod
    @property
    def TEXT_AND_OBJECT(cls) -> SlideLayoutType:
        '''Text and Object'''
        ...

    @classmethod
    @property
    def OBJECT_AND_TEXT(cls) -> SlideLayoutType:
        '''Object and Text'''
        ...

    @classmethod
    @property
    def OBJECT(cls) -> SlideLayoutType:
        '''Object'''
        ...

    @classmethod
    @property
    def TITLE_AND_OBJECT(cls) -> SlideLayoutType:
        '''Title and Object'''
        ...

    @classmethod
    @property
    def TEXT_AND_MEDIA(cls) -> SlideLayoutType:
        '''Text and Media'''
        ...

    @classmethod
    @property
    def MEDIA_AND_TEXT(cls) -> SlideLayoutType:
        '''Media and Text'''
        ...

    @classmethod
    @property
    def OBJECT_OVER_TEXT(cls) -> SlideLayoutType:
        '''Object over Text'''
        ...

    @classmethod
    @property
    def TEXT_OVER_OBJECT(cls) -> SlideLayoutType:
        '''Text over Object'''
        ...

    @classmethod
    @property
    def TEXT_AND_TWO_OBJECTS(cls) -> SlideLayoutType:
        '''Text and Two Objects'''
        ...

    @classmethod
    @property
    def TWO_OBJECTS_AND_TEXT(cls) -> SlideLayoutType:
        '''Two Objects and Text'''
        ...

    @classmethod
    @property
    def TWO_OBJECTS_OVER_TEXT(cls) -> SlideLayoutType:
        '''Two Objects over Text'''
        ...

    @classmethod
    @property
    def FOUR_OBJECTS(cls) -> SlideLayoutType:
        '''Four Objects'''
        ...

    @classmethod
    @property
    def VERTICAL_TEXT(cls) -> SlideLayoutType:
        '''Vertical Text'''
        ...

    @classmethod
    @property
    def CLIP_ART_AND_VERTICAL_TEXT(cls) -> SlideLayoutType:
        '''Clip Art and Vertical Text'''
        ...

    @classmethod
    @property
    def VERTICAL_TITLE_AND_TEXT(cls) -> SlideLayoutType:
        '''Vertical Title and Text'''
        ...

    @classmethod
    @property
    def VERTICAL_TITLE_AND_TEXT_OVER_CHART(cls) -> SlideLayoutType:
        '''Vertical Title and Text Over Chart'''
        ...

    @classmethod
    @property
    def TWO_OBJECTS(cls) -> SlideLayoutType:
        '''Two Objects'''
        ...

    @classmethod
    @property
    def OBJECT_AND_TWO_OBJECT(cls) -> SlideLayoutType:
        '''Object and Two Object'''
        ...

    @classmethod
    @property
    def TWO_OBJECTS_AND_OBJECT(cls) -> SlideLayoutType:
        '''Two Objects and Object'''
        ...

    @classmethod
    @property
    def SECTION_HEADER(cls) -> SlideLayoutType:
        '''Section Header'''
        ...

    @classmethod
    @property
    def TWO_TEXT_AND_TWO_OBJECTS(cls) -> SlideLayoutType:
        '''Two Text and Two Objects'''
        ...

    @classmethod
    @property
    def TITLE_OBJECT_AND_CAPTION(cls) -> SlideLayoutType:
        '''Title, Object, and Caption'''
        ...

    @classmethod
    @property
    def PICTURE_AND_CAPTION(cls) -> SlideLayoutType:
        '''Picture and Caption'''
        ...

    ...

class SlideOrientation:
    '''Represents the slide orientation.'''
    @classmethod
    @property
    def LANDSCAPE(cls) -> SlideOrientation:
        '''Landscape orientation.'''
        ...

    @classmethod
    @property
    def PORTRAIT(cls) -> SlideOrientation:
        '''Portrait orientation.'''
        ...

    ...

class SlideSizeScaleType:
    '''Represents the scale type of slide content.'''
    @classmethod
    @property
    def DO_NOT_SCALE(cls) -> SlideSizeScaleType:
        '''Do not scale.'''
        ...

    @classmethod
    @property
    def ENSURE_FIT(cls) -> SlideSizeScaleType:
        '''Scale to ensure fit.'''
        ...

    @classmethod
    @property
    def MAXIMIZE(cls) -> SlideSizeScaleType:
        '''Maximize size of content.'''
        ...

    ...

class SlideSizeType:
    '''Represents the slide size preset.'''
    @classmethod
    @property
    def ON_SCREEN(cls) -> SlideSizeType:
        '''On screen 4x3'''
        ...

    @classmethod
    @property
    def LETTER_PAPER(cls) -> SlideSizeType:
        '''Letter'''
        ...

    @classmethod
    @property
    def A4_PAPER(cls) -> SlideSizeType:
        '''A4'''
        ...

    @classmethod
    @property
    def SLIDE_35MM(cls) -> SlideSizeType:
        '''Slide 35mm'''
        ...

    @classmethod
    @property
    def OVERHEAD(cls) -> SlideSizeType:
        '''Overhead'''
        ...

    @classmethod
    @property
    def BANNER(cls) -> SlideSizeType:
        '''Banner'''
        ...

    @classmethod
    @property
    def CUSTOM(cls) -> SlideSizeType:
        '''Custom size'''
        ...

    @classmethod
    @property
    def LEDGER(cls) -> SlideSizeType:
        '''Ledger'''
        ...

    @classmethod
    @property
    def A3_PAPER(cls) -> SlideSizeType:
        '''A3'''
        ...

    @classmethod
    @property
    def B4_ISO_PAPER(cls) -> SlideSizeType:
        '''B4 ISO'''
        ...

    @classmethod
    @property
    def B5_ISO_PAPER(cls) -> SlideSizeType:
        '''B5 ISO'''
        ...

    @classmethod
    @property
    def B4_JIS_PAPER(cls) -> SlideSizeType:
        '''B4 JIS'''
        ...

    @classmethod
    @property
    def B5_JIS_PAPER(cls) -> SlideSizeType:
        '''B5 JIS'''
        ...

    @classmethod
    @property
    def HAGAKI_CARD(cls) -> SlideSizeType:
        '''Hagaki card'''
        ...

    @classmethod
    @property
    def ON_SCREEN_16X9(cls) -> SlideSizeType:
        '''On screen 16x9'''
        ...

    @classmethod
    @property
    def ON_SCREEN_16X10(cls) -> SlideSizeType:
        '''On Screen 16x10'''
        ...

    @classmethod
    @property
    def WIDESCREEN(cls) -> SlideSizeType:
        '''Widescreen'''
        ...

    ...

class SourceFormat:
    '''Represents source file format.'''
    @classmethod
    @property
    def PPT(cls) -> SourceFormat:
        '''PPT format.'''
        ...

    @classmethod
    @property
    def PPTX(cls) -> SourceFormat:
        '''Pptx format.'''
        ...

    @classmethod
    @property
    def ODP(cls) -> SourceFormat:
        '''Odp format.'''
        ...

    ...

class SplitterBarStateType:
    '''Specifies the state that the splitter bar should be shown in. The splitter bar separates a primary and
                secondary region within a viewing area.'''
    @classmethod
    @property
    def MINIMIZED(cls) -> SplitterBarStateType:
        '''The primary region occupies the least amount of the viewing area allowed by the application.'''
        ...

    @classmethod
    @property
    def RESTORED(cls) -> SplitterBarStateType:
        '''The primary region has a specific intermediate size.'''
        ...

    @classmethod
    @property
    def MAXIMIZED(cls) -> SplitterBarStateType:
        '''The primary region occupies the greatest amount of the viewing area allowed by the application.'''
        ...

    ...

class SystemColor:
    '''Represents predefined system colors.'''
    @classmethod
    @property
    def NOT_DEFINED(cls) -> SystemColor:
        '''System color is not defined.'''
        ...

    @classmethod
    @property
    def SCROLL_BAR(cls) -> SystemColor:
        ...

    @classmethod
    @property
    def BACKGROUND(cls) -> SystemColor:
        ...

    @classmethod
    @property
    def ACTIVE_CAPTION(cls) -> SystemColor:
        ...

    @classmethod
    @property
    def INACTIVE_CAPTION(cls) -> SystemColor:
        ...

    @classmethod
    @property
    def MENU(cls) -> SystemColor:
        ...

    @classmethod
    @property
    def WINDOW(cls) -> SystemColor:
        ...

    @classmethod
    @property
    def WINDOW_FRAME(cls) -> SystemColor:
        ...

    @classmethod
    @property
    def MENU_TEXT(cls) -> SystemColor:
        ...

    @classmethod
    @property
    def WINDOW_TEXT(cls) -> SystemColor:
        ...

    @classmethod
    @property
    def CAPTION_TEXT(cls) -> SystemColor:
        ...

    @classmethod
    @property
    def ACTIVE_BORDER(cls) -> SystemColor:
        ...

    @classmethod
    @property
    def INACTIVE_BORDER(cls) -> SystemColor:
        ...

    @classmethod
    @property
    def APP_WORKSPACE(cls) -> SystemColor:
        ...

    @classmethod
    @property
    def HIGHLIGHT(cls) -> SystemColor:
        ...

    @classmethod
    @property
    def HIGHLIGHT_TEXT(cls) -> SystemColor:
        ...

    @classmethod
    @property
    def BTN_FACE(cls) -> SystemColor:
        ...

    @classmethod
    @property
    def BTN_SHADOW(cls) -> SystemColor:
        ...

    @classmethod
    @property
    def GRAY_TEXT(cls) -> SystemColor:
        ...

    @classmethod
    @property
    def BTN_TEXT(cls) -> SystemColor:
        ...

    @classmethod
    @property
    def INACTIVE_CAPTION_TEXT(cls) -> SystemColor:
        ...

    @classmethod
    @property
    def BTN_HIGHLIGHT(cls) -> SystemColor:
        ...

    @classmethod
    @property
    def THREE_D_DK_SHADOW(cls) -> SystemColor:
        ...

    @classmethod
    @property
    def THREE_D_LIGHT(cls) -> SystemColor:
        ...

    @classmethod
    @property
    def INFO_TEXT(cls) -> SystemColor:
        ...

    @classmethod
    @property
    def INFO_BK(cls) -> SystemColor:
        ...

    @classmethod
    @property
    def HOT_LIGHT(cls) -> SystemColor:
        ...

    @classmethod
    @property
    def GRADIENT_ACTIVE_CAPTION(cls) -> SystemColor:
        ...

    @classmethod
    @property
    def GRADIENT_INACTIVE_CAPTION(cls) -> SystemColor:
        ...

    @classmethod
    @property
    def MENU_HIGHLIGHT(cls) -> SystemColor:
        ...

    @classmethod
    @property
    def MENU_BAR(cls) -> SystemColor:
        ...

    ...

class TabAlignment:
    '''Represents the tab alignment.'''
    @classmethod
    @property
    def LEFT(cls) -> TabAlignment:
        '''Left alignment'''
        ...

    @classmethod
    @property
    def CENTER(cls) -> TabAlignment:
        '''Center alignment'''
        ...

    @classmethod
    @property
    def RIGHT(cls) -> TabAlignment:
        '''Right alignment'''
        ...

    @classmethod
    @property
    def DECIMAL(cls) -> TabAlignment:
        '''Decimal alignment'''
        ...

    ...

class TableStylePreset:
    '''Represents builtin table styles.'''
    @classmethod
    @property
    def CUSTOM(cls) -> TableStylePreset:
        '''Table has a custom style.
                    This is return-only value.'''
        ...

    @classmethod
    @property
    def NONE(cls) -> TableStylePreset:
        '''No style.'''
        ...

    @classmethod
    @property
    def MEDIUM_STYLE_2_ACCENT_1(cls) -> TableStylePreset:
        '''Medium Style 2 - Accent 1.'''
        ...

    @classmethod
    @property
    def MEDIUM_STYLE2(cls) -> TableStylePreset:
        '''Medium Style 2.'''
        ...

    @classmethod
    @property
    def NO_STYLE_NO_GRID(cls) -> TableStylePreset:
        '''No Style, No Grid.'''
        ...

    @classmethod
    @property
    def THEMED_STYLE_1_ACCENT_1(cls) -> TableStylePreset:
        '''Themed Style 1 - Accent 1.'''
        ...

    @classmethod
    @property
    def THEMED_STYLE_1_ACCENT_2(cls) -> TableStylePreset:
        '''Themed Style 1 - Accent 2.'''
        ...

    @classmethod
    @property
    def THEMED_STYLE_1_ACCENT_3(cls) -> TableStylePreset:
        '''Themed Style 1 - Accent 3.'''
        ...

    @classmethod
    @property
    def THEMED_STYLE_1_ACCENT_4(cls) -> TableStylePreset:
        '''Themed Style 1 - Accent 4.'''
        ...

    @classmethod
    @property
    def THEMED_STYLE_1_ACCENT_5(cls) -> TableStylePreset:
        '''Themed Style 1 - Accent 5.'''
        ...

    @classmethod
    @property
    def THEMED_STYLE_1_ACCENT_6(cls) -> TableStylePreset:
        '''Themed Style 1 - Accent 6.'''
        ...

    @classmethod
    @property
    def NO_STYLE_TABLE_GRID(cls) -> TableStylePreset:
        '''No Style, Table Grid.'''
        ...

    @classmethod
    @property
    def THEMED_STYLE_2_ACCENT_1(cls) -> TableStylePreset:
        '''Themed Style 2 - Accent 1.'''
        ...

    @classmethod
    @property
    def THEMED_STYLE_2_ACCENT_2(cls) -> TableStylePreset:
        '''Themed Style 2 - Accent 2.'''
        ...

    @classmethod
    @property
    def THEMED_STYLE_2_ACCENT_3(cls) -> TableStylePreset:
        '''Themed Style 2 - Accent 3.'''
        ...

    @classmethod
    @property
    def THEMED_STYLE_2_ACCENT_4(cls) -> TableStylePreset:
        '''Themed Style 2 - Accent 4.'''
        ...

    @classmethod
    @property
    def THEMED_STYLE_2_ACCENT_5(cls) -> TableStylePreset:
        '''Themed Style 2 - Accent 5.'''
        ...

    @classmethod
    @property
    def THEMED_STYLE_2_ACCENT_6(cls) -> TableStylePreset:
        '''Themed Style 2 - Accent 6.'''
        ...

    @classmethod
    @property
    def LIGHT_STYLE1(cls) -> TableStylePreset:
        '''Light Style 1'''
        ...

    @classmethod
    @property
    def LIGHT_STYLE_1_ACCENT_1(cls) -> TableStylePreset:
        '''Light Style 1 - Accent 1.'''
        ...

    @classmethod
    @property
    def LIGHT_STYLE_1_ACCENT_2(cls) -> TableStylePreset:
        '''Light Style 1 - Accent 2.'''
        ...

    @classmethod
    @property
    def LIGHT_STYLE_1_ACCENT_3(cls) -> TableStylePreset:
        '''Light Style 1 - Accent 3.'''
        ...

    @classmethod
    @property
    def LIGHT_STYLE_1_ACCENT_4(cls) -> TableStylePreset:
        '''Light Style 1 - Accent 4.'''
        ...

    @classmethod
    @property
    def LIGHT_STYLE_2_ACCENT_5(cls) -> TableStylePreset:
        '''Light Style 2 - Accent 5.'''
        ...

    @classmethod
    @property
    def LIGHT_STYLE_1_ACCENT_6(cls) -> TableStylePreset:
        '''Light Style 1 - Accent 6.'''
        ...

    @classmethod
    @property
    def LIGHT_STYLE2(cls) -> TableStylePreset:
        '''Light Style 2.'''
        ...

    @classmethod
    @property
    def LIGHT_STYLE_2_ACCENT_1(cls) -> TableStylePreset:
        '''Light Style 2 - Accent 1.'''
        ...

    @classmethod
    @property
    def LIGHT_STYLE_2_ACCENT_2(cls) -> TableStylePreset:
        '''Light Style 2 - Accent 2.'''
        ...

    @classmethod
    @property
    def LIGHT_STYLE_2_ACCENT_3(cls) -> TableStylePreset:
        '''Light Style 2 - Accent 3.'''
        ...

    @classmethod
    @property
    def MEDIUM_STYLE_2_ACCENT_3(cls) -> TableStylePreset:
        '''Medium Style 2 - Accent 3.'''
        ...

    @classmethod
    @property
    def MEDIUM_STYLE_2_ACCENT_4(cls) -> TableStylePreset:
        '''Medium Style 2 - Accent 4.'''
        ...

    @classmethod
    @property
    def MEDIUM_STYLE_2_ACCENT_5(cls) -> TableStylePreset:
        '''Medium Style 2 - Accent 5.'''
        ...

    @classmethod
    @property
    def LIGHT_STYLE_2_ACCENT_6(cls) -> TableStylePreset:
        '''Light Style 2 - Accent 6.'''
        ...

    @classmethod
    @property
    def LIGHT_STYLE_2_ACCENT_4(cls) -> TableStylePreset:
        '''Light Style 2 - Accent 4.'''
        ...

    @classmethod
    @property
    def LIGHT_STYLE3(cls) -> TableStylePreset:
        '''Light Style 3.'''
        ...

    @classmethod
    @property
    def LIGHT_STYLE_3_ACCENT_1(cls) -> TableStylePreset:
        '''Light Style 3 - Accent 1.'''
        ...

    @classmethod
    @property
    def MEDIUM_STYLE_2_ACCENT_2(cls) -> TableStylePreset:
        '''Medium Style 2 - Accent 2.'''
        ...

    @classmethod
    @property
    def LIGHT_STYLE_3_ACCENT_2(cls) -> TableStylePreset:
        '''Light Style 3 - Accent 2.'''
        ...

    @classmethod
    @property
    def LIGHT_STYLE_3_ACCENT_3(cls) -> TableStylePreset:
        '''Light Style 3 - Accent 3.'''
        ...

    @classmethod
    @property
    def LIGHT_STYLE_3_ACCENT_4(cls) -> TableStylePreset:
        '''Light Style 3 - Accent 4.'''
        ...

    @classmethod
    @property
    def LIGHT_STYLE_3_ACCENT_5(cls) -> TableStylePreset:
        '''Light Style 3 - Accent 5.'''
        ...

    @classmethod
    @property
    def LIGHT_STYLE_3_ACCENT_6(cls) -> TableStylePreset:
        '''Light Style 3 - Accent 6.'''
        ...

    @classmethod
    @property
    def MEDIUM_STYLE1(cls) -> TableStylePreset:
        '''Medium Style 1.'''
        ...

    @classmethod
    @property
    def MEDIUM_STYLE_1_ACCENT_1(cls) -> TableStylePreset:
        '''Medium Style 1 - Accent 1.'''
        ...

    @classmethod
    @property
    def MEDIUM_STYLE_1_ACCENT_2(cls) -> TableStylePreset:
        '''Medium Style 1 - Accent 2.'''
        ...

    @classmethod
    @property
    def MEDIUM_STYLE_1_ACCENT_3(cls) -> TableStylePreset:
        '''Medium Style 1 - Accent 3.'''
        ...

    @classmethod
    @property
    def MEDIUM_STYLE_1_ACCENT_4(cls) -> TableStylePreset:
        '''Medium Style 1 - Accent 4.'''
        ...

    @classmethod
    @property
    def MEDIUM_STYLE_1_ACCENT_5(cls) -> TableStylePreset:
        '''Medium Style 1 - Accent 5.'''
        ...

    @classmethod
    @property
    def MEDIUM_STYLE_1_ACCENT_6(cls) -> TableStylePreset:
        '''Medium Style 1 - Accent 6.'''
        ...

    @classmethod
    @property
    def MEDIUM_STYLE_2_ACCENT_6(cls) -> TableStylePreset:
        '''Medium Style 2 - Accent 6.'''
        ...

    @classmethod
    @property
    def MEDIUM_STYLE3(cls) -> TableStylePreset:
        '''Medium Style 3.'''
        ...

    @classmethod
    @property
    def MEDIUM_STYLE_3_ACCENT_1(cls) -> TableStylePreset:
        '''Medium Style 3 - Accent 1.'''
        ...

    @classmethod
    @property
    def MEDIUM_STYLE_3_ACCENT_2(cls) -> TableStylePreset:
        '''Medium Style 3 - Accent 2.'''
        ...

    @classmethod
    @property
    def MEDIUM_STYLE_3_ACCENT_3(cls) -> TableStylePreset:
        '''Medium Style 3 - Accent 3.'''
        ...

    @classmethod
    @property
    def MEDIUM_STYLE_3_ACCENT_4(cls) -> TableStylePreset:
        '''Medium Style 3 - Accent 4.'''
        ...

    @classmethod
    @property
    def MEDIUM_STYLE_3_ACCENT_5(cls) -> TableStylePreset:
        '''Medium Style 3 - Accent 5.'''
        ...

    @classmethod
    @property
    def MEDIUM_STYLE_3_ACCENT_6(cls) -> TableStylePreset:
        '''Medium Style 3 - Accent 6.'''
        ...

    @classmethod
    @property
    def MEDIUM_STYLE4(cls) -> TableStylePreset:
        '''Medium Style 4.'''
        ...

    @classmethod
    @property
    def MEDIUM_STYLE_4_ACCENT_1(cls) -> TableStylePreset:
        '''Medium Style 4 - Accent 1.'''
        ...

    @classmethod
    @property
    def MEDIUM_STYLE_4_ACCENT_2(cls) -> TableStylePreset:
        '''Medium Style 4 - Accent 2.'''
        ...

    @classmethod
    @property
    def MEDIUM_STYLE_4_ACCENT_3(cls) -> TableStylePreset:
        '''Medium Style 4 - Accent 3.'''
        ...

    @classmethod
    @property
    def MEDIUM_STYLE_4_ACCENT_4(cls) -> TableStylePreset:
        '''Medium Style 4 - Accent 4.'''
        ...

    @classmethod
    @property
    def MEDIUM_STYLE_4_ACCENT_5(cls) -> TableStylePreset:
        '''Medium Style 4 - Accent 5.'''
        ...

    @classmethod
    @property
    def MEDIUM_STYLE_4_ACCENT_6(cls) -> TableStylePreset:
        '''Medium Style 4 - Accent 6.'''
        ...

    @classmethod
    @property
    def DARK_STYLE1(cls) -> TableStylePreset:
        '''Dark Style 1.'''
        ...

    @classmethod
    @property
    def DARK_STYLE_1_ACCENT_1(cls) -> TableStylePreset:
        '''Dark Style 1 - Accent 1.'''
        ...

    @classmethod
    @property
    def DARK_STYLE_1_ACCENT_2(cls) -> TableStylePreset:
        '''Dark Style 1 - Accent 2.'''
        ...

    @classmethod
    @property
    def DARK_STYLE_1_ACCENT_3(cls) -> TableStylePreset:
        '''Dark Style 1 - Accent 3.'''
        ...

    @classmethod
    @property
    def DARK_STYLE_1_ACCENT_4(cls) -> TableStylePreset:
        '''Dark Style 1 - Accent 4.'''
        ...

    @classmethod
    @property
    def DARK_STYLE_1_ACCENT_5(cls) -> TableStylePreset:
        '''Dark Style 1 - Accent 5.'''
        ...

    @classmethod
    @property
    def DARK_STYLE_1_ACCENT_6(cls) -> TableStylePreset:
        '''Dark Style 1 - Accent 6.'''
        ...

    @classmethod
    @property
    def DARK_STYLE2(cls) -> TableStylePreset:
        '''Dark Style 2.'''
        ...

    @classmethod
    @property
    def DARK_STYLE_2_ACCENT_1_ACCENT_2(cls) -> TableStylePreset:
        '''Dark Style 2 - Accent 1/Accent 2.'''
        ...

    @classmethod
    @property
    def DARK_STYLE_2_ACCENT_3_ACCENT_4(cls) -> TableStylePreset:
        '''Dark Style 2 - Accent 3/Accent 4.'''
        ...

    @classmethod
    @property
    def DARK_STYLE_2_ACCENT_5_ACCENT_6(cls) -> TableStylePreset:
        '''Dark Style 2 - Accent 5/Accent 6.'''
        ...

    @classmethod
    @property
    def LIGHT_STYLE_1_ACCENT_5(cls) -> TableStylePreset:
        '''Light Style 1 - Accent 5.'''
        ...

    ...

class TextAlignment:
    '''Represents different text alignment styles.'''
    @classmethod
    @property
    def NOT_DEFINED(cls) -> TextAlignment:
        '''Default aligment.'''
        ...

    @classmethod
    @property
    def LEFT(cls) -> TextAlignment:
        '''Left alignment.'''
        ...

    @classmethod
    @property
    def CENTER(cls) -> TextAlignment:
        '''Center alignment.'''
        ...

    @classmethod
    @property
    def RIGHT(cls) -> TextAlignment:
        '''Right alignment.'''
        ...

    @classmethod
    @property
    def JUSTIFY(cls) -> TextAlignment:
        '''Justify alignment.'''
        ...

    @classmethod
    @property
    def JUSTIFY_LOW(cls) -> TextAlignment:
        '''Kashida justify low.'''
        ...

    @classmethod
    @property
    def DISTRIBUTED(cls) -> TextAlignment:
        '''Distributed alignment.'''
        ...

    ...

class TextAnchorType:
    '''text box alignment within a text area.'''
    @classmethod
    @property
    def NOT_DEFINED(cls) -> TextAnchorType:
        ...

    @classmethod
    @property
    def TOP(cls) -> TextAnchorType:
        ...

    @classmethod
    @property
    def CENTER(cls) -> TextAnchorType:
        ...

    @classmethod
    @property
    def BOTTOM(cls) -> TextAnchorType:
        ...

    @classmethod
    @property
    def JUSTIFIED(cls) -> TextAnchorType:
        ...

    @classmethod
    @property
    def DISTRIBUTED(cls) -> TextAnchorType:
        ...

    ...

class TextAutofitType:
    '''Represents text autofit mode.'''
    @classmethod
    @property
    def NOT_DEFINED(cls) -> TextAutofitType:
        '''Not defined.'''
        ...

    @classmethod
    @property
    def NONE(cls) -> TextAutofitType:
        '''No autofit.'''
        ...

    @classmethod
    @property
    def NORMAL(cls) -> TextAutofitType:
        '''Normal autofit. Font size and line spacing will be reduced to fit the shape.'''
        ...

    @classmethod
    @property
    def SHAPE(cls) -> TextAutofitType:
        '''Shape autofit. Shape size will be changed to fit the text.'''
        ...

    ...

class TextCapType:
    '''Represents the type of text capitalisation.'''
    @classmethod
    @property
    def NOT_DEFINED(cls) -> TextCapType:
        ...

    @classmethod
    @property
    def NONE(cls) -> TextCapType:
        ...

    @classmethod
    @property
    def SMALL(cls) -> TextCapType:
        ...

    @classmethod
    @property
    def ALL(cls) -> TextCapType:
        ...

    ...

class TextExtractionArrangingMode:
    '''Represents the mode to use during text extraction'''
    @classmethod
    @property
    def UNARRANGED(cls) -> TextExtractionArrangingMode:
        '''The raw text with no respect to position on the slide'''
        ...

    @classmethod
    @property
    def ARRANGED(cls) -> TextExtractionArrangingMode:
        '''The text is positioned in the same order as on the slide'''
        ...

    ...

class TextShapeType:
    '''Represents text wrapping shape.'''
    @classmethod
    @property
    def NOT_DEFINED(cls) -> TextShapeType:
        '''Not defined'''
        ...

    @classmethod
    @property
    def NONE(cls) -> TextShapeType:
        '''No shape'''
        ...

    @classmethod
    @property
    def PLAIN(cls) -> TextShapeType:
        '''Plain'''
        ...

    @classmethod
    @property
    def STOP(cls) -> TextShapeType:
        '''Stop Sign'''
        ...

    @classmethod
    @property
    def TRIANGLE(cls) -> TextShapeType:
        '''Triangle'''
        ...

    @classmethod
    @property
    def TRIANGLE_INVERTED(cls) -> TextShapeType:
        '''Inverted Triangle'''
        ...

    @classmethod
    @property
    def CHEVRON(cls) -> TextShapeType:
        '''Chevron'''
        ...

    @classmethod
    @property
    def CHEVRON_INVERTED(cls) -> TextShapeType:
        '''Inverted Chevron'''
        ...

    @classmethod
    @property
    def RING_INSIDE(cls) -> TextShapeType:
        '''Inside Ring'''
        ...

    @classmethod
    @property
    def RING_OUTSIDE(cls) -> TextShapeType:
        '''Outside Ring'''
        ...

    @classmethod
    @property
    def ARCH_UP(cls) -> TextShapeType:
        '''Upward Arch'''
        ...

    @classmethod
    @property
    def ARCH_DOWN(cls) -> TextShapeType:
        '''Downward Arch'''
        ...

    @classmethod
    @property
    def CIRCLE(cls) -> TextShapeType:
        '''Circle'''
        ...

    @classmethod
    @property
    def BUTTON(cls) -> TextShapeType:
        '''Button'''
        ...

    @classmethod
    @property
    def ARCH_UP_POUR(cls) -> TextShapeType:
        '''Upward Pour Arch'''
        ...

    @classmethod
    @property
    def ARCH_DOWN_POUR(cls) -> TextShapeType:
        '''Downward Pour Arch'''
        ...

    @classmethod
    @property
    def CIRCLE_POUR(cls) -> TextShapeType:
        '''Circle Pour'''
        ...

    @classmethod
    @property
    def BUTTON_POUR(cls) -> TextShapeType:
        '''Button Pour'''
        ...

    @classmethod
    @property
    def CURVE_UP(cls) -> TextShapeType:
        '''Upward Curve'''
        ...

    @classmethod
    @property
    def CURVE_DOWN(cls) -> TextShapeType:
        '''Downward Curve'''
        ...

    @classmethod
    @property
    def CAN_UP(cls) -> TextShapeType:
        '''Upward Can'''
        ...

    @classmethod
    @property
    def CAN_DOWN(cls) -> TextShapeType:
        '''Downward Can'''
        ...

    @classmethod
    @property
    def WAVE1(cls) -> TextShapeType:
        '''Wave 1'''
        ...

    @classmethod
    @property
    def WAVE2(cls) -> TextShapeType:
        '''Wave 2'''
        ...

    @classmethod
    @property
    def DOUBLE_WAVE1(cls) -> TextShapeType:
        '''Double Wave 1'''
        ...

    @classmethod
    @property
    def WAVE4(cls) -> TextShapeType:
        '''Wave 4'''
        ...

    @classmethod
    @property
    def INFLATE(cls) -> TextShapeType:
        '''Inflate'''
        ...

    @classmethod
    @property
    def DEFLATE(cls) -> TextShapeType:
        '''Deflate'''
        ...

    @classmethod
    @property
    def INFLATE_BOTTOM(cls) -> TextShapeType:
        '''Bottom Inflate'''
        ...

    @classmethod
    @property
    def DEFLATE_BOTTOM(cls) -> TextShapeType:
        '''Bottom Deflate'''
        ...

    @classmethod
    @property
    def INFLATE_TOP(cls) -> TextShapeType:
        '''Top Inflate'''
        ...

    @classmethod
    @property
    def DEFLATE_TOP(cls) -> TextShapeType:
        '''Top Deflate'''
        ...

    @classmethod
    @property
    def DEFLATE_INFLATE(cls) -> TextShapeType:
        '''Deflate-Inflate'''
        ...

    @classmethod
    @property
    def DEFLATE_INFLATE_DEFLATE(cls) -> TextShapeType:
        '''Deflate-Inflate-Deflate'''
        ...

    @classmethod
    @property
    def FADE_RIGHT(cls) -> TextShapeType:
        '''Right Fade'''
        ...

    @classmethod
    @property
    def FADE_LEFT(cls) -> TextShapeType:
        '''Left Fade'''
        ...

    @classmethod
    @property
    def FADE_UP(cls) -> TextShapeType:
        '''Upward Fade'''
        ...

    @classmethod
    @property
    def FADE_DOWN(cls) -> TextShapeType:
        '''Downward Fade'''
        ...

    @classmethod
    @property
    def SLANT_UP(cls) -> TextShapeType:
        '''Upward Slant'''
        ...

    @classmethod
    @property
    def SLANT_DOWN(cls) -> TextShapeType:
        '''Downward Slant'''
        ...

    @classmethod
    @property
    def CASCADE_UP(cls) -> TextShapeType:
        '''Upward Cascade'''
        ...

    @classmethod
    @property
    def CASCADE_DOWN(cls) -> TextShapeType:
        '''Downward Cascade'''
        ...

    @classmethod
    @property
    def CUSTOM(cls) -> TextShapeType:
        '''Custom'''
        ...

    ...

class TextStrikethroughType:
    '''Represents the type of text strikethrough.'''
    @classmethod
    @property
    def NOT_DEFINED(cls) -> TextStrikethroughType:
        ...

    @classmethod
    @property
    def NONE(cls) -> TextStrikethroughType:
        ...

    @classmethod
    @property
    def SINGLE(cls) -> TextStrikethroughType:
        ...

    @classmethod
    @property
    def DOUBLE(cls) -> TextStrikethroughType:
        ...

    ...

class TextUnderlineType:
    '''Represents the type of text underline.'''
    @classmethod
    @property
    def NOT_DEFINED(cls) -> TextUnderlineType:
        ...

    @classmethod
    @property
    def NONE(cls) -> TextUnderlineType:
        ...

    @classmethod
    @property
    def WORDS(cls) -> TextUnderlineType:
        ...

    @classmethod
    @property
    def SINGLE(cls) -> TextUnderlineType:
        ...

    @classmethod
    @property
    def DOUBLE(cls) -> TextUnderlineType:
        ...

    @classmethod
    @property
    def HEAVY(cls) -> TextUnderlineType:
        ...

    @classmethod
    @property
    def DOTTED(cls) -> TextUnderlineType:
        ...

    @classmethod
    @property
    def HEAVY_DOTTED(cls) -> TextUnderlineType:
        ...

    @classmethod
    @property
    def DASHED(cls) -> TextUnderlineType:
        ...

    @classmethod
    @property
    def HEAVY_DASHED(cls) -> TextUnderlineType:
        ...

    @classmethod
    @property
    def LONG_DASHED(cls) -> TextUnderlineType:
        ...

    @classmethod
    @property
    def HEAVY_LONG_DASHED(cls) -> TextUnderlineType:
        ...

    @classmethod
    @property
    def DOT_DASH(cls) -> TextUnderlineType:
        ...

    @classmethod
    @property
    def HEAVY_DOT_DASH(cls) -> TextUnderlineType:
        ...

    @classmethod
    @property
    def DOT_DOT_DASH(cls) -> TextUnderlineType:
        ...

    @classmethod
    @property
    def HEAVY_DOT_DOT_DASH(cls) -> TextUnderlineType:
        ...

    @classmethod
    @property
    def WAVY(cls) -> TextUnderlineType:
        ...

    @classmethod
    @property
    def HEAVY_WAVY(cls) -> TextUnderlineType:
        ...

    @classmethod
    @property
    def DOUBLE_WAVY(cls) -> TextUnderlineType:
        ...

    ...

class TextVerticalOverflowType:
    '''Represents text vertical overflow type.'''
    @classmethod
    @property
    def NOT_DEFINED(cls) -> TextVerticalOverflowType:
        ...

    @classmethod
    @property
    def OVERFLOW(cls) -> TextVerticalOverflowType:
        ...

    @classmethod
    @property
    def ELLIPSIS(cls) -> TextVerticalOverflowType:
        ...

    @classmethod
    @property
    def CLIP(cls) -> TextVerticalOverflowType:
        ...

    ...

class TextVerticalType:
    '''Determines vertical writing mode for a text.'''
    @classmethod
    @property
    def NOT_DEFINED(cls) -> TextVerticalType:
        '''Not defined.'''
        ...

    @classmethod
    @property
    def HORIZONTAL(cls) -> TextVerticalType:
        '''Horizontal text.'''
        ...

    @classmethod
    @property
    def VERTICAL(cls) -> TextVerticalType:
        '''Vertical text.'''
        ...

    @classmethod
    @property
    def VERTICAL270(cls) -> TextVerticalType:
        '''Vertical 270 degrees text.'''
        ...

    @classmethod
    @property
    def WORD_ART_VERTICAL(cls) -> TextVerticalType:
        '''WordArt vertical text.'''
        ...

    @classmethod
    @property
    def EAST_ASIAN_VERTICAL(cls) -> TextVerticalType:
        '''East asian vertical text.'''
        ...

    @classmethod
    @property
    def MONGOLIAN_VERTICAL(cls) -> TextVerticalType:
        '''Mongolian vertical text.'''
        ...

    @classmethod
    @property
    def WORD_ART_VERTICAL_RIGHT_TO_LEFT(cls) -> TextVerticalType:
        '''WordArt vertical right to left text.'''
        ...

    ...

class TileFlip:
    '''Defines tile flipping mode.'''
    @classmethod
    @property
    def NOT_DEFINED(cls) -> TileFlip:
        ...

    @classmethod
    @property
    def NO_FLIP(cls) -> TileFlip:
        ...

    @classmethod
    @property
    def FLIP_X(cls) -> TileFlip:
        ...

    @classmethod
    @property
    def FLIP_Y(cls) -> TileFlip:
        ...

    @classmethod
    @property
    def FLIP_BOTH(cls) -> TileFlip:
        ...

    ...

class VideoPlayModePreset:
    '''Constants which define how a video is played.'''
    @classmethod
    @property
    def MIXED(cls) -> VideoPlayModePreset:
        ...

    @classmethod
    @property
    def AUTO(cls) -> VideoPlayModePreset:
        '''Play automatically.'''
        ...

    @classmethod
    @property
    def ON_CLICK(cls) -> VideoPlayModePreset:
        '''Play only when the video frame is clicked on.'''
        ...

    @classmethod
    @property
    def ALL_SLIDES(cls) -> VideoPlayModePreset:
        '''Play on all slides.'''
        ...

    @classmethod
    @property
    def IN_CLICK_SEQUENCE(cls) -> VideoPlayModePreset:
        '''Play automatically with a click.'''
        ...

    ...

class ViewType:
    '''Presentation view types'''
    @classmethod
    @property
    def NOT_DEFINED(cls) -> ViewType:
        '''Value is not defined'''
        ...

    @classmethod
    @property
    def SLIDE_VIEW(cls) -> ViewType:
        '''Normal Slide View'''
        ...

    @classmethod
    @property
    def SLIDE_MASTER_VIEW(cls) -> ViewType:
        '''Slide Master View'''
        ...

    @classmethod
    @property
    def NOTES_VIEW(cls) -> ViewType:
        '''Notes View'''
        ...

    @classmethod
    @property
    def HANDOUT_VIEW(cls) -> ViewType:
        '''Handout View'''
        ...

    @classmethod
    @property
    def NOTES_MASTER_VIEW(cls) -> ViewType:
        '''Notes Master View'''
        ...

    @classmethod
    @property
    def OUTLINE_VIEW(cls) -> ViewType:
        '''Outline View'''
        ...

    @classmethod
    @property
    def SLIDE_SORTER_VIEW(cls) -> ViewType:
        '''Slide Sorter View'''
        ...

    @classmethod
    @property
    def SLIDE_THUMBNAIL_VIEW(cls) -> ViewType:
        '''Slide Thumbnail View'''
        ...

    ...

class ZoomImageType:
    '''Defines whether the Zoom object is using the slide preview or a cover image.'''
    @classmethod
    @property
    def PREVIEW(cls) -> ZoomImageType:
        '''Use the image of the slide or section.'''
        ...

    @classmethod
    @property
    def COVER(cls) -> ZoomImageType:
        '''Use a custom image.'''
        ...

    ...

class ZoomLayout:
    '''Specifies the summary zoom layout.'''
    @classmethod
    @property
    def GRID_LAYOUT(cls) -> ZoomLayout:
        '''Specifies the layout as a grid layout for a list of objects.'''
        ...

    @classmethod
    @property
    def FIXED_LAYOUT(cls) -> ZoomLayout:
        '''Specifies the layout with user-defined Zoom positioning.'''
        ...

    ...

