from typing import List, Optional, Dict, Iterable
import aspose.pycore
import aspose.pydrawing
import aspose.slides
import aspose.slides.animation
import aspose.slides.charts
import aspose.slides.dom.ole
import aspose.slides.effects
import aspose.slides.export
import aspose.slides.export.web
import aspose.slides.export.xaml
import aspose.slides.importing
import aspose.slides.ink
import aspose.slides.lowcode
import aspose.slides.mathtext
import aspose.slides.slideshow
import aspose.slides.smartart
import aspose.slides.spreadsheet
import aspose.slides.theme
import aspose.slides.util
import aspose.slides.vba
import aspose.slides.warnings

class AxesCompositionNotCombinableException:
    '''Exception which thrown when axes composition of the series is not combinable with present axes 
                composition in chart.'''
    def __init__(self):
        '''Default constructor.'''
        ...

    def __init__(self, message: str):
        '''Constructor allowing a message to be added to this exception.
        :param message: message'''
        ...

    ...

class AxesManager:
    '''Provides access to chart axes.'''
    @property
    def horizontal_axis(self) -> IAxis:
        ...

    @property
    def secondary_horizontal_axis(self) -> IAxis:
        ...

    @property
    def vertical_axis(self) -> IAxis:
        ...

    @property
    def secondary_vertical_axis(self) -> IAxis:
        ...

    @property
    def series_axis(self) -> IAxis:
        ...

    ...

class Axis:
    '''Encapsulates the object that represents a chart's axis.'''
    def set_category_axis_type_automatically(self) -> None:
        '''Sets IAxis.CategoryAxisType property with a value that is automatically determined based on axis data.'''
        ...

    @property
    def chart(self) -> IChart:
        '''Returns the parent chart.
                    Read-only :py:class:`aspose.slides.charts.IChart`.'''
        ...

    @property
    def axis_between_categories(self) -> bool:
        ...

    @axis_between_categories.setter
    def axis_between_categories(self, value: bool):
        ...

    @property
    def category_axis_type(self) -> CategoryAxisType:
        ...

    @category_axis_type.setter
    def category_axis_type(self, value: CategoryAxisType):
        ...

    @property
    def cross_at(self) -> float:
        ...

    @cross_at.setter
    def cross_at(self, value: float):
        ...

    @property
    def display_unit(self) -> DisplayUnitType:
        ...

    @display_unit.setter
    def display_unit(self, value: DisplayUnitType):
        ...

    @property
    def actual_max_value(self) -> float:
        ...

    @property
    def actual_min_value(self) -> float:
        ...

    @property
    def actual_major_unit(self) -> float:
        ...

    @property
    def actual_minor_unit(self) -> float:
        ...

    @property
    def actual_major_unit_scale(self) -> TimeUnitType:
        ...

    @property
    def actual_minor_unit_scale(self) -> TimeUnitType:
        ...

    @property
    def is_automatic_max_value(self) -> bool:
        ...

    @is_automatic_max_value.setter
    def is_automatic_max_value(self, value: bool):
        ...

    @property
    def max_value(self) -> float:
        ...

    @max_value.setter
    def max_value(self, value: float):
        ...

    @property
    def minor_unit(self) -> float:
        ...

    @minor_unit.setter
    def minor_unit(self, value: float):
        ...

    @property
    def is_automatic_minor_unit(self) -> bool:
        ...

    @is_automatic_minor_unit.setter
    def is_automatic_minor_unit(self, value: bool):
        ...

    @property
    def major_unit(self) -> float:
        ...

    @major_unit.setter
    def major_unit(self, value: float):
        ...

    @property
    def is_automatic_major_unit(self) -> bool:
        ...

    @is_automatic_major_unit.setter
    def is_automatic_major_unit(self, value: bool):
        ...

    @property
    def is_automatic_min_value(self) -> bool:
        ...

    @is_automatic_min_value.setter
    def is_automatic_min_value(self, value: bool):
        ...

    @property
    def min_value(self) -> float:
        ...

    @min_value.setter
    def min_value(self, value: float):
        ...

    @property
    def is_logarithmic(self) -> bool:
        ...

    @is_logarithmic.setter
    def is_logarithmic(self, value: bool):
        ...

    @property
    def log_base(self) -> float:
        ...

    @log_base.setter
    def log_base(self, value: float):
        ...

    @property
    def is_plot_order_reversed(self) -> bool:
        ...

    @is_plot_order_reversed.setter
    def is_plot_order_reversed(self, value: bool):
        ...

    @property
    def is_visible(self) -> bool:
        ...

    @is_visible.setter
    def is_visible(self, value: bool):
        ...

    @property
    def major_tick_mark(self) -> TickMarkType:
        ...

    @major_tick_mark.setter
    def major_tick_mark(self, value: TickMarkType):
        ...

    @property
    def minor_tick_mark(self) -> TickMarkType:
        ...

    @minor_tick_mark.setter
    def minor_tick_mark(self, value: TickMarkType):
        ...

    @property
    def tick_label_position(self) -> TickLabelPositionType:
        ...

    @tick_label_position.setter
    def tick_label_position(self, value: TickLabelPositionType):
        ...

    @property
    def major_unit_scale(self) -> TimeUnitType:
        ...

    @major_unit_scale.setter
    def major_unit_scale(self, value: TimeUnitType):
        ...

    @property
    def minor_unit_scale(self) -> TimeUnitType:
        ...

    @minor_unit_scale.setter
    def minor_unit_scale(self, value: TimeUnitType):
        ...

    @property
    def base_unit_scale(self) -> TimeUnitType:
        ...

    @base_unit_scale.setter
    def base_unit_scale(self, value: TimeUnitType):
        ...

    @property
    def minor_grid_lines_format(self) -> IChartLinesFormat:
        ...

    @property
    def major_grid_lines_format(self) -> IChartLinesFormat:
        ...

    @property
    def show_minor_grid_lines(self) -> bool:
        ...

    @property
    def show_major_grid_lines(self) -> bool:
        ...

    @property
    def format(self) -> IAxisFormat:
        '''Represents format of axis.
                     Read-only :py:class:`aspose.slides.charts.IAxisFormat`.'''
        ...

    @property
    def text_format(self) -> IChartTextFormat:
        ...

    @property
    def title(self) -> IChartTitle:
        '''Gets the axis' title.
                     Read-only :py:class:`aspose.slides.charts.IChartTitle`.'''
        ...

    @property
    def cross_type(self) -> CrossesType:
        ...

    @cross_type.setter
    def cross_type(self, value: CrossesType):
        ...

    @property
    def position(self) -> AxisPositionType:
        '''Represents position of axis.
                     Read/write :py:enum:`aspose.slides.charts.AxisPositionType`.'''
        ...

    @position.setter
    def position(self, value: AxisPositionType):
        '''Represents position of axis.
                     Read/write :py:enum:`aspose.slides.charts.AxisPositionType`.'''
        ...

    @property
    def has_title(self) -> bool:
        ...

    @has_title.setter
    def has_title(self, value: bool):
        ...

    @property
    def number_format(self) -> str:
        ...

    @number_format.setter
    def number_format(self, value: str):
        ...

    @property
    def is_number_format_linked_to_source(self) -> bool:
        ...

    @is_number_format_linked_to_source.setter
    def is_number_format_linked_to_source(self, value: bool):
        ...

    @property
    def tick_label_rotation_angle(self) -> float:
        ...

    @tick_label_rotation_angle.setter
    def tick_label_rotation_angle(self, value: float):
        ...

    @property
    def tick_label_spacing(self) -> int:
        ...

    @tick_label_spacing.setter
    def tick_label_spacing(self, value: int):
        ...

    @property
    def is_automatic_tick_label_spacing(self) -> bool:
        ...

    @is_automatic_tick_label_spacing.setter
    def is_automatic_tick_label_spacing(self, value: bool):
        ...

    @property
    def tick_marks_spacing(self) -> int:
        ...

    @tick_marks_spacing.setter
    def tick_marks_spacing(self, value: int):
        ...

    @property
    def is_automatic_tick_marks_spacing(self) -> bool:
        ...

    @is_automatic_tick_marks_spacing.setter
    def is_automatic_tick_marks_spacing(self, value: bool):
        ...

    @property
    def label_offset(self) -> int:
        ...

    @label_offset.setter
    def label_offset(self, value: int):
        ...

    @property
    def aggregation_type(self) -> AxisAggregationType:
        ...

    @aggregation_type.setter
    def aggregation_type(self, value: AxisAggregationType):
        ...

    @property
    def bin_width(self) -> float:
        ...

    @bin_width.setter
    def bin_width(self, value: float):
        ...

    @property
    def number_of_bins(self) -> int:
        ...

    @number_of_bins.setter
    def number_of_bins(self, value: int):
        ...

    @property
    def is_overflow_bin(self) -> bool:
        ...

    @is_overflow_bin.setter
    def is_overflow_bin(self, value: bool):
        ...

    @property
    def is_automatic_overflow_bin(self) -> bool:
        ...

    @is_automatic_overflow_bin.setter
    def is_automatic_overflow_bin(self, value: bool):
        ...

    @property
    def overflow_bin(self) -> float:
        ...

    @overflow_bin.setter
    def overflow_bin(self, value: float):
        ...

    @property
    def is_underflow_bin(self) -> bool:
        ...

    @is_underflow_bin.setter
    def is_underflow_bin(self, value: bool):
        ...

    @property
    def is_automatic_underflow_bin(self) -> bool:
        ...

    @is_automatic_underflow_bin.setter
    def is_automatic_underflow_bin(self, value: bool):
        ...

    @property
    def underflow_bin(self) -> float:
        ...

    @underflow_bin.setter
    def underflow_bin(self, value: float):
        ...

    @property
    def as_i_formatted_text_container(self) -> IFormattedTextContainer:
        ...

    @property
    def as_i_chart_component(self) -> IChartComponent:
        ...

    @property
    def as_i_slide_component(self) -> ISlideComponent:
        ...

    @property
    def slide(self) -> IBaseSlide:
        ...

    @property
    def as_i_presentation_component(self) -> IPresentationComponent:
        ...

    @property
    def presentation(self) -> IPresentation:
        ...

    ...

class AxisFormat:
    '''Represents chart format properties.'''
    @property
    def fill(self) -> IFillFormat:
        '''Returns fill style properties of an axis.
                    Read-only :py:class:`aspose.slides.IFillFormat`.'''
        ...

    @property
    def line(self) -> ILineFormat:
        '''Returns line style properties of an axis.
                    Read-only :py:class:`aspose.slides.ILineFormat`.'''
        ...

    @property
    def effect(self) -> IEffectFormat:
        '''Returns effects used for an axis.
                    Read-only :py:class:`aspose.slides.IEffectFormat`.'''
        ...

    ...

class BaseChartValue:
    '''Represents a value of a chart.'''
    @property
    def data_source_type(self) -> DataSourceType:
        ...

    @data_source_type.setter
    def data_source_type(self, value: DataSourceType):
        ...

    @property
    def data(self) -> any:
        '''Data.
                    Read/write :py:class:`any`.'''
        ...

    @data.setter
    def data(self, value: any):
        '''Data.
                    Read/write :py:class:`any`.'''
        ...

    ...

class CannotCombine2DAnd3DChartsException:
    '''Exception which thrown when trying to combine 2D and 3D chart types.'''
    def __init__(self):
        '''Default constructor.'''
        ...

    def __init__(self, message: str):
        '''Constructor allowing a message to be added to this exception.
        :param message: message'''
        ...

    ...

class Chart(aspose.slides.GraphicalObject):
    '''Represents an graphic chart on a slide.'''
    @overload
    def get_thumbnail(self) -> aspose.pydrawing.Bitmap:
        '''Returns shape thumbnail.
                    ShapeThumbnailBounds.Shape shape thumbnail bounds type is used by default.
        :returns: Shape thumbnail.'''
        ...

    @overload
    def get_thumbnail(self, bounds: ShapeThumbnailBounds, scale_x: float, scale_y: float) -> aspose.pydrawing.Bitmap:
        '''Returns shape thumbnail.
        :param bounds: Shape thumbnail bounds type.
        :param scale_x: X scale
        :param scale_y: Y scale
        :returns: Shape thumbnail or None in case when ShapeThumbnailBounds.Appearance is used and a shape doesn't have visible elements.'''
        ...

    @overload
    def get_image(self) -> IImage:
        '''Returns shape thumbnail.
                    ShapeThumbnailBounds.Shape shape thumbnail bounds type is used by default.
        :returns: Shape thumbnail.'''
        ...

    @overload
    def get_image(self, bounds: ShapeThumbnailBounds, scale_x: float, scale_y: float) -> IImage:
        '''Returns shape thumbnail.
        :param bounds: Shape thumbnail bounds type.
        :param scale_x: X scale
        :param scale_y: Y scale
        :returns: Shape thumbnail or None in case when ShapeThumbnailBounds.Appearance is used and a shape doesn't have visible elements.'''
        ...

    @overload
    def write_as_svg(self, stream: io.RawIOBase) -> None:
        '''Saves content of Shape as SVG file.
        :param stream: Target stream'''
        ...

    @overload
    def write_as_svg(self, stream: io.RawIOBase, svg_options: aspose.slides.export.ISVGOptions) -> None:
        '''Saves content of Shape as SVG file.
        :param stream: Target stream
        :param svg_options: SVG generation options'''
        ...

    def remove_placeholder(self) -> None:
        '''Defines that this shape isn't a placeholder.'''
        ...

    def add_placeholder(self, placeholder_to_copy_from: IPlaceholder) -> IPlaceholder:
        '''Adds a new placeholder if there is no and sets placeholder properties to a specified one.
        :param placeholder_to_copy_from: Placeholder to copy content from.
        :returns: New :py:attr:`aspose.slides.Shape.placeholder`.'''
        ...

    def get_base_placeholder(self) -> IShape:
        '''Returns a basic placeholder shape (shape from the layout and/or master slide that the current shape is inherited from).'''
        ...

    def validate_chart_layout(self) -> None:
        '''Calculates actual values of chart elements. The actual values include position of elements that implement IActualLayout interface 
                    (IActualLayout.ActualX, IActualLayout.ActualY, IActualLayout.ActualWidth, IActualLayout.ActualHeight)
                    and actual axes values (IAxis.ActualMaxValue, IAxis.ActualMinValue, IAxis.ActualMajorUnit, IAxis.ActualMinorUnit, 
                    IAxis.ActualMajorUnitScale, IAxis.ActualMinorUnitScale)'''
        ...

    def create_theme_effective(self) -> aspose.slides.theme.IThemeEffectiveData:
        '''Returns an effective theme for this chart.'''
        ...

    @property
    def is_text_holder(self) -> bool:
        ...

    @property
    def placeholder(self) -> IPlaceholder:
        '''Returns the placeholder for a shape. Returns None if the shape has no placeholder.
                    Read-only :py:class:`aspose.slides.IPlaceholder`.'''
        ...

    @property
    def custom_data(self) -> ICustomData:
        ...

    @property
    def raw_frame(self) -> IShapeFrame:
        ...

    @raw_frame.setter
    def raw_frame(self, value: IShapeFrame):
        ...

    @property
    def frame(self) -> IShapeFrame:
        '''Returns or sets the shape frame's properties.
                    Read/write :py:class:`aspose.slides.IShapeFrame`.'''
        ...

    @frame.setter
    def frame(self, value: IShapeFrame):
        '''Returns or sets the shape frame's properties.
                    Read/write :py:class:`aspose.slides.IShapeFrame`.'''
        ...

    @property
    def line_format(self) -> ILineFormat:
        ...

    @property
    def three_d_format(self) -> IThreeDFormat:
        ...

    @property
    def effect_format(self) -> IEffectFormat:
        ...

    @property
    def fill_format(self) -> IFillFormat:
        ...

    @property
    def hyperlink_click(self) -> IHyperlink:
        ...

    @hyperlink_click.setter
    def hyperlink_click(self, value: IHyperlink):
        ...

    @property
    def hyperlink_mouse_over(self) -> IHyperlink:
        ...

    @hyperlink_mouse_over.setter
    def hyperlink_mouse_over(self, value: IHyperlink):
        ...

    @property
    def hyperlink_manager(self) -> IHyperlinkManager:
        ...

    @property
    def hidden(self) -> bool:
        '''Determines whether the shape is hidden.
                    Read/write :py:class:`bool`.'''
        ...

    @hidden.setter
    def hidden(self, value: bool):
        '''Determines whether the shape is hidden.
                    Read/write :py:class:`bool`.'''
        ...

    @property
    def z_order_position(self) -> int:
        ...

    @property
    def connection_site_count(self) -> int:
        ...

    @property
    def rotation(self) -> float:
        '''Returns or sets the number of degrees the specified shape is rotated around
                    the z-axis. A positive value indicates clockwise rotation; a negative value
                    indicates counterclockwise rotation.
                    Read/write :py:class:`float`.'''
        ...

    @rotation.setter
    def rotation(self, value: float):
        '''Returns or sets the number of degrees the specified shape is rotated around
                    the z-axis. A positive value indicates clockwise rotation; a negative value
                    indicates counterclockwise rotation.
                    Read/write :py:class:`float`.'''
        ...

    @property
    def x(self) -> float:
        '''Returns or sets the x-coordinate of the upper-left corner of the shape.
                    Read/write :py:class:`float`.'''
        ...

    @x.setter
    def x(self, value: float):
        '''Returns or sets the x-coordinate of the upper-left corner of the shape.
                    Read/write :py:class:`float`.'''
        ...

    @property
    def y(self) -> float:
        '''Returns or sets the y-coordinate of the upper-left corner of the shape.
                    Read/write :py:class:`float`.'''
        ...

    @y.setter
    def y(self, value: float):
        '''Returns or sets the y-coordinate of the upper-left corner of the shape.
                    Read/write :py:class:`float`.'''
        ...

    @property
    def width(self) -> float:
        '''Returns or sets the width of the shape.
                    Read/write :py:class:`float`.'''
        ...

    @width.setter
    def width(self, value: float):
        '''Returns or sets the width of the shape.
                    Read/write :py:class:`float`.'''
        ...

    @property
    def height(self) -> float:
        '''Returns or sets the height of the shape.
                    Read/write :py:class:`float`.'''
        ...

    @height.setter
    def height(self, value: float):
        '''Returns or sets the height of the shape.
                    Read/write :py:class:`float`.'''
        ...

    @property
    def black_white_mode(self) -> BlackWhiteMode:
        ...

    @black_white_mode.setter
    def black_white_mode(self, value: BlackWhiteMode):
        ...

    @property
    def unique_id(self) -> int:
        ...

    @property
    def office_interop_shape_id(self) -> int:
        ...

    @property
    def alternative_text(self) -> str:
        ...

    @alternative_text.setter
    def alternative_text(self, value: str):
        ...

    @property
    def alternative_text_title(self) -> str:
        ...

    @alternative_text_title.setter
    def alternative_text_title(self, value: str):
        ...

    @property
    def name(self) -> str:
        '''Returns or sets the name of a shape.
                    Must be not None. Use empty string value if needed.
                    Read/write :py:class:`str`.'''
        ...

    @name.setter
    def name(self, value: str):
        '''Returns or sets the name of a shape.
                    Must be not None. Use empty string value if needed.
                    Read/write :py:class:`str`.'''
        ...

    @property
    def is_decorative(self) -> bool:
        ...

    @is_decorative.setter
    def is_decorative(self, value: bool):
        ...

    @property
    def shape_lock(self) -> IGraphicalObjectLock:
        ...

    @property
    def is_grouped(self) -> bool:
        ...

    @property
    def parent_group(self) -> IGroupShape:
        ...

    @property
    def slide(self) -> IBaseSlide:
        '''Returns the parent slide of a shape.
                    Read-only :py:class:`aspose.slides.IBaseSlide`.'''
        ...

    @property
    def presentation(self) -> IPresentation:
        '''Returns the parent presentation of a slide.
                    Read-only :py:class:`aspose.slides.IPresentation`.'''
        ...

    @property
    def graphical_object_lock(self) -> IGraphicalObjectLock:
        ...

    @property
    def plot_visible_cells_only(self) -> bool:
        ...

    @plot_visible_cells_only.setter
    def plot_visible_cells_only(self, value: bool):
        ...

    @property
    def display_blanks_as(self) -> DisplayBlanksAsType:
        ...

    @display_blanks_as.setter
    def display_blanks_as(self, value: DisplayBlanksAsType):
        ...

    @property
    def chart_data(self) -> IChartData:
        ...

    @property
    def has_title(self) -> bool:
        ...

    @has_title.setter
    def has_title(self, value: bool):
        ...

    @property
    def chart_title(self) -> IChartTitle:
        ...

    @property
    def has_data_table(self) -> bool:
        ...

    @has_data_table.setter
    def has_data_table(self, value: bool):
        ...

    @property
    def has_legend(self) -> bool:
        ...

    @has_legend.setter
    def has_legend(self, value: bool):
        ...

    @property
    def legend(self) -> ILegend:
        '''Returns or sets a legend for a chart.
                    Read-only :py:class:`aspose.slides.charts.ILegend`.'''
        ...

    @property
    def chart_data_table(self) -> IDataTable:
        ...

    @property
    def style(self) -> StyleType:
        '''Returns or sets the chart style.
                    Read/write :py:enum:`aspose.slides.charts.StyleType`.'''
        ...

    @style.setter
    def style(self, value: StyleType):
        '''Returns or sets the chart style.
                    Read/write :py:enum:`aspose.slides.charts.StyleType`.'''
        ...

    @property
    def type(self) -> ChartType:
        '''Returns or sets the chart type.
                    Read/write :py:enum:`aspose.slides.charts.ChartType`.'''
        ...

    @type.setter
    def type(self, value: ChartType):
        '''Returns or sets the chart type.
                    Read/write :py:enum:`aspose.slides.charts.ChartType`.'''
        ...

    @property
    def plot_area(self) -> IChartPlotArea:
        ...

    @property
    def rotation_3d(self) -> IRotation3D:
        ...

    @property
    def back_wall(self) -> IChartWall:
        ...

    @property
    def side_wall(self) -> IChartWall:
        ...

    @property
    def floor(self) -> IChartWall:
        '''Returns an object which allows to change format of the floor of a 3D chart.
                    Read-only :py:class:`aspose.slides.charts.IChartWall`.'''
        ...

    @property
    def text_format(self) -> IChartTextFormat:
        ...

    @property
    def theme_manager(self) -> aspose.slides.theme.IOverrideThemeManager:
        ...

    @property
    def user_shapes(self) -> IGroupShape:
        ...

    @property
    def axes(self) -> IAxesManager:
        '''Provide access to chart axes.
                    Read-only :py:class:`aspose.slides.charts.IAxesManager`.'''
        ...

    @property
    def show_data_labels_over_maximum(self) -> bool:
        ...

    @show_data_labels_over_maximum.setter
    def show_data_labels_over_maximum(self, value: bool):
        ...

    @property
    def has_rounded_corners(self) -> bool:
        ...

    @has_rounded_corners.setter
    def has_rounded_corners(self, value: bool):
        ...

    @property
    def as_i_formatted_text_container(self) -> IFormattedTextContainer:
        ...

    @property
    def as_i_themeable(self) -> aspose.slides.theme.IThemeable:
        ...

    @property
    def as_i_hyperlink_container(self) -> IHyperlinkContainer:
        ...

    @property
    def as_i_presentation_component(self) -> IPresentationComponent:
        ...

    @property
    def as_i_shape(self) -> IShape:
        ...

    @property
    def as_i_graphical_object(self) -> IGraphicalObject:
        ...

    @property
    def as_i_override_themeable(self) -> aspose.slides.theme.IOverrideThemeable:
        ...

    @property
    def as_i_chart_component(self) -> IChartComponent:
        ...

    @property
    def chart(self) -> IChart:
        ...

    ...

class ChartCategory:
    '''Represents chart categories.'''
    def remove(self) -> None:
        '''Removes category from chart.'''
        ...

    @property
    def use_cell(self) -> bool:
        ...

    @property
    def as_cell(self) -> IChartDataCell:
        ...

    @as_cell.setter
    def as_cell(self, value: IChartDataCell):
        ...

    @property
    def as_literal(self) -> any:
        ...

    @as_literal.setter
    def as_literal(self, value: any):
        ...

    @property
    def value(self) -> any:
        '''If UseCell is true then this property represents AsCell.Value property.
                    If UseCell is false then this property represents AsLiteral property.
                    Read/write :py:class:`any`.'''
        ...

    @value.setter
    def value(self, value: any):
        '''If UseCell is true then this property represents AsCell.Value property.
                    If UseCell is false then this property represents AsLiteral property.
                    Read/write :py:class:`any`.'''
        ...

    @property
    def grouping_levels(self) -> IChartCategoryLevelsManager:
        ...

    ...

class ChartCategoryCollection:
    '''Represents collection of :py:class:`aspose.slides.charts.ChartCategory`'''
    @overload
    def add(self, chart_data_cell: IChartDataCell) -> IChartCategory:
        '''If category exists in collection, return it. Else creates new chart category from 
                    :py:class:`aspose.slides.charts.IChartDataCell` and adds it to the collection.
        :param chart_data_cell: Cell used to create chart category.
        :returns: Added or existing category.'''
        ...

    @overload
    def add(self, value: any) -> IChartCategory:
        '''Creates new :py:class:`aspose.slides.charts.ChartCategory` from value and adds it to the collection.
        :param value: The value.
        :returns: Added :py:class:`aspose.slides.charts.IChartCategory`.'''
        ...

    def index_of(self, value: IChartCategory) -> int:
        '''Searches for the specified :py:class:`aspose.slides.charts.ChartCategory` and returns the zero-based index of the first occurrence within the entire Collection.
        :param value: Chart category.
        :returns: The zero-based index of the first occurrence of value within the entire CollectionBase, if found; otherwise, -1.'''
        ...

    def remove(self, value: IChartCategory) -> None:
        '''Removes the specified value.
        :param value: The value.'''
        ...

    def remove_at(self, index: int) -> None:
        '''Removes the element at the given index.
        :param index: Index of a category to remove.'''
        ...

    def clear(self) -> None:
        '''Removes all elements from the collection.'''
        ...

    @property
    def use_cells(self) -> bool:
        ...

    @use_cells.setter
    def use_cells(self, value: bool):
        ...

    @property
    def grouping_level_count(self) -> int:
        ...

    @property
    def as_i_collection(self) -> list:
        ...

    @property
    def as_i_enumerable(self) -> collections.abc.Iterable:
        ...

    def __getitem__(self, key: int) -> IChartCategory
        ...

    ...

class ChartCategoryLevelsManager:
    '''Managed container of the values of the chart category levels.'''
    def set_grouping_item(self, level: int, value: any) -> None:
        '''Sets grouping item for defined level.'''
        ...

    def delete_grouping_item(self, level: int) -> None:
        '''Delete grouping item for defined level.'''
        ...

    def __getitem__(self, key: int) -> IChartDataCell
        ...

    ...

class ChartCellCollection:
    '''Represents collection of a cells with data.'''
    @overload
    def add(self, cell: IChartDataCell) -> None:
        '''Add new cell to the collection.
        :param cell: New cell to add.'''
        ...

    @overload
    def add(self, value: any) -> None:
        '''Creates :py:class:`aspose.slides.charts.ChartDataCell` from specified value and adds it to the collection.
        :param value: The value.'''
        ...

    def get_cells_address(self) -> str:
        '''Returns address of the set of cells in workbook.'''
        ...

    def get_concatenated_values_from_cells(self) -> str:
        '''Concatenation string from all cells string values.'''
        ...

    def remove_at(self, index: int) -> None:
        '''Removes a cell from the collection by index.
        :param index: Index of a cell to remove.'''
        ...

    @property
    def count(self) -> int:
        '''Gets the count of cells in collection.
                    Read-only :py:class:`int`.'''
        ...

    @property
    def as_i_enumerable(self) -> collections.abc.Iterable:
        ...

    def __getitem__(self, key: int) -> IChartDataCell
        ...

    ...

class ChartData:
    '''Represents data used for a chart plotting.'''
    @overload
    def set_external_workbook(self, workbook_path: str) -> None:
        '''Sets external workbook as a data source for the chart. Chart data will be updated from the target workbook.
        :param workbook_path: Path to the target workbook'''
        ...

    @overload
    def set_external_workbook(self, workbook_path: str, update_chart_data: bool) -> None:
        '''Sets external workbook as a data source for the chart.
        :param workbook_path: Path to the target workbook
        :param update_chart_data: If value is false only workbook path will be updated. 
                     Chart data won't be loaded and updated from the target workbook. Can be used when target workbook doesn't exist or it's not available.
                     If value is true chart data will be updated from the target workbook.'''
        ...

    def get_range(self) -> str:
        '''Gets chart data range.
        :returns: Cells data range formula. E.g: "Sheet1!$A$1:$C$4"'''
        ...

    def set_range(self, formula: str) -> None:
        '''Set chart data range. Series and categories will be updated based on new data range.
                    If amount of series in data range greater than count of series in the chart data then additional series with the same type
                    as a last series in the current collection will be added to the end of the collection.
        :param formula: The cells data range formula. E.g: "Sheet1!$A$1:$C$4" , "SomeSheetName!A1:B100", "Sheet1!$A$1:$B$5;Sheet1!$D$1:$D$5".'''
        ...

    def switch_row_column(self) -> None:
        '''Swap the data over the axis.
                    Data being charted on the X axis will move to the Y axis and vice versa.'''
        ...

    @property
    def chart_data_workbook(self) -> IChartDataWorkbook:
        ...

    @property
    def series(self) -> IChartSeriesCollection:
        '''Gets the series.
                    Read-only :py:class:`aspose.slides.charts.IChartSeriesCollection`.'''
        ...

    @property
    def series_groups(self) -> IChartSeriesGroupCollection:
        ...

    @property
    def categories(self) -> IChartCategoryCollection:
        '''Gets the primary categories (or both primary and secondary categories 
                    if :py:attr:`aspose.slides.charts.ChartData.use_secondary_categories` property is false).
                    Read-only :py:class:`aspose.slides.charts.IChartCategoryCollection`.'''
        ...

    @property
    def use_secondary_categories(self) -> bool:
        ...

    @use_secondary_categories.setter
    def use_secondary_categories(self, value: bool):
        ...

    @property
    def secondary_categories(self) -> IChartCategoryCollection:
        ...

    @property
    def data_source_type(self) -> ChartDataSourceType:
        ...

    @property
    def external_workbook_path(self) -> str:
        ...

    ...

class ChartDataCell:
    '''Represents cell for chart data.'''
    def calculate(self, update_values: bool) -> None:
        '''If the cell contains a formula, the value will be updated base on that formula.
        :param update_values: If false, no actual calculation will be performed. Use true for possible exceptions check.'''
        ...

    @property
    def row(self) -> int:
        '''Returns the index of the row of worksheet in which the cell is located.
                    Read-only :py:class:`int`.'''
        ...

    @property
    def column(self) -> int:
        '''Returns the index of the column of worksheet in which the cell is located.
                    Read-only :py:class:`int`.'''
        ...

    @property
    def value(self) -> any:
        '''Gets or sets the value of a cell.
                    Read/write :py:class:`any`.'''
        ...

    @value.setter
    def value(self, value: any):
        '''Gets or sets the value of a cell.
                    Read/write :py:class:`any`.'''
        ...

    @property
    def formula(self) -> str:
        '''Gets or sets the formula in A1-style.'''
        ...

    @formula.setter
    def formula(self, value: str):
        '''Gets or sets the formula in A1-style.'''
        ...

    @property
    def r1c1_formula(self) -> str:
        ...

    @r1c1_formula.setter
    def r1c1_formula(self, value: str):
        ...

    @property
    def chart_data_worksheet(self) -> IChartDataWorksheet:
        ...

    @property
    def is_hidden(self) -> bool:
        ...

    @property
    def custom_number_format(self) -> str:
        ...

    @custom_number_format.setter
    def custom_number_format(self, value: str):
        ...

    @property
    def preset_number_format(self) -> int:
        ...

    @preset_number_format.setter
    def preset_number_format(self, value: int):
        ...

    ...

class ChartDataPoint:
    '''Represents series data point.'''
    def remove(self) -> None:
        '''Removes DataPoint from chart series.'''
        ...

    def get_automatic_data_point_color(self) -> aspose.pydrawing.Color:
        '''Returns an automatic color of data point based on series index, data point index, ParentSeriesGroup.IsColorVaried property and chart style.
                    This color is used by default if FillType equals NotDefined.'''
        ...

    @property
    def x_value(self) -> IStringOrDoubleChartValue:
        ...

    @property
    def y_value(self) -> IDoubleChartValue:
        ...

    @property
    def bubble_size(self) -> IDoubleChartValue:
        ...

    @property
    def value(self) -> IDoubleChartValue:
        '''Value.
                    Read-only :py:class:`aspose.slides.charts.IDoubleChartValue`.'''
        ...

    @property
    def size_value(self) -> IDoubleChartValue:
        ...

    @property
    def color_value(self) -> IDoubleChartValue:
        ...

    @property
    def error_bars_custom_values(self) -> IErrorBarsCustomValues:
        ...

    @property
    def label(self) -> IDataLabel:
        '''Label.
                    Read-only :py:class:`aspose.slides.charts.IDataLabel`.'''
        ...

    @property
    def is_bubble_3d(self) -> bool:
        ...

    @is_bubble_3d.setter
    def is_bubble_3d(self, value: bool):
        ...

    @property
    def explosion(self) -> int:
        '''Specifies the amount the data point shall be moved from the center of the pie.
                    Read/write :py:class:`int`.'''
        ...

    @explosion.setter
    def explosion(self, value: int):
        '''Specifies the amount the data point shall be moved from the center of the pie.
                    Read/write :py:class:`int`.'''
        ...

    @property
    def format(self) -> IFormat:
        '''Represents the formatting properties.
                    Read/write :py:class:`aspose.slides.charts.IFormat`.'''
        ...

    @format.setter
    def format(self, value: IFormat):
        '''Represents the formatting properties.
                    Read/write :py:class:`aspose.slides.charts.IFormat`.'''
        ...

    @property
    def marker(self) -> IMarker:
        '''Specifies a data marker.
                    Read-only :py:class:`aspose.slides.charts.IMarker`.'''
        ...

    @property
    def set_as_total(self) -> bool:
        ...

    @set_as_total.setter
    def set_as_total(self, value: bool):
        ...

    @property
    def related_legend_entry(self) -> ILegendEntryProperties:
        ...

    @property
    def data_point_levels(self) -> IChartDataPointLevelsManager:
        ...

    @property
    def index(self) -> int:
        ...

    @property
    def invert_if_negative(self) -> bool:
        ...

    @invert_if_negative.setter
    def invert_if_negative(self, value: bool):
        ...

    @property
    def actual_x(self) -> float:
        ...

    @property
    def actual_y(self) -> float:
        ...

    @property
    def actual_width(self) -> float:
        ...

    @property
    def actual_height(self) -> float:
        ...

    @property
    def as_i_actual_layout(self) -> IActualLayout:
        ...

    ...

class ChartDataPointCollection:
    '''Represents collection of a series data point.'''
    @overload
    def add_data_point_for_stock_series(self, value: IChartDataCell) -> IChartDataPoint:
        '''Creates the new data point and adds it to the end of collection.
                    Applicable for series which chartType is one of Stock subtypes
                    (see also :py:func:`Aspose.Slides.Charts.ChartTypeCharacterizer.IsChartTypeStock(Aspose.Slides.Chart.` method).
        :param value: Data point Value.
        :returns: New data point.'''
        ...

    @overload
    def add_data_point_for_stock_series(self, value: float) -> IChartDataPoint:
        '''Creates the new data point and adds it to the end of collection.
                    Applicable for series which chartType is one of Stock subtypes 
                    (see also :py:func:`Aspose.Slides.Charts.ChartTypeCharacterizer.IsChartTypeStock(Aspose.Slides.Chart.` method).
        :param value: Data point Value.
        :returns: New data point.'''
        ...

    @overload
    def add_data_point_for_line_series(self, value: IChartDataCell) -> IChartDataPoint:
        '''Creates the new data point and adds it to the end of collection.
                    Applicable for series which chartType is one of Line subtypes (see also :py:func:`Aspose.Slides.Charts.ChartTypeCharacterizer.IsChartTypeLine(Aspose.Slides.Chart.` method).
        :param value: Data point Value.
        :returns: New data point.'''
        ...

    @overload
    def add_data_point_for_line_series(self, value: float) -> IChartDataPoint:
        '''Creates the new data point and adds it to the end of collection.
                    Applicable for series which chartType is one of Line subtypes (see also :py:func:`Aspose.Slides.Charts.ChartTypeCharacterizer.IsChartTypeLine(Aspose.Slides.Chart.` method).
        :param value: Data point Value.
        :returns: New data point.'''
        ...

    @overload
    def add_data_point_for_scatter_series(self, x_value: IChartDataCell, y_value: IChartDataCell) -> IChartDataPoint:
        '''Creates the new data point and adds it to the end of collection.
                    Applicable for series which chartType is one of Scatter subtypes (see also :py:func:`Aspose.Slides.Charts.ChartTypeCharacterizer.IsChartTypeScatter(Aspose.Slides.Chart.` method).
        :param x_value: Data point XValue
        :param y_value: Data point YValue
        :returns: New data point.'''
        ...

    @overload
    def add_data_point_for_scatter_series(self, x_value: float, y_value: IChartDataCell) -> IChartDataPoint:
        '''Creates the new data point and adds it to the end of collection.
                    Applicable for series which chartType is one of Scatter subtypes (see also :py:func:`Aspose.Slides.Charts.ChartTypeCharacterizer.IsChartTypeScatter(Aspose.Slides.Chart.` method).
        :param x_value: Data point XValue
        :param y_value: Data point YValue
        :returns: New data point.'''
        ...

    @overload
    def add_data_point_for_scatter_series(self, x_value: str, y_value: IChartDataCell) -> IChartDataPoint:
        '''Creates the new data point and adds it to the end of collection.
                    Applicable for series which chartType is one of Scatter subtypes (see also :py:func:`Aspose.Slides.Charts.ChartTypeCharacterizer.IsChartTypeScatter(Aspose.Slides.Chart.` method).
        :param x_value: Data point XValue
        :param y_value: Data point YValue
        :returns: New data point.'''
        ...

    @overload
    def add_data_point_for_scatter_series(self, x_value: IChartDataCell, y_value: float) -> IChartDataPoint:
        '''Creates the new data point and adds it to the end of collection.
                    Applicable for series which chartType is one of Scatter subtypes (see also :py:func:`Aspose.Slides.Charts.ChartTypeCharacterizer.IsChartTypeScatter(Aspose.Slides.Chart.` method).
        :param x_value: Data point XValue
        :param y_value: Data point YValue
        :returns: New data point.'''
        ...

    @overload
    def add_data_point_for_scatter_series(self, x_value: float, y_value: float) -> IChartDataPoint:
        '''Creates the new data point and adds it to the end of collection.
                    Applicable for series which chartType is one of Scatter subtypes (see also :py:func:`Aspose.Slides.Charts.ChartTypeCharacterizer.IsChartTypeScatter(Aspose.Slides.Chart.` method).
        :param x_value: Data point XValue
        :param y_value: Data point YValue
        :returns: New data point.'''
        ...

    @overload
    def add_data_point_for_scatter_series(self, x_value: str, y_value: float) -> IChartDataPoint:
        '''Creates the new data point and adds it to the end of collection.
                    Applicable for series which chartType is one of Scatter subtypes (see also :py:func:`Aspose.Slides.Charts.ChartTypeCharacterizer.IsChartTypeScatter(Aspose.Slides.Chart.` method).
        :param x_value: Data point XValue
        :param y_value: Data point YValue
        :returns: New data point.'''
        ...

    @overload
    def add_data_point_for_radar_series(self, value: IChartDataCell) -> IChartDataPoint:
        '''Creates the new data point and adds it to the end of collection.
                    Applicable for series which chartType is one of Radar subtypes (see also :py:func:`Aspose.Slides.Charts.ChartTypeCharacterizer.IsChartTypeRadar(Aspose.Slides.Chart.` method).
        :param value: Data point Value
        :returns: New data point.'''
        ...

    @overload
    def add_data_point_for_radar_series(self, value: float) -> IChartDataPoint:
        '''Creates the new data point and adds it to the end of collection.
                    Applicable for series which chartType is one of Radar subtypes (see also :py:func:`Aspose.Slides.Charts.ChartTypeCharacterizer.IsChartTypeRadar(Aspose.Slides.Chart.` method).
        :param value: Data point Value
        :returns: New data point.'''
        ...

    @overload
    def add_data_point_for_bar_series(self, value: IChartDataCell) -> IChartDataPoint:
        '''Creates the new data point and adds it to the end of collection.
                    Applicable for series which chartType is one of Column or Bar subtypes (see also :py:func:`Aspose.Slides.Charts.ChartTypeCharacterizer.IsChartTypeColumn(Aspose.Slides.Chart.` and :py:func:`Aspose.Slides.Charts.ChartTypeCharacterizer.IsChartTypeBar(Aspose.Slides.Chart.` method).
        :param value: Data point Value
        :returns: New data point.'''
        ...

    @overload
    def add_data_point_for_bar_series(self, value: float) -> IChartDataPoint:
        '''Creates the new data point and adds it to the end of collection.
                    Applicable for series which chartType is one of Column or Bar subtypes (see also :py:func:`Aspose.Slides.Charts.ChartTypeCharacterizer.IsChartTypeColumn(Aspose.Slides.Chart.` and :py:func:`Aspose.Slides.Charts.ChartTypeCharacterizer.IsChartTypeBar(Aspose.Slides.Chart.` method).
        :param value: Data point Value
        :returns: New data point.'''
        ...

    @overload
    def add_data_point_for_area_series(self, value: IChartDataCell) -> IChartDataPoint:
        '''Creates the new data point and adds it to the end of collection.
                    Applicable for series which chartType is one of Area subtypes (see also :py:func:`Aspose.Slides.Charts.ChartTypeCharacterizer.IsChartTypeArea(Aspose.Slides.Chart.` method).
        :param value: Data point Value
        :returns: New data point.'''
        ...

    @overload
    def add_data_point_for_area_series(self, value: float) -> IChartDataPoint:
        '''Creates the new data point and adds it to the end of collection.
                    Applicable for series which chartType is one of Area subtypes (see also :py:func:`Aspose.Slides.Charts.ChartTypeCharacterizer.IsChartTypeArea(Aspose.Slides.Chart.` method).
        :param value: Data point Value
        :returns: New data point.'''
        ...

    @overload
    def add_data_point_for_pie_series(self, value: IChartDataCell) -> IChartDataPoint:
        '''Creates the new data point and adds it to the end of collection.
                    Applicable for series which chartType is one of Pie subtypes (see also :py:func:`Aspose.Slides.Charts.ChartTypeCharacterizer.IsChartTypePie(Aspose.Slides.Chart.` method).
        :param value: Data point Value
        :returns: New data point.'''
        ...

    @overload
    def add_data_point_for_pie_series(self, value: float) -> IChartDataPoint:
        '''Creates the new data point and adds it to the end of collection.
                    Applicable for series which chartType is one of Pie subtypes (see also :py:func:`Aspose.Slides.Charts.ChartTypeCharacterizer.IsChartTypePie(Aspose.Slides.Chart.` method).
        :param value: Data point Value
        :returns: New data point.'''
        ...

    @overload
    def add_data_point_for_doughnut_series(self, value: IChartDataCell) -> IChartDataPoint:
        '''Creates the new data point and adds it to the end of collection.
                    Applicable for series which chartType is one of Doughnut subtypes (see also :py:func:`Aspose.Slides.Charts.ChartTypeCharacterizer.IsChartTypeDoughnut(Aspose.Slides.Chart.` method).
        :param value: Data point Value
        :returns: New data point.'''
        ...

    @overload
    def add_data_point_for_doughnut_series(self, value: float) -> IChartDataPoint:
        '''Creates the new data point and adds it to the end of collection.
                    Applicable for series which chartType is one of Doughnut subtypes (see also :py:func:`Aspose.Slides.Charts.ChartTypeCharacterizer.IsChartTypeDoughnut(Aspose.Slides.Chart.` method).
        :param value: Data point Value
        :returns: New data point.'''
        ...

    @overload
    def add_data_point_for_bubble_series(self, x_value: IChartDataCell, y_value: IChartDataCell, bubble_size: IChartDataCell) -> IChartDataPoint:
        '''Creates the new data point and adds it to the end of collection.
                    Applicable for series which chartType is one of Bubble subtypes (see also :py:func:`Aspose.Slides.Charts.ChartTypeCharacterizer.IsChartTypeBubble(Aspose.Slides.Chart.` method).
        :param x_value: Data point XValue
        :param y_value: Data point YValue
        :param bubble_size: Data point BubbleSize
        :returns: New data point.'''
        ...

    @overload
    def add_data_point_for_bubble_series(self, x_value: float, y_value: IChartDataCell, bubble_size: IChartDataCell) -> IChartDataPoint:
        '''Creates the new data point and adds it to the end of collection.
                    Applicable for series which chartType is one of Bubble subtypes (see also :py:func:`Aspose.Slides.Charts.ChartTypeCharacterizer.IsChartTypeBubble(Aspose.Slides.Chart.` method).
        :param x_value: Data point XValue
        :param y_value: Data point YValue
        :param bubble_size: Data point BubbleSize
        :returns: New data point.'''
        ...

    @overload
    def add_data_point_for_bubble_series(self, x_value: str, y_value: IChartDataCell, bubble_size: IChartDataCell) -> IChartDataPoint:
        '''Creates the new data point and adds it to the end of collection.
                    Applicable for series which chartType is one of Bubble subtypes (see also :py:func:`Aspose.Slides.Charts.ChartTypeCharacterizer.IsChartTypeBubble(Aspose.Slides.Chart.` method).
        :param x_value: Data point XValue
        :param y_value: Data point YValue
        :param bubble_size: Data point BubbleSize
        :returns: New data point.'''
        ...

    @overload
    def add_data_point_for_bubble_series(self, x_value: IChartDataCell, y_value: float, bubble_size: IChartDataCell) -> IChartDataPoint:
        '''Creates the new data point and adds it to the end of collection.
                    Applicable for series which chartType is one of Bubble subtypes (see also :py:func:`Aspose.Slides.Charts.ChartTypeCharacterizer.IsChartTypeBubble(Aspose.Slides.Chart.` method).
        :param x_value: Data point XValue
        :param y_value: Data point YValue
        :param bubble_size: Data point BubbleSize
        :returns: New data point.'''
        ...

    @overload
    def add_data_point_for_bubble_series(self, x_value: float, y_value: float, bubble_size: IChartDataCell) -> IChartDataPoint:
        '''Creates the new data point and adds it to the end of collection.
                    Applicable for series which chartType is one of Bubble subtypes (see also :py:func:`Aspose.Slides.Charts.ChartTypeCharacterizer.IsChartTypeBubble(Aspose.Slides.Chart.` method).
        :param x_value: Data point XValue
        :param y_value: Data point YValue
        :param bubble_size: Data point BubbleSize
        :returns: New data point.'''
        ...

    @overload
    def add_data_point_for_bubble_series(self, x_value: str, y_value: float, bubble_size: IChartDataCell) -> IChartDataPoint:
        '''Creates the new data point and adds it to the end of collection.
                    Applicable for series which chartType is one of Bubble subtypes (see also :py:func:`Aspose.Slides.Charts.ChartTypeCharacterizer.IsChartTypeBubble(Aspose.Slides.Chart.` method).
        :param x_value: Data point XValue
        :param y_value: Data point YValue
        :param bubble_size: Data point BubbleSize
        :returns: New data point.'''
        ...

    @overload
    def add_data_point_for_bubble_series(self, x_value: IChartDataCell, y_value: IChartDataCell, bubble_size: float) -> IChartDataPoint:
        '''Creates the new data point and adds it to the end of collection.
                    Applicable for series which chartType is one of Bubble subtypes (see also :py:func:`Aspose.Slides.Charts.ChartTypeCharacterizer.IsChartTypeBubble(Aspose.Slides.Chart.` method).
        :param x_value: Data point XValue
        :param y_value: Data point YValue
        :param bubble_size: Data point BubbleSize
        :returns: New data point.'''
        ...

    @overload
    def add_data_point_for_bubble_series(self, x_value: float, y_value: IChartDataCell, bubble_size: float) -> IChartDataPoint:
        '''Creates the new data point and adds it to the end of collection.
                    Applicable for series which chartType is one of Bubble subtypes (see also :py:func:`Aspose.Slides.Charts.ChartTypeCharacterizer.IsChartTypeBubble(Aspose.Slides.Chart.` method).
        :param x_value: Data point XValue
        :param y_value: Data point YValue
        :param bubble_size: Data point BubbleSize
        :returns: New data point.'''
        ...

    @overload
    def add_data_point_for_bubble_series(self, x_value: str, y_value: IChartDataCell, bubble_size: float) -> IChartDataPoint:
        '''Creates the new data point and adds it to the end of collection.
                    Applicable for series which chartType is one of Bubble subtypes (see also :py:func:`Aspose.Slides.Charts.ChartTypeCharacterizer.IsChartTypeBubble(Aspose.Slides.Chart.` method).
        :param x_value: Data point XValue
        :param y_value: Data point YValue
        :param bubble_size: Data point BubbleSize
        :returns: New data point.'''
        ...

    @overload
    def add_data_point_for_bubble_series(self, x_value: IChartDataCell, y_value: float, bubble_size: float) -> IChartDataPoint:
        '''Creates the new data point and adds it to the end of collection.
                    Applicable for series which chartType is one of Bubble subtypes (see also :py:func:`Aspose.Slides.Charts.ChartTypeCharacterizer.IsChartTypeBubble(Aspose.Slides.Chart.` method).
        :param x_value: Data point XValue
        :param y_value: Data point YValue
        :param bubble_size: Data point BubbleSize
        :returns: New data point.'''
        ...

    @overload
    def add_data_point_for_bubble_series(self, x_value: float, y_value: float, bubble_size: float) -> IChartDataPoint:
        '''Creates the new data point and adds it to the end of collection.
                    Applicable for series which chartType is one of Bubble subtypes (see also :py:func:`Aspose.Slides.Charts.ChartTypeCharacterizer.IsChartTypeBubble(Aspose.Slides.Chart.` method).
        :param x_value: Data point XValue
        :param y_value: Data point YValue
        :param bubble_size: Data point BubbleSize
        :returns: New data point.'''
        ...

    @overload
    def add_data_point_for_bubble_series(self, x_value: str, y_value: float, bubble_size: float) -> IChartDataPoint:
        '''Creates the new data point and adds it to the end of collection.
                    Applicable for series which chartType is one of Bubble subtypes (see also :py:func:`Aspose.Slides.Charts.ChartTypeCharacterizer.IsChartTypeBubble(Aspose.Slides.Chart.` method).
        :param x_value: Data point XValue
        :param y_value: Data point YValue
        :param bubble_size: Data point BubbleSize
        :returns: New data point.'''
        ...

    @overload
    def add_data_point_for_surface_series(self, value: IChartDataCell) -> IChartDataPoint:
        '''Creates the new data point and adds it to the end of collection.
                    Applicable for series which chartType is one of Surface subtypes (see also :py:func:`Aspose.Slides.Charts.ChartTypeCharacterizer.IsChartTypeSurface(Aspose.Slides.Chart.` method).
        :param value: Data point Value
        :returns: New data point.'''
        ...

    @overload
    def add_data_point_for_surface_series(self, value: float) -> IChartDataPoint:
        '''Creates the new data point and adds it to the end of collection.
                    Applicable for series which chartType is one of Surface subtypes (see also :py:func:`Aspose.Slides.Charts.ChartTypeCharacterizer.IsChartTypeSurface(Aspose.Slides.Chart.` method).
        :param value: Data point Value
        :returns: New data point.'''
        ...

    def get_or_create_data_point_by_idx(self, index: int) -> IChartDataPoint:
        '''If collection already contains data point with index ``index`` then returns this data point.
                    If collection doesn't contains data point with index ``index``==N
                    (when number of data points in this collection is less or equal then N)
                    then adds deficient data points and returns last (which has requested index).
                    For example, collection indexes are {0, 1, 2}, and requested index is 5.
                    Then method adds deficient data points: {0, 1, 2, 3, 4, 5}. And returns data point with index 5.
        :param index: Index.
        :returns: Returns data point with requested index.'''
        ...

    def add_data_point_for_sunburst_series(self, size_value: IChartDataCell) -> IChartDataPoint:
        '''Creates the new data point and adds it to the end of collection.
                    Applicable for series which chart type is Sunburst.
        :param size_value: Data point SizeValue
        :returns: New data point.'''
        ...

    def add_data_point_for_treemap_series(self, size_value: IChartDataCell) -> IChartDataPoint:
        '''Creates the new data point and adds it to the end of collection.
                    Applicable for series which chart type is Treemap.
        :param size_value: Data point SizeValue
        :returns: New data point.'''
        ...

    def add_data_point_for_box_and_whisker_series(self, value: IChartDataCell) -> IChartDataPoint:
        '''Creates the new data point and adds it to the end of collection.
                    Applicable for series which chart type is BoxAndWhisker.
        :param value: Data point Value
        :returns: New data point.'''
        ...

    def add_data_point_for_waterfall_series(self, value: IChartDataCell) -> IChartDataPoint:
        '''Creates the new data point and adds it to the end of collection.
                    Applicable for series which chart type is Waterfall.
        :param value: Data point Value
        :returns: New data point.'''
        ...

    def add_data_point_for_histogram_series(self, value: IChartDataCell) -> IChartDataPoint:
        '''Creates the new data point and adds it to the end of collection.
                    Applicable for series which chart type is Histogram.
        :param value: Data point Value
        :returns: New data point.'''
        ...

    def add_data_point_for_funnel_series(self, value: IChartDataCell) -> IChartDataPoint:
        '''Creates the new data point and adds it to the end of collection.
                    Applicable for series which chart type is Funnel.
        :param value: Data point Value
        :returns: New data point.'''
        ...

    def add_data_point_for_map_series(self, value: IChartDataCell) -> IChartDataPoint:
        '''Creates the new data point and adds it to the end of collection.
                     Applicable for series which chart type is Map.
        :param value: Data point ColorValue
        :returns: New data point.'''
        ...

    def clear(self) -> None:
        '''Removes all elements from the collection.'''
        ...

    def remove(self, value: IChartDataPoint) -> None:
        '''Removes the specified value.
        :param value: The value.'''
        ...

    def remove_at(self, index: int) -> None:
        '''Removes the element at the given index.
        :param index: Index of a data point to remove.'''
        ...

    @property
    def data_source_type_for_x_values(self) -> DataSourceType:
        ...

    @data_source_type_for_x_values.setter
    def data_source_type_for_x_values(self, value: DataSourceType):
        ...

    @property
    def data_source_type_for_y_values(self) -> DataSourceType:
        ...

    @data_source_type_for_y_values.setter
    def data_source_type_for_y_values(self, value: DataSourceType):
        ...

    @property
    def data_source_type_for_bubble_sizes(self) -> DataSourceType:
        ...

    @data_source_type_for_bubble_sizes.setter
    def data_source_type_for_bubble_sizes(self, value: DataSourceType):
        ...

    @property
    def data_source_type_for_values(self) -> DataSourceType:
        ...

    @data_source_type_for_values.setter
    def data_source_type_for_values(self, value: DataSourceType):
        ...

    @property
    def data_source_type_for_error_bars_custom_values(self) -> IDataSourceTypeForErrorBarsCustomValues:
        ...

    @property
    def as_i_collection(self) -> list:
        ...

    @property
    def as_i_enumerable(self) -> collections.abc.Iterable:
        ...

    def __getitem__(self, key: int) -> IChartDataPoint
        ...

    ...

class ChartDataPointLevel:
    '''Represents data point level. Applies for Treemap and Sunburst chart.'''
    @property
    def format(self) -> IFormat:
        '''Represents formatting properties of data point level.
                    Read/write :py:class:`aspose.slides.charts.IFormat`.'''
        ...

    @property
    def label(self) -> IDataLabel:
        '''Represents data label of data point level. Applied for Treemap and  Sunburst sereis types.
                     Read-only :py:class:`aspose.slides.charts.IDataLabel`.'''
        ...

    ...

class ChartDataPointLevelsManager:
    '''Container of data point levels. Applied for Treeamp and Sunburst series.
                Data point levels indexing is zero-based.'''
    @property
    def count(self) -> int:
        '''Returns data point levels count.'''
        ...

    def __getitem__(self, key: int) -> IChartDataPointLevel
        ...

    ...

class ChartDataWorkbook:
    '''Provides access to embedded Excel workbook'''
    @overload
    def get_cell(self, worksheet_name: str, row: int, column: int) -> IChartDataCell:
        '''Gets the cell that can be used for chart series or categories
        :param worksheet_name: Name of the worksheet.
        :param row: The row.
        :param column: The column.
        :returns: Cell object'''
        ...

    @overload
    def get_cell(self, worksheet_index: int, row: int, column: int) -> IChartDataCell:
        '''Gets the cell that can be used for chart series or categories
        :param worksheet_index: Index of the worksheet.
        :param row: The row.
        :param column: The column.
        :returns: Cell object'''
        ...

    @overload
    def get_cell(self, worksheet_index: int, cell_name: str) -> IChartDataCell:
        '''Gets the cell that can be used for chart series or categories
        :param worksheet_index: Index of the worksheet.
        :param cell_name: Name of the cell.
        :returns: Cell object'''
        ...

    @overload
    def get_cell(self, worksheet_index: int, cell_name: str, value: any) -> IChartDataCell:
        '''Gets the cell that can be used for chart series or categories
        :param worksheet_index: Index of the worksheet.
        :param cell_name: Name of the cell.
        :param value: The value.
        :returns: Cell object'''
        ...

    @overload
    def get_cell(self, worksheet_index: int, row: int, column: int, value: any) -> IChartDataCell:
        '''Gets the cell that can be used for chart series or categories
        :param worksheet_index: Index of the worksheet.
        :param row: The row.
        :param column: The column.
        :param value: The value.
        :returns: Cell object'''
        ...

    def get_cell_collection(self, formula: str, skip_hidden_cells: bool) -> IChartCellCollection:
        '''Gets the set of cells.
        :param formula: Excel formula like "Sheet1!$A$2:$A$5".
        :param skip_hidden_cells: If true then method returns collection without hidden cells.'''
        ...

    def clear(self, sheet_index: int) -> None:
        '''Clear all cells values on sheet
        :param sheet_index: Index of sheet'''
        ...

    def calculate_formulas(self) -> None:
        '''Calculates all formulas in the workbook and updates corresponding cells values.'''
        ...

    @property
    def worksheets(self) -> IChartDataWorksheetCollection:
        '''Gets a collection of worksheets.'''
        ...

    ...

class ChartDataWorksheet:
    '''Represents worksheet associated with :py:class:`aspose.slides.charts.IChartDataCell`'''
    @property
    def name(self) -> str:
        '''Returns the name of the worksheet.
                    Read-only :py:class:`str`.'''
        ...

    @property
    def index(self) -> int:
        '''Gets the index of the worksheet.
                    Read-only :py:class:`int`.'''
        ...

    ...

class ChartDataWorksheetCollection:
    '''Represents the collection of worksheets of chart data workbook.'''
    @property
    def as_i_collection(self) -> list:
        ...

    @property
    def as_i_enumerable(self) -> collections.abc.Iterable:
        ...

    def __getitem__(self, key: int) -> IChartDataWorksheet
        ...

    ...

class ChartLinesFormat:
    '''Represents gridlines format properties.'''
    @property
    def line(self) -> ILineFormat:
        '''Returns line style properties of a chart line.
                    Read-only :py:class:`aspose.slides.ILineFormat`.'''
        ...

    @property
    def effect(self) -> IEffectFormat:
        '''Returns effects used for a chart line.
                    Read-only :py:class:`aspose.slides.IEffectFormat`.'''
        ...

    ...

class ChartPlotArea:
    '''Represents rectangle where chart should be plotted.'''
    @property
    def format(self) -> IFormat:
        '''Returns the format of a plot area.
                    Read-only :py:class:`aspose.slides.charts.IFormat`.'''
        ...

    @property
    def x(self) -> float:
        '''Returns or sets the x coordinate of the upper left corner of plot area bounding box as a fraction of the width of the chart (from 0 to 1).
                    Read/write :py:class:`float`.'''
        ...

    @x.setter
    def x(self, value: float):
        '''Returns or sets the x coordinate of the upper left corner of plot area bounding box as a fraction of the width of the chart (from 0 to 1).
                    Read/write :py:class:`float`.'''
        ...

    @property
    def y(self) -> float:
        '''Returns or sets the y coordinate of the upper left corner of plot area bounding box as a fraction of the height of the chart (from 0 to 1).
                    Read/write :py:class:`float`.'''
        ...

    @y.setter
    def y(self, value: float):
        '''Returns or sets the y coordinate of the upper left corner of plot area bounding box as a fraction of the height of the chart (from 0 to 1).
                    Read/write :py:class:`float`.'''
        ...

    @property
    def width(self) -> float:
        '''Returns or sets the width of a plot area bounding box as a fraction of the width of the chart (from 0 to 1).
                    Read/write :py:class:`float`.'''
        ...

    @width.setter
    def width(self, value: float):
        '''Returns or sets the width of a plot area bounding box as a fraction of the width of the chart (from 0 to 1).
                    Read/write :py:class:`float`.'''
        ...

    @property
    def height(self) -> float:
        '''Returns or sets the height of a plot area bounding box as a fraction of the height of the chart (from 0 to 1).
                    Read/write :py:class:`float`.'''
        ...

    @height.setter
    def height(self, value: float):
        '''Returns or sets the height of a plot area bounding box as a fraction of the height of the chart (from 0 to 1).
                    Read/write :py:class:`float`.'''
        ...

    @property
    def right(self) -> float:
        '''Right.
                    Read-only :py:class:`float`.'''
        ...

    @property
    def bottom(self) -> float:
        '''Bottom.
                    Read-only :py:class:`float`.'''
        ...

    @property
    def chart(self) -> IChart:
        '''Chart.
                    Read-only :py:class:`aspose.slides.charts.IChart`.'''
        ...

    @property
    def is_location_autocalculated(self) -> bool:
        ...

    @property
    def layout_target_type(self) -> LayoutTargetType:
        ...

    @layout_target_type.setter
    def layout_target_type(self, value: LayoutTargetType):
        ...

    @property
    def actual_x(self) -> float:
        ...

    @property
    def actual_y(self) -> float:
        ...

    @property
    def actual_width(self) -> float:
        ...

    @property
    def actual_height(self) -> float:
        ...

    @property
    def as_i_layoutable(self) -> ILayoutable:
        ...

    @property
    def as_i_actual_layout(self) -> IActualLayout:
        ...

    @property
    def as_i_chart_component(self) -> IChartComponent:
        ...

    @property
    def as_i_slide_component(self) -> ISlideComponent:
        ...

    @property
    def slide(self) -> IBaseSlide:
        ...

    @property
    def as_i_presentation_component(self) -> IPresentationComponent:
        ...

    @property
    def presentation(self) -> IPresentation:
        ...

    ...

class ChartPortionFormat(aspose.slides.BasePortionFormat):
    '''This class contains the chart portion formatting properties used in charts.
                Unlike :py:class:`aspose.slides.IPortionFormatEffectiveData`, all properties of this class are writeable.'''
    @property
    def as_i_presentation_component(self) -> IPresentationComponent:
        ...

    @property
    def line_format(self) -> ILineFormat:
        ...

    @property
    def fill_format(self) -> IFillFormat:
        ...

    @property
    def effect_format(self) -> IEffectFormat:
        ...

    @property
    def highlight_color(self) -> IColorFormat:
        ...

    @property
    def underline_line_format(self) -> ILineFormat:
        ...

    @property
    def underline_fill_format(self) -> IFillFormat:
        ...

    @property
    def font_bold(self) -> NullableBool:
        ...

    @font_bold.setter
    def font_bold(self, value: NullableBool):
        ...

    @property
    def font_italic(self) -> NullableBool:
        ...

    @font_italic.setter
    def font_italic(self, value: NullableBool):
        ...

    @property
    def kumimoji(self) -> NullableBool:
        '''Determines whether the numbers should ignore text eastern language-specific vertical text layout. No inheritance applied.
                    Read/write :py:enum:`aspose.slides.NullableBool`.'''
        ...

    @kumimoji.setter
    def kumimoji(self, value: NullableBool):
        '''Determines whether the numbers should ignore text eastern language-specific vertical text layout. No inheritance applied.
                    Read/write :py:enum:`aspose.slides.NullableBool`.'''
        ...

    @property
    def normalise_height(self) -> NullableBool:
        ...

    @normalise_height.setter
    def normalise_height(self, value: NullableBool):
        ...

    @property
    def proof_disabled(self) -> NullableBool:
        ...

    @proof_disabled.setter
    def proof_disabled(self, value: NullableBool):
        ...

    @property
    def font_underline(self) -> TextUnderlineType:
        ...

    @font_underline.setter
    def font_underline(self, value: TextUnderlineType):
        ...

    @property
    def text_cap_type(self) -> TextCapType:
        ...

    @text_cap_type.setter
    def text_cap_type(self, value: TextCapType):
        ...

    @property
    def strikethrough_type(self) -> TextStrikethroughType:
        ...

    @strikethrough_type.setter
    def strikethrough_type(self, value: TextStrikethroughType):
        ...

    @property
    def is_hard_underline_line(self) -> NullableBool:
        ...

    @is_hard_underline_line.setter
    def is_hard_underline_line(self, value: NullableBool):
        ...

    @property
    def is_hard_underline_fill(self) -> NullableBool:
        ...

    @is_hard_underline_fill.setter
    def is_hard_underline_fill(self, value: NullableBool):
        ...

    @property
    def font_height(self) -> float:
        ...

    @font_height.setter
    def font_height(self, value: float):
        ...

    @property
    def latin_font(self) -> IFontData:
        ...

    @latin_font.setter
    def latin_font(self, value: IFontData):
        ...

    @property
    def east_asian_font(self) -> IFontData:
        ...

    @east_asian_font.setter
    def east_asian_font(self, value: IFontData):
        ...

    @property
    def complex_script_font(self) -> IFontData:
        ...

    @complex_script_font.setter
    def complex_script_font(self, value: IFontData):
        ...

    @property
    def symbol_font(self) -> IFontData:
        ...

    @symbol_font.setter
    def symbol_font(self, value: IFontData):
        ...

    @property
    def escapement(self) -> float:
        '''Returns or sets the superscript or subscript text.
                    Value from -100% (subscript) to 100% (superscript).
                    **float.NaN** means value is undefined and should be inherited from the Master.
                    Read/write :py:class:`float`.'''
        ...

    @escapement.setter
    def escapement(self, value: float):
        '''Returns or sets the superscript or subscript text.
                    Value from -100% (subscript) to 100% (superscript).
                    **float.NaN** means value is undefined and should be inherited from the Master.
                    Read/write :py:class:`float`.'''
        ...

    @property
    def kerning_minimal_size(self) -> float:
        ...

    @kerning_minimal_size.setter
    def kerning_minimal_size(self, value: float):
        ...

    @property
    def language_id(self) -> str:
        ...

    @language_id.setter
    def language_id(self, value: str):
        ...

    @property
    def alternative_language_id(self) -> str:
        ...

    @alternative_language_id.setter
    def alternative_language_id(self, value: str):
        ...

    @property
    def spacing(self) -> float:
        '''Returns or sets the intercharacter spacing increment.
                    **float.NaN** means value is undefined and should be inherited from the Master.
                    Read/write :py:class:`float`.'''
        ...

    @spacing.setter
    def spacing(self, value: float):
        '''Returns or sets the intercharacter spacing increment.
                    **float.NaN** means value is undefined and should be inherited from the Master.
                    Read/write :py:class:`float`.'''
        ...

    @property
    def slide(self) -> IBaseSlide:
        ...

    @property
    def presentation(self) -> IPresentation:
        ...

    @property
    def as_i_base_portion_format(self) -> IBasePortionFormat:
        ...

    ...

class ChartSeries:
    '''Represents a chart series.'''
    def get_automatic_series_color(self) -> aspose.pydrawing.Color:
        '''Returns an automatic color of series based on series index and chart style. This color is used by default if FillType equals NotDefined.'''
        ...

    @property
    def chart(self) -> IChart:
        '''Returns the parent chart.
                    Read-only :py:class:`aspose.slides.charts.IChart`.'''
        ...

    @property
    def explosion(self) -> int:
        '''The distance of an open pie slice from the center of the pie chart is expressed as a percentage of the pie diameter.
                     Read/write :py:class:`int`.'''
        ...

    @explosion.setter
    def explosion(self, value: int):
        '''The distance of an open pie slice from the center of the pie chart is expressed as a percentage of the pie diameter.
                     Read/write :py:class:`int`.'''
        ...

    @property
    def smooth(self) -> bool:
        '''Represents curve smoothing. True if curve smoothing is turned on for the line chart or scatter chart.
                    Applies only to line and scatter connected by lines charts.
                    Read/write :py:class:`bool`.'''
        ...

    @smooth.setter
    def smooth(self, value: bool):
        '''Represents curve smoothing. True if curve smoothing is turned on for the line chart or scatter chart.
                    Applies only to line and scatter connected by lines charts.
                    Read/write :py:class:`bool`.'''
        ...

    @property
    def name(self) -> IStringChartValue:
        '''Return series name.
                    Read-only :py:class:`aspose.slides.charts.IStringChartValue`.'''
        ...

    @property
    def data_points(self) -> IChartDataPointCollection:
        ...

    @property
    def type(self) -> ChartType:
        '''Returns a type of this series.
                    Read/write :py:enum:`aspose.slides.charts.ChartType`.'''
        ...

    @type.setter
    def type(self, value: ChartType):
        '''Returns a type of this series.
                    Read/write :py:enum:`aspose.slides.charts.ChartType`.'''
        ...

    @property
    def plot_on_second_axis(self) -> bool:
        ...

    @plot_on_second_axis.setter
    def plot_on_second_axis(self, value: bool):
        ...

    @property
    def parent_series_group(self) -> IChartSeriesGroup:
        ...

    @property
    def format(self) -> IFormat:
        '''Returns the format of a series.
                    Read-only :py:class:`aspose.slides.charts.IFormat`.'''
        ...

    @property
    def order(self) -> int:
        '''Returns the order of a series.
                    Read/write :py:class:`int`.'''
        ...

    @order.setter
    def order(self, value: int):
        '''Returns the order of a series.
                    Read/write :py:class:`int`.'''
        ...

    @property
    def labels(self) -> IDataLabelCollection:
        '''Returns the Labels of a series.
                    Read-only :py:class:`aspose.slides.charts.IDataLabelCollection`.'''
        ...

    @property
    def trend_lines(self) -> ITrendlineCollection:
        ...

    @property
    def error_bars_x_format(self) -> IErrorBarsFormat:
        ...

    @property
    def error_bars_y_format(self) -> IErrorBarsFormat:
        ...

    @property
    def related_legend_entry(self) -> ILegendEntryProperties:
        ...

    @property
    def number_format_of_values(self) -> str:
        ...

    @number_format_of_values.setter
    def number_format_of_values(self, value: str):
        ...

    @property
    def number_format_of_x_values(self) -> str:
        ...

    @number_format_of_x_values.setter
    def number_format_of_x_values(self, value: str):
        ...

    @property
    def number_format_of_y_values(self) -> str:
        ...

    @number_format_of_y_values.setter
    def number_format_of_y_values(self, value: str):
        ...

    @property
    def number_format_of_bubble_sizes(self) -> str:
        ...

    @number_format_of_bubble_sizes.setter
    def number_format_of_bubble_sizes(self, value: str):
        ...

    @property
    def marker(self) -> IMarker:
        '''Marker.
                    Read-only :py:class:`aspose.slides.charts.IMarker`.'''
        ...

    @property
    def bar_3d_shape(self) -> ChartShapeType:
        ...

    @bar_3d_shape.setter
    def bar_3d_shape(self, value: ChartShapeType):
        ...

    @property
    def invert_if_negative(self) -> bool:
        ...

    @invert_if_negative.setter
    def invert_if_negative(self, value: bool):
        ...

    @property
    def inverted_solid_fill_color(self) -> IColorFormat:
        ...

    @property
    def show_inner_points(self) -> bool:
        ...

    @show_inner_points.setter
    def show_inner_points(self, value: bool):
        ...

    @property
    def show_outlier_points(self) -> bool:
        ...

    @show_outlier_points.setter
    def show_outlier_points(self, value: bool):
        ...

    @property
    def show_mean_markers(self) -> bool:
        ...

    @show_mean_markers.setter
    def show_mean_markers(self, value: bool):
        ...

    @property
    def show_mean_line(self) -> bool:
        ...

    @show_mean_line.setter
    def show_mean_line(self, value: bool):
        ...

    @property
    def quartile_method(self) -> QuartileMethodType:
        ...

    @quartile_method.setter
    def quartile_method(self, value: QuartileMethodType):
        ...

    @property
    def show_connector_lines(self) -> bool:
        ...

    @show_connector_lines.setter
    def show_connector_lines(self, value: bool):
        ...

    @property
    def parent_label_layout(self) -> ParentLabelLayoutType:
        ...

    @parent_label_layout.setter
    def parent_label_layout(self, value: ParentLabelLayoutType):
        ...

    @property
    def has_up_down_bars(self) -> bool:
        ...

    @property
    def gap_width(self) -> int:
        ...

    @property
    def gap_depth(self) -> int:
        ...

    @property
    def first_slice_angle(self) -> int:
        ...

    @property
    def doughnut_hole_size(self) -> int:
        ...

    @property
    def overlap(self) -> int:
        '''Specifies how much bars and columns overlap on 2-D charts, as a percentage (from -100% to 100%). 
                    This is the property not only of this series but of all series of parent series group. 
                    It is a projection of the appropriate property in the parent series group, and so this property is read-only.
                    To change the value, use the :py:class:`ParentSeriesGroup.Overlap` read/write property.
                    Read-only :py:class:`int`.'''
        ...

    @property
    def second_pie_size(self) -> int:
        ...

    @property
    def has_series_lines(self) -> bool:
        ...

    @property
    def bubble_size_representation(self) -> BubbleSizeRepresentationType:
        ...

    @property
    def pie_split_position(self) -> float:
        ...

    @property
    def pie_split_by(self) -> PieSplitType:
        ...

    @property
    def pie_split_custom_points(self) -> IPieSplitCustomPointCollection:
        ...

    @property
    def is_color_varied(self) -> bool:
        ...

    @property
    def bubble_size_scale(self) -> int:
        ...

    @property
    def as_i_chart_component(self) -> IChartComponent:
        ...

    @property
    def as_i_slide_component(self) -> ISlideComponent:
        ...

    @property
    def slide(self) -> IBaseSlide:
        ...

    @property
    def as_i_presentation_component(self) -> IPresentationComponent:
        ...

    @property
    def presentation(self) -> IPresentation:
        ...

    ...

class ChartSeriesCollection:
    '''Represents collection of  :py:class:`aspose.slides.charts.ChartSeries`'''
    @overload
    def add(self, type: ChartType) -> IChartSeries:
        '''Creates new chart series and adds it to the collection.
        :param type: Type of series
        :returns: New chart series.'''
        ...

    @overload
    def add(self, cell_with_series_name: IChartDataCell, type: ChartType) -> IChartSeries:
        '''Creates new chart series from :py:class:`aspose.slides.charts.ChartDataCell` and adds it to the collection.
        :param cell_with_series_name: Cell which contain series name.
        :param type: Type set type of series
        :returns: Added chart series or series that already is in collection.'''
        ...

    @overload
    def add(self, cells_with_series_name: IChartCellCollection, type: ChartType) -> IChartSeries:
        '''Creates new chart series from :py:class:`aspose.slides.charts.ChartCellCollection` and adds it to the collection.
        :param cells_with_series_name: Cells which contain series name.
        :param type: Type set type of series
        :returns: Added chart series or series that already is in collection.'''
        ...

    @overload
    def add(self, name: str, type: ChartType) -> IChartSeries:
        '''Creates new chart series from value and adds it to the collection.
        :param name: Series name.
        :param type: Type set type of series
        :returns: Added chart series.'''
        ...

    def insert(self, index: int, type: ChartType) -> IChartSeries:
        '''Creates new chart series and inserts it into the collection.'''
        ...

    def index_of(self, value: IChartSeries) -> int:
        '''Searches for the specified :py:class:`aspose.slides.charts.ChartSeries` and returns the zero-based index of the first occurrence within the entire Collection
        :param value: Chart series value.
        :returns: The zero-based index of the first occurrence of value within the entire CollectionBase, if found; otherwise, -1.'''
        ...

    def remove(self, value: IChartSeries) -> None:
        '''Removes the specified value.
        :param value: The value.'''
        ...

    def remove_at(self, index: int) -> None:
        '''Removes an ActiveX control stored at specified position from the collection.
        :param index: Index of a control to remove.'''
        ...

    def clear(self) -> None:
        '''Removes all controls from the collection.'''
        ...

    @property
    def as_i_collection(self) -> list:
        ...

    @property
    def as_i_enumerable(self) -> collections.abc.Iterable:
        ...

    def __getitem__(self, key: int) -> IChartSeries
        ...

    ...

class ChartSeriesGroup:
    '''Represents group of series.'''
    @property
    def type(self) -> CombinableSeriesTypesGroup:
        '''Returns a type of this series group.
                    Read-only :py:enum:`aspose.slides.charts.CombinableSeriesTypesGroup`.'''
        ...

    @property
    def plot_on_second_axis(self) -> bool:
        ...

    @property
    def series(self) -> IChartSeriesReadonlyCollection:
        '''Returns a collection of series.
                    Read-only :py:class:`aspose.slides.charts.IChartSeriesReadonlyCollection`.'''
        ...

    @property
    def up_down_bars(self) -> IUpDownBarsManager:
        ...

    @property
    def gap_width(self) -> int:
        ...

    @gap_width.setter
    def gap_width(self, value: int):
        ...

    @property
    def gap_depth(self) -> int:
        ...

    @gap_depth.setter
    def gap_depth(self, value: int):
        ...

    @property
    def first_slice_angle(self) -> int:
        ...

    @first_slice_angle.setter
    def first_slice_angle(self, value: int):
        ...

    @property
    def doughnut_hole_size(self) -> int:
        ...

    @doughnut_hole_size.setter
    def doughnut_hole_size(self, value: int):
        ...

    @property
    def overlap(self) -> int:
        '''Specifies how much bars and columns shall overlap on 2-D charts, as a percentage (from -100% to 100%).
                     - -100%: Maximum spacing (bars are completely separated).
                     - 0%: Bars are placed side by side without overlap or spacing.
                     - 100%: Maximum overlap (bars completely overlap each other).
                     This property is read/write :py:class:`int`.'''
        ...

    @overlap.setter
    def overlap(self, value: int):
        '''Specifies how much bars and columns shall overlap on 2-D charts, as a percentage (from -100% to 100%).
                     - -100%: Maximum spacing (bars are completely separated).
                     - 0%: Bars are placed side by side without overlap or spacing.
                     - 100%: Maximum overlap (bars completely overlap each other).
                     This property is read/write :py:class:`int`.'''
        ...

    @property
    def second_pie_size(self) -> int:
        ...

    @second_pie_size.setter
    def second_pie_size(self, value: int):
        ...

    @property
    def bubble_size_representation(self) -> BubbleSizeRepresentationType:
        ...

    @bubble_size_representation.setter
    def bubble_size_representation(self, value: BubbleSizeRepresentationType):
        ...

    @property
    def pie_split_position(self) -> float:
        ...

    @pie_split_position.setter
    def pie_split_position(self, value: float):
        ...

    @property
    def pie_split_by(self) -> PieSplitType:
        ...

    @pie_split_by.setter
    def pie_split_by(self, value: PieSplitType):
        ...

    @property
    def is_color_varied(self) -> bool:
        ...

    @is_color_varied.setter
    def is_color_varied(self, value: bool):
        ...

    @property
    def has_series_lines(self) -> bool:
        ...

    @has_series_lines.setter
    def has_series_lines(self, value: bool):
        ...

    @property
    def hi_low_lines_format(self) -> IChartLinesFormat:
        ...

    @property
    def bubble_size_scale(self) -> int:
        ...

    @bubble_size_scale.setter
    def bubble_size_scale(self, value: int):
        ...

    @property
    def pie_split_custom_points(self) -> IPieSplitCustomPointCollection:
        ...

    @property
    def chart(self) -> IChart:
        '''Returns the parent chart.
                    Read-only :py:class:`aspose.slides.charts.IChart`.'''
        ...

    @property
    def as_i_chart_component(self) -> IChartComponent:
        ...

    @property
    def as_i_slide_component(self) -> ISlideComponent:
        ...

    @property
    def slide(self) -> IBaseSlide:
        ...

    @property
    def as_i_presentation_component(self) -> IPresentationComponent:
        ...

    @property
    def presentation(self) -> IPresentation:
        ...

    def __getitem__(self, key: int) -> IChartSeries
        ...

    ...

class ChartTextFormat:
    '''Specifies default text formatting for chart text elements.'''
    def copy_to(self, dest_text_frame: ITextFrame) -> None:
        '''Copies text format to specified text frame.
        :param dest_text_frame: Text frame to copy text format to.'''
        ...

    def copy_from(self, source_text_frame: ITextFrame) -> None:
        '''Copies text format from specified text frame.
        :param source_text_frame: Text frame to copy text format.'''
        ...

    @property
    def text_block_format(self) -> IChartTextBlockFormat:
        ...

    @property
    def paragraph_format(self) -> IChartParagraphFormat:
        ...

    @property
    def portion_format(self) -> IChartPortionFormat:
        ...

    ...

class ChartTitle:
    '''Represents chart title properties.'''
    def add_text_frame_for_overriding(self, text: str) -> ITextFrame:
        '''Initialize TextFrameForOverriding with the text in paramener "text".
                    If TextFrameForOverriding is already initialized then simply changes its text.
        :param text: Text for a new TextFrameForOverriding.'''
        ...

    @property
    def x(self) -> float:
        '''Returns or sets the x coordinate of a title as a fraction of the width of the chart.
                    Read/write :py:class:`float`.'''
        ...

    @x.setter
    def x(self, value: float):
        '''Returns or sets the x coordinate of a title as a fraction of the width of the chart.
                    Read/write :py:class:`float`.'''
        ...

    @property
    def y(self) -> float:
        '''Returns or sets the y coordinate of a title as a fraction of the height of the chart.
                    Read/write :py:class:`float`.'''
        ...

    @y.setter
    def y(self, value: float):
        '''Returns or sets the y coordinate of a title as a fraction of the height of the chart.
                    Read/write :py:class:`float`.'''
        ...

    @property
    def width(self) -> float:
        '''Returns or sets the width of a title as a fraction of the width of the chart.
                    Read/write :py:class:`float`.'''
        ...

    @width.setter
    def width(self, value: float):
        '''Returns or sets the width of a title as a fraction of the width of the chart.
                    Read/write :py:class:`float`.'''
        ...

    @property
    def height(self) -> float:
        '''Returns or sets the height of a title as a fraction of the height of the chart.
                    Read/write :py:class:`float`.'''
        ...

    @height.setter
    def height(self, value: float):
        '''Returns or sets the height of a title as a fraction of the height of the chart.
                    Read/write :py:class:`float`.'''
        ...

    @property
    def right(self) -> float:
        '''Right.
                    Read-only :py:class:`float`.'''
        ...

    @property
    def bottom(self) -> float:
        '''Bottom.
                    Read-only :py:class:`float`.'''
        ...

    @property
    def overlay(self) -> bool:
        '''Determines whether other chart elements shall be allowed to overlap title.
                    Read/write :py:class:`bool`.'''
        ...

    @overlay.setter
    def overlay(self, value: bool):
        '''Determines whether other chart elements shall be allowed to overlap title.
                    Read/write :py:class:`bool`.'''
        ...

    @property
    def format(self) -> IFormat:
        '''Returns the fill, line, effect styles of a title.
                    Read-only :py:class:`aspose.slides.charts.IFormat`.'''
        ...

    @property
    def text_frame_for_overriding(self) -> ITextFrame:
        ...

    @property
    def text_format(self) -> IChartTextFormat:
        ...

    @property
    def chart(self) -> IChart:
        '''Returns the parent chart.
                    Read-only :py:class:`aspose.slides.charts.IChart`.'''
        ...

    @property
    def as_i_layoutable(self) -> ILayoutable:
        ...

    @property
    def as_i_overridable_text(self) -> IOverridableText:
        ...

    @property
    def as_i_slide_component(self) -> ISlideComponent:
        ...

    @property
    def slide(self) -> IBaseSlide:
        ...

    @property
    def as_i_presentation_component(self) -> IPresentationComponent:
        ...

    @property
    def presentation(self) -> IPresentation:
        ...

    @property
    def as_i_formatted_text_container(self) -> IFormattedTextContainer:
        ...

    ...

class ChartTypeCharacterizer:
    '''Helper for getting additional information about charts and series by its ChartType.'''
    @staticmethod
    def is_bar_3d_chart(chart_type: ChartType) -> bool:
        '''Return true if chartType is one of bar3DChart subtypes (3D columns or bars).'''
        ...

    @staticmethod
    def is_2d_chart(chart_type: ChartType) -> bool:
        '''Return true if ``chartType`` is one of 2D chart types.'''
        ...

    @staticmethod
    def is_3d_chart(chart_type: ChartType) -> bool:
        '''Return true if ``chartType`` is one of 3D chart types.'''
        ...

    @staticmethod
    def is_chart_type_column(chart_type: ChartType) -> bool:
        '''Return true if chartType is one of Column subtypes.
                    Subtypes set corresponds to the appropriate set in PowerPoint (see "Change Chart Type" dialog in PowerPoint):
                    :py:attr:`aspose.slides.charts.ChartType.CLUSTERED_COLUMN`,
                    :py:attr:`aspose.slides.charts.ChartType.CLUSTERED_COLUMN_3D`,
                    :py:attr:`aspose.slides.charts.ChartType.CLUSTERED_CONE`,
                    :py:attr:`aspose.slides.charts.ChartType.CLUSTERED_CYLINDER`,
                    :py:attr:`aspose.slides.charts.ChartType.CLUSTERED_PYRAMID`,
                    :py:attr:`aspose.slides.charts.ChartType.PERCENTS_STACKED_COLUMN`,
                    :py:attr:`aspose.slides.charts.ChartType.PERCENTS_STACKED_COLUMN_3D`,
                    :py:attr:`aspose.slides.charts.ChartType.PERCENTS_STACKED_CONE`,
                    :py:attr:`aspose.slides.charts.ChartType.PERCENTS_STACKED_CYLINDER`,
                    :py:attr:`aspose.slides.charts.ChartType.PERCENTS_STACKED_PYRAMID`,
                    :py:attr:`aspose.slides.charts.ChartType.STACKED_COLUMN`,
                    :py:attr:`aspose.slides.charts.ChartType.STACKED_COLUMN_3D`,
                    :py:attr:`aspose.slides.charts.ChartType.STACKED_CONE`,
                    :py:attr:`aspose.slides.charts.ChartType.STACKED_CYLINDER`,
                    :py:attr:`aspose.slides.charts.ChartType.STACKED_PYRAMID`,
                    :py:attr:`aspose.slides.charts.ChartType.COLUMN_3D`,
                    :py:attr:`aspose.slides.charts.ChartType.CYLINDER_3D`,
                    :py:attr:`aspose.slides.charts.ChartType.CONE_3D`,
                    :py:attr:`aspose.slides.charts.ChartType.PYRAMID_3D`.'''
        ...

    @staticmethod
    def is_chart_type_line(chart_type: ChartType) -> bool:
        '''Return true if chartType is one of Line subtypes.
                    Subtypes set corresponds to the appropriate set in PowerPoint (see "Change Chart Type" dialog in PowerPoint):
                    :py:attr:`aspose.slides.charts.ChartType.LINE`,
                    :py:attr:`aspose.slides.charts.ChartType.LINE_WITH_MARKERS`,
                    :py:attr:`aspose.slides.charts.ChartType.PERCENTS_STACKED_LINE`,
                    :py:attr:`aspose.slides.charts.ChartType.PERCENTS_STACKED_LINE_WITH_MARKERS`,
                    :py:attr:`aspose.slides.charts.ChartType.STACKED_LINE`,
                    :py:attr:`aspose.slides.charts.ChartType.STACKED_LINE_WITH_MARKERS`,
                    :py:attr:`aspose.slides.charts.ChartType.LINE_3D`.'''
        ...

    @staticmethod
    def is_chart_type_pie(chart_type: ChartType) -> bool:
        '''Return true if chartType is one of Pie subtypes.
                    Subtypes set corresponds to the appropriate set in PowerPoint (see "Change Chart Type" dialog in PowerPoint):
                    :py:attr:`aspose.slides.charts.ChartType.BAR_OF_PIE`,
                    :py:attr:`aspose.slides.charts.ChartType.EXPLODED_PIE`,
                    :py:attr:`aspose.slides.charts.ChartType.EXPLODED_PIE_3D`,
                    :py:attr:`aspose.slides.charts.ChartType.PIE`,
                    :py:attr:`aspose.slides.charts.ChartType.PIE_3D`,
                    :py:attr:`aspose.slides.charts.ChartType.PIE_OF_PIE`.'''
        ...

    @staticmethod
    def is_chart_type_bar(chart_type: ChartType) -> bool:
        '''Return true if chartType is one of Bar subtypes.
                    Subtypes set corresponds to the appropriate set in PowerPoint (see "Change Chart Type" dialog in PowerPoint):
                    :py:attr:`aspose.slides.charts.ChartType.CLUSTERED_BAR`,
                    :py:attr:`aspose.slides.charts.ChartType.CLUSTERED_BAR_3D`,
                    :py:attr:`aspose.slides.charts.ChartType.PERCENTS_STACKED_BAR`,
                    :py:attr:`aspose.slides.charts.ChartType.PERCENTS_STACKED_BAR_3D`,
                    :py:attr:`aspose.slides.charts.ChartType.STACKED_BAR`,
                    :py:attr:`aspose.slides.charts.ChartType.STACKED_BAR_3D`,
                    :py:attr:`aspose.slides.charts.ChartType.CLUSTERED_HORIZONTAL_CONE`,
                    :py:attr:`aspose.slides.charts.ChartType.CLUSTERED_HORIZONTAL_CYLINDER`,
                    :py:attr:`aspose.slides.charts.ChartType.CLUSTERED_HORIZONTAL_PYRAMID`,
                    :py:attr:`aspose.slides.charts.ChartType.STACKED_HORIZONTAL_CONE`,
                    :py:attr:`aspose.slides.charts.ChartType.STACKED_HORIZONTAL_CYLINDER`,
                    :py:attr:`aspose.slides.charts.ChartType.STACKED_HORIZONTAL_PYRAMID`,
                    :py:attr:`aspose.slides.charts.ChartType.PERCENTS_STACKED_HORIZONTAL_CONE`,
                    :py:attr:`aspose.slides.charts.ChartType.PERCENTS_STACKED_HORIZONTAL_CYLINDER`,
                    :py:attr:`aspose.slides.charts.ChartType.PERCENTS_STACKED_HORIZONTAL_PYRAMID`.'''
        ...

    @staticmethod
    def is_chart_type_area(chart_type: ChartType) -> bool:
        '''Return true if chartType is one of Area subtypes.
                    Subtypes set corresponds to the appropriate set in PowerPoint (see "Change Chart Type" dialog in PowerPoint):
                    :py:attr:`aspose.slides.charts.ChartType.AREA`,
                    :py:attr:`aspose.slides.charts.ChartType.PERCENTS_STACKED_AREA`,
                    :py:attr:`aspose.slides.charts.ChartType.PERCENTS_STACKED_AREA_3D`,
                    :py:attr:`aspose.slides.charts.ChartType.STACKED_AREA`,
                    :py:attr:`aspose.slides.charts.ChartType.STACKED_AREA_3D`,
                    :py:attr:`aspose.slides.charts.ChartType.AREA_3D`.'''
        ...

    @staticmethod
    def is_chart_type_scatter(chart_type: ChartType) -> bool:
        '''Return true if chartType is one of Scatter subtypes.
                    Subtypes set corresponds to the appropriate set in PowerPoint (see "Change Chart Type" dialog in PowerPoint):
                    :py:attr:`aspose.slides.charts.ChartType.SCATTER_WITH_MARKERS`,
                    :py:attr:`aspose.slides.charts.ChartType.SCATTER_WITH_SMOOTH_LINES`,
                    :py:attr:`aspose.slides.charts.ChartType.SCATTER_WITH_SMOOTH_LINES_AND_MARKERS`,
                    :py:attr:`aspose.slides.charts.ChartType.SCATTER_WITH_STRAIGHT_LINES`,
                    :py:attr:`aspose.slides.charts.ChartType.SCATTER_WITH_STRAIGHT_LINES_AND_MARKERS`.'''
        ...

    @staticmethod
    def is_chart_type_stock(chart_type: ChartType) -> bool:
        '''Return true if chartType is one of Stock subtypes.
                    Subtypes set corresponds to the appropriate set in PowerPoint (see "Change Chart Type" dialog in PowerPoint):
                    :py:attr:`aspose.slides.charts.ChartType.HIGH_LOW_CLOSE`,
                    :py:attr:`aspose.slides.charts.ChartType.OPEN_HIGH_LOW_CLOSE`,
                    :py:attr:`aspose.slides.charts.ChartType.VOLUME_HIGH_LOW_CLOSE`,
                    :py:attr:`aspose.slides.charts.ChartType.VOLUME_OPEN_HIGH_LOW_CLOSE`.'''
        ...

    @staticmethod
    def is_chart_type_surface(chart_type: ChartType) -> bool:
        '''Return true if chartType is one of Surface subtypes.
                    Subtypes set corresponds to the appropriate set in PowerPoint (see "Change Chart Type" dialog in PowerPoint):
                    :py:attr:`aspose.slides.charts.ChartType.SURFACE_3D`,
                    :py:attr:`aspose.slides.charts.ChartType.WIREFRAME_SURFACE_3D`,
                    :py:attr:`aspose.slides.charts.ChartType.CONTOUR`,
                    :py:attr:`aspose.slides.charts.ChartType.WIREFRAME_CONTOUR`.'''
        ...

    @staticmethod
    def is_chart_type_doughnut(chart_type: ChartType) -> bool:
        '''Return true if chartType is one of Doughnut subtypes.
                    Subtypes set corresponds to the appropriate set in PowerPoint (see "Change Chart Type" dialog in PowerPoint):
                    :py:attr:`aspose.slides.charts.ChartType.DOUGHNUT`,
                    :py:attr:`aspose.slides.charts.ChartType.EXPLODED_DOUGHNUT`.'''
        ...

    @staticmethod
    def is_chart_type_bubble(chart_type: ChartType) -> bool:
        '''Return true if chartType is one of Bubble subtypes.
                    Subtypes set corresponds to the appropriate set in PowerPoint (see "Change Chart Type" dialog in PowerPoint):
                    :py:attr:`aspose.slides.charts.ChartType.BUBBLE`,
                    :py:attr:`aspose.slides.charts.ChartType.BUBBLE_WITH_3D`.'''
        ...

    @staticmethod
    def is_chart_type_radar(chart_type: ChartType) -> bool:
        '''Return true if chartType is one of Radar subtypes.
                    Subtypes set corresponds to the appropriate set in PowerPoint (see "Change Chart Type" dialog in PowerPoint):
                    :py:attr:`aspose.slides.charts.ChartType.FILLED_RADAR`,
                    :py:attr:`aspose.slides.charts.ChartType.RADAR`,
                    :py:attr:`aspose.slides.charts.ChartType.RADAR_WITH_MARKERS`.'''
        ...

    @staticmethod
    def is_series_uses_x_value_coordinate(series_type: ChartType) -> bool:
        '''Returns if specified series type uses X value coordinates.
        :param series_type: Series type.
        :returns: True if uses otherwise false.'''
        ...

    @staticmethod
    def is_series_uses_y_value_coordinate(series_type: ChartType) -> bool:
        '''Returns if specified series type uses Y value coordinates.
        :param series_type: Series type.
        :returns: True if uses otherwise false.'''
        ...

    @staticmethod
    def is_series_uses_value_coordinate(series_type: ChartType) -> bool:
        '''Returns if specified series type uses value coordinates.
        :param series_type: Series type.
        :returns: True if uses otherwise false.'''
        ...

    @staticmethod
    def is_series_uses_bubble_size_coordinate(series_type: ChartType) -> bool:
        '''Returns if bubble size coordinates can be used for specified series type.
        :param series_type: Series type.
        :returns: True if can be used, otherwise false.'''
        ...

    @staticmethod
    def has_series_trend_lines(series_type: ChartType) -> bool:
        '''Returns if there are series trend lines for specified series type.
        :param series_type: Series type.
        :returns: True if present otherwise false.'''
        ...

    @staticmethod
    def is_error_bars_x_allowed(series_type: ChartType) -> bool:
        '''Returns if error bars X allowed for specified series type.
        :param series_type: Series type.
        :returns: True if allowed, otherwise false.'''
        ...

    @staticmethod
    def is_error_bars_y_allowed(series_type: ChartType) -> bool:
        '''Returns if error bars Y allowed for specified series type.
        :param series_type: Series type.
        :returns: True if allowed, otherwise false.'''
        ...

    ...

class ChartWall:
    '''Represents walls on 3d charts.'''
    @property
    def thickness(self) -> int:
        '''Returns or sets the walls thickness as a percentage of the largest 
                    dimension of the plot volume.
                    Read/write :py:class:`int`.'''
        ...

    @thickness.setter
    def thickness(self, value: int):
        '''Returns or sets the walls thickness as a percentage of the largest 
                    dimension of the plot volume.
                    Read/write :py:class:`int`.'''
        ...

    @property
    def format(self) -> IFormat:
        '''Returns the wall fill, line, effect, 3d styles.
                    Read-only :py:class:`aspose.slides.charts.IFormat`.'''
        ...

    @property
    def picture_type(self) -> PictureType:
        ...

    @picture_type.setter
    def picture_type(self, value: PictureType):
        ...

    ...

class DataLabel:
    '''Represents a series labels.'''
    def __init__(self, parent_immediate: IChartDataPoint):
        '''Creates a new instance of DataLabel class.
        :param parent_immediate: Parent ChartDataPoint.'''
        ...

    def hide(self) -> None:
        '''Make data label hidden by setting all Show*-flags (ShowValue, ...) to false state.
                    IsVisible will be false after this.'''
        ...

    def get_actual_label_text(self) -> str:
        '''Returns actual label text based on DataLabelFormat settings or TextFrameForOverriding.Text value.'''
        ...

    def add_text_frame_for_overriding(self, text: str) -> ITextFrame:
        '''Initialize TextFrameForOverriding with the text in paramener "text".
                    If TextFrameForOverriding is already initialized then simply changes its text.
        :param text: Text for a new TextFrameForOverriding.'''
        ...

    @property
    def chart(self) -> IChart:
        '''Returns the parent chart.
                    Read-only :py:class:`aspose.slides.charts.IChart`.'''
        ...

    @property
    def is_visible(self) -> bool:
        ...

    @property
    def text_frame_for_overriding(self) -> ITextFrame:
        ...

    @property
    def text_format(self) -> IChartTextFormat:
        ...

    @property
    def x(self) -> float:
        '''Returns or sets the x coordinate of a title as a fraction of the width of the chart.
                    Read/write :py:class:`float`.'''
        ...

    @x.setter
    def x(self, value: float):
        '''Returns or sets the x coordinate of a title as a fraction of the width of the chart.
                    Read/write :py:class:`float`.'''
        ...

    @property
    def y(self) -> float:
        '''Returns or sets the y coordinate of a title as a fraction of the height of the chart.
                    Read/write :py:class:`float`.'''
        ...

    @y.setter
    def y(self, value: float):
        '''Returns or sets the y coordinate of a title as a fraction of the height of the chart.
                    Read/write :py:class:`float`.'''
        ...

    @property
    def width(self) -> float:
        '''Returns or sets the width of a title as a fraction of the width of the chart.
                    Read/write :py:class:`float`.'''
        ...

    @width.setter
    def width(self, value: float):
        '''Returns or sets the width of a title as a fraction of the width of the chart.
                    Read/write :py:class:`float`.'''
        ...

    @property
    def height(self) -> float:
        '''Returns or sets the height of a title as a fraction of the height of the chart.
                    Read/write :py:class:`float`.'''
        ...

    @height.setter
    def height(self, value: float):
        '''Returns or sets the height of a title as a fraction of the height of the chart.
                    Read/write :py:class:`float`.'''
        ...

    @property
    def right(self) -> float:
        '''Right.
                    Read-only :py:class:`float`.'''
        ...

    @property
    def bottom(self) -> float:
        '''Bottom.
                    Read-only :py:class:`float`.'''
        ...

    @property
    def data_label_format(self) -> IDataLabelFormat:
        ...

    @property
    def value_from_cell(self) -> IChartDataCell:
        ...

    @value_from_cell.setter
    def value_from_cell(self, value: IChartDataCell):
        ...

    @property
    def actual_x(self) -> float:
        ...

    @property
    def actual_y(self) -> float:
        ...

    @property
    def actual_width(self) -> float:
        ...

    @property
    def actual_height(self) -> float:
        ...

    @property
    def as_i_layoutable(self) -> ILayoutable:
        ...

    @property
    def as_i_overridable_text(self) -> IOverridableText:
        ...

    @property
    def as_i_actual_layout(self) -> IActualLayout:
        ...

    @property
    def as_i_slide_component(self) -> ISlideComponent:
        ...

    @property
    def slide(self) -> IBaseSlide:
        ...

    @property
    def as_i_presentation_component(self) -> IPresentationComponent:
        ...

    @property
    def presentation(self) -> IPresentation:
        ...

    @property
    def as_i_formatted_text_container(self) -> IFormattedTextContainer:
        ...

    ...

class DataLabelCollection:
    '''Represents a series labels.'''
    def hide(self) -> None:
        '''Make data label hidden by default by setting all Show*-flags (ShowValue, ...) of the 
                    DefaultDataLabelFormat property to false state.
                    IsVisible will be false after this.'''
        ...

    def index_of(self, value: IDataLabel) -> int:
        '''Returns an index of the specified DataLabel in the collection.
        :param value: DataLabel to find.
        :returns: Index of a DataLabel or -1 if DataLabel not from this collection.'''
        ...

    @property
    def chart(self) -> IChart:
        '''Returns the parent chart.
                    Read-only :py:class:`aspose.slides.charts.IChart`.'''
        ...

    @property
    def is_visible(self) -> bool:
        ...

    @property
    def count_of_visible_data_labels(self) -> int:
        ...

    @property
    def count(self) -> int:
        '''Gets the number of all data labels in the collection.
                    Read-only :py:class:`int`.'''
        ...

    @property
    def default_data_label_format(self) -> IDataLabelFormat:
        ...

    @property
    def leader_lines_format(self) -> IChartLinesFormat:
        ...

    @property
    def parent_series(self) -> IChartSeries:
        ...

    @property
    def as_i_chart_component(self) -> IChartComponent:
        ...

    @property
    def as_i_enumerable(self) -> collections.abc.Iterable:
        ...

    @property
    def as_i_slide_component(self) -> ISlideComponent:
        ...

    @property
    def slide(self) -> IBaseSlide:
        ...

    @property
    def as_i_presentation_component(self) -> IPresentationComponent:
        ...

    @property
    def presentation(self) -> IPresentation:
        ...

    def __getitem__(self, key: int) -> IDataLabel
        ...

    ...

class DataLabelFormat(aspose.slides.PVIObject):
    '''Represents formatting options for DataLabel.'''
    @property
    def as_i_presentation_component(self) -> IPresentationComponent:
        ...

    @property
    def is_number_format_linked_to_source(self) -> bool:
        ...

    @is_number_format_linked_to_source.setter
    def is_number_format_linked_to_source(self, value: bool):
        ...

    @property
    def number_format(self) -> str:
        ...

    @number_format.setter
    def number_format(self, value: str):
        ...

    @property
    def format(self) -> IFormat:
        '''Represents the format of the data label.
                    Read-only :py:class:`aspose.slides.charts.IFormat`.'''
        ...

    @property
    def position(self) -> LegendDataLabelPosition:
        '''Represents the position of the data label.
                    Read/write :py:enum:`aspose.slides.charts.LegendDataLabelPosition`.'''
        ...

    @position.setter
    def position(self, value: LegendDataLabelPosition):
        '''Represents the position of the data label.
                    Read/write :py:enum:`aspose.slides.charts.LegendDataLabelPosition`.'''
        ...

    @property
    def show_legend_key(self) -> bool:
        ...

    @show_legend_key.setter
    def show_legend_key(self, value: bool):
        ...

    @property
    def show_value(self) -> bool:
        ...

    @show_value.setter
    def show_value(self, value: bool):
        ...

    @property
    def show_category_name(self) -> bool:
        ...

    @show_category_name.setter
    def show_category_name(self, value: bool):
        ...

    @property
    def show_series_name(self) -> bool:
        ...

    @show_series_name.setter
    def show_series_name(self, value: bool):
        ...

    @property
    def show_percentage(self) -> bool:
        ...

    @show_percentage.setter
    def show_percentage(self, value: bool):
        ...

    @property
    def show_bubble_size(self) -> bool:
        ...

    @show_bubble_size.setter
    def show_bubble_size(self, value: bool):
        ...

    @property
    def show_leader_lines(self) -> bool:
        ...

    @show_leader_lines.setter
    def show_leader_lines(self, value: bool):
        ...

    @property
    def show_label_value_from_cell(self) -> bool:
        ...

    @show_label_value_from_cell.setter
    def show_label_value_from_cell(self, value: bool):
        ...

    @property
    def show_label_as_data_callout(self) -> bool:
        ...

    @show_label_as_data_callout.setter
    def show_label_as_data_callout(self, value: bool):
        ...

    @property
    def separator(self) -> str:
        '''Sets or returns a Variant representing the separator used for the data labels on a chart.
                    Read/write :py:class:`str`.'''
        ...

    @separator.setter
    def separator(self, value: str):
        '''Sets or returns a Variant representing the separator used for the data labels on a chart.
                    Read/write :py:class:`str`.'''
        ...

    @property
    def text_format(self) -> IChartTextFormat:
        ...

    @property
    def chart(self) -> IChart:
        '''Returns the chart.
                    Read-only :py:class:`aspose.slides.charts.IChart`.'''
        ...

    @property
    def slide(self) -> IBaseSlide:
        ...

    @property
    def presentation(self) -> IPresentation:
        ...

    @property
    def as_i_formatted_text_container(self) -> IFormattedTextContainer:
        ...

    @property
    def as_i_chart_component(self) -> IChartComponent:
        ...

    @property
    def as_i_slide_component(self) -> ISlideComponent:
        ...

    ...

class DataSourceTypeForErrorBarsCustomValues:
    '''Specifies types of values in ChartDataPoint.ErrorBarsCustomValues properties list'''
    def __init__(self):
        ...

    @property
    def data_source_type_for_x_minus_values(self) -> DataSourceType:
        ...

    @data_source_type_for_x_minus_values.setter
    def data_source_type_for_x_minus_values(self, value: DataSourceType):
        ...

    @property
    def data_source_type_for_x_plus_values(self) -> DataSourceType:
        ...

    @data_source_type_for_x_plus_values.setter
    def data_source_type_for_x_plus_values(self, value: DataSourceType):
        ...

    @property
    def data_source_type_for_y_minus_values(self) -> DataSourceType:
        ...

    @data_source_type_for_y_minus_values.setter
    def data_source_type_for_y_minus_values(self, value: DataSourceType):
        ...

    @property
    def data_source_type_for_y_plus_values(self) -> DataSourceType:
        ...

    @data_source_type_for_y_plus_values.setter
    def data_source_type_for_y_plus_values(self, value: DataSourceType):
        ...

    ...

class DataTable:
    '''Represents data table properties.'''
    @property
    def format(self) -> IFormat:
        '''Returns the line, fill, and effect styles of an object.
                    Read-only :py:class:`aspose.slides.charts.IFormat`.'''
        ...

    @property
    def has_border_horizontal(self) -> bool:
        ...

    @has_border_horizontal.setter
    def has_border_horizontal(self, value: bool):
        ...

    @property
    def has_border_outline(self) -> bool:
        ...

    @has_border_outline.setter
    def has_border_outline(self, value: bool):
        ...

    @property
    def has_border_vertical(self) -> bool:
        ...

    @has_border_vertical.setter
    def has_border_vertical(self, value: bool):
        ...

    @property
    def show_legend_key(self) -> bool:
        ...

    @show_legend_key.setter
    def show_legend_key(self, value: bool):
        ...

    @property
    def chart(self) -> IChart:
        '''Returns chart.
                    Read-only :py:class:`aspose.slides.charts.IChart`.'''
        ...

    @property
    def text_format(self) -> IChartTextFormat:
        ...

    @property
    def as_i_formatted_text_container(self) -> IFormattedTextContainer:
        ...

    @property
    def as_i_chart_component(self) -> IChartComponent:
        ...

    @property
    def as_i_slide_component(self) -> ISlideComponent:
        ...

    @property
    def slide(self) -> IBaseSlide:
        ...

    @property
    def as_i_presentation_component(self) -> IPresentationComponent:
        ...

    @property
    def presentation(self) -> IPresentation:
        ...

    ...

class DoubleChartValue(BaseChartValue):
    '''Represent double value which can be stored in pptx presentation document in two ways:
                1) in cell/cells of workbook related to chart;
                2) as literal value.'''
    def to_double(self) -> float:
        '''Converts to :py:class:`float`.
        :returns: Returns LiteralDouble if DataSourceType equals DoubleLiterals.
                    If DataSourceType equals Worksheet returns successfully converted to double cell value, otherwise returns NaN.'''
        ...

    @property
    def data_source_type(self) -> DataSourceType:
        ...

    @data_source_type.setter
    def data_source_type(self, value: DataSourceType):
        ...

    @property
    def data(self) -> any:
        '''Returns or sets Data object.
                    Read/write :py:class:`any`.'''
        ...

    @data.setter
    def data(self, value: any):
        '''Returns or sets Data object.
                    Read/write :py:class:`any`.'''
        ...

    @property
    def as_cell(self) -> IChartDataCell:
        ...

    @as_cell.setter
    def as_cell(self, value: IChartDataCell):
        ...

    @property
    def as_literal_double(self) -> float:
        ...

    @as_literal_double.setter
    def as_literal_double(self, value: float):
        ...

    @property
    def as_i_single_cell_chart_value(self) -> ISingleCellChartValue:
        ...

    @property
    def as_i_base_chart_value(self) -> IBaseChartValue:
        ...

    ...

class ErrorBarsCustomValues:
    '''Specifies the errors bar values. It shall be used only when the Error bars value type is Custom.'''
    @property
    def x_minus(self) -> IDoubleChartValue:
        ...

    @property
    def y_minus(self) -> IDoubleChartValue:
        ...

    @property
    def x_plus(self) -> IDoubleChartValue:
        ...

    @property
    def y_plus(self) -> IDoubleChartValue:
        ...

    ...

class ErrorBarsFormat:
    '''Represents error bars of chart series. ErrorBars custom values are in IChartDataPointCollection
                (in :py:attr:`aspose.slides.charts.IChartDataPoint.error_bars_custom_values` property).'''
    @property
    def type(self) -> ErrorBarType:
        '''Gets or sets type of error bars. 
                    Read/write :py:enum:`aspose.slides.charts.ErrorBarType`.'''
        ...

    @type.setter
    def type(self, value: ErrorBarType):
        '''Gets or sets type of error bars. 
                    Read/write :py:enum:`aspose.slides.charts.ErrorBarType`.'''
        ...

    @property
    def value_type(self) -> ErrorBarValueType:
        ...

    @value_type.setter
    def value_type(self, value: ErrorBarValueType):
        ...

    @property
    def has_end_cap(self) -> bool:
        ...

    @has_end_cap.setter
    def has_end_cap(self, value: bool):
        ...

    @property
    def value(self) -> float:
        '''Gets or sets value which is used with Fixed, Percentage and StandardDeviation value types to determine the length of the error bars. 
                    In any other case will return NaN.
                    Read/write :py:class:`float`.'''
        ...

    @value.setter
    def value(self, value: float):
        '''Gets or sets value which is used with Fixed, Percentage and StandardDeviation value types to determine the length of the error bars. 
                    In any other case will return NaN.
                    Read/write :py:class:`float`.'''
        ...

    @property
    def format(self) -> IFormat:
        '''Represents the format of the error bars.
                    Read/write :py:class:`aspose.slides.charts.IFormat`.'''
        ...

    @format.setter
    def format(self, value: IFormat):
        '''Represents the format of the error bars.
                    Read/write :py:class:`aspose.slides.charts.IFormat`.'''
        ...

    @property
    def chart(self) -> IChart:
        '''Returns the parent chart.
                    Read-only :py:class:`aspose.slides.charts.IChart`.'''
        ...

    @property
    def is_visible(self) -> bool:
        ...

    @is_visible.setter
    def is_visible(self, value: bool):
        ...

    @property
    def as_i_chart_component(self) -> IChartComponent:
        ...

    @property
    def as_i_slide_component(self) -> ISlideComponent:
        ...

    @property
    def slide(self) -> IBaseSlide:
        ...

    @property
    def as_i_presentation_component(self) -> IPresentationComponent:
        ...

    @property
    def presentation(self) -> IPresentation:
        ...

    ...

class Format(aspose.slides.PVIObject):
    '''Represents chart format properties.'''
    @property
    def as_i_presentation_component(self) -> IPresentationComponent:
        ...

    @property
    def fill(self) -> IFillFormat:
        '''Returns fill style properties of a chart.
                    Read-only :py:class:`aspose.slides.IFillFormat`.'''
        ...

    @property
    def line(self) -> ILineFormat:
        '''Returns line style properties of a chart.
                    Read-only :py:class:`aspose.slides.ILineFormat`.'''
        ...

    @property
    def effect(self) -> IEffectFormat:
        '''Returns effects used for a chart.
                    Read-only :py:class:`aspose.slides.IEffectFormat`.'''
        ...

    @property
    def effect_3d(self) -> IThreeDFormat:
        ...

    @property
    def slide(self) -> IBaseSlide:
        ...

    @property
    def presentation(self) -> IPresentation:
        ...

    ...

class IActualLayout:
    '''Specifies actual position of a chart element.'''
    @property
    def actual_x(self) -> float:
        ...

    @property
    def actual_y(self) -> float:
        ...

    @property
    def actual_width(self) -> float:
        ...

    @property
    def actual_height(self) -> float:
        ...

    ...

class IAxesManager:
    '''Provides access to chart axes.'''
    @property
    def horizontal_axis(self) -> IAxis:
        ...

    @property
    def secondary_horizontal_axis(self) -> IAxis:
        ...

    @property
    def vertical_axis(self) -> IAxis:
        ...

    @property
    def secondary_vertical_axis(self) -> IAxis:
        ...

    @property
    def series_axis(self) -> IAxis:
        ...

    ...

class IAxis:
    '''Encapsulates the object that represents a chart's axis.'''
    def set_category_axis_type_automatically(self) -> None:
        '''Sets IAxis.CategoryAxisType property with a value that is automatically determined based on axis data.'''
        ...

    @property
    def axis_between_categories(self) -> bool:
        ...

    @axis_between_categories.setter
    def axis_between_categories(self, value: bool):
        ...

    @property
    def cross_at(self) -> float:
        ...

    @cross_at.setter
    def cross_at(self, value: float):
        ...

    @property
    def display_unit(self) -> DisplayUnitType:
        ...

    @display_unit.setter
    def display_unit(self, value: DisplayUnitType):
        ...

    @property
    def actual_max_value(self) -> float:
        ...

    @property
    def actual_min_value(self) -> float:
        ...

    @property
    def actual_major_unit(self) -> float:
        ...

    @property
    def actual_minor_unit(self) -> float:
        ...

    @property
    def actual_major_unit_scale(self) -> TimeUnitType:
        ...

    @property
    def actual_minor_unit_scale(self) -> TimeUnitType:
        ...

    @property
    def is_automatic_max_value(self) -> bool:
        ...

    @is_automatic_max_value.setter
    def is_automatic_max_value(self, value: bool):
        ...

    @property
    def max_value(self) -> float:
        ...

    @max_value.setter
    def max_value(self, value: float):
        ...

    @property
    def minor_unit(self) -> float:
        ...

    @minor_unit.setter
    def minor_unit(self, value: float):
        ...

    @property
    def is_automatic_minor_unit(self) -> bool:
        ...

    @is_automatic_minor_unit.setter
    def is_automatic_minor_unit(self, value: bool):
        ...

    @property
    def major_unit(self) -> float:
        ...

    @major_unit.setter
    def major_unit(self, value: float):
        ...

    @property
    def is_automatic_major_unit(self) -> bool:
        ...

    @is_automatic_major_unit.setter
    def is_automatic_major_unit(self, value: bool):
        ...

    @property
    def is_automatic_min_value(self) -> bool:
        ...

    @is_automatic_min_value.setter
    def is_automatic_min_value(self, value: bool):
        ...

    @property
    def min_value(self) -> float:
        ...

    @min_value.setter
    def min_value(self, value: float):
        ...

    @property
    def is_logarithmic(self) -> bool:
        ...

    @is_logarithmic.setter
    def is_logarithmic(self, value: bool):
        ...

    @property
    def log_base(self) -> float:
        ...

    @log_base.setter
    def log_base(self, value: float):
        ...

    @property
    def is_plot_order_reversed(self) -> bool:
        ...

    @is_plot_order_reversed.setter
    def is_plot_order_reversed(self, value: bool):
        ...

    @property
    def is_visible(self) -> bool:
        ...

    @is_visible.setter
    def is_visible(self, value: bool):
        ...

    @property
    def major_tick_mark(self) -> TickMarkType:
        ...

    @major_tick_mark.setter
    def major_tick_mark(self, value: TickMarkType):
        ...

    @property
    def minor_tick_mark(self) -> TickMarkType:
        ...

    @minor_tick_mark.setter
    def minor_tick_mark(self, value: TickMarkType):
        ...

    @property
    def tick_label_position(self) -> TickLabelPositionType:
        ...

    @tick_label_position.setter
    def tick_label_position(self, value: TickLabelPositionType):
        ...

    @property
    def major_unit_scale(self) -> TimeUnitType:
        ...

    @major_unit_scale.setter
    def major_unit_scale(self, value: TimeUnitType):
        ...

    @property
    def minor_unit_scale(self) -> TimeUnitType:
        ...

    @minor_unit_scale.setter
    def minor_unit_scale(self, value: TimeUnitType):
        ...

    @property
    def base_unit_scale(self) -> TimeUnitType:
        ...

    @base_unit_scale.setter
    def base_unit_scale(self, value: TimeUnitType):
        ...

    @property
    def minor_grid_lines_format(self) -> IChartLinesFormat:
        ...

    @property
    def major_grid_lines_format(self) -> IChartLinesFormat:
        ...

    @property
    def show_minor_grid_lines(self) -> bool:
        ...

    @property
    def show_major_grid_lines(self) -> bool:
        ...

    @property
    def format(self) -> IAxisFormat:
        '''Represents format of axis.
                     Read-only :py:class:`aspose.slides.charts.IAxisFormat`.'''
        ...

    @property
    def title(self) -> IChartTitle:
        '''Gets the axis' title.
                     Read-only :py:class:`aspose.slides.charts.IChartTitle`.'''
        ...

    @property
    def cross_type(self) -> CrossesType:
        ...

    @cross_type.setter
    def cross_type(self, value: CrossesType):
        ...

    @property
    def position(self) -> AxisPositionType:
        '''Represents position of axis.
                     Read/write :py:enum:`aspose.slides.charts.AxisPositionType`.'''
        ...

    @position.setter
    def position(self, value: AxisPositionType):
        '''Represents position of axis.
                     Read/write :py:enum:`aspose.slides.charts.AxisPositionType`.'''
        ...

    @property
    def has_title(self) -> bool:
        ...

    @has_title.setter
    def has_title(self, value: bool):
        ...

    @property
    def number_format(self) -> str:
        ...

    @number_format.setter
    def number_format(self, value: str):
        ...

    @property
    def is_number_format_linked_to_source(self) -> bool:
        ...

    @is_number_format_linked_to_source.setter
    def is_number_format_linked_to_source(self, value: bool):
        ...

    @property
    def tick_label_rotation_angle(self) -> float:
        ...

    @tick_label_rotation_angle.setter
    def tick_label_rotation_angle(self, value: float):
        ...

    @property
    def tick_label_spacing(self) -> int:
        ...

    @tick_label_spacing.setter
    def tick_label_spacing(self, value: int):
        ...

    @property
    def is_automatic_tick_label_spacing(self) -> bool:
        ...

    @is_automatic_tick_label_spacing.setter
    def is_automatic_tick_label_spacing(self, value: bool):
        ...

    @property
    def tick_marks_spacing(self) -> int:
        ...

    @tick_marks_spacing.setter
    def tick_marks_spacing(self, value: int):
        ...

    @property
    def is_automatic_tick_marks_spacing(self) -> bool:
        ...

    @is_automatic_tick_marks_spacing.setter
    def is_automatic_tick_marks_spacing(self, value: bool):
        ...

    @property
    def label_offset(self) -> int:
        ...

    @label_offset.setter
    def label_offset(self, value: int):
        ...

    @property
    def category_axis_type(self) -> CategoryAxisType:
        ...

    @category_axis_type.setter
    def category_axis_type(self, value: CategoryAxisType):
        ...

    @property
    def aggregation_type(self) -> AxisAggregationType:
        ...

    @aggregation_type.setter
    def aggregation_type(self, value: AxisAggregationType):
        ...

    @property
    def bin_width(self) -> float:
        ...

    @bin_width.setter
    def bin_width(self, value: float):
        ...

    @property
    def number_of_bins(self) -> int:
        ...

    @number_of_bins.setter
    def number_of_bins(self, value: int):
        ...

    @property
    def is_overflow_bin(self) -> bool:
        ...

    @is_overflow_bin.setter
    def is_overflow_bin(self, value: bool):
        ...

    @property
    def is_automatic_overflow_bin(self) -> bool:
        ...

    @is_automatic_overflow_bin.setter
    def is_automatic_overflow_bin(self, value: bool):
        ...

    @property
    def overflow_bin(self) -> float:
        ...

    @overflow_bin.setter
    def overflow_bin(self, value: float):
        ...

    @property
    def is_underflow_bin(self) -> bool:
        ...

    @is_underflow_bin.setter
    def is_underflow_bin(self, value: bool):
        ...

    @property
    def is_automatic_underflow_bin(self) -> bool:
        ...

    @is_automatic_underflow_bin.setter
    def is_automatic_underflow_bin(self, value: bool):
        ...

    @property
    def underflow_bin(self) -> float:
        ...

    @underflow_bin.setter
    def underflow_bin(self, value: float):
        ...

    @property
    def as_i_formatted_text_container(self) -> IFormattedTextContainer:
        ...

    @property
    def text_format(self) -> IChartTextFormat:
        ...

    @property
    def as_i_chart_component(self) -> IChartComponent:
        ...

    @property
    def chart(self) -> IChart:
        ...

    @property
    def as_i_slide_component(self) -> ISlideComponent:
        ...

    @property
    def slide(self) -> IBaseSlide:
        ...

    @property
    def as_i_presentation_component(self) -> IPresentationComponent:
        ...

    @property
    def presentation(self) -> IPresentation:
        ...

    ...

class IAxisFormat:
    '''Represents chart format properties.'''
    @property
    def fill(self) -> IFillFormat:
        '''Returns fill style properties of an axis.
                    Read-only :py:class:`aspose.slides.IFillFormat`.'''
        ...

    @property
    def line(self) -> ILineFormat:
        '''Returns line style properties of an axis.
                    Read-only :py:class:`aspose.slides.ILineFormat`.'''
        ...

    @property
    def effect(self) -> IEffectFormat:
        '''Returns effects used for an axis.
                    Read-only :py:class:`aspose.slides.IEffectFormat`.'''
        ...

    ...

class IBaseChartValue:
    '''Represents a value of a chart.'''
    @property
    def data_source_type(self) -> DataSourceType:
        ...

    @data_source_type.setter
    def data_source_type(self, value: DataSourceType):
        ...

    @property
    def data(self) -> any:
        '''Read/write :py:class:`any`.'''
        ...

    @data.setter
    def data(self, value: any):
        '''Read/write :py:class:`any`.'''
        ...

    ...

class IChart:
    '''Represents an graphic chart on a slide.'''
    @overload
    def get_thumbnail(self) -> aspose.pydrawing.Bitmap:
        ...

    @overload
    def get_thumbnail(self, bounds: ShapeThumbnailBounds, scale_x: float, scale_y: float) -> aspose.pydrawing.Bitmap:
        ...

    @overload
    def get_image(self) -> IImage:
        ...

    @overload
    def get_image(self, bounds: ShapeThumbnailBounds, scale_x: float, scale_y: float) -> IImage:
        ...

    @overload
    def write_as_svg(self, stream: io.RawIOBase) -> None:
        ...

    @overload
    def write_as_svg(self, stream: io.RawIOBase, svg_options: aspose.slides.export.ISVGOptions) -> None:
        ...

    def validate_chart_layout(self) -> None:
        '''Calculates actual values of chart elements. Actual values inlude position of elements that implement IActualLayout interface 
                    (IActualLayout.ActualX, IActualLayout.ActualY, IActualLayout.ActualWidth, IActualLayout.ActualHeight)
                    and actual axes values (IAxis.ActualMaxValue, IAxis.ActualMinValue, IAxis.ActualMajorUnit, IAxis.ActualMinorUnit, 
                    IAxis.ActualMajorUnitScale, IAxis.ActualMinorUnitScale)'''
        ...

    def add_placeholder(self, placeholder_to_copy_from: IPlaceholder) -> IPlaceholder:
        ...

    def remove_placeholder(self) -> None:
        ...

    def get_base_placeholder(self) -> IShape:
        ...

    def create_theme_effective(self) -> aspose.slides.theme.IThemeEffectiveData:
        ...

    @property
    def plot_visible_cells_only(self) -> bool:
        ...

    @plot_visible_cells_only.setter
    def plot_visible_cells_only(self, value: bool):
        ...

    @property
    def display_blanks_as(self) -> DisplayBlanksAsType:
        ...

    @display_blanks_as.setter
    def display_blanks_as(self, value: DisplayBlanksAsType):
        ...

    @property
    def chart_data(self) -> IChartData:
        ...

    @property
    def has_title(self) -> bool:
        ...

    @has_title.setter
    def has_title(self, value: bool):
        ...

    @property
    def chart_title(self) -> IChartTitle:
        ...

    @property
    def has_data_table(self) -> bool:
        ...

    @has_data_table.setter
    def has_data_table(self, value: bool):
        ...

    @property
    def has_legend(self) -> bool:
        ...

    @has_legend.setter
    def has_legend(self, value: bool):
        ...

    @property
    def legend(self) -> ILegend:
        '''Returns or sets a legend for a chart.
                    Read-only :py:class:`aspose.slides.charts.ILegend`.'''
        ...

    @property
    def chart_data_table(self) -> IDataTable:
        ...

    @property
    def style(self) -> StyleType:
        '''Returns or sets the chart style.
                    Read/write :py:enum:`aspose.slides.charts.StyleType`.'''
        ...

    @style.setter
    def style(self, value: StyleType):
        '''Returns or sets the chart style.
                    Read/write :py:enum:`aspose.slides.charts.StyleType`.'''
        ...

    @property
    def type(self) -> ChartType:
        '''Returns or sets the chart type.
                    Read/write :py:enum:`aspose.slides.charts.ChartType`.'''
        ...

    @type.setter
    def type(self, value: ChartType):
        '''Returns or sets the chart type.
                    Read/write :py:enum:`aspose.slides.charts.ChartType`.'''
        ...

    @property
    def plot_area(self) -> IChartPlotArea:
        ...

    @property
    def rotation_3d(self) -> IRotation3D:
        ...

    @property
    def back_wall(self) -> IChartWall:
        ...

    @property
    def side_wall(self) -> IChartWall:
        ...

    @property
    def floor(self) -> IChartWall:
        '''Returns an object which allows to change format of the floor of a 3D chart.
                    Read-only :py:class:`aspose.slides.charts.IChartWall`.'''
        ...

    @property
    def user_shapes(self) -> IGroupShape:
        ...

    @property
    def axes(self) -> IAxesManager:
        '''Provide access to chart axes.
                    Read-only :py:class:`aspose.slides.charts.IAxesManager`.'''
        ...

    @property
    def show_data_labels_over_maximum(self) -> bool:
        ...

    @show_data_labels_over_maximum.setter
    def show_data_labels_over_maximum(self, value: bool):
        ...

    @property
    def has_rounded_corners(self) -> bool:
        ...

    @has_rounded_corners.setter
    def has_rounded_corners(self, value: bool):
        ...

    @property
    def as_i_graphical_object(self) -> IGraphicalObject:
        ...

    @property
    def as_i_formatted_text_container(self) -> IFormattedTextContainer:
        ...

    @property
    def as_i_override_themeable(self) -> aspose.slides.theme.IOverrideThemeable:
        ...

    @property
    def shape_lock(self) -> IGraphicalObjectLock:
        ...

    @property
    def graphical_object_lock(self) -> IGraphicalObjectLock:
        ...

    @property
    def as_i_shape(self) -> IShape:
        ...

    @property
    def is_text_holder(self) -> bool:
        ...

    @property
    def placeholder(self) -> IPlaceholder:
        ...

    @property
    def custom_data(self) -> ICustomData:
        ...

    @property
    def raw_frame(self) -> IShapeFrame:
        ...

    @raw_frame.setter
    def raw_frame(self, value: IShapeFrame):
        ...

    @property
    def frame(self) -> IShapeFrame:
        ...

    @frame.setter
    def frame(self, value: IShapeFrame):
        ...

    @property
    def line_format(self) -> ILineFormat:
        ...

    @property
    def three_d_format(self) -> IThreeDFormat:
        ...

    @property
    def effect_format(self) -> IEffectFormat:
        ...

    @property
    def fill_format(self) -> IFillFormat:
        ...

    @property
    def hidden(self) -> bool:
        ...

    @hidden.setter
    def hidden(self, value: bool):
        ...

    @property
    def z_order_position(self) -> int:
        ...

    @property
    def connection_site_count(self) -> int:
        ...

    @property
    def rotation(self) -> float:
        ...

    @rotation.setter
    def rotation(self, value: float):
        ...

    @property
    def x(self) -> float:
        ...

    @x.setter
    def x(self, value: float):
        ...

    @property
    def y(self) -> float:
        ...

    @y.setter
    def y(self, value: float):
        ...

    @property
    def width(self) -> float:
        ...

    @width.setter
    def width(self, value: float):
        ...

    @property
    def height(self) -> float:
        ...

    @height.setter
    def height(self, value: float):
        ...

    @property
    def alternative_text(self) -> str:
        ...

    @alternative_text.setter
    def alternative_text(self, value: str):
        ...

    @property
    def alternative_text_title(self) -> str:
        ...

    @alternative_text_title.setter
    def alternative_text_title(self, value: str):
        ...

    @property
    def name(self) -> str:
        ...

    @name.setter
    def name(self, value: str):
        ...

    @property
    def is_decorative(self) -> bool:
        ...

    @is_decorative.setter
    def is_decorative(self, value: bool):
        ...

    @property
    def unique_id(self) -> int:
        ...

    @property
    def office_interop_shape_id(self) -> int:
        ...

    @property
    def is_grouped(self) -> bool:
        ...

    @property
    def black_white_mode(self) -> BlackWhiteMode:
        ...

    @black_white_mode.setter
    def black_white_mode(self, value: BlackWhiteMode):
        ...

    @property
    def parent_group(self) -> IGroupShape:
        ...

    @property
    def as_i_hyperlink_container(self) -> IHyperlinkContainer:
        ...

    @property
    def slide(self) -> IBaseSlide:
        ...

    @property
    def as_i_presentation_component(self) -> IPresentationComponent:
        ...

    @property
    def presentation(self) -> IPresentation:
        ...

    @property
    def hyperlink_click(self) -> IHyperlink:
        ...

    @hyperlink_click.setter
    def hyperlink_click(self, value: IHyperlink):
        ...

    @property
    def hyperlink_mouse_over(self) -> IHyperlink:
        ...

    @hyperlink_mouse_over.setter
    def hyperlink_mouse_over(self, value: IHyperlink):
        ...

    @property
    def hyperlink_manager(self) -> IHyperlinkManager:
        ...

    @property
    def text_format(self) -> IChartTextFormat:
        ...

    @property
    def as_i_chart_component(self) -> IChartComponent:
        ...

    @property
    def chart(self) -> IChart:
        ...

    @property
    def theme_manager(self) -> aspose.slides.theme.IOverrideThemeManager:
        ...

    @property
    def as_i_themeable(self) -> aspose.slides.theme.IThemeable:
        ...

    ...

class IChartCategory:
    '''Represents chart categories.'''
    def remove(self) -> None:
        '''Removes category from chart.'''
        ...

    @property
    def use_cell(self) -> bool:
        ...

    @property
    def as_cell(self) -> IChartDataCell:
        ...

    @as_cell.setter
    def as_cell(self, value: IChartDataCell):
        ...

    @property
    def as_literal(self) -> any:
        ...

    @as_literal.setter
    def as_literal(self, value: any):
        ...

    @property
    def value(self) -> any:
        '''If UseCell is true then this property represents AsCell.Value property.
                    If UseCell is false then this property represents AsLiteral property.
                    Read/write :py:class:`any`.'''
        ...

    @value.setter
    def value(self, value: any):
        '''If UseCell is true then this property represents AsCell.Value property.
                    If UseCell is false then this property represents AsLiteral property.
                    Read/write :py:class:`any`.'''
        ...

    @property
    def grouping_levels(self) -> IChartCategoryLevelsManager:
        ...

    ...

class IChartCategoryCollection:
    '''Represents collection of :py:class:`aspose.slides.charts.IChartCategory`'''
    @overload
    def add(self, chart_data_cell: IChartDataCell) -> IChartCategory:
        '''If category exists in collection, return it. Else creates new chart category from 
                    :py:class:`aspose.slides.charts.IChartDataCell` and adds it to the collection.
        :param chart_data_cell: Cell used to create chart category.
        :returns: Added or existing category.'''
        ...

    @overload
    def add(self, value: any) -> IChartCategory:
        '''Creates new :py:class:`aspose.slides.charts.IChartCategory` from value and adds it to the collection.
        :param value: The value.
        :returns: Added :py:class:`aspose.slides.charts.IChartCategory`.'''
        ...

    def index_of(self, value: IChartCategory) -> int:
        '''Searches for the specified :py:class:`aspose.slides.charts.IChartCategory` and returns the zero-based index of the first occurrence within the entire Collection
        :param value: Chart category.
        :returns: The zero-based index of the first occurrence of value within the entire CollectionBase, if found; otherwise, -1.'''
        ...

    def remove(self, value: IChartCategory) -> None:
        '''Removes the specified value.
        :param value: The value.'''
        ...

    def remove_at(self, index: int) -> None:
        '''Removes the element at the given index.
        :param index: Index of a category to remove.'''
        ...

    def clear(self) -> None:
        '''Removes all elements from the collection.'''
        ...

    @property
    def use_cells(self) -> bool:
        ...

    @use_cells.setter
    def use_cells(self, value: bool):
        ...

    @property
    def grouping_level_count(self) -> int:
        ...

    @property
    def as_i_collection(self) -> list:
        ...

    @property
    def as_i_enumerable(self) -> collections.abc.Iterable:
        ...

    def __getitem__(self, key: int) -> IChartCategory
        ...

    ...

class IChartCategoryLevelsManager:
    '''Managed container of the values of the chart category levels.'''
    def set_grouping_item(self, level: int, value: any) -> None:
        '''Sets grouping item for defined level.
        :param level: Category level :py:class:`int`
        :param value: Groping item :py:class:`any`'''
        ...

    def delete_grouping_item(self, level: int) -> None:
        '''Delete grouping item for defined level.
        :param level: Category level :py:class:`int`'''
        ...

    def __getitem__(self, key: int) -> IChartDataCell
        ...

    ...

class IChartCellCollection:
    '''Represents collection of a cells with data.'''
    @overload
    def add(self, chart_data_cell: IChartDataCell) -> None:
        '''Add new cell to the collection.
        :param chart_data_cell: New cell to add.'''
        ...

    @overload
    def add(self, value: any) -> None:
        '''Creates :py:class:`aspose.slides.charts.IChartDataCell` from specified value and adds it to the collection.
        :param value: The value.'''
        ...

    def get_cells_address(self) -> str:
        '''Returns address of the set of cells in workbook.
        :returns: Address of the set of cells in workbook :py:class:`str`'''
        ...

    def get_concatenated_values_from_cells(self) -> str:
        '''Concatenation string from all cells string values.
        :returns: Resulting string :py:class:`str`'''
        ...

    def remove_at(self, index: int) -> None:
        '''Removes a cell from the collection by index.
        :param index: Index of a cell to remove.'''
        ...

    @property
    def count(self) -> int:
        '''Gets the count of cells in collection.
                    Read-only :py:class:`int`.'''
        ...

    @property
    def as_i_enumerable(self) -> collections.abc.Iterable:
        ...

    def __getitem__(self, key: int) -> IChartDataCell
        ...

    ...

class IChartComponent:
    '''Represents a component of a chart.'''
    @property
    def chart(self) -> IChart:
        '''Returns the chart.
                    Read-only :py:class:`aspose.slides.charts.IChart`.'''
        ...

    @property
    def as_i_slide_component(self) -> ISlideComponent:
        ...

    @property
    def slide(self) -> IBaseSlide:
        ...

    @property
    def as_i_presentation_component(self) -> IPresentationComponent:
        ...

    @property
    def presentation(self) -> IPresentation:
        ...

    ...

class IChartData:
    '''Represents data used for a chart plotting.'''
    @overload
    def set_external_workbook(self, workbook_path: str) -> None:
        '''Sets external workbook as a data source for the chart. Chart data will be updated from the target workbook.
        :param workbook_path: Path to the target workbook'''
        ...

    @overload
    def set_external_workbook(self, workbook_path: str, update_chart_data: bool) -> None:
        '''Sets external workbook as a data source for the chart.
        :param workbook_path: Path to the target workbook
        :param update_chart_data: If value is false only workbook path will be updated. 
                     Chart data won't be loaded and updated from the target workbook. Can be used when target workbook doesn't exist or it's not available.
                     If value is true chart data will be updated from the target workbook.'''
        ...

    def set_range(self, formula: str) -> None:
        '''Set chart data range. Series and categories will be updated based on new data range.
                    If amount of series in data range greater than count of series in the chart data then additional series with the same type
                    as a last series in the current collection will be added to the end of the collection.
        :param formula: The cells data range formula. E.g: "Sheet1!$A$1:$C$4" , "SomeSheetName!A1:B100", "Sheet1!$A$1:$B$5;Sheet1!$D$1:$D$5".'''
        ...

    def get_range(self) -> str:
        '''Gets chart data range.
        :returns: Cells data range formula. E.g: "Sheet1!$A$1:$C$4"'''
        ...

    def switch_row_column(self) -> None:
        '''Swap the data over the axis.
                    Data being charted on the X axis will move to the Y axis and vice versa.'''
        ...

    @property
    def chart_data_workbook(self) -> IChartDataWorkbook:
        ...

    @property
    def series(self) -> IChartSeriesCollection:
        '''Gets the series.
                    Read-only :py:class:`aspose.slides.charts.IChartSeriesCollection`.'''
        ...

    @property
    def series_groups(self) -> IChartSeriesGroupCollection:
        ...

    @property
    def categories(self) -> IChartCategoryCollection:
        '''Gets the primary categories (or both primary and secondary categories 
                    if :py:attr:`aspose.slides.charts.IChartData.use_secondary_categories` property is false).
                    Read-only :py:class:`aspose.slides.charts.IChartCategoryCollection`.'''
        ...

    @property
    def use_secondary_categories(self) -> bool:
        ...

    @use_secondary_categories.setter
    def use_secondary_categories(self, value: bool):
        ...

    @property
    def secondary_categories(self) -> IChartCategoryCollection:
        ...

    @property
    def data_source_type(self) -> ChartDataSourceType:
        ...

    @property
    def external_workbook_path(self) -> str:
        ...

    ...

class IChartDataCell:
    '''Represents cell for chart data.'''
    def calculate(self, update_values: bool) -> None:
        '''If the cell contains a formula, the value will be updated base on that formula.
        :param update_values: If false, no actual calculation will be performed. Use true for possible exceptions check.'''
        ...

    @property
    def row(self) -> int:
        '''Returns the index of the row of worksheet in which the cell is located.
                    Read-only :py:class:`int`.'''
        ...

    @property
    def column(self) -> int:
        '''Returns the index of the column of worksheet in which the cell is located.
                    Read-only :py:class:`int`.'''
        ...

    @property
    def value(self) -> any:
        '''Gets or sets the value of a cell.
                    Read/write :py:class:`any`.'''
        ...

    @value.setter
    def value(self, value: any):
        '''Gets or sets the value of a cell.
                    Read/write :py:class:`any`.'''
        ...

    @property
    def formula(self) -> str:
        '''Gets or sets the formula in A1-style.'''
        ...

    @formula.setter
    def formula(self, value: str):
        '''Gets or sets the formula in A1-style.'''
        ...

    @property
    def r1c1_formula(self) -> str:
        ...

    @r1c1_formula.setter
    def r1c1_formula(self, value: str):
        ...

    @property
    def chart_data_worksheet(self) -> IChartDataWorksheet:
        ...

    @property
    def is_hidden(self) -> bool:
        ...

    @property
    def custom_number_format(self) -> str:
        ...

    @custom_number_format.setter
    def custom_number_format(self, value: str):
        ...

    @property
    def preset_number_format(self) -> int:
        ...

    @preset_number_format.setter
    def preset_number_format(self, value: int):
        ...

    ...

class IChartDataPoint:
    '''Represents series data point.'''
    def remove(self) -> None:
        '''Removes DataPoint from chart series.'''
        ...

    def get_automatic_data_point_color(self) -> aspose.pydrawing.Color:
        '''Returns an automatic color of data point based on series index, data point index, ParentSeriesGroup.IsColorVaried propery and chart style. 
                    This color is used by default if FillType equals NotDefined.
        :returns: Automatic color of data point :py:class:`aspose.pydrawing.Color`'''
        ...

    @property
    def x_value(self) -> IStringOrDoubleChartValue:
        ...

    @property
    def y_value(self) -> IDoubleChartValue:
        ...

    @property
    def bubble_size(self) -> IDoubleChartValue:
        ...

    @property
    def value(self) -> IDoubleChartValue:
        '''Returns the value of chart data point.
                    Read-only :py:class:`aspose.slides.charts.IDoubleChartValue`.'''
        ...

    @property
    def size_value(self) -> IDoubleChartValue:
        ...

    @property
    def color_value(self) -> IDoubleChartValue:
        ...

    @property
    def error_bars_custom_values(self) -> IErrorBarsCustomValues:
        ...

    @property
    def label(self) -> IDataLabel:
        '''Represents the lable of chart data point.
                    Read-only :py:class:`aspose.slides.charts.IDataLabel`.'''
        ...

    @property
    def is_bubble_3d(self) -> bool:
        ...

    @is_bubble_3d.setter
    def is_bubble_3d(self, value: bool):
        ...

    @property
    def explosion(self) -> int:
        '''Specifies the amount the data point shall be moved from the center of the pie.
                    Read/write :py:class:`int`.'''
        ...

    @explosion.setter
    def explosion(self, value: int):
        '''Specifies the amount the data point shall be moved from the center of the pie.
                    Read/write :py:class:`int`.'''
        ...

    @property
    def format(self) -> IFormat:
        '''Represents the formatting properties.
                    Read/write :py:class:`aspose.slides.charts.IFormat`.'''
        ...

    @format.setter
    def format(self, value: IFormat):
        '''Represents the formatting properties.
                    Read/write :py:class:`aspose.slides.charts.IFormat`.'''
        ...

    @property
    def marker(self) -> IMarker:
        '''Specifies a data marker.
                    Read-only :py:class:`aspose.slides.charts.IMarker`.'''
        ...

    @property
    def related_legend_entry(self) -> ILegendEntryProperties:
        ...

    @property
    def set_as_total(self) -> bool:
        ...

    @set_as_total.setter
    def set_as_total(self, value: bool):
        ...

    @property
    def invert_if_negative(self) -> bool:
        ...

    @invert_if_negative.setter
    def invert_if_negative(self, value: bool):
        ...

    @property
    def data_point_levels(self) -> IChartDataPointLevelsManager:
        ...

    @property
    def index(self) -> int:
        '''Determines which of the parent's children collection this data point applies to.
                    Read :py:class:`int`.'''
        ...

    @property
    def as_i_actual_layout(self) -> IActualLayout:
        ...

    @property
    def actual_x(self) -> float:
        ...

    @property
    def actual_y(self) -> float:
        ...

    @property
    def actual_width(self) -> float:
        ...

    @property
    def actual_height(self) -> float:
        ...

    ...

class IChartDataPointCollection:
    '''Represents collection of a series data point.'''
    @overload
    def add_data_point_for_stock_series(self, value: IChartDataCell) -> IChartDataPoint:
        '''Creates the new data point and adds it to the end of collection.
                    Applicable for series which chartType is one of Stock subtypes (see also ChartTypeCharacterizer.IsChartTypeStock(ChartType) method).
        :param value: Data point Value.
        :returns: New data point.'''
        ...

    @overload
    def add_data_point_for_stock_series(self, value: float) -> IChartDataPoint:
        '''Creates the new data point and adds it to the end of collection.
                    Applicable for series which chartType is one of Stock subtypes (see also ChartTypeCharacterizer.IsChartTypeStock(ChartType) method).
        :param value: Data point Value.
        :returns: New data point.'''
        ...

    @overload
    def add_data_point_for_line_series(self, value: IChartDataCell) -> IChartDataPoint:
        '''Creates the new data point and adds it to the end of collection.
                    Applicable for series which chartType is one of Line subtypes (see also ChartTypeCharacterizer.IsChartTypeLine(ChartType) method).
        :param value: Data point Value.
        :returns: New data point.'''
        ...

    @overload
    def add_data_point_for_line_series(self, value: float) -> IChartDataPoint:
        '''Creates the new data point and adds it to the end of collection.
                    Applicable for series which chartType is one of Line subtypes (see also ChartTypeCharacterizer.IsChartTypeLine(ChartType) method).
        :param value: Data point Value.
        :returns: New data point.'''
        ...

    @overload
    def add_data_point_for_scatter_series(self, x_value: IChartDataCell, y_value: IChartDataCell) -> IChartDataPoint:
        '''Creates the new data point and adds it to the end of collection.
                    Applicable for series which chartType is one of Scatter subtypes (see also ChartTypeCharacterizer.IsChartTypeScatter(ChartType) method).
        :param x_value: Data point XValue
        :param y_value: Data point YValue
        :returns: New data point.'''
        ...

    @overload
    def add_data_point_for_scatter_series(self, x_value: float, y_value: IChartDataCell) -> IChartDataPoint:
        '''Creates the new data point and adds it to the end of collection.
                    Applicable for series which chartType is one of Scatter subtypes (see also ChartTypeCharacterizer.IsChartTypeScatter(ChartType) method).
        :param x_value: Data point XValue
        :param y_value: Data point YValue
        :returns: New data point.'''
        ...

    @overload
    def add_data_point_for_scatter_series(self, x_value: str, y_value: IChartDataCell) -> IChartDataPoint:
        '''Creates the new data point and adds it to the end of collection.
                    Applicable for series which chartType is one of Scatter subtypes (see also ChartTypeCharacterizer.IsChartTypeScatter(ChartType) method).
        :param x_value: Data point XValue
        :param y_value: Data point YValue
        :returns: New data point.'''
        ...

    @overload
    def add_data_point_for_scatter_series(self, x_value: IChartDataCell, y_value: float) -> IChartDataPoint:
        '''Creates the new data point and adds it to the end of collection.
                    Applicable for series which chartType is one of Scatter subtypes (see also ChartTypeCharacterizer.IsChartTypeScatter(ChartType) method).
        :param x_value: Data point XValue
        :param y_value: Data point YValue
        :returns: New data point.'''
        ...

    @overload
    def add_data_point_for_scatter_series(self, x_value: float, y_value: float) -> IChartDataPoint:
        '''Creates the new data point and adds it to the end of collection.
                    Applicable for series which chartType is one of Scatter subtypes (see also ChartTypeCharacterizer.IsChartTypeScatter(ChartType) method).
        :param x_value: Data point XValue
        :param y_value: Data point YValue
        :returns: New data point.'''
        ...

    @overload
    def add_data_point_for_scatter_series(self, x_value: str, y_value: float) -> IChartDataPoint:
        '''Creates the new data point and adds it to the end of collection.
                    Applicable for series which chartType is one of Scatter subtypes (see also ChartTypeCharacterizer.IsChartTypeScatter(ChartType) method).
        :param x_value: Data point XValue
        :param y_value: Data point YValue
        :returns: New data point.'''
        ...

    @overload
    def add_data_point_for_radar_series(self, value: IChartDataCell) -> IChartDataPoint:
        '''Creates the new data point and adds it to the end of collection.
                    Applicable for series which chartType is one of Radar subtypes (see also ChartTypeCharacterizer.IsChartTypeRadar(ChartType) method).
        :param value: Data point Value
        :returns: New data point.'''
        ...

    @overload
    def add_data_point_for_radar_series(self, value: float) -> IChartDataPoint:
        '''Creates the new data point and adds it to the end of collection.
                    Applicable for series which chartType is one of Radar subtypes (see also ChartTypeCharacterizer.IsChartTypeRadar(ChartType) method).
        :param value: Data point Value
        :returns: New data point.'''
        ...

    @overload
    def add_data_point_for_bar_series(self, value: IChartDataCell) -> IChartDataPoint:
        '''Creates the new data point and adds it to the end of collection.
                    Applicable for series which chartType is one of Column or Bar subtypes (see also ChartTypeCharacterizer.IsChartTypeColumn(ChartType) and ChartTypeCharacterizer.IsChartTypeBar(ChartType) method).
        :param value: Data point Value
        :returns: New data point.'''
        ...

    @overload
    def add_data_point_for_bar_series(self, value: float) -> IChartDataPoint:
        '''Creates the new data point and adds it to the end of collection.
                    Applicable for series which chartType is one of Column or Bar subtypes (see also ChartTypeCharacterizer.IsChartTypeColumn(ChartType) and ChartTypeCharacterizer.IsChartTypeBar(ChartType) method).
        :param value: Data point Value
        :returns: New data point.'''
        ...

    @overload
    def add_data_point_for_area_series(self, value: IChartDataCell) -> IChartDataPoint:
        '''Creates the new data point and adds it to the end of collection.
                    Applicable for series which chartType is one of Area subtypes (see also ChartTypeCharacterizer.IsChartTypeArea(ChartType) method).
        :param value: Data point Value
        :returns: New data point.'''
        ...

    @overload
    def add_data_point_for_area_series(self, value: float) -> IChartDataPoint:
        '''Creates the new data point and adds it to the end of collection.
                    Applicable for series which chartType is one of Area subtypes (see also ChartTypeCharacterizer.IsChartTypeArea(ChartType) method).
        :param value: Data point Value
        :returns: New data point.'''
        ...

    @overload
    def add_data_point_for_pie_series(self, value: IChartDataCell) -> IChartDataPoint:
        '''Creates the new data point and adds it to the end of collection.
                    Applicable for series which chartType is one of Pie subtypes (see also ChartTypeCharacterizer.IsChartTypePie(ChartType) method).
        :param value: Data point Value
        :returns: New data point.'''
        ...

    @overload
    def add_data_point_for_pie_series(self, value: float) -> IChartDataPoint:
        '''Creates the new data point and adds it to the end of collection.
                    Applicable for series which chartType is one of Pie subtypes (see also ChartTypeCharacterizer.IsChartTypePie(ChartType) method).
        :param value: Data point Value
        :returns: New data point.'''
        ...

    @overload
    def add_data_point_for_doughnut_series(self, value: IChartDataCell) -> IChartDataPoint:
        '''Creates the new data point and adds it to the end of collection.
                    Applicable for series which chartType is one of Doughnut subtypes (see also ChartTypeCharacterizer.IsChartTypeDoughnut(ChartType) method).
        :param value: Data point Value
        :returns: New data point.'''
        ...

    @overload
    def add_data_point_for_doughnut_series(self, value: float) -> IChartDataPoint:
        '''Creates the new data point and adds it to the end of collection.
                    Applicable for series which chartType is one of Doughnut subtypes (see also ChartTypeCharacterizer.IsChartTypeDoughnut(ChartType) method).
        :param value: Data point Value
        :returns: New data point.'''
        ...

    @overload
    def add_data_point_for_bubble_series(self, x_value: IChartDataCell, y_value: IChartDataCell, bubble_size: IChartDataCell) -> IChartDataPoint:
        '''Creates the new data point and adds it to the end of collection.
                    Applicable for series which chartType is one of Bubble subtypes (see also ChartTypeCharacterizer.IsChartTypeBubble(ChartType) method).
        :param x_value: Data point XValue
        :param y_value: Data point YValue
        :param bubble_size: Data point BubbleSize
        :returns: New data point.'''
        ...

    @overload
    def add_data_point_for_bubble_series(self, x_value: float, y_value: IChartDataCell, bubble_size: IChartDataCell) -> IChartDataPoint:
        '''Creates the new data point and adds it to the end of collection.
                    Applicable for series which chartType is one of Bubble subtypes (see also ChartTypeCharacterizer.IsChartTypeBubble(ChartType) method).
        :param x_value: Data point XValue
        :param y_value: Data point YValue
        :param bubble_size: Data point BubbleSize
        :returns: New data point.'''
        ...

    @overload
    def add_data_point_for_bubble_series(self, x_value: str, y_value: IChartDataCell, bubble_size: IChartDataCell) -> IChartDataPoint:
        '''Creates the new data point and adds it to the end of collection.
                    Applicable for series which chartType is one of Bubble subtypes (see also ChartTypeCharacterizer.IsChartTypeBubble(ChartType) method).
        :param x_value: Data point XValue
        :param y_value: Data point YValue
        :param bubble_size: Data point BubbleSize
        :returns: New data point.'''
        ...

    @overload
    def add_data_point_for_bubble_series(self, x_value: IChartDataCell, y_value: float, bubble_size: IChartDataCell) -> IChartDataPoint:
        '''Creates the new data point and adds it to the end of collection.
                    Applicable for series which chartType is one of Bubble subtypes (see also ChartTypeCharacterizer.IsChartTypeBubble(ChartType) method).
        :param x_value: Data point XValue
        :param y_value: Data point YValue
        :param bubble_size: Data point BubbleSize
        :returns: New data point.'''
        ...

    @overload
    def add_data_point_for_bubble_series(self, x_value: float, y_value: float, bubble_size: IChartDataCell) -> IChartDataPoint:
        '''Creates the new data point and adds it to the end of collection.
                    Applicable for series which chartType is one of Bubble subtypes (see also ChartTypeCharacterizer.IsChartTypeBubble(ChartType) method).
        :param x_value: Data point XValue
        :param y_value: Data point YValue
        :param bubble_size: Data point BubbleSize
        :returns: New data point.'''
        ...

    @overload
    def add_data_point_for_bubble_series(self, x_value: str, y_value: float, bubble_size: IChartDataCell) -> IChartDataPoint:
        '''Creates the new data point and adds it to the end of collection.
                    Applicable for series which chartType is one of Bubble subtypes (see also ChartTypeCharacterizer.IsChartTypeBubble(ChartType) method).
        :param x_value: Data point XValue
        :param y_value: Data point YValue
        :param bubble_size: Data point BubbleSize
        :returns: New data point.'''
        ...

    @overload
    def add_data_point_for_bubble_series(self, x_value: IChartDataCell, y_value: IChartDataCell, bubble_size: float) -> IChartDataPoint:
        '''Creates the new data point and adds it to the end of collection.
                    Applicable for series which chartType is one of Bubble subtypes (see also ChartTypeCharacterizer.IsChartTypeBubble(ChartType) method).
        :param x_value: Data point XValue
        :param y_value: Data point YValue
        :param bubble_size: Data point BubbleSize
        :returns: New data point.'''
        ...

    @overload
    def add_data_point_for_bubble_series(self, x_value: float, y_value: IChartDataCell, bubble_size: float) -> IChartDataPoint:
        '''Creates the new data point and adds it to the end of collection.
                    Applicable for series which chartType is one of Bubble subtypes (see also ChartTypeCharacterizer.IsChartTypeBubble(ChartType) method).
        :param x_value: Data point XValue
        :param y_value: Data point YValue
        :param bubble_size: Data point BubbleSize
        :returns: New data point.'''
        ...

    @overload
    def add_data_point_for_bubble_series(self, x_value: str, y_value: IChartDataCell, bubble_size: float) -> IChartDataPoint:
        '''Creates the new data point and adds it to the end of collection.
                    Applicable for series which chartType is one of Bubble subtypes (see also ChartTypeCharacterizer.IsChartTypeBubble(ChartType) method).
        :param x_value: Data point XValue
        :param y_value: Data point YValue
        :param bubble_size: Data point BubbleSize
        :returns: New data point.'''
        ...

    @overload
    def add_data_point_for_bubble_series(self, x_value: IChartDataCell, y_value: float, bubble_size: float) -> IChartDataPoint:
        '''Creates the new data point and adds it to the end of collection.
                    Applicable for series which chartType is one of Bubble subtypes (see also ChartTypeCharacterizer.IsChartTypeBubble(ChartType) method).
        :param x_value: Data point XValue
        :param y_value: Data point YValue
        :param bubble_size: Data point BubbleSize
        :returns: New data point.'''
        ...

    @overload
    def add_data_point_for_bubble_series(self, x_value: float, y_value: float, bubble_size: float) -> IChartDataPoint:
        '''Creates the new data point and adds it to the end of collection.
                    Applicable for series which chartType is one of Bubble subtypes (see also ChartTypeCharacterizer.IsChartTypeBubble(ChartType) method).
        :param x_value: Data point XValue
        :param y_value: Data point YValue
        :param bubble_size: Data point BubbleSize
        :returns: New data point.'''
        ...

    @overload
    def add_data_point_for_bubble_series(self, x_value: str, y_value: float, bubble_size: float) -> IChartDataPoint:
        '''Creates the new data point and adds it to the end of collection.
                    Applicable for series which chartType is one of Bubble subtypes (see also ChartTypeCharacterizer.IsChartTypeBubble(ChartType) method).
        :param x_value: Data point XValue
        :param y_value: Data point YValue
        :param bubble_size: Data point BubbleSize
        :returns: New data point.'''
        ...

    @overload
    def add_data_point_for_surface_series(self, value: IChartDataCell) -> IChartDataPoint:
        '''Creates the new data point and adds it to the end of collection.
                    Applicable for series which chartType is one of Surface subtypes (see also ChartTypeCharacterizer.IsChartTypeSurface(ChartType) method).
        :param value: Data point Value
        :returns: New data point.'''
        ...

    @overload
    def add_data_point_for_surface_series(self, value: float) -> IChartDataPoint:
        '''Creates the new data point and adds it to the end of collection.
                    Applicable for series which chartType is one of Surface subtypes (see also ChartTypeCharacterizer.IsChartTypeSurface(ChartType) method).
        :param value: Data point Value
        :returns: New data point.'''
        ...

    def get_or_create_data_point_by_idx(self, index: int) -> IChartDataPoint:
        '''If collection already contains data point with index ``index`` then returns this data point.
                    If collection doesn't contains data point with index ``index``==N
                    (when number of data points in this collection is less or equal then N)
                    then adds deficient data points and returns last (which has requested index).
                    For example, collection indexes are {0, 1, 2}, and requested index is 5.
                    Then method adds deficient data points: {0, 1, 2, 3, 4, 5}. And returns data point with index 5.
        :param index: Index.
        :returns: Returns data point with requested index.'''
        ...

    def add_data_point_for_sunburst_series(self, size_value: IChartDataCell) -> IChartDataPoint:
        '''Creates the new data point and adds it to the end of collection.
                    Applicable for series which chart type is Sunburst.
        :param size_value: Data point SizeValue
        :returns: New data point.'''
        ...

    def add_data_point_for_waterfall_series(self, value: IChartDataCell) -> IChartDataPoint:
        '''Creates the new data point and adds it to the end of collection.
                    Applicable for series which chart type is Waterfall.
        :param value: Data point value
        :returns: New data point.'''
        ...

    def add_data_point_for_box_and_whisker_series(self, value: IChartDataCell) -> IChartDataPoint:
        '''Creates the new data point and adds it to the end of collection.
                    Applicable for series which chart type is BoxAndWhisker.
        :param value: Data point Value
        :returns: New data point.'''
        ...

    def add_data_point_for_treemap_series(self, size_value: IChartDataCell) -> IChartDataPoint:
        '''Creates the new data point and adds it to the end of collection.
                    Applicable for series which chart type is Treemap.
        :param size_value: Data point SizeValue
        :returns: New data point.'''
        ...

    def add_data_point_for_histogram_series(self, value: IChartDataCell) -> IChartDataPoint:
        '''Creates the new data point and adds it to the end of collection.
                    Applicable for series which chart type is Histogram.
        :param value: Data point value
        :returns: New data point.'''
        ...

    def add_data_point_for_funnel_series(self, value: IChartDataCell) -> IChartDataPoint:
        '''Creates the new data point and adds it to the end of collection.
                    Applicable for series which chart type is Funnel.
        :param value: Data point value
        :returns: New data point.'''
        ...

    def add_data_point_for_map_series(self, value: IChartDataCell) -> IChartDataPoint:
        '''Creates the new data point and adds it to the end of collection.
                     Applicable for series which chart type is Map.
        :param value: Data point ColorValue
        :returns: New data point.'''
        ...

    def clear(self) -> None:
        '''Removes all elements from the collection.'''
        ...

    def remove(self, value: IChartDataPoint) -> None:
        '''Removes the specified value.
        :param value: The value.'''
        ...

    def remove_at(self, index: int) -> None:
        '''Removes the element at the given index.
        :param index: Index of a data point to remove.'''
        ...

    @property
    def data_source_type_for_x_values(self) -> DataSourceType:
        ...

    @data_source_type_for_x_values.setter
    def data_source_type_for_x_values(self, value: DataSourceType):
        ...

    @property
    def data_source_type_for_y_values(self) -> DataSourceType:
        ...

    @data_source_type_for_y_values.setter
    def data_source_type_for_y_values(self, value: DataSourceType):
        ...

    @property
    def data_source_type_for_bubble_sizes(self) -> DataSourceType:
        ...

    @data_source_type_for_bubble_sizes.setter
    def data_source_type_for_bubble_sizes(self, value: DataSourceType):
        ...

    @property
    def data_source_type_for_values(self) -> DataSourceType:
        ...

    @data_source_type_for_values.setter
    def data_source_type_for_values(self, value: DataSourceType):
        ...

    @property
    def data_source_type_for_error_bars_custom_values(self) -> IDataSourceTypeForErrorBarsCustomValues:
        ...

    @property
    def as_i_collection(self) -> list:
        ...

    @property
    def as_i_enumerable(self) -> collections.abc.Iterable:
        ...

    def __getitem__(self, key: int) -> IChartDataPoint
        ...

    ...

class IChartDataPointLevel:
    '''Represents data point level. Applies for Treemap and Sunburst chart.'''
    @property
    def format(self) -> IFormat:
        '''Represents formatting properties of data point level.
                    Read/write :py:class:`aspose.slides.charts.IFormat`.'''
        ...

    @property
    def label(self) -> IDataLabel:
        '''Represents data label of data point level. Applied for Treemap and  Sunburst sereis types.
                     Read-only :py:class:`aspose.slides.charts.IDataLabel`.'''
        ...

    ...

class IChartDataPointLevelsManager:
    '''Container of data point levels. Applied for Treeamp and Sunburst series.
                Data point levels indexing is zero-based.'''
    @property
    def count(self) -> int:
        '''Returns data point levels count.'''
        ...

    def __getitem__(self, key: int) -> IChartDataPointLevel
        ...

    ...

class IChartDataWorkbook:
    '''Provides access to embedded Excel workbook'''
    @overload
    def get_cell(self, worksheet_name: str, row: int, column: int) -> IChartDataCell:
        '''Gets the cell that can be used for chart series or categories
        :param worksheet_name: Name of the worksheet.
        :param row: The row.
        :param column: The column.
        :returns: Cell object'''
        ...

    @overload
    def get_cell(self, worksheet_index: int, row: int, column: int) -> IChartDataCell:
        '''Gets the cell that can be used for chart series or categories
        :param worksheet_index: Index of the worksheet.
        :param row: The row.
        :param column: The column.
        :returns: Cell object'''
        ...

    @overload
    def get_cell(self, worksheet_index: int, cell_name: str) -> IChartDataCell:
        '''Gets the cell that can be used for chart series or categories
        :param worksheet_index: Index of the worksheet.
        :param cell_name: Name of the cell.
        :returns: Cell object'''
        ...

    @overload
    def get_cell(self, worksheet_index: int, cell_name: str, value: any) -> IChartDataCell:
        '''Gets the cell that can be used for chart series or categories
        :param worksheet_index: Index of the worksheet.
        :param cell_name: Name of the cell.
        :param value: The value.
        :returns: Cell object'''
        ...

    @overload
    def get_cell(self, worksheet_index: int, row: int, column: int, value: any) -> IChartDataCell:
        '''Gets the cell that can be used for chart series or categories
        :param worksheet_index: Index of the worksheet.
        :param row: The row.
        :param column: The column.
        :param value: The value.
        :returns: Cell object'''
        ...

    def calculate_formulas(self) -> None:
        '''Calculates all formulas in the workbook and updates corresponding cells values.'''
        ...

    def get_cell_collection(self, formula: str, skip_hidden_cells: bool) -> IChartCellCollection:
        '''Gets the set of cells.
        :param formula: Excel formula like "Sheet1!$A$2:$A$5".
        :param skip_hidden_cells: If true then method returns collection without hidden cells.
        :returns: Set of cells :py:class:`aspose.slides.charts.IChartCellCollection`'''
        ...

    def clear(self, sheet_index: int) -> None:
        '''Clear all cells values on sheet
        :param sheet_index: Index of sheet'''
        ...

    @property
    def worksheets(self) -> IChartDataWorksheetCollection:
        '''Gets a collection of worksheets.'''
        ...

    ...

class IChartDataWorksheet:
    '''Represents worksheet associated with :py:class:`aspose.slides.charts.IChartDataCell`'''
    @property
    def name(self) -> str:
        '''Gets the name.
                    Read-only :py:class:`str`.'''
        ...

    @property
    def index(self) -> int:
        '''Gets the index.
                    Read-only :py:class:`int`.'''
        ...

    ...

class IChartDataWorksheetCollection:
    '''Represents the collection of worksheets of chart data workbook.'''
    @property
    def as_i_collection(self) -> list:
        ...

    @property
    def as_i_enumerable(self) -> collections.abc.Iterable:
        ...

    def __getitem__(self, key: int) -> IChartDataWorksheet
        ...

    ...

class IChartLinesFormat:
    '''Represents gridlines format properties.'''
    @property
    def line(self) -> ILineFormat:
        '''Returns line style properties of a chart line.
                    Read-only :py:class:`aspose.slides.ILineFormat`.'''
        ...

    @property
    def effect(self) -> IEffectFormat:
        '''Returns effects used for a chart line.
                    Read-only :py:class:`aspose.slides.IEffectFormat`.'''
        ...

    ...

class IChartParagraphFormat:
    '''Represents a paragraph formatting properties of a chart.'''
    @property
    def alignment(self) -> TextAlignment:
        '''Returns or sets the text alignment in a paragraph.
                    Read/write :py:enum:`aspose.slides.TextAlignment`.'''
        ...

    @alignment.setter
    def alignment(self, value: TextAlignment):
        '''Returns or sets the text alignment in a paragraph.
                    Read/write :py:enum:`aspose.slides.TextAlignment`.'''
        ...

    @property
    def space_within(self) -> float:
        ...

    @space_within.setter
    def space_within(self, value: float):
        ...

    @property
    def space_before(self) -> float:
        ...

    @space_before.setter
    def space_before(self, value: float):
        ...

    @property
    def space_after(self) -> float:
        ...

    @space_after.setter
    def space_after(self, value: float):
        ...

    @property
    def east_asian_line_break(self) -> NullableBool:
        ...

    @east_asian_line_break.setter
    def east_asian_line_break(self, value: NullableBool):
        ...

    @property
    def right_to_left(self) -> NullableBool:
        ...

    @right_to_left.setter
    def right_to_left(self, value: NullableBool):
        ...

    @property
    def latin_line_break(self) -> NullableBool:
        ...

    @latin_line_break.setter
    def latin_line_break(self, value: NullableBool):
        ...

    @property
    def hanging_punctuation(self) -> NullableBool:
        ...

    @hanging_punctuation.setter
    def hanging_punctuation(self, value: NullableBool):
        ...

    @property
    def margin_left(self) -> float:
        ...

    @margin_left.setter
    def margin_left(self, value: float):
        ...

    @property
    def margin_right(self) -> float:
        ...

    @margin_right.setter
    def margin_right(self, value: float):
        ...

    @property
    def indent(self) -> float:
        '''Returns or sets paragraph First Line Indent/Hanging Indent. Hanging Indent can be defined with negative values.
                    Read/write :py:class:`float`.'''
        ...

    @indent.setter
    def indent(self, value: float):
        '''Returns or sets paragraph First Line Indent/Hanging Indent. Hanging Indent can be defined with negative values.
                    Read/write :py:class:`float`.'''
        ...

    @property
    def default_tab_size(self) -> float:
        ...

    @default_tab_size.setter
    def default_tab_size(self, value: float):
        ...

    @property
    def tabs(self) -> ITabCollection:
        '''Returns tabulations of a paragraph.
                    Read-only :py:class:`aspose.slides.ITabCollection`.'''
        ...

    @property
    def font_alignment(self) -> FontAlignment:
        ...

    @font_alignment.setter
    def font_alignment(self, value: FontAlignment):
        ...

    ...

class IChartPlotArea:
    '''Represents chart title properties.'''
    @property
    def format(self) -> IFormat:
        '''Returns the format of a plot area.
                    Read-only :py:class:`aspose.slides.charts.IFormat`.'''
        ...

    @property
    def as_i_layoutable(self) -> ILayoutable:
        ...

    @property
    def as_i_actual_layout(self) -> IActualLayout:
        ...

    @property
    def layout_target_type(self) -> LayoutTargetType:
        ...

    @layout_target_type.setter
    def layout_target_type(self, value: LayoutTargetType):
        ...

    @property
    def x(self) -> float:
        ...

    @x.setter
    def x(self, value: float):
        ...

    @property
    def y(self) -> float:
        ...

    @y.setter
    def y(self, value: float):
        ...

    @property
    def width(self) -> float:
        ...

    @width.setter
    def width(self, value: float):
        ...

    @property
    def height(self) -> float:
        ...

    @height.setter
    def height(self, value: float):
        ...

    @property
    def right(self) -> float:
        ...

    @property
    def bottom(self) -> float:
        ...

    @property
    def as_i_chart_component(self) -> IChartComponent:
        ...

    @property
    def chart(self) -> IChart:
        ...

    @property
    def as_i_slide_component(self) -> ISlideComponent:
        ...

    @property
    def slide(self) -> IBaseSlide:
        ...

    @property
    def as_i_presentation_component(self) -> IPresentationComponent:
        ...

    @property
    def presentation(self) -> IPresentation:
        ...

    @property
    def actual_x(self) -> float:
        ...

    @property
    def actual_y(self) -> float:
        ...

    @property
    def actual_width(self) -> float:
        ...

    @property
    def actual_height(self) -> float:
        ...

    ...

class IChartPortionFormat:
    '''Represents the chart portion formatting properties used in charts.'''
    @property
    def as_i_base_portion_format(self) -> IBasePortionFormat:
        ...

    @property
    def line_format(self) -> ILineFormat:
        ...

    @property
    def fill_format(self) -> IFillFormat:
        ...

    @property
    def effect_format(self) -> IEffectFormat:
        ...

    @property
    def highlight_color(self) -> IColorFormat:
        ...

    @property
    def underline_line_format(self) -> ILineFormat:
        ...

    @property
    def underline_fill_format(self) -> IFillFormat:
        ...

    @property
    def font_bold(self) -> NullableBool:
        ...

    @font_bold.setter
    def font_bold(self, value: NullableBool):
        ...

    @property
    def font_italic(self) -> NullableBool:
        ...

    @font_italic.setter
    def font_italic(self, value: NullableBool):
        ...

    @property
    def kumimoji(self) -> NullableBool:
        ...

    @kumimoji.setter
    def kumimoji(self, value: NullableBool):
        ...

    @property
    def normalise_height(self) -> NullableBool:
        ...

    @normalise_height.setter
    def normalise_height(self, value: NullableBool):
        ...

    @property
    def proof_disabled(self) -> NullableBool:
        ...

    @proof_disabled.setter
    def proof_disabled(self, value: NullableBool):
        ...

    @property
    def font_underline(self) -> TextUnderlineType:
        ...

    @font_underline.setter
    def font_underline(self, value: TextUnderlineType):
        ...

    @property
    def text_cap_type(self) -> TextCapType:
        ...

    @text_cap_type.setter
    def text_cap_type(self, value: TextCapType):
        ...

    @property
    def strikethrough_type(self) -> TextStrikethroughType:
        ...

    @strikethrough_type.setter
    def strikethrough_type(self, value: TextStrikethroughType):
        ...

    @property
    def is_hard_underline_line(self) -> NullableBool:
        ...

    @is_hard_underline_line.setter
    def is_hard_underline_line(self, value: NullableBool):
        ...

    @property
    def is_hard_underline_fill(self) -> NullableBool:
        ...

    @is_hard_underline_fill.setter
    def is_hard_underline_fill(self, value: NullableBool):
        ...

    @property
    def font_height(self) -> float:
        ...

    @font_height.setter
    def font_height(self, value: float):
        ...

    @property
    def latin_font(self) -> IFontData:
        ...

    @latin_font.setter
    def latin_font(self, value: IFontData):
        ...

    @property
    def east_asian_font(self) -> IFontData:
        ...

    @east_asian_font.setter
    def east_asian_font(self, value: IFontData):
        ...

    @property
    def complex_script_font(self) -> IFontData:
        ...

    @complex_script_font.setter
    def complex_script_font(self, value: IFontData):
        ...

    @property
    def symbol_font(self) -> IFontData:
        ...

    @symbol_font.setter
    def symbol_font(self, value: IFontData):
        ...

    @property
    def escapement(self) -> float:
        ...

    @escapement.setter
    def escapement(self, value: float):
        ...

    @property
    def kerning_minimal_size(self) -> float:
        ...

    @kerning_minimal_size.setter
    def kerning_minimal_size(self, value: float):
        ...

    @property
    def language_id(self) -> str:
        ...

    @language_id.setter
    def language_id(self, value: str):
        ...

    @property
    def alternative_language_id(self) -> str:
        ...

    @alternative_language_id.setter
    def alternative_language_id(self, value: str):
        ...

    @property
    def spacing(self) -> float:
        ...

    @spacing.setter
    def spacing(self, value: float):
        ...

    ...

class IChartSeries:
    '''Represents a chart series.'''
    def get_automatic_series_color(self) -> aspose.pydrawing.Color:
        '''Returns an automatic color of series based on series index and chart style. 
                    This color is used by default if FillType equals NotDefined.
        :returns: Automatic color of series :py:class:`aspose.pydrawing.Color`'''
        ...

    @property
    def explosion(self) -> int:
        '''The distance of an open pie slice from the center of the pie chart is expressed as a percentage of the pie diameter.
                     Read/write :py:class:`int`.'''
        ...

    @explosion.setter
    def explosion(self, value: int):
        '''The distance of an open pie slice from the center of the pie chart is expressed as a percentage of the pie diameter.
                     Read/write :py:class:`int`.'''
        ...

    @property
    def smooth(self) -> bool:
        '''Represents curve smoothing. True if curve smoothing is turned on for the line chart or scatter chart. Applies only to line and scatter connected by lines charts.
                    Read/write :py:class:`bool`.'''
        ...

    @smooth.setter
    def smooth(self, value: bool):
        '''Represents curve smoothing. True if curve smoothing is turned on for the line chart or scatter chart. Applies only to line and scatter connected by lines charts.
                    Read/write :py:class:`bool`.'''
        ...

    @property
    def marker(self) -> IMarker:
        '''Return series marker.
                    Read-only :py:class:`aspose.slides.charts.IMarker`.'''
        ...

    @property
    def bar_3d_shape(self) -> ChartShapeType:
        ...

    @bar_3d_shape.setter
    def bar_3d_shape(self, value: ChartShapeType):
        ...

    @property
    def name(self) -> IStringChartValue:
        '''Return series name.
                    Read-only :py:class:`aspose.slides.charts.IStringChartValue`.'''
        ...

    @property
    def data_points(self) -> IChartDataPointCollection:
        ...

    @property
    def type(self) -> ChartType:
        '''Returns a type of this series.
                    Read/write :py:enum:`aspose.slides.charts.ChartType`.'''
        ...

    @type.setter
    def type(self, value: ChartType):
        '''Returns a type of this series.
                    Read/write :py:enum:`aspose.slides.charts.ChartType`.'''
        ...

    @property
    def parent_series_group(self) -> IChartSeriesGroup:
        ...

    @property
    def format(self) -> IFormat:
        '''Returns the format of a series.
                    Read-only :py:class:`aspose.slides.charts.IFormat`.'''
        ...

    @property
    def order(self) -> int:
        '''Returns the order of a series.
                    Read/write :py:class:`int`.'''
        ...

    @order.setter
    def order(self, value: int):
        '''Returns the order of a series.
                    Read/write :py:class:`int`.'''
        ...

    @property
    def labels(self) -> IDataLabelCollection:
        '''Returns the Labels of a series.
                    Read-only :py:class:`aspose.slides.charts.IDataLabelCollection`.'''
        ...

    @property
    def trend_lines(self) -> ITrendlineCollection:
        ...

    @property
    def error_bars_x_format(self) -> IErrorBarsFormat:
        ...

    @property
    def error_bars_y_format(self) -> IErrorBarsFormat:
        ...

    @property
    def plot_on_second_axis(self) -> bool:
        ...

    @plot_on_second_axis.setter
    def plot_on_second_axis(self, value: bool):
        ...

    @property
    def number_format_of_values(self) -> str:
        ...

    @number_format_of_values.setter
    def number_format_of_values(self, value: str):
        ...

    @property
    def number_format_of_x_values(self) -> str:
        ...

    @number_format_of_x_values.setter
    def number_format_of_x_values(self, value: str):
        ...

    @property
    def number_format_of_y_values(self) -> str:
        ...

    @number_format_of_y_values.setter
    def number_format_of_y_values(self, value: str):
        ...

    @property
    def number_format_of_bubble_sizes(self) -> str:
        ...

    @number_format_of_bubble_sizes.setter
    def number_format_of_bubble_sizes(self, value: str):
        ...

    @property
    def invert_if_negative(self) -> bool:
        ...

    @invert_if_negative.setter
    def invert_if_negative(self, value: bool):
        ...

    @property
    def inverted_solid_fill_color(self) -> IColorFormat:
        ...

    @property
    def related_legend_entry(self) -> ILegendEntryProperties:
        ...

    @property
    def show_inner_points(self) -> bool:
        ...

    @show_inner_points.setter
    def show_inner_points(self, value: bool):
        ...

    @property
    def show_outlier_points(self) -> bool:
        ...

    @show_outlier_points.setter
    def show_outlier_points(self, value: bool):
        ...

    @property
    def show_mean_markers(self) -> bool:
        ...

    @show_mean_markers.setter
    def show_mean_markers(self, value: bool):
        ...

    @property
    def show_mean_line(self) -> bool:
        ...

    @show_mean_line.setter
    def show_mean_line(self, value: bool):
        ...

    @property
    def quartile_method(self) -> QuartileMethodType:
        ...

    @quartile_method.setter
    def quartile_method(self, value: QuartileMethodType):
        ...

    @property
    def show_connector_lines(self) -> bool:
        ...

    @show_connector_lines.setter
    def show_connector_lines(self, value: bool):
        ...

    @property
    def parent_label_layout(self) -> ParentLabelLayoutType:
        ...

    @parent_label_layout.setter
    def parent_label_layout(self, value: ParentLabelLayoutType):
        ...

    @property
    def bubble_size_scale(self) -> int:
        ...

    @property
    def has_up_down_bars(self) -> bool:
        ...

    @property
    def gap_width(self) -> int:
        ...

    @property
    def gap_depth(self) -> int:
        ...

    @property
    def is_color_varied(self) -> bool:
        ...

    @property
    def has_series_lines(self) -> bool:
        ...

    @property
    def overlap(self) -> int:
        '''Specifies how much bars and columns overlap on 2-D charts, as a percentage (from -100% to 100%). 
                    This is the property not only of this series but of all series of parent series group. 
                    It is a projection of the appropriate property in the parent series group, and so this property is read-only.
                    To change the value, use the ParentSeriesGroup.Overlap read/write property.
                    Read-only :py:class:`int`.'''
        ...

    @property
    def second_pie_size(self) -> int:
        ...

    @property
    def pie_split_position(self) -> float:
        ...

    @property
    def pie_split_by(self) -> PieSplitType:
        ...

    @property
    def doughnut_hole_size(self) -> int:
        ...

    @property
    def first_slice_angle(self) -> int:
        ...

    @property
    def pie_split_custom_points(self) -> IPieSplitCustomPointCollection:
        ...

    @property
    def bubble_size_representation(self) -> BubbleSizeRepresentationType:
        ...

    @property
    def as_i_chart_component(self) -> IChartComponent:
        ...

    @property
    def chart(self) -> IChart:
        ...

    @property
    def as_i_slide_component(self) -> ISlideComponent:
        ...

    @property
    def slide(self) -> IBaseSlide:
        ...

    @property
    def as_i_presentation_component(self) -> IPresentationComponent:
        ...

    @property
    def presentation(self) -> IPresentation:
        ...

    ...

class IChartSeriesCollection:
    '''Represents collection of  :py:class:`aspose.slides.charts.IChartSeries`'''
    @overload
    def add(self, type: ChartType) -> IChartSeries:
        '''Creates new chart series and adds it to the collection.
        :param type: Type of series
        :returns: New chart series.'''
        ...

    @overload
    def add(self, cell_with_series_name: IChartDataCell, type: ChartType) -> IChartSeries:
        '''Creates new chart series from :py:class:`aspose.slides.charts.IChartDataCell` and adds it to the collection.
        :param cell_with_series_name: Cell which contain series name.
        :param type: Type set type of series
        :returns: Added chart series or series that already is in collection.'''
        ...

    @overload
    def add(self, cells_with_series_name: IChartCellCollection, type: ChartType) -> IChartSeries:
        '''Creates new chart series from :py:class:`aspose.slides.charts.IChartCellCollection` and adds it to the collection.
        :param cells_with_series_name: Cells which contain series name.
        :param type: Type set type of series
        :returns: Added chart series or series that already is in collection.'''
        ...

    @overload
    def add(self, name: str, type: ChartType) -> IChartSeries:
        '''Creates new chart series from value and adds it to the collection.
        :param name: Series name.
        :param type: Type set type of series
        :returns: Added chart series.'''
        ...

    def insert(self, index: int, type: ChartType) -> IChartSeries:
        '''Creates new chart series and inserts it into the collection.
        :param index: Index for insertion :py:class:`int`
        :param type: Chart type :py:enum:`aspose.slides.charts.ChartType`
        :returns: New chart series :py:class:`aspose.slides.charts.IChartSeries`'''
        ...

    def index_of(self, value: IChartSeries) -> int:
        '''Searches for the specified :py:class:`aspose.slides.charts.IChartSeries` and returns the zero-based index of the first occurrence within the entire Collection
        :param value: Chart series value.
        :returns: The zero-based index of the first occurrence of value within the entire CollectionBase, if found; otherwise, -1.'''
        ...

    def remove(self, value: IChartSeries) -> None:
        '''Removes the specified value.
        :param value: The value.'''
        ...

    def remove_at(self, index: int) -> None:
        '''Removes the element at the specified index
        :param index: Index :py:class:`int`'''
        ...

    def clear(self) -> None:
        '''Removes all elements (including the chart style) from the collection.'''
        ...

    @property
    def as_i_collection(self) -> list:
        ...

    @property
    def as_i_enumerable(self) -> collections.abc.Iterable:
        ...

    def __getitem__(self, key: int) -> IChartSeries
        ...

    ...

class IChartSeriesGroup:
    '''Represents group of series.'''
    @property
    def type(self) -> CombinableSeriesTypesGroup:
        '''Returns a type of this series group.
                    Read-only :py:enum:`aspose.slides.charts.CombinableSeriesTypesGroup`.'''
        ...

    @property
    def plot_on_second_axis(self) -> bool:
        ...

    @property
    def series(self) -> IChartSeriesReadonlyCollection:
        '''Returns a readonly collection of chart series.
                    Read-only :py:class:`aspose.slides.charts.IChartSeriesReadonlyCollection`.'''
        ...

    @property
    def up_down_bars(self) -> IUpDownBarsManager:
        ...

    @property
    def gap_width(self) -> int:
        ...

    @gap_width.setter
    def gap_width(self, value: int):
        ...

    @property
    def gap_depth(self) -> int:
        ...

    @gap_depth.setter
    def gap_depth(self, value: int):
        ...

    @property
    def first_slice_angle(self) -> int:
        ...

    @first_slice_angle.setter
    def first_slice_angle(self, value: int):
        ...

    @property
    def is_color_varied(self) -> bool:
        ...

    @is_color_varied.setter
    def is_color_varied(self, value: bool):
        ...

    @property
    def has_series_lines(self) -> bool:
        ...

    @has_series_lines.setter
    def has_series_lines(self, value: bool):
        ...

    @property
    def overlap(self) -> int:
        '''Specifies how much bars and columns shall overlap on 2-D charts, as a percentage (from -100% to 100%).
                     - -100%: Maximum spacing (bars are completely separated).
                     - 0%: Bars are placed side by side without overlap or spacing.
                     - 100%: Maximum overlap (bars completely overlap each other).
                     This property is read/write :py:class:`int`.'''
        ...

    @overlap.setter
    def overlap(self, value: int):
        '''Specifies how much bars and columns shall overlap on 2-D charts, as a percentage (from -100% to 100%).
                     - -100%: Maximum spacing (bars are completely separated).
                     - 0%: Bars are placed side by side without overlap or spacing.
                     - 100%: Maximum overlap (bars completely overlap each other).
                     This property is read/write :py:class:`int`.'''
        ...

    @property
    def second_pie_size(self) -> int:
        ...

    @second_pie_size.setter
    def second_pie_size(self, value: int):
        ...

    @property
    def pie_split_position(self) -> float:
        ...

    @pie_split_position.setter
    def pie_split_position(self, value: float):
        ...

    @property
    def pie_split_by(self) -> PieSplitType:
        ...

    @pie_split_by.setter
    def pie_split_by(self, value: PieSplitType):
        ...

    @property
    def pie_split_custom_points(self) -> IPieSplitCustomPointCollection:
        ...

    @property
    def doughnut_hole_size(self) -> int:
        ...

    @doughnut_hole_size.setter
    def doughnut_hole_size(self, value: int):
        ...

    @property
    def bubble_size_scale(self) -> int:
        ...

    @bubble_size_scale.setter
    def bubble_size_scale(self, value: int):
        ...

    @property
    def hi_low_lines_format(self) -> IChartLinesFormat:
        ...

    @property
    def bubble_size_representation(self) -> BubbleSizeRepresentationType:
        ...

    @bubble_size_representation.setter
    def bubble_size_representation(self, value: BubbleSizeRepresentationType):
        ...

    @property
    def as_i_chart_component(self) -> IChartComponent:
        ...

    @property
    def chart(self) -> IChart:
        ...

    @property
    def as_i_slide_component(self) -> ISlideComponent:
        ...

    @property
    def slide(self) -> IBaseSlide:
        ...

    @property
    def as_i_presentation_component(self) -> IPresentationComponent:
        ...

    @property
    def presentation(self) -> IPresentation:
        ...

    def __getitem__(self, key: int) -> IChartSeries
        ...

    ...

class IChartSeriesGroupCollection:
    '''Represents the collection of groups of combinable series.'''
    @property
    def as_i_collection(self) -> list:
        ...

    @property
    def as_i_enumerable(self) -> collections.abc.Iterable:
        ...

    def __getitem__(self, key: int) -> IChartSeriesGroup
        ...

    ...

class IChartSeriesReadonlyCollection:
    '''Represents a readonly collection of  :py:class:`aspose.slides.charts.IChartSeries`'''
    @property
    def as_i_collection(self) -> list:
        ...

    @property
    def as_i_enumerable(self) -> collections.abc.Iterable:
        ...

    def __getitem__(self, key: int) -> IChartSeries
        ...

    ...

class IChartTextBlockFormat:
    '''Represents formatting properties for chart text elements.'''
    @property
    def anchoring_type(self) -> TextAnchorType:
        ...

    @anchoring_type.setter
    def anchoring_type(self, value: TextAnchorType):
        ...

    @property
    def center_text(self) -> NullableBool:
        ...

    @center_text.setter
    def center_text(self, value: NullableBool):
        ...

    @property
    def text_vertical_type(self) -> TextVerticalType:
        ...

    @text_vertical_type.setter
    def text_vertical_type(self, value: TextVerticalType):
        ...

    @property
    def margin_left(self) -> float:
        ...

    @margin_left.setter
    def margin_left(self, value: float):
        ...

    @property
    def margin_right(self) -> float:
        ...

    @margin_right.setter
    def margin_right(self, value: float):
        ...

    @property
    def margin_top(self) -> float:
        ...

    @margin_top.setter
    def margin_top(self, value: float):
        ...

    @property
    def margin_bottom(self) -> float:
        ...

    @margin_bottom.setter
    def margin_bottom(self, value: float):
        ...

    @property
    def wrap_text(self) -> NullableBool:
        ...

    @wrap_text.setter
    def wrap_text(self, value: NullableBool):
        ...

    @property
    def autofit_type(self) -> TextAutofitType:
        ...

    @autofit_type.setter
    def autofit_type(self, value: TextAutofitType):
        ...

    @property
    def rotation_angle(self) -> float:
        ...

    @rotation_angle.setter
    def rotation_angle(self, value: float):
        ...

    ...

class IChartTextFormat:
    '''Chart operate with restricted set of text format properties.
                IChartTextFormat, IChartTextBlockFormat, IChartParagraphFormat, IChartPortionFormat
                interfaces describe this restricted set.'''
    def copy_to(self, dest_text_frame: ITextFrame) -> None:
        '''Copies text format to specified text frame.
        :param dest_text_frame: Text frame to copy text format to.'''
        ...

    def copy_from(self, source_text_frame: ITextFrame) -> None:
        '''Copies text format from specified text frame.
        :param source_text_frame: Text frame to copy text format.'''
        ...

    @property
    def text_block_format(self) -> IChartTextBlockFormat:
        ...

    @property
    def paragraph_format(self) -> IChartParagraphFormat:
        ...

    @property
    def portion_format(self) -> IChartPortionFormat:
        ...

    ...

class IChartTitle:
    '''Represents chart title properties.'''
    def add_text_frame_for_overriding(self, text: str) -> ITextFrame:
        ...

    @property
    def overlay(self) -> bool:
        '''Determines whether other chart elements shall be allowed to overlap title.
                    Read/write :py:class:`bool`.'''
        ...

    @overlay.setter
    def overlay(self, value: bool):
        '''Determines whether other chart elements shall be allowed to overlap title.
                    Read/write :py:class:`bool`.'''
        ...

    @property
    def format(self) -> IFormat:
        '''Returns the fill, line, effect styles of a title.
                    Read-only :py:class:`aspose.slides.charts.IFormat`.'''
        ...

    @property
    def as_i_layoutable(self) -> ILayoutable:
        ...

    @property
    def as_i_overridable_text(self) -> IOverridableText:
        ...

    @property
    def x(self) -> float:
        ...

    @x.setter
    def x(self, value: float):
        ...

    @property
    def y(self) -> float:
        ...

    @y.setter
    def y(self, value: float):
        ...

    @property
    def width(self) -> float:
        ...

    @width.setter
    def width(self, value: float):
        ...

    @property
    def height(self) -> float:
        ...

    @height.setter
    def height(self, value: float):
        ...

    @property
    def right(self) -> float:
        ...

    @property
    def bottom(self) -> float:
        ...

    @property
    def chart(self) -> IChart:
        ...

    @property
    def as_i_slide_component(self) -> ISlideComponent:
        ...

    @property
    def slide(self) -> IBaseSlide:
        ...

    @property
    def as_i_presentation_component(self) -> IPresentationComponent:
        ...

    @property
    def presentation(self) -> IPresentation:
        ...

    @property
    def text_frame_for_overriding(self) -> ITextFrame:
        ...

    @property
    def as_i_formatted_text_container(self) -> IFormattedTextContainer:
        ...

    @property
    def text_format(self) -> IChartTextFormat:
        ...

    ...

class IChartWall:
    '''Represents walls on 3d charts.'''
    @property
    def thickness(self) -> int:
        '''Returns or sets the walls thickness as a percentage of the largest 
                    dimension of the plot volume.
                    Read/write :py:class:`int`.'''
        ...

    @thickness.setter
    def thickness(self, value: int):
        '''Returns or sets the walls thickness as a percentage of the largest 
                    dimension of the plot volume.
                    Read/write :py:class:`int`.'''
        ...

    @property
    def format(self) -> IFormat:
        '''Returns the wall fill, line, effect, 3d styles.
                    Read-only :py:class:`aspose.slides.charts.IFormat`.'''
        ...

    @property
    def picture_type(self) -> PictureType:
        ...

    @picture_type.setter
    def picture_type(self, value: PictureType):
        ...

    ...

class IDataLabel:
    '''Represents a series labels.'''
    def hide(self) -> None:
        '''Make data label hidden by setting all Show*-flags (ShowValue, ...) to false state.
                    IsVisible will be false after this.'''
        ...

    def get_actual_label_text(self) -> str:
        '''Returns actual label text based on DataLabelFormat settings or TextFrameForOverriding.Text value.
        :returns: Actual label text :py:class:`str`'''
        ...

    def add_text_frame_for_overriding(self, text: str) -> ITextFrame:
        ...

    @property
    def is_visible(self) -> bool:
        ...

    @property
    def data_label_format(self) -> IDataLabelFormat:
        ...

    @property
    def value_from_cell(self) -> IChartDataCell:
        ...

    @value_from_cell.setter
    def value_from_cell(self, value: IChartDataCell):
        ...

    @property
    def as_i_layoutable(self) -> ILayoutable:
        ...

    @property
    def as_i_overridable_text(self) -> IOverridableText:
        ...

    @property
    def as_i_actual_layout(self) -> IActualLayout:
        ...

    @property
    def x(self) -> float:
        ...

    @x.setter
    def x(self, value: float):
        ...

    @property
    def y(self) -> float:
        ...

    @y.setter
    def y(self, value: float):
        ...

    @property
    def width(self) -> float:
        ...

    @width.setter
    def width(self, value: float):
        ...

    @property
    def height(self) -> float:
        ...

    @height.setter
    def height(self, value: float):
        ...

    @property
    def right(self) -> float:
        ...

    @property
    def bottom(self) -> float:
        ...

    @property
    def chart(self) -> IChart:
        ...

    @property
    def as_i_slide_component(self) -> ISlideComponent:
        ...

    @property
    def slide(self) -> IBaseSlide:
        ...

    @property
    def as_i_presentation_component(self) -> IPresentationComponent:
        ...

    @property
    def presentation(self) -> IPresentation:
        ...

    @property
    def text_frame_for_overriding(self) -> ITextFrame:
        ...

    @property
    def as_i_formatted_text_container(self) -> IFormattedTextContainer:
        ...

    @property
    def text_format(self) -> IChartTextFormat:
        ...

    @property
    def actual_x(self) -> float:
        ...

    @property
    def actual_y(self) -> float:
        ...

    @property
    def actual_width(self) -> float:
        ...

    @property
    def actual_height(self) -> float:
        ...

    ...

class IDataLabelCollection:
    '''Represents a series labels.'''
    def hide(self) -> None:
        '''Make data label hidden by default by setting all Show*-flags (ShowValue, ...) of the 
                    DefaultDataLabelFormat property to false state.
                    IsVisible will be false after this.'''
        ...

    def index_of(self, value: IDataLabel) -> int:
        '''Returns an index of the specified DataLabel in the collection.
        :param value: DataLabel to find.
        :returns: Index of a DataLabel or -1 if DataLabel not from this collection.'''
        ...

    @property
    def default_data_label_format(self) -> IDataLabelFormat:
        ...

    @property
    def leader_lines_format(self) -> IChartLinesFormat:
        ...

    @property
    def is_visible(self) -> bool:
        ...

    @property
    def count_of_visible_data_labels(self) -> int:
        ...

    @property
    def count(self) -> int:
        '''Gets the number of all data labels in the collection.
                    Read-only :py:class:`int`.'''
        ...

    @property
    def parent_series(self) -> IChartSeries:
        ...

    @property
    def as_i_chart_component(self) -> IChartComponent:
        ...

    @property
    def as_i_enumerable(self) -> collections.abc.Iterable:
        ...

    @property
    def chart(self) -> IChart:
        ...

    @property
    def as_i_slide_component(self) -> ISlideComponent:
        ...

    @property
    def slide(self) -> IBaseSlide:
        ...

    @property
    def as_i_presentation_component(self) -> IPresentationComponent:
        ...

    @property
    def presentation(self) -> IPresentation:
        ...

    def __getitem__(self, key: int) -> IDataLabel
        ...

    ...

class IDataLabelFormat:
    '''Represents formatting options for DataLabel.'''
    @property
    def is_number_format_linked_to_source(self) -> bool:
        ...

    @is_number_format_linked_to_source.setter
    def is_number_format_linked_to_source(self, value: bool):
        ...

    @property
    def number_format(self) -> str:
        ...

    @number_format.setter
    def number_format(self, value: str):
        ...

    @property
    def format(self) -> IFormat:
        '''Represents the format of the data label.
                    Read-only :py:class:`aspose.slides.charts.IFormat`.'''
        ...

    @property
    def position(self) -> LegendDataLabelPosition:
        '''Represents the position of the data label.
                    Read/write :py:enum:`aspose.slides.charts.LegendDataLabelPosition`.'''
        ...

    @position.setter
    def position(self, value: LegendDataLabelPosition):
        '''Represents the position of the data label.
                    Read/write :py:enum:`aspose.slides.charts.LegendDataLabelPosition`.'''
        ...

    @property
    def show_legend_key(self) -> bool:
        ...

    @show_legend_key.setter
    def show_legend_key(self, value: bool):
        ...

    @property
    def show_value(self) -> bool:
        ...

    @show_value.setter
    def show_value(self, value: bool):
        ...

    @property
    def show_category_name(self) -> bool:
        ...

    @show_category_name.setter
    def show_category_name(self, value: bool):
        ...

    @property
    def show_series_name(self) -> bool:
        ...

    @show_series_name.setter
    def show_series_name(self, value: bool):
        ...

    @property
    def show_percentage(self) -> bool:
        ...

    @show_percentage.setter
    def show_percentage(self, value: bool):
        ...

    @property
    def show_bubble_size(self) -> bool:
        ...

    @show_bubble_size.setter
    def show_bubble_size(self, value: bool):
        ...

    @property
    def show_leader_lines(self) -> bool:
        ...

    @show_leader_lines.setter
    def show_leader_lines(self, value: bool):
        ...

    @property
    def show_label_as_data_callout(self) -> bool:
        ...

    @show_label_as_data_callout.setter
    def show_label_as_data_callout(self, value: bool):
        ...

    @property
    def show_label_value_from_cell(self) -> bool:
        ...

    @show_label_value_from_cell.setter
    def show_label_value_from_cell(self, value: bool):
        ...

    @property
    def separator(self) -> str:
        '''Sets or returns a Variant representing the separator used for the data labels on a chart.
                    Read/write :py:class:`str`.'''
        ...

    @separator.setter
    def separator(self, value: str):
        '''Sets or returns a Variant representing the separator used for the data labels on a chart.
                    Read/write :py:class:`str`.'''
        ...

    @property
    def as_i_formatted_text_container(self) -> IFormattedTextContainer:
        ...

    @property
    def text_format(self) -> IChartTextFormat:
        ...

    @property
    def as_i_chart_component(self) -> IChartComponent:
        ...

    @property
    def chart(self) -> IChart:
        ...

    @property
    def as_i_slide_component(self) -> ISlideComponent:
        ...

    @property
    def slide(self) -> IBaseSlide:
        ...

    @property
    def as_i_presentation_component(self) -> IPresentationComponent:
        ...

    @property
    def presentation(self) -> IPresentation:
        ...

    ...

class IDataSourceTypeForErrorBarsCustomValues:
    '''Specifies types of values in ChartDataPoint.ErrorBarsCustomValues properties list'''
    @property
    def data_source_type_for_x_minus_values(self) -> DataSourceType:
        ...

    @data_source_type_for_x_minus_values.setter
    def data_source_type_for_x_minus_values(self, value: DataSourceType):
        ...

    @property
    def data_source_type_for_x_plus_values(self) -> DataSourceType:
        ...

    @data_source_type_for_x_plus_values.setter
    def data_source_type_for_x_plus_values(self, value: DataSourceType):
        ...

    @property
    def data_source_type_for_y_minus_values(self) -> DataSourceType:
        ...

    @data_source_type_for_y_minus_values.setter
    def data_source_type_for_y_minus_values(self, value: DataSourceType):
        ...

    @property
    def data_source_type_for_y_plus_values(self) -> DataSourceType:
        ...

    @data_source_type_for_y_plus_values.setter
    def data_source_type_for_y_plus_values(self, value: DataSourceType):
        ...

    ...

class IDataTable:
    '''Represents data table properties.'''
    @property
    def format(self) -> IFormat:
        '''Returns the line, fill, and effect styles of an object.
                    Read-only :py:class:`aspose.slides.charts.IFormat`.'''
        ...

    @property
    def has_border_horizontal(self) -> bool:
        ...

    @has_border_horizontal.setter
    def has_border_horizontal(self, value: bool):
        ...

    @property
    def has_border_outline(self) -> bool:
        ...

    @has_border_outline.setter
    def has_border_outline(self, value: bool):
        ...

    @property
    def has_border_vertical(self) -> bool:
        ...

    @has_border_vertical.setter
    def has_border_vertical(self, value: bool):
        ...

    @property
    def show_legend_key(self) -> bool:
        ...

    @show_legend_key.setter
    def show_legend_key(self, value: bool):
        ...

    @property
    def as_i_formatted_text_container(self) -> IFormattedTextContainer:
        ...

    @property
    def text_format(self) -> IChartTextFormat:
        ...

    @property
    def as_i_chart_component(self) -> IChartComponent:
        ...

    @property
    def chart(self) -> IChart:
        ...

    @property
    def as_i_slide_component(self) -> ISlideComponent:
        ...

    @property
    def slide(self) -> IBaseSlide:
        ...

    @property
    def as_i_presentation_component(self) -> IPresentationComponent:
        ...

    @property
    def presentation(self) -> IPresentation:
        ...

    ...

class IDoubleChartValue:
    '''Represent double value which can be stored in pptx presentation document in two ways:
                1) in cell/cells of workbook related to chart;
                2) as literal value.'''
    def to_double(self) -> float:
        '''Converst to double.
        :returns: Double value.'''
        ...

    @property
    def as_literal_double(self) -> float:
        ...

    @as_literal_double.setter
    def as_literal_double(self, value: float):
        ...

    @property
    def as_i_single_cell_chart_value(self) -> ISingleCellChartValue:
        ...

    @property
    def as_cell(self) -> IChartDataCell:
        ...

    @as_cell.setter
    def as_cell(self, value: IChartDataCell):
        ...

    @property
    def as_i_base_chart_value(self) -> IBaseChartValue:
        ...

    @property
    def data_source_type(self) -> DataSourceType:
        ...

    @data_source_type.setter
    def data_source_type(self, value: DataSourceType):
        ...

    @property
    def data(self) -> any:
        ...

    @data.setter
    def data(self, value: any):
        ...

    ...

class IErrorBarsCustomValues:
    '''Specifies the errors bar values. It shall be used only when the Error bars value type is Custom.'''
    @property
    def x_minus(self) -> IDoubleChartValue:
        ...

    @property
    def y_minus(self) -> IDoubleChartValue:
        ...

    @property
    def x_plus(self) -> IDoubleChartValue:
        ...

    @property
    def y_plus(self) -> IDoubleChartValue:
        ...

    ...

class IErrorBarsFormat:
    '''Represents error bars of chart series. ErrorBars custom values are in IChartDataPointCollection
                (in :py:attr:`aspose.slides.charts.IChartDataPoint.error_bars_custom_values` property).'''
    @property
    def type(self) -> ErrorBarType:
        '''Gets or sets type of error bars. 
                    Read/write :py:enum:`aspose.slides.charts.ErrorBarType`.'''
        ...

    @type.setter
    def type(self, value: ErrorBarType):
        '''Gets or sets type of error bars. 
                    Read/write :py:enum:`aspose.slides.charts.ErrorBarType`.'''
        ...

    @property
    def value_type(self) -> ErrorBarValueType:
        ...

    @value_type.setter
    def value_type(self, value: ErrorBarValueType):
        ...

    @property
    def has_end_cap(self) -> bool:
        ...

    @has_end_cap.setter
    def has_end_cap(self, value: bool):
        ...

    @property
    def value(self) -> float:
        '''Gets or sets value which is used with Fixed, Percentage and StandardDeviation value types to determine the length of the error bars. 
                    Read/write :py:class:`float`.'''
        ...

    @value.setter
    def value(self, value: float):
        '''Gets or sets value which is used with Fixed, Percentage and StandardDeviation value types to determine the length of the error bars. 
                    Read/write :py:class:`float`.'''
        ...

    @property
    def format(self) -> IFormat:
        '''Represents the format of the error bars.
                    Read/write :py:class:`aspose.slides.charts.IFormat`.'''
        ...

    @format.setter
    def format(self, value: IFormat):
        '''Represents the format of the error bars.
                    Read/write :py:class:`aspose.slides.charts.IFormat`.'''
        ...

    @property
    def is_visible(self) -> bool:
        ...

    @is_visible.setter
    def is_visible(self, value: bool):
        ...

    @property
    def as_i_chart_component(self) -> IChartComponent:
        ...

    @property
    def chart(self) -> IChart:
        ...

    @property
    def as_i_slide_component(self) -> ISlideComponent:
        ...

    @property
    def slide(self) -> IBaseSlide:
        ...

    @property
    def as_i_presentation_component(self) -> IPresentationComponent:
        ...

    @property
    def presentation(self) -> IPresentation:
        ...

    ...

class IFormat:
    '''Represents chart format properties.'''
    @property
    def fill(self) -> IFillFormat:
        '''Returns fill style properties of a chart.
                    Read-only :py:class:`aspose.slides.IFillFormat`.'''
        ...

    @property
    def line(self) -> ILineFormat:
        '''Returns line style properties of a chart.
                    Read-only :py:class:`aspose.slides.ILineFormat`.'''
        ...

    @property
    def effect(self) -> IEffectFormat:
        '''Returns effects used for a chart.
                    Read-only :py:class:`aspose.slides.IEffectFormat`.'''
        ...

    @property
    def effect_3d(self) -> IThreeDFormat:
        ...

    ...

class IFormattedTextContainer:
    '''Represents chart text format.'''
    @property
    def text_format(self) -> IChartTextFormat:
        ...

    @property
    def as_i_chart_component(self) -> IChartComponent:
        ...

    @property
    def chart(self) -> IChart:
        ...

    @property
    def as_i_slide_component(self) -> ISlideComponent:
        ...

    @property
    def slide(self) -> IBaseSlide:
        ...

    @property
    def as_i_presentation_component(self) -> IPresentationComponent:
        ...

    @property
    def presentation(self) -> IPresentation:
        ...

    ...

class ILayoutable:
    '''Specifies the exact position of a chart element.'''
    @property
    def x(self) -> float:
        '''Specifies the x location (left) of the chart element as a fraction of the width of the chart.
                    Read/write :py:class:`float`.'''
        ...

    @x.setter
    def x(self, value: float):
        '''Specifies the x location (left) of the chart element as a fraction of the width of the chart.
                    Read/write :py:class:`float`.'''
        ...

    @property
    def y(self) -> float:
        '''Specifies the top of the chart element as a fraction of the height of the chart.
                    Read/write :py:class:`float`.'''
        ...

    @y.setter
    def y(self, value: float):
        '''Specifies the top of the chart element as a fraction of the height of the chart.
                    Read/write :py:class:`float`.'''
        ...

    @property
    def width(self) -> float:
        '''Specifies the width of the chart element as a fraction of the width of the chart.
                    Read/write :py:class:`float`.'''
        ...

    @width.setter
    def width(self, value: float):
        '''Specifies the width of the chart element as a fraction of the width of the chart.
                    Read/write :py:class:`float`.'''
        ...

    @property
    def height(self) -> float:
        '''Specifies the height of the chart element as a fraction of the height of the chart.
                    Read/write :py:class:`float`.'''
        ...

    @height.setter
    def height(self, value: float):
        '''Specifies the height of the chart element as a fraction of the height of the chart.
                    Read/write :py:class:`float`.'''
        ...

    @property
    def right(self) -> float:
        '''Gets the right of the chart element as a fraction of the width of the chart.
                    Read-only :py:class:`float`.'''
        ...

    @property
    def bottom(self) -> float:
        '''Gets the top of the chart element as a fraction of the height of the chart.
                    Read-only :py:class:`float`.'''
        ...

    @property
    def as_i_chart_component(self) -> IChartComponent:
        ...

    @property
    def chart(self) -> IChart:
        ...

    @property
    def as_i_slide_component(self) -> ISlideComponent:
        ...

    @property
    def slide(self) -> IBaseSlide:
        ...

    @property
    def as_i_presentation_component(self) -> IPresentationComponent:
        ...

    @property
    def presentation(self) -> IPresentation:
        ...

    ...

class ILegend:
    '''Represents chart's legend properties.'''
    @property
    def overlay(self) -> bool:
        '''Determines whether other chart elements shall be allowed to overlap legend.
                    Read/write :py:class:`bool`.'''
        ...

    @overlay.setter
    def overlay(self, value: bool):
        '''Determines whether other chart elements shall be allowed to overlap legend.
                    Read/write :py:class:`bool`.'''
        ...

    @property
    def position(self) -> LegendPositionType:
        '''Specifies the position of the legend on a chart.
                    Non-NaN values of X, Y, Width, Heigt properties override effect of this property.
                    Read/write :py:enum:`aspose.slides.charts.LegendPositionType`.'''
        ...

    @position.setter
    def position(self, value: LegendPositionType):
        '''Specifies the position of the legend on a chart.
                    Non-NaN values of X, Y, Width, Heigt properties override effect of this property.
                    Read/write :py:enum:`aspose.slides.charts.LegendPositionType`.'''
        ...

    @property
    def format(self) -> IFormat:
        '''Returns the format of a legend.
                    Read-only :py:class:`aspose.slides.charts.IFormat`.'''
        ...

    @property
    def entries(self) -> ILegendEntryCollection:
        '''Gets legend entries.
                    Read-only :py:class:`aspose.slides.charts.ILegendEntryCollection`.'''
        ...

    @property
    def as_i_layoutable(self) -> ILayoutable:
        ...

    @property
    def as_i_formatted_text_container(self) -> IFormattedTextContainer:
        ...

    @property
    def x(self) -> float:
        ...

    @x.setter
    def x(self, value: float):
        ...

    @property
    def y(self) -> float:
        ...

    @y.setter
    def y(self, value: float):
        ...

    @property
    def width(self) -> float:
        ...

    @width.setter
    def width(self, value: float):
        ...

    @property
    def height(self) -> float:
        ...

    @height.setter
    def height(self, value: float):
        ...

    @property
    def right(self) -> float:
        ...

    @property
    def bottom(self) -> float:
        ...

    @property
    def chart(self) -> IChart:
        ...

    @property
    def as_i_slide_component(self) -> ISlideComponent:
        ...

    @property
    def slide(self) -> IBaseSlide:
        ...

    @property
    def as_i_presentation_component(self) -> IPresentationComponent:
        ...

    @property
    def presentation(self) -> IPresentation:
        ...

    @property
    def text_format(self) -> IChartTextFormat:
        ...

    ...

class ILegendEntryCollection:
    '''Represents legends collection.'''
    @property
    def count(self) -> int:
        '''Gets the number of elements actually contained in the collection.
                    Read-only :py:class:`int`.'''
        ...

    def __getitem__(self, key: int) -> ILegendEntryProperties
        ...

    ...

class ILegendEntryProperties:
    '''Represents legend properties of a chart.'''
    @property
    def hide(self) -> bool:
        '''Returns or sets the hide flag of legend entry.
                    Read/write :py:class:`bool`.'''
        ...

    @hide.setter
    def hide(self, value: bool):
        '''Returns or sets the hide flag of legend entry.
                    Read/write :py:class:`bool`.'''
        ...

    @property
    def as_i_formatted_text_container(self) -> IFormattedTextContainer:
        ...

    @property
    def text_format(self) -> IChartTextFormat:
        ...

    @property
    def as_i_chart_component(self) -> IChartComponent:
        ...

    @property
    def chart(self) -> IChart:
        ...

    @property
    def as_i_slide_component(self) -> ISlideComponent:
        ...

    @property
    def slide(self) -> IBaseSlide:
        ...

    @property
    def as_i_presentation_component(self) -> IPresentationComponent:
        ...

    @property
    def presentation(self) -> IPresentation:
        ...

    ...

class IMarker:
    '''Represents marker of a chert.'''
    @property
    def symbol(self) -> MarkerStyleType:
        '''Represents the marker style in a line chart, scatter chart, or radar chart.
                    Read/write :py:enum:`aspose.slides.charts.MarkerStyleType`.'''
        ...

    @symbol.setter
    def symbol(self, value: MarkerStyleType):
        '''Represents the marker style in a line chart, scatter chart, or radar chart.
                    Read/write :py:enum:`aspose.slides.charts.MarkerStyleType`.'''
        ...

    @property
    def format(self) -> IFormat:
        '''Gets the marker fill.
                    Read-only :py:class:`aspose.slides.charts.IFormat`.'''
        ...

    @property
    def size(self) -> int:
        '''Represents the marker size in a line chart, scatter chart, or radar chart.
                    Read/write :py:class:`int`.'''
        ...

    @size.setter
    def size(self, value: int):
        '''Represents the marker size in a line chart, scatter chart, or radar chart.
                    Read/write :py:class:`int`.'''
        ...

    ...

class IMultipleCellChartValue:
    '''Represents a collection of a chart cells.'''
    @property
    def as_cells(self) -> IChartCellCollection:
        ...

    @as_cells.setter
    def as_cells(self, value: IChartCellCollection):
        ...

    @property
    def as_i_base_chart_value(self) -> IBaseChartValue:
        ...

    @property
    def data_source_type(self) -> DataSourceType:
        ...

    @data_source_type.setter
    def data_source_type(self, value: DataSourceType):
        ...

    @property
    def data(self) -> any:
        ...

    @data.setter
    def data(self, value: any):
        ...

    ...

class IOverridableText:
    '''Represents overridable text for a chart.'''
    def add_text_frame_for_overriding(self, text: str) -> ITextFrame:
        '''Initialize TextFrameForOverriding with the text in paramener "text".
                    If TextFrameForOverriding is already initialized then simply changes its text.
        :param text: Text for a new TextFrameForOverriding.
        :returns: Text frame :py:class:`aspose.slides.ITextFrame`'''
        ...

    @property
    def text_frame_for_overriding(self) -> ITextFrame:
        ...

    @property
    def as_i_formatted_text_container(self) -> IFormattedTextContainer:
        ...

    @property
    def text_format(self) -> IChartTextFormat:
        ...

    @property
    def as_i_chart_component(self) -> IChartComponent:
        ...

    @property
    def chart(self) -> IChart:
        ...

    @property
    def as_i_slide_component(self) -> ISlideComponent:
        ...

    @property
    def slide(self) -> IBaseSlide:
        ...

    @property
    def as_i_presentation_component(self) -> IPresentationComponent:
        ...

    @property
    def presentation(self) -> IPresentation:
        ...

    ...

class IPieSplitCustomPointCollection:
    '''Represents a collection of points that shall be drawn in the second pie or bar on a bar-of-pie or pie-of-pie chart with a custom split.'''
    def add(self, data_point_index: int) -> None:
        '''Adds data point by its index in parent series points collection.
        :param data_point_index: Index of data point in parent series points collection.'''
        ...

    @property
    def as_i_enumerable(self) -> collections.abc.Iterable:
        ...

    def __getitem__(self, key: int) -> IChartDataPoint
        ...

    ...

class IRotation3D:
    '''Represents 3D rotation of a chart.'''
    @property
    def rotation_x(self) -> int:
        ...

    @rotation_x.setter
    def rotation_x(self, value: int):
        ...

    @property
    def rotation_y(self) -> int:
        ...

    @rotation_y.setter
    def rotation_y(self, value: int):
        ...

    @property
    def perspective(self) -> int:
        '''Returns or sets the perspective value (field of view angle) for 3D charts (between 0 and 100).
                    Ignored if RightAngleAxes property value is true.
                    Read/write :py:class:`int`.'''
        ...

    @perspective.setter
    def perspective(self, value: int):
        '''Returns or sets the perspective value (field of view angle) for 3D charts (between 0 and 100).
                    Ignored if RightAngleAxes property value is true.
                    Read/write :py:class:`int`.'''
        ...

    @property
    def right_angle_axes(self) -> bool:
        ...

    @right_angle_axes.setter
    def right_angle_axes(self, value: bool):
        ...

    @property
    def depth_percents(self) -> int:
        ...

    @depth_percents.setter
    def depth_percents(self, value: int):
        ...

    @property
    def height_percents(self) -> int:
        ...

    @height_percents.setter
    def height_percents(self, value: int):
        ...

    ...

class ISingleCellChartValue:
    '''Represents a chart data cell.'''
    @property
    def as_cell(self) -> IChartDataCell:
        ...

    @as_cell.setter
    def as_cell(self, value: IChartDataCell):
        ...

    @property
    def as_i_base_chart_value(self) -> IBaseChartValue:
        ...

    @property
    def data_source_type(self) -> DataSourceType:
        ...

    @data_source_type.setter
    def data_source_type(self, value: DataSourceType):
        ...

    @property
    def data(self) -> any:
        ...

    @data.setter
    def data(self, value: any):
        ...

    ...

class IStringChartValue:
    '''Represent string value which can be stored in pptx presentation document in two ways:
                1) in cell/cells of workbook related to chart;
                2) as literal value.'''
    def to_string(self) -> str:
        '''Returns string representation.
        :returns: String representation of a value :py:class:`str`'''
        ...

    def set_from_one_cell(self, cell: IChartDataCell) -> None:
        '''Sets value from specified cell.
        :param cell: Cell.'''
        ...

    def get_cells_address_in_workbook(self) -> str:
        '''If DataSourceType property is DataSourceType.Worksheet then this method returns address
                    of the cells in workbook which represent the string data. Otherwise return
                    empty string.
        :returns: String value :py:class:`str`'''
        ...

    @property
    def as_literal_string(self) -> str:
        ...

    @as_literal_string.setter
    def as_literal_string(self, value: str):
        ...

    @property
    def as_i_multiple_cell_chart_value(self) -> IMultipleCellChartValue:
        ...

    @property
    def as_cells(self) -> IChartCellCollection:
        ...

    @as_cells.setter
    def as_cells(self, value: IChartCellCollection):
        ...

    @property
    def as_i_base_chart_value(self) -> IBaseChartValue:
        ...

    @property
    def data_source_type(self) -> DataSourceType:
        ...

    @data_source_type.setter
    def data_source_type(self, value: DataSourceType):
        ...

    @property
    def data(self) -> any:
        ...

    @data.setter
    def data(self, value: any):
        ...

    ...

class IStringOrDoubleChartValue:
    '''Represent string or double value which can be stored in pptx presentation document in two ways:
                1) in cell/cells of workbook related to chart;
                2) as literal value.'''
    def to_double(self) -> float:
        '''Converts value to double.
        :returns: Double value :py:class:`float`'''
        ...

    @property
    def as_literal_string(self) -> str:
        ...

    @as_literal_string.setter
    def as_literal_string(self, value: str):
        ...

    @property
    def as_literal_double(self) -> float:
        ...

    @as_literal_double.setter
    def as_literal_double(self, value: float):
        ...

    @property
    def as_i_single_cell_chart_value(self) -> ISingleCellChartValue:
        ...

    @property
    def as_cell(self) -> IChartDataCell:
        ...

    @as_cell.setter
    def as_cell(self, value: IChartDataCell):
        ...

    @property
    def as_i_base_chart_value(self) -> IBaseChartValue:
        ...

    @property
    def data_source_type(self) -> DataSourceType:
        ...

    @data_source_type.setter
    def data_source_type(self, value: DataSourceType):
        ...

    @property
    def data(self) -> any:
        ...

    @data.setter
    def data(self, value: any):
        ...

    ...

class ITrendline:
    '''Class represents trend line of chart series'''
    def add_text_frame_for_overriding(self, text: str) -> ITextFrame:
        ...

    @property
    def trendline_name(self) -> str:
        ...

    @trendline_name.setter
    def trendline_name(self, value: str):
        ...

    @property
    def trendline_type(self) -> TrendlineType:
        ...

    @trendline_type.setter
    def trendline_type(self, value: TrendlineType):
        ...

    @property
    def format(self) -> IFormat:
        '''Represents the format of the trend line.
                    Read/write :py:class:`aspose.slides.charts.IFormat`.'''
        ...

    @format.setter
    def format(self, value: IFormat):
        '''Represents the format of the trend line.
                    Read/write :py:class:`aspose.slides.charts.IFormat`.'''
        ...

    @property
    def backward(self) -> float:
        '''Specifies the number of categories (or units on a scatter chart) that the trend line extends before
                    the data for the series that is being trended. On scatter and non-scatter charts, the value shall be any nonnegative
                    value.
                    Read/write :py:class:`float`.'''
        ...

    @backward.setter
    def backward(self, value: float):
        '''Specifies the number of categories (or units on a scatter chart) that the trend line extends before
                    the data for the series that is being trended. On scatter and non-scatter charts, the value shall be any nonnegative
                    value.
                    Read/write :py:class:`float`.'''
        ...

    @property
    def forward(self) -> float:
        '''Specifies the number of categories (or units on a scatter chart) that the trendline extends after the
                    data for the series that is being trended. On scatter and non-scatter charts, the value shall be any non-negative
                    value.
                    Read/write :py:class:`float`.'''
        ...

    @forward.setter
    def forward(self, value: float):
        '''Specifies the number of categories (or units on a scatter chart) that the trendline extends after the
                    data for the series that is being trended. On scatter and non-scatter charts, the value shall be any non-negative
                    value.
                    Read/write :py:class:`float`.'''
        ...

    @property
    def intercept(self) -> float:
        '''Specifies the value where the trendline shall cross the y axis. This property shall be supported only
                    when the trendline type is exp, linear, or poly.
                    Read/write :py:class:`float`.'''
        ...

    @intercept.setter
    def intercept(self, value: float):
        '''Specifies the value where the trendline shall cross the y axis. This property shall be supported only
                    when the trendline type is exp, linear, or poly.
                    Read/write :py:class:`float`.'''
        ...

    @property
    def display_equation(self) -> bool:
        ...

    @display_equation.setter
    def display_equation(self, value: bool):
        ...

    @property
    def order(self) -> int:
        '''Specifies the order of the polynomial trend line. It is ignored for other trend line types. Value must be between 2 and 6.
                    Read/write :py:class:`int`.'''
        ...

    @order.setter
    def order(self, value: int):
        '''Specifies the order of the polynomial trend line. It is ignored for other trend line types. Value must be between 2 and 6.
                    Read/write :py:class:`int`.'''
        ...

    @property
    def period(self) -> int:
        '''Specifies the period of the trend line for a moving average trend line. It is ignored for other trend
                    line variants. Value must be between 2 and 255.
                    Read/write :py:class:`int`.'''
        ...

    @period.setter
    def period(self, value: int):
        '''Specifies the period of the trend line for a moving average trend line. It is ignored for other trend
                    line variants. Value must be between 2 and 255.
                    Read/write :py:class:`int`.'''
        ...

    @property
    def display_r_squared_value(self) -> bool:
        ...

    @display_r_squared_value.setter
    def display_r_squared_value(self, value: bool):
        ...

    @property
    def related_legend_entry(self) -> ILegendEntryProperties:
        ...

    @property
    def as_i_overridable_text(self) -> IOverridableText:
        ...

    @property
    def text_frame_for_overriding(self) -> ITextFrame:
        ...

    @property
    def as_i_formatted_text_container(self) -> IFormattedTextContainer:
        ...

    @property
    def text_format(self) -> IChartTextFormat:
        ...

    @property
    def as_i_chart_component(self) -> IChartComponent:
        ...

    @property
    def chart(self) -> IChart:
        ...

    @property
    def as_i_slide_component(self) -> ISlideComponent:
        ...

    @property
    def slide(self) -> IBaseSlide:
        ...

    @property
    def as_i_presentation_component(self) -> IPresentationComponent:
        ...

    @property
    def presentation(self) -> IPresentation:
        ...

    ...

class ITrendlineCollection:
    '''Represents a collection of TrendlineEx'''
    def add(self, trendline_type: TrendlineType) -> ITrendline:
        '''Adds the new Trendline at the end of a collection and return it.
        :param trendline_type: Trendline type :py:enum:`aspose.slides.charts.TrendlineType`
        :returns: New Trendline :py:class:`aspose.slides.charts.ITrendline`'''
        ...

    def remove(self, value: ITrendline) -> None:
        '''Removes the specified value.
        :param value: Trendline to remove :py:class:`aspose.slides.charts.ITrendline`'''
        ...

    @property
    def count(self) -> int:
        '''Gets the number of elements actually contained in the collection.
                    Read-only :py:class:`int`.'''
        ...

    @property
    def as_i_enumerable(self) -> collections.abc.Iterable:
        ...

    def __getitem__(self, key: int) -> ITrendline
        ...

    ...

class IUpDownBarsManager:
    '''Provide access to up/down bars of Line- or Stock-chart.'''
    @property
    def up_bars_format(self) -> IFormat:
        ...

    @property
    def down_bars_format(self) -> IFormat:
        ...

    @property
    def has_up_down_bars(self) -> bool:
        ...

    @has_up_down_bars.setter
    def has_up_down_bars(self, value: bool):
        ...

    @property
    def gap_width(self) -> int:
        ...

    @gap_width.setter
    def gap_width(self, value: int):
        ...

    ...

class Legend:
    '''Represents chart's legend properties.'''
    @property
    def x(self) -> float:
        '''Returns or sets the x coordinate of a legend as a fraction of the width of the chart.
                    Read/write :py:class:`float`.'''
        ...

    @x.setter
    def x(self, value: float):
        '''Returns or sets the x coordinate of a legend as a fraction of the width of the chart.
                    Read/write :py:class:`float`.'''
        ...

    @property
    def y(self) -> float:
        '''Returns or sets the y coordinate of a legend as a fraction of the height of the chart.
                    Read/write :py:class:`float`.'''
        ...

    @y.setter
    def y(self, value: float):
        '''Returns or sets the y coordinate of a legend as a fraction of the height of the chart.
                    Read/write :py:class:`float`.'''
        ...

    @property
    def width(self) -> float:
        '''Returns or sets the width of a legend as a fraction of the width of the chart.
                    Read/write :py:class:`float`.'''
        ...

    @width.setter
    def width(self, value: float):
        '''Returns or sets the width of a legend as a fraction of the width of the chart.
                    Read/write :py:class:`float`.'''
        ...

    @property
    def height(self) -> float:
        '''Returns or sets the height of a legend as a fraction of the height of the chart.
                    Read/write :py:class:`float`.'''
        ...

    @height.setter
    def height(self, value: float):
        '''Returns or sets the height of a legend as a fraction of the height of the chart.
                    Read/write :py:class:`float`.'''
        ...

    @property
    def right(self) -> float:
        '''Right.
                    Read-only :py:class:`float`.'''
        ...

    @property
    def bottom(self) -> float:
        '''Bottom.
                    Read-only :py:class:`float`.'''
        ...

    @property
    def overlay(self) -> bool:
        '''Determines whether other chart elements shall be allowed to overlap legend.
                    Read/write :py:class:`bool`.'''
        ...

    @overlay.setter
    def overlay(self, value: bool):
        '''Determines whether other chart elements shall be allowed to overlap legend.
                    Read/write :py:class:`bool`.'''
        ...

    @property
    def text_format(self) -> IChartTextFormat:
        ...

    @property
    def position(self) -> LegendPositionType:
        '''Specifies the position of the legend on a chart.
                    Non-NaN values of X, Y, Width, Heigt properties override effect of this property.
                    Read/write :py:enum:`aspose.slides.charts.LegendPositionType`.'''
        ...

    @position.setter
    def position(self, value: LegendPositionType):
        '''Specifies the position of the legend on a chart.
                    Non-NaN values of X, Y, Width, Heigt properties override effect of this property.
                    Read/write :py:enum:`aspose.slides.charts.LegendPositionType`.'''
        ...

    @property
    def format(self) -> IFormat:
        '''Returns the format of a legend.
                    Read-only :py:class:`aspose.slides.charts.IFormat`.'''
        ...

    @property
    def chart(self) -> IChart:
        '''Returns the chart.
                    Read-only :py:class:`aspose.slides.charts.IChart`.'''
        ...

    @property
    def entries(self) -> ILegendEntryCollection:
        '''Gets legend entries.
                    Read-only :py:class:`aspose.slides.charts.ILegendEntryCollection`.'''
        ...

    @property
    def as_i_layoutable(self) -> ILayoutable:
        ...

    @property
    def as_i_formatted_text_container(self) -> IFormattedTextContainer:
        ...

    @property
    def as_i_slide_component(self) -> ISlideComponent:
        ...

    @property
    def slide(self) -> IBaseSlide:
        ...

    @property
    def as_i_presentation_component(self) -> IPresentationComponent:
        ...

    @property
    def presentation(self) -> IPresentation:
        ...

    ...

class LegendEntryCollection:
    '''Represents legends collection.'''
    @property
    def count(self) -> int:
        '''Gets the number of legend entries.
                    Read-only :py:class:`int`.'''
        ...

    def __getitem__(self, key: int) -> ILegendEntryProperties
        ...

    ...

class LegendEntryProperties:
    '''Represents legend properties of a chart.'''
    @property
    def text_format(self) -> IChartTextFormat:
        ...

    @property
    def hide(self) -> bool:
        '''Determines whether the legend entry is hide.
                    Read/write :py:class:`bool`.'''
        ...

    @hide.setter
    def hide(self, value: bool):
        '''Determines whether the legend entry is hide.
                    Read/write :py:class:`bool`.'''
        ...

    @property
    def chart(self) -> IChart:
        '''Returns the parent chart.
                    Read-only :py:class:`aspose.slides.charts.IChart`.'''
        ...

    @property
    def as_i_formatted_text_container(self) -> IFormattedTextContainer:
        ...

    @property
    def as_i_chart_component(self) -> IChartComponent:
        ...

    @property
    def as_i_slide_component(self) -> ISlideComponent:
        ...

    @property
    def slide(self) -> IBaseSlide:
        ...

    @property
    def as_i_presentation_component(self) -> IPresentationComponent:
        ...

    @property
    def presentation(self) -> IPresentation:
        ...

    ...

class Marker:
    '''Represents marker of a chert.'''
    @property
    def symbol(self) -> MarkerStyleType:
        '''Represents the marker style in a line chart, scatter chart, or radar chart.
                    Read/write :py:enum:`aspose.slides.charts.MarkerStyleType`.'''
        ...

    @symbol.setter
    def symbol(self, value: MarkerStyleType):
        '''Represents the marker style in a line chart, scatter chart, or radar chart.
                    Read/write :py:enum:`aspose.slides.charts.MarkerStyleType`.'''
        ...

    @property
    def format(self) -> IFormat:
        '''Gets or sets the marker fill.
                    Read-only :py:class:`aspose.slides.charts.IFormat`.'''
        ...

    @property
    def size(self) -> int:
        '''Represents the marker size in a line chart, scatter chart, or radar chart.
                    Read/write :py:class:`int`.'''
        ...

    @size.setter
    def size(self, value: int):
        '''Represents the marker size in a line chart, scatter chart, or radar chart.
                    Read/write :py:class:`int`.'''
        ...

    ...

class PieSplitCustomPointCollection:
    '''Represents a collection of points for splitting point in a bar-of-pie or pie-of-pie chart with a custom split.'''
    def add(self, data_point_index: int) -> None:
        '''Adds data point by its index in parent series points collection.
        :param data_point_index: Index of data point in parent series points collection.'''
        ...

    @property
    def is_synchronized(self) -> bool:
        ...

    @property
    def sync_root(self) -> any:
        ...

    @property
    def as_i_enumerable(self) -> collections.abc.Iterable:
        ...

    def __getitem__(self, key: int) -> IChartDataPoint
        ...

    ...

class Rotation3D:
    '''Represents 3D rotation of a chart.'''
    @property
    def rotation_x(self) -> int:
        ...

    @rotation_x.setter
    def rotation_x(self, value: int):
        ...

    @property
    def rotation_y(self) -> int:
        ...

    @rotation_y.setter
    def rotation_y(self, value: int):
        ...

    @property
    def perspective(self) -> int:
        '''Returns or sets the perspective value (field of view angle) for 3D charts (between 0 and 240).
                    Ignored if RightAngleAxes property value is true.
                    Read/write :py:class:`int`.'''
        ...

    @perspective.setter
    def perspective(self, value: int):
        '''Returns or sets the perspective value (field of view angle) for 3D charts (between 0 and 240).
                    Ignored if RightAngleAxes property value is true.
                    Read/write :py:class:`int`.'''
        ...

    @property
    def right_angle_axes(self) -> bool:
        ...

    @right_angle_axes.setter
    def right_angle_axes(self, value: bool):
        ...

    @property
    def depth_percents(self) -> int:
        ...

    @depth_percents.setter
    def depth_percents(self, value: int):
        ...

    @property
    def height_percents(self) -> int:
        ...

    @height_percents.setter
    def height_percents(self, value: int):
        ...

    ...

class StringChartValue(BaseChartValue):
    '''Represent string value which can be stored in pptx presentation document in two ways:
                1) in cell/cells of workbook related to chart;
                2) as literal value.'''
    def set_from_one_cell(self, cell: IChartDataCell) -> None:
        '''Sets value from specified cell.
        :param cell: Cell.'''
        ...

    def get_cells_address_in_workbook(self) -> str:
        '''If DataSourceType property is DataSourceType.Worksheet then this method returns address
                    of the cells in workbook which represent the string data. Otherwise return
                    empty string.'''
        ...

    @property
    def data_source_type(self) -> DataSourceType:
        ...

    @data_source_type.setter
    def data_source_type(self, value: DataSourceType):
        ...

    @property
    def data(self) -> any:
        '''Returns or sets Data object.
                    Read/write :py:class:`any`.'''
        ...

    @data.setter
    def data(self, value: any):
        '''Returns or sets Data object.
                    Read/write :py:class:`any`.'''
        ...

    @property
    def as_cells(self) -> IChartCellCollection:
        ...

    @as_cells.setter
    def as_cells(self, value: IChartCellCollection):
        ...

    @property
    def as_literal_string(self) -> str:
        ...

    @as_literal_string.setter
    def as_literal_string(self, value: str):
        ...

    @property
    def as_i_multiple_cell_chart_value(self) -> IMultipleCellChartValue:
        ...

    @property
    def as_i_base_chart_value(self) -> IBaseChartValue:
        ...

    ...

class StringOrDoubleChartValue(BaseChartValue):
    '''Represent string or double value which can be stored in pptx presentation document in two ways:
                1) in cell/cells of workbook related to chart;
                2) as literal value.'''
    def to_double(self) -> float:
        '''Converts to double.
        :returns: Double value.'''
        ...

    @property
    def data_source_type(self) -> DataSourceType:
        ...

    @data_source_type.setter
    def data_source_type(self, value: DataSourceType):
        ...

    @property
    def data(self) -> any:
        '''Returns or sets Data object.
                    Read/write :py:class:`any`.'''
        ...

    @data.setter
    def data(self, value: any):
        '''Returns or sets Data object.
                    Read/write :py:class:`any`.'''
        ...

    @property
    def as_cell(self) -> IChartDataCell:
        ...

    @as_cell.setter
    def as_cell(self, value: IChartDataCell):
        ...

    @property
    def as_literal_string(self) -> str:
        ...

    @as_literal_string.setter
    def as_literal_string(self, value: str):
        ...

    @property
    def as_literal_double(self) -> float:
        ...

    @as_literal_double.setter
    def as_literal_double(self, value: float):
        ...

    @property
    def as_i_single_cell_chart_value(self) -> ISingleCellChartValue:
        ...

    @property
    def as_i_base_chart_value(self) -> IBaseChartValue:
        ...

    ...

class Trendline:
    '''Class represents trend line of chart series'''
    def add_text_frame_for_overriding(self, text: str) -> ITextFrame:
        '''Initialize TextFrameForOverriding with the text in paramener "text".
                    If TextFrameForOverriding is already initialized then simply changes its text.
        :param text: Text for a new TextFrameForOverriding.'''
        ...

    @property
    def trendline_name(self) -> str:
        ...

    @trendline_name.setter
    def trendline_name(self, value: str):
        ...

    @property
    def trendline_type(self) -> TrendlineType:
        ...

    @trendline_type.setter
    def trendline_type(self, value: TrendlineType):
        ...

    @property
    def format(self) -> IFormat:
        '''Represents the format of the trend line.
                    Read/write :py:class:`aspose.slides.charts.IFormat`.'''
        ...

    @format.setter
    def format(self, value: IFormat):
        '''Represents the format of the trend line.
                    Read/write :py:class:`aspose.slides.charts.IFormat`.'''
        ...

    @property
    def backward(self) -> float:
        '''Specifies the number of categories (or units on a scatter chart) that the trend line extends before
                    the data for the series that is being trended. On scatter and non-scatter charts, the value shall be any nonnegative
                    value.
                    Read/write :py:class:`float`.'''
        ...

    @backward.setter
    def backward(self, value: float):
        '''Specifies the number of categories (or units on a scatter chart) that the trend line extends before
                    the data for the series that is being trended. On scatter and non-scatter charts, the value shall be any nonnegative
                    value.
                    Read/write :py:class:`float`.'''
        ...

    @property
    def forward(self) -> float:
        '''Specifies the number of categories (or units on a scatter chart) that the trendline extends after the
                    data for the series that is being trended. On scatter and non-scatter charts, the value shall be any non-negative
                    value.
                    Read/write :py:class:`float`.'''
        ...

    @forward.setter
    def forward(self, value: float):
        '''Specifies the number of categories (or units on a scatter chart) that the trendline extends after the
                    data for the series that is being trended. On scatter and non-scatter charts, the value shall be any non-negative
                    value.
                    Read/write :py:class:`float`.'''
        ...

    @property
    def intercept(self) -> float:
        '''Specifies the value where the trendline shall cross the y axis. This property shall be supported only
                    when the trendline type is exp, linear, or poly.
                    Read/write :py:class:`float`.'''
        ...

    @intercept.setter
    def intercept(self, value: float):
        '''Specifies the value where the trendline shall cross the y axis. This property shall be supported only
                    when the trendline type is exp, linear, or poly.
                    Read/write :py:class:`float`.'''
        ...

    @property
    def display_equation(self) -> bool:
        ...

    @display_equation.setter
    def display_equation(self, value: bool):
        ...

    @property
    def order(self) -> int:
        '''Specifies the order of the polynomial trend line. It is ignored for other trend line types. Value must be between 2 and 6.
                    Read/write :py:class:`int`.'''
        ...

    @order.setter
    def order(self, value: int):
        '''Specifies the order of the polynomial trend line. It is ignored for other trend line types. Value must be between 2 and 6.
                    Read/write :py:class:`int`.'''
        ...

    @property
    def period(self) -> int:
        '''Specifies the period of the trend line for a moving average trend line. It is ignored for other trend
                    line variants. Value must be between 2 and 255.
                    Read/write :py:class:`int`.'''
        ...

    @period.setter
    def period(self, value: int):
        '''Specifies the period of the trend line for a moving average trend line. It is ignored for other trend
                    line variants. Value must be between 2 and 255.
                    Read/write :py:class:`int`.'''
        ...

    @property
    def display_r_squared_value(self) -> bool:
        ...

    @display_r_squared_value.setter
    def display_r_squared_value(self, value: bool):
        ...

    @property
    def related_legend_entry(self) -> ILegendEntryProperties:
        ...

    @property
    def text_frame_for_overriding(self) -> ITextFrame:
        ...

    @property
    def text_format(self) -> IChartTextFormat:
        ...

    @property
    def chart(self) -> IChart:
        '''Returns the parent chart.
                    Read-only :py:class:`aspose.slides.charts.IChart`.'''
        ...

    @property
    def as_i_overridable_text(self) -> IOverridableText:
        ...

    @property
    def as_i_formatted_text_container(self) -> IFormattedTextContainer:
        ...

    @property
    def as_i_chart_component(self) -> IChartComponent:
        ...

    @property
    def as_i_slide_component(self) -> ISlideComponent:
        ...

    @property
    def slide(self) -> IBaseSlide:
        ...

    @property
    def as_i_presentation_component(self) -> IPresentationComponent:
        ...

    @property
    def presentation(self) -> IPresentation:
        ...

    ...

class TrendlineCollection:
    '''Represents a collection of Trendline'''
    def add(self, trendline_type: TrendlineType) -> ITrendline:
        '''Adds the new Trendline at the end of a collection and return it.'''
        ...

    def remove(self, value: ITrendline) -> None:
        '''Removes the specified value.'''
        ...

    @property
    def count(self) -> int:
        '''Gets the number of elements actually contained in the collection.
                    Read-only :py:class:`int`.'''
        ...

    @property
    def as_i_enumerable(self) -> collections.abc.Iterable:
        ...

    def __getitem__(self, key: int) -> ITrendline
        ...

    ...

class UpDownBarsManager:
    '''Provide access to up/down bars of Line- or Stock-chart.'''
    @property
    def up_bars_format(self) -> IFormat:
        ...

    @property
    def down_bars_format(self) -> IFormat:
        ...

    @property
    def has_up_down_bars(self) -> bool:
        ...

    @has_up_down_bars.setter
    def has_up_down_bars(self, value: bool):
        ...

    @property
    def gap_width(self) -> int:
        ...

    @gap_width.setter
    def gap_width(self, value: int):
        ...

    ...

class AxisAggregationType:
    '''Represents aggregation type of category axis. Used with Histogram or HistogramPareto series only.'''
    @classmethod
    @property
    def BY_CATEGORY(cls) -> AxisAggregationType:
        '''Aggregate by categories'''
        ...

    @classmethod
    @property
    def AUTOMATIC(cls) -> AxisAggregationType:
        '''Aggregate categories automatically.'''
        ...

    @classmethod
    @property
    def BY_BIN_WIDTH(cls) -> AxisAggregationType:
        '''Aggregate categories by bin width. Property IAxis.BinWidth must be setted.'''
        ...

    @classmethod
    @property
    def BY_NUMBER_OF_BINS(cls) -> AxisAggregationType:
        '''Aggregate categories by number of bins. Property IAxis.NumberOfBins must be setted.'''
        ...

    ...

class AxisPositionType:
    '''Determines a position of axis.'''
    @classmethod
    @property
    def BOTTOM(cls) -> AxisPositionType:
        '''Specifies that the axis shall be displayed at the bottom of the plot area.'''
        ...

    @classmethod
    @property
    def LEFT(cls) -> AxisPositionType:
        '''Specifies that the axis shall be displayed at the left of the plot area.'''
        ...

    @classmethod
    @property
    def RIGHT(cls) -> AxisPositionType:
        '''Specifies that the axis shall be displayed at the right of the plot area.'''
        ...

    @classmethod
    @property
    def TOP(cls) -> AxisPositionType:
        '''Specifies that the axis shall be displayed at the top of the plot area.'''
        ...

    ...

class BubbleSizeRepresentationType:
    '''Specifies the possible ways to represent data as bubble chart sizes.'''
    @classmethod
    @property
    def AREA(cls) -> BubbleSizeRepresentationType:
        '''Specifies the area of the bubbles shall be proportional to the bubble size value.'''
        ...

    @classmethod
    @property
    def WIDTH(cls) -> BubbleSizeRepresentationType:
        '''Specifies the radius of the bubbles shall be proportional to the bubble size value.'''
        ...

    ...

class CategoryAxisType:
    '''Represents a type of a category axis.'''
    @classmethod
    @property
    def TEXT(cls) -> CategoryAxisType:
        '''Specifies category axis is a text axis.'''
        ...

    @classmethod
    @property
    def DATE(cls) -> CategoryAxisType:
        '''Specifies category axis is a date axis.'''
        ...

    ...

class ChartDataSourceType:
    '''Represents a type of data source of the chart'''
    @classmethod
    @property
    def INTERNAL_WORKBOOK(cls) -> ChartDataSourceType:
        '''Internal data source.'''
        ...

    @classmethod
    @property
    def EXTERNAL_WORKBOOK(cls) -> ChartDataSourceType:
        '''External data source.'''
        ...

    ...

class ChartShapeType:
    '''Represents a shape of chart.'''
    @classmethod
    @property
    def NOT_DEFINED(cls) -> ChartShapeType:
        '''Chart shape is not defined.'''
        ...

    @classmethod
    @property
    def BOX(cls) -> ChartShapeType:
        '''Specifies the chart shall be drawn with a box shape.'''
        ...

    @classmethod
    @property
    def CONE(cls) -> ChartShapeType:
        '''Specifies the chart shall be drawn as a cone, with the base of the cone on the floor and the point of the cone at the top of the data marker.'''
        ...

    @classmethod
    @property
    def CONE_TO_MAX(cls) -> ChartShapeType:
        '''Specifies the chart shall be drawn with truncated cones such that the point of the cone would be the maximum data value.'''
        ...

    @classmethod
    @property
    def CYLINDER(cls) -> ChartShapeType:
        '''Specifies the chart shall be drawn as a cylinder.'''
        ...

    @classmethod
    @property
    def PYRAMID(cls) -> ChartShapeType:
        '''Specifies the chart shall be drawn as a rectangular pyramid, with the base of the pyramid on the floor and the point of the pyramid at the top of the data marker.'''
        ...

    @classmethod
    @property
    def PYRAMID_TO_MAXIMUM(cls) -> ChartShapeType:
        '''Specifies the chart shall be drawn with truncated cones such that the point of the cone would be the maximum data value.'''
        ...

    ...

class ChartType:
    '''Represents a type of chart.'''
    @classmethod
    @property
    def CLUSTERED_COLUMN(cls) -> ChartType:
        '''Represents Clustered Column Chart.'''
        ...

    @classmethod
    @property
    def STACKED_COLUMN(cls) -> ChartType:
        '''Represents Stacked Column Chart.'''
        ...

    @classmethod
    @property
    def PERCENTS_STACKED_COLUMN(cls) -> ChartType:
        '''Represents 100% Stacked Column Chart.'''
        ...

    @classmethod
    @property
    def CLUSTERED_COLUMN_3D(cls) -> ChartType:
        '''Represents 3D Colustered Column Chart.'''
        ...

    @classmethod
    @property
    def STACKED_COLUMN_3D(cls) -> ChartType:
        '''Represents 3D Stacked Column Chart.'''
        ...

    @classmethod
    @property
    def PERCENTS_STACKED_COLUMN_3D(cls) -> ChartType:
        '''Represents 3D 100% Stacked Column Chart.'''
        ...

    @classmethod
    @property
    def COLUMN_3D(cls) -> ChartType:
        '''Represents 3D Column Chart.'''
        ...

    @classmethod
    @property
    def CLUSTERED_CYLINDER(cls) -> ChartType:
        '''Represents Cylinder Chart.'''
        ...

    @classmethod
    @property
    def STACKED_CYLINDER(cls) -> ChartType:
        '''Represents Stacked Cylinder Chart.'''
        ...

    @classmethod
    @property
    def PERCENTS_STACKED_CYLINDER(cls) -> ChartType:
        '''Represents 100% Stacked Cylinder Chart.'''
        ...

    @classmethod
    @property
    def CYLINDER_3D(cls) -> ChartType:
        '''Represents 3D Cylindrical Column Chart.'''
        ...

    @classmethod
    @property
    def CLUSTERED_CONE(cls) -> ChartType:
        '''Represents Cone Chart.'''
        ...

    @classmethod
    @property
    def STACKED_CONE(cls) -> ChartType:
        '''Represents Stacked Cone Chart.'''
        ...

    @classmethod
    @property
    def PERCENTS_STACKED_CONE(cls) -> ChartType:
        '''Represents 100% Stacked Cone Chart.'''
        ...

    @classmethod
    @property
    def CONE_3D(cls) -> ChartType:
        '''Represents 3D Conical Column Chart.'''
        ...

    @classmethod
    @property
    def CLUSTERED_PYRAMID(cls) -> ChartType:
        '''Represents Pyramid Chart.'''
        ...

    @classmethod
    @property
    def STACKED_PYRAMID(cls) -> ChartType:
        '''Represents Stacked Pyramid Chart.'''
        ...

    @classmethod
    @property
    def PERCENTS_STACKED_PYRAMID(cls) -> ChartType:
        '''Represents 100% Stacked Pyramid Chart.'''
        ...

    @classmethod
    @property
    def PYRAMID_3D(cls) -> ChartType:
        '''Represents 3D Pyramid Column Chart.'''
        ...

    @classmethod
    @property
    def LINE(cls) -> ChartType:
        '''Represents Line Chart.'''
        ...

    @classmethod
    @property
    def STACKED_LINE(cls) -> ChartType:
        '''Represents Stacked Line Chart.'''
        ...

    @classmethod
    @property
    def PERCENTS_STACKED_LINE(cls) -> ChartType:
        '''Represents 100% Stacked Line Chart.'''
        ...

    @classmethod
    @property
    def LINE_WITH_MARKERS(cls) -> ChartType:
        '''Represents Line Chart with data markers.'''
        ...

    @classmethod
    @property
    def STACKED_LINE_WITH_MARKERS(cls) -> ChartType:
        '''Represents Stacked Line Chart with data markers.'''
        ...

    @classmethod
    @property
    def PERCENTS_STACKED_LINE_WITH_MARKERS(cls) -> ChartType:
        '''Represents 100% Stacked Line Chart with data markers.'''
        ...

    @classmethod
    @property
    def LINE_3D(cls) -> ChartType:
        '''Represents 3D Line Chart.'''
        ...

    @classmethod
    @property
    def PIE(cls) -> ChartType:
        '''Represents Pie Chart.'''
        ...

    @classmethod
    @property
    def PIE_3D(cls) -> ChartType:
        '''Represents 3D Pie Chart.'''
        ...

    @classmethod
    @property
    def PIE_OF_PIE(cls) -> ChartType:
        '''Represents Pie of Pie Chart.'''
        ...

    @classmethod
    @property
    def EXPLODED_PIE(cls) -> ChartType:
        '''Represents Exploded Pie Chart.'''
        ...

    @classmethod
    @property
    def EXPLODED_PIE_3D(cls) -> ChartType:
        '''Represents 3D Exploded Pie Chart.'''
        ...

    @classmethod
    @property
    def BAR_OF_PIE(cls) -> ChartType:
        '''Represents Bar of Pie Chart.'''
        ...

    @classmethod
    @property
    def PERCENTS_STACKED_BAR(cls) -> ChartType:
        '''Represents 100% Stacked Bar Chart.'''
        ...

    @classmethod
    @property
    def CLUSTERED_BAR_3D(cls) -> ChartType:
        '''Represents 3D Colustered Bar Chart.'''
        ...

    @classmethod
    @property
    def CLUSTERED_BAR(cls) -> ChartType:
        '''Represents Clustered Bar Chart.'''
        ...

    @classmethod
    @property
    def STACKED_BAR(cls) -> ChartType:
        '''Represents Stacked Bar Chart.'''
        ...

    @classmethod
    @property
    def STACKED_BAR_3D(cls) -> ChartType:
        '''Represents 3D Stacked Bar Chart.'''
        ...

    @classmethod
    @property
    def PERCENTS_STACKED_BAR_3D(cls) -> ChartType:
        '''Represents 3D 100% Stacked Bar Chart.'''
        ...

    @classmethod
    @property
    def CLUSTERED_HORIZONTAL_CYLINDER(cls) -> ChartType:
        '''Represents Cylindrical Bar Chart.'''
        ...

    @classmethod
    @property
    def STACKED_HORIZONTAL_CYLINDER(cls) -> ChartType:
        '''Represents Stacked Cylindrical Bar Chart.'''
        ...

    @classmethod
    @property
    def PERCENTS_STACKED_HORIZONTAL_CYLINDER(cls) -> ChartType:
        '''Represents 100% Stacked Cylindrical Bar Chart.'''
        ...

    @classmethod
    @property
    def CLUSTERED_HORIZONTAL_CONE(cls) -> ChartType:
        '''Represents Conical Bar Chart.'''
        ...

    @classmethod
    @property
    def STACKED_HORIZONTAL_CONE(cls) -> ChartType:
        '''Represents Stacked Conical Bar Chart.'''
        ...

    @classmethod
    @property
    def PERCENTS_STACKED_HORIZONTAL_CONE(cls) -> ChartType:
        '''Represents 100% Stacked Conical Bar Chart.'''
        ...

    @classmethod
    @property
    def CLUSTERED_HORIZONTAL_PYRAMID(cls) -> ChartType:
        '''Represents Pyramid Bar Chart.'''
        ...

    @classmethod
    @property
    def STACKED_HORIZONTAL_PYRAMID(cls) -> ChartType:
        '''Represents Stacked Pyramid Bar Chart.'''
        ...

    @classmethod
    @property
    def PERCENTS_STACKED_HORIZONTAL_PYRAMID(cls) -> ChartType:
        '''Represents 100% Stacked Pyramid Bar Chart.'''
        ...

    @classmethod
    @property
    def AREA(cls) -> ChartType:
        '''Represents Area Chart.'''
        ...

    @classmethod
    @property
    def STACKED_AREA(cls) -> ChartType:
        '''Represents Stacked Area Chart.'''
        ...

    @classmethod
    @property
    def PERCENTS_STACKED_AREA(cls) -> ChartType:
        '''Represents 100% Stacked Area Chart.'''
        ...

    @classmethod
    @property
    def AREA_3D(cls) -> ChartType:
        '''Represents 3D Area Chart.'''
        ...

    @classmethod
    @property
    def STACKED_AREA_3D(cls) -> ChartType:
        '''Represents 3D Stacked Area Chart.'''
        ...

    @classmethod
    @property
    def PERCENTS_STACKED_AREA_3D(cls) -> ChartType:
        '''Represents 3D 100% Stacked Area Chart.'''
        ...

    @classmethod
    @property
    def SCATTER_WITH_MARKERS(cls) -> ChartType:
        '''Represents Scatter Chart.'''
        ...

    @classmethod
    @property
    def SCATTER_WITH_SMOOTH_LINES_AND_MARKERS(cls) -> ChartType:
        '''Represents Scatter Chart connected by curves, with data markers.'''
        ...

    @classmethod
    @property
    def SCATTER_WITH_SMOOTH_LINES(cls) -> ChartType:
        '''Represents Scatter Chart connected by curves, without data markers.'''
        ...

    @classmethod
    @property
    def SCATTER_WITH_STRAIGHT_LINES_AND_MARKERS(cls) -> ChartType:
        '''Represents Scatter Chart connected by lines, with data markers.'''
        ...

    @classmethod
    @property
    def SCATTER_WITH_STRAIGHT_LINES(cls) -> ChartType:
        '''Represents Scatter Chart connected by lines, without data markers.'''
        ...

    @classmethod
    @property
    def HIGH_LOW_CLOSE(cls) -> ChartType:
        '''Represents High-Low-Close Stock Chart.'''
        ...

    @classmethod
    @property
    def OPEN_HIGH_LOW_CLOSE(cls) -> ChartType:
        '''Represents Open-High-Low-Close Stock Chart.'''
        ...

    @classmethod
    @property
    def VOLUME_HIGH_LOW_CLOSE(cls) -> ChartType:
        '''Represents Volume-High-Low-Close Stock Chart.'''
        ...

    @classmethod
    @property
    def VOLUME_OPEN_HIGH_LOW_CLOSE(cls) -> ChartType:
        '''Represents Volume-Open-High-Low-Close Stock Chart.'''
        ...

    @classmethod
    @property
    def SURFACE_3D(cls) -> ChartType:
        '''Represents 3D Surface Chart.'''
        ...

    @classmethod
    @property
    def WIREFRAME_SURFACE_3D(cls) -> ChartType:
        '''Represents Wireframe 3D Surface Chart.'''
        ...

    @classmethod
    @property
    def CONTOUR(cls) -> ChartType:
        '''Represents Contour Chart.'''
        ...

    @classmethod
    @property
    def WIREFRAME_CONTOUR(cls) -> ChartType:
        '''Represents Wireframe Contour Chart.'''
        ...

    @classmethod
    @property
    def DOUGHNUT(cls) -> ChartType:
        '''Represents Doughnut Chart.'''
        ...

    @classmethod
    @property
    def EXPLODED_DOUGHNUT(cls) -> ChartType:
        '''Represents Exploded Doughnut Chart.'''
        ...

    @classmethod
    @property
    def BUBBLE(cls) -> ChartType:
        '''Represents Bubble Chart.'''
        ...

    @classmethod
    @property
    def BUBBLE_WITH_3D(cls) -> ChartType:
        '''Represents 3D Bubble Chart.'''
        ...

    @classmethod
    @property
    def RADAR(cls) -> ChartType:
        '''Represents Radar Chart.'''
        ...

    @classmethod
    @property
    def RADAR_WITH_MARKERS(cls) -> ChartType:
        '''Represents Radar Chart with data markers.'''
        ...

    @classmethod
    @property
    def FILLED_RADAR(cls) -> ChartType:
        '''Represents Filled Radar Chart.'''
        ...

    @classmethod
    @property
    def SERIES_OF_MIXED_TYPES(cls) -> ChartType:
        '''This value only can be returned by ChartEx.Type property. 
                    It mean that chart has series of mixed types.'''
        ...

    @classmethod
    @property
    def TREEMAP(cls) -> ChartType:
        '''Represents Treemap chart.'''
        ...

    @classmethod
    @property
    def SUNBURST(cls) -> ChartType:
        '''Represents Sunburst chart.'''
        ...

    @classmethod
    @property
    def HISTOGRAM(cls) -> ChartType:
        '''Represents Histogram chart.'''
        ...

    @classmethod
    @property
    def PARETO_LINE(cls) -> ChartType:
        '''Represents Pareto line series type (Histogram Pareto chart).'''
        ...

    @classmethod
    @property
    def BOX_AND_WHISKER(cls) -> ChartType:
        '''Represents BoxAndWhisker chart.'''
        ...

    @classmethod
    @property
    def WATERFALL(cls) -> ChartType:
        '''Represents Waterfall chart.'''
        ...

    @classmethod
    @property
    def FUNNEL(cls) -> ChartType:
        '''Represents Funnel chart.'''
        ...

    @classmethod
    @property
    def MAP(cls) -> ChartType:
        '''Represents Map chart.'''
        ...

    ...

class CombinableSeriesTypesGroup:
    '''Enumeration of groups of combinable series types.
                Each element relates to group of types of chart series that can persist simultaneously in one ChartSeriesGroup.
                For example: ChartType.PercentsStackedArea series cannot be simultaneously with ChartType.StackedArea series 
                in one ChartSeriesGroup. But two or more ChartType.PercentsStackedArea can be in one ChartSeriesGroup 
                simultaneously (CombinableSeriesTypesGroup.AreaChart_PercentsStackedArea). And ChartType.Line series can be 
                with ChartType.LineWithMarkers series simultaneously in one CombinableSeriesTypesGroup.LineChart_Line 
                ChartSeriesGroup.'''
    @classmethod
    @property
    def AREA_CHART_AREA(cls) -> CombinableSeriesTypesGroup:
        '''Groups this set of series types:
                    { ChartType.Area }'''
        ...

    @classmethod
    @property
    def AREA_CHART_PERCENTS_STACKED_AREA(cls) -> CombinableSeriesTypesGroup:
        '''Groups this set of series types:
                    { ChartType.PercentsStackedArea }'''
        ...

    @classmethod
    @property
    def AREA_CHART_STACKED_AREA(cls) -> CombinableSeriesTypesGroup:
        '''Groups this set of series types:
                    { ChartType.StackedArea }'''
        ...

    @classmethod
    @property
    def AREA_CHART_AREA_3D(cls) -> CombinableSeriesTypesGroup:
        '''Groups this set of series types:
                    { ChartType.Area3D }'''
        ...

    @classmethod
    @property
    def AREA_CHART_STACKED_AREA_3D(cls) -> CombinableSeriesTypesGroup:
        '''Groups this set of series types:
                    { ChartType.StackedArea3D }'''
        ...

    @classmethod
    @property
    def AREA_CHART_PERCENTS_STACKED_AREA_3D(cls) -> CombinableSeriesTypesGroup:
        '''Groups this set of series types:
                    { ChartType.PercentsStackedArea3D }'''
        ...

    @classmethod
    @property
    def LINE_CHART_LINE(cls) -> CombinableSeriesTypesGroup:
        '''Groups this set of series types:
                    { ChartType.Line, ChartType.LineWithMarkers }'''
        ...

    @classmethod
    @property
    def LINE_CHART_STACKED_LINE(cls) -> CombinableSeriesTypesGroup:
        '''Groups this set of series types:
                    { ChartType.StackedLine, ChartType.StackedLineWithMarkers }'''
        ...

    @classmethod
    @property
    def LINE_CHART_PERCENTS_STACKED_LINE(cls) -> CombinableSeriesTypesGroup:
        '''Groups this set of series types:
                    { ChartType.PercentsStackedLine, ChartType.PercentsStackedLineWithMarkers }'''
        ...

    @classmethod
    @property
    def LINE_3D_CHART(cls) -> CombinableSeriesTypesGroup:
        '''Groups this set of series types:
                    { ChartType.Line3D }'''
        ...

    @classmethod
    @property
    def STOCK_HIGH_LOW_CLOSE(cls) -> CombinableSeriesTypesGroup:
        '''Groups this set of series types:
                    { ChartType.HighLowClose }'''
        ...

    @classmethod
    @property
    def STOCK_OPEN_HIGH_LOW_CLOSE(cls) -> CombinableSeriesTypesGroup:
        '''Groups this set of series types:
                    { ChartType.OpenHighLowClose }'''
        ...

    @classmethod
    @property
    def STOCK_VOLUME_HIGH_LOW_CLOSE(cls) -> CombinableSeriesTypesGroup:
        '''Groups this set of series types:
                    { ChartType.VolumeHighLowClose }'''
        ...

    @classmethod
    @property
    def STOCK_VOLUME_OPEN_HIGH_LOW_CLOSE(cls) -> CombinableSeriesTypesGroup:
        '''Groups this set of series types:
                    { ChartType.VolumeOpenHighLowClose }'''
        ...

    @classmethod
    @property
    def RADAR_CHART(cls) -> CombinableSeriesTypesGroup:
        '''Groups this set of series types:
                    { ChartType.Radar, ChartType.RadarWithMarkers }'''
        ...

    @classmethod
    @property
    def FILLED_RADAR_CHART(cls) -> CombinableSeriesTypesGroup:
        '''Groups this set of series types:
                    { ChartType.FilledRadar }'''
        ...

    @classmethod
    @property
    def SCATTER_STRAIGHT_MARKER(cls) -> CombinableSeriesTypesGroup:
        '''Groups this set of series types:
                    { ChartType.ScatterWithMarkers, ChartType.ScatterWithStraightLines, ChartType.ScatterWithStraightLinesAndMarkers }'''
        ...

    @classmethod
    @property
    def SCATTER_SMOOTH_MARKER(cls) -> CombinableSeriesTypesGroup:
        '''Groups this set of series types:
                    { ChartType.ScatterWithSmoothLines, ChartType.ScatterWithSmoothLinesAndMarkers }'''
        ...

    @classmethod
    @property
    def PIE_CHART(cls) -> CombinableSeriesTypesGroup:
        '''Groups this set of series types:
                    { ChartType.Pie, ChartType.ExplodedPie }'''
        ...

    @classmethod
    @property
    def PIE_3D_CHART(cls) -> CombinableSeriesTypesGroup:
        '''Groups this set of series types:
                    { ChartType.Pie3D, ChartType.ExplodedPie3D }'''
        ...

    @classmethod
    @property
    def DOUGHNUT_CHART(cls) -> CombinableSeriesTypesGroup:
        '''Groups this set of series types:
                    { ChartType.Doughnut, ChartType.ExplodedDoughnut }'''
        ...

    @classmethod
    @property
    def BAR_CHART_VERT_CLUSTERED(cls) -> CombinableSeriesTypesGroup:
        '''Groups this set of series types:
                    { ChartType.ClusteredColumn }'''
        ...

    @classmethod
    @property
    def BAR_CHART_VERT_STACKED(cls) -> CombinableSeriesTypesGroup:
        '''Groups this set of series types:
                    { ChartType.StackedColumn }'''
        ...

    @classmethod
    @property
    def BAR_CHART_VERT_PERCENTS_STACKED(cls) -> CombinableSeriesTypesGroup:
        '''Groups this set of series types:
                    { ChartType.PercentsStackedColumn }'''
        ...

    @classmethod
    @property
    def BAR_CHART_HORIZ_CLUSTERED(cls) -> CombinableSeriesTypesGroup:
        '''Groups this set of series types:
                    { ChartType.ClusteredBar }'''
        ...

    @classmethod
    @property
    def BAR_CHART_HORIZ_STACKED(cls) -> CombinableSeriesTypesGroup:
        '''Groups this set of series types:
                    { ChartType.StackedBar }'''
        ...

    @classmethod
    @property
    def BAR_CHART_HORIZ_PERCENTS_STACKED(cls) -> CombinableSeriesTypesGroup:
        '''Groups this set of series types:
                    { ChartType.PercentsStackedBar }'''
        ...

    @classmethod
    @property
    def BAR_3D_CHART_VERT(cls) -> CombinableSeriesTypesGroup:
        '''Groups this set of series types:
                    { ChartType.Column3D, ChartType.Cylinder3D, ChartType.Cone3D, ChartType.Pyramid3D }'''
        ...

    @classmethod
    @property
    def BAR_3D_CHART_VERT_CLUSTERED(cls) -> CombinableSeriesTypesGroup:
        '''Groups this set of series types:
                    { ChartType.ClusteredColumn3D, ChartType.ClusteredCone, ChartType.ClusteredCylinder, ChartType.ClusteredPyramid }'''
        ...

    @classmethod
    @property
    def BAR_3D_CHART_VERT_PERCENTS_STACKED_COLUMN_3D(cls) -> CombinableSeriesTypesGroup:
        '''Groups this set of series types:
                    { ChartType.PercentsStackedColumn3D }'''
        ...

    @classmethod
    @property
    def BAR_3D_CHART_VERT_PERCENTS_STACKED_CONE(cls) -> CombinableSeriesTypesGroup:
        '''Groups this set of series types:
                    { ChartType.PercentsStackedCone }'''
        ...

    @classmethod
    @property
    def BAR_3D_CHART_VERT_PERCENTS_STACKED_CYLINDER(cls) -> CombinableSeriesTypesGroup:
        '''Groups this set of series types:
                    { ChartType.PercentsStackedCylinder }'''
        ...

    @classmethod
    @property
    def BAR_3D_CHART_VERT_PERCENTS_STACKED_PYRAMID(cls) -> CombinableSeriesTypesGroup:
        '''Groups this set of series types:
                    { ChartType.PercentsStackedPyramid }'''
        ...

    @classmethod
    @property
    def BAR_3D_CHART_VERT_STACKED_COLUMN_3D(cls) -> CombinableSeriesTypesGroup:
        '''Groups this set of series types:
                    { ChartType.StackedColumn3D }'''
        ...

    @classmethod
    @property
    def BAR_3D_CHART_VERT_STACKED_CONE(cls) -> CombinableSeriesTypesGroup:
        '''Groups this set of series types:
                    { ChartType.StackedCone }'''
        ...

    @classmethod
    @property
    def BAR_3D_CHART_VERT_STACKED_CYLINDER(cls) -> CombinableSeriesTypesGroup:
        '''Groups this set of series types:
                    { ChartType.StackedCylinder }'''
        ...

    @classmethod
    @property
    def BAR_3D_CHART_VERT_STACKED_PYRAMID(cls) -> CombinableSeriesTypesGroup:
        '''Groups this set of series types:
                    { ChartType.StackedPyramid }'''
        ...

    @classmethod
    @property
    def BAR_3D_CHART_HORIZ_CLUSTERED(cls) -> CombinableSeriesTypesGroup:
        '''Groups this set of series types:
                    { ChartType.ClusteredBar3D, ChartType.ClusteredHorizontalCone, ChartType.ClusteredHorizontalCylinder, ChartType.ClusteredHorizontalPyramid }'''
        ...

    @classmethod
    @property
    def BAR_3D_CHART_HORIZ_STACKED_BAR_3D(cls) -> CombinableSeriesTypesGroup:
        '''Groups this set of series types:
                    { ChartType.StackedBar3D }'''
        ...

    @classmethod
    @property
    def BAR_3D_CHART_HORIZ_STACKED_CONE(cls) -> CombinableSeriesTypesGroup:
        '''Groups this set of series types:
                    { ChartType.StackedHorizontalCone }'''
        ...

    @classmethod
    @property
    def BAR_3D_CHART_HORIZ_STACKED_CYLINDER(cls) -> CombinableSeriesTypesGroup:
        '''Groups this set of series types:
                    { ChartType.StackedHorizontalCylinder }'''
        ...

    @classmethod
    @property
    def BAR_3D_CHART_HORIZ_STACKED_PYRAMID(cls) -> CombinableSeriesTypesGroup:
        '''Groups this set of series types:
                    { ChartType.StackedHorizontalPyramid }'''
        ...

    @classmethod
    @property
    def BAR_3D_CHART_HORIZ_PERCENTS_STACKED_BAR_3D(cls) -> CombinableSeriesTypesGroup:
        '''Groups this set of series types:
                    { ChartType.PercentsStackedBar3D }'''
        ...

    @classmethod
    @property
    def BAR_3D_CHART_HORIZ_PERCENTS_STACKED_CONE(cls) -> CombinableSeriesTypesGroup:
        '''Groups this set of series types:
                    { ChartType.PercentsStackedHorizontalCone }'''
        ...

    @classmethod
    @property
    def BAR_3D_CHART_HORIZ_PERCENTS_STACKED_CYLINDER(cls) -> CombinableSeriesTypesGroup:
        '''Groups this set of series types:
                    { ChartType.PercentsStackedHorizontalCylinder }'''
        ...

    @classmethod
    @property
    def BAR_3D_CHART_HORIZ_PERCENTS_STACKED_PYRAMID(cls) -> CombinableSeriesTypesGroup:
        '''Groups this set of series types:
                    { ChartType.PercentsStackedHorizontalPyramid }'''
        ...

    @classmethod
    @property
    def BAR_OF_PIE_CHART(cls) -> CombinableSeriesTypesGroup:
        '''Groups this set of series types:
                    { ChartType.BarOfPie }'''
        ...

    @classmethod
    @property
    def PIE_OF_PIE_CHART(cls) -> CombinableSeriesTypesGroup:
        '''Groups this set of series types:
                    { ChartType.PieOfPie }'''
        ...

    @classmethod
    @property
    def SURFACE_CHART_CONTOUR(cls) -> CombinableSeriesTypesGroup:
        '''Groups this set of series types:
                    { ChartType.Contour }'''
        ...

    @classmethod
    @property
    def SURFACE_CHART_WIREFRAME_CONTOUR(cls) -> CombinableSeriesTypesGroup:
        '''Groups this set of series types:
                    { ChartType.WireframeContour }'''
        ...

    @classmethod
    @property
    def SURFACE_CHART_SURFACE_3D(cls) -> CombinableSeriesTypesGroup:
        '''Groups this set of series types:
                    { ChartType.Surface3D }'''
        ...

    @classmethod
    @property
    def SURFACE_CHART_WIREFRAME_SURFACE_3D(cls) -> CombinableSeriesTypesGroup:
        '''Groups this set of series types:
                    { ChartType.WireframeSurface3D }'''
        ...

    @classmethod
    @property
    def BUBBLE_CHART(cls) -> CombinableSeriesTypesGroup:
        '''Groups this set of series types:
                    { ChartType.Bubble, ChartType.BubbleWith3D }'''
        ...

    @classmethod
    @property
    def HISTOGRAM_CHART(cls) -> CombinableSeriesTypesGroup:
        '''Groups this set of series types:
                    { ChartType.Histogram }'''
        ...

    @classmethod
    @property
    def PARETO_LINE_CHART(cls) -> CombinableSeriesTypesGroup:
        '''Groups this set of series types:
                    { ChartType.ParetoLine }'''
        ...

    @classmethod
    @property
    def BOX_AND_WHISKER_CHART(cls) -> CombinableSeriesTypesGroup:
        '''Groups this set of series types:
                    { ChartType.BoxAndWhisker }'''
        ...

    @classmethod
    @property
    def WATERFALL_CHART(cls) -> CombinableSeriesTypesGroup:
        '''Groups this set of series types:
                    { ChartType.Waterfall }'''
        ...

    @classmethod
    @property
    def FUNNEL_CHART(cls) -> CombinableSeriesTypesGroup:
        '''Groups this set of series types:
                    { ChartType.Funnel }'''
        ...

    @classmethod
    @property
    def TREEMAP_CHART(cls) -> CombinableSeriesTypesGroup:
        '''Groups this set of series types:
                    { ChartType.Treemap }'''
        ...

    @classmethod
    @property
    def MAP_CHART(cls) -> CombinableSeriesTypesGroup:
        '''Groups this set of series types:
                    { ChartType.Map }'''
        ...

    @classmethod
    @property
    def SUNBURST_CHART(cls) -> CombinableSeriesTypesGroup:
        '''Groups this set of series types:
                    { ChartType.Sunburst }'''
        ...

    ...

class CrossesType:
    '''Determines where axis will cross.'''
    @classmethod
    @property
    def AXIS_CROSSES_AT_ZERO(cls) -> CrossesType:
        '''The category axis crosses at the zero point of the value axis (if possible), or the minimum value (if the minimum is greater than zero) or the maximum (if the maximum is less than zero).'''
        ...

    @classmethod
    @property
    def MAXIMUM(cls) -> CrossesType:
        '''The axis crosses at the maximum value.'''
        ...

    @classmethod
    @property
    def CUSTOM(cls) -> CrossesType:
        '''Custom value from property CrossAt'''
        ...

    ...

class DataSourceType:
    '''Data source types.'''
    @classmethod
    @property
    def WORKSHEET(cls) -> DataSourceType:
        '''Use CellXls objects for storing XValue, YValue, Value or BubbleSize of data point in worksheet.'''
        ...

    @classmethod
    @property
    def STRING_LITERALS(cls) -> DataSourceType:
        '''Use fast-access string variable for storing XValue, YValue, Value or BubbleSize of 
                    data point. Worksheet is NOT used for storing values.'''
        ...

    @classmethod
    @property
    def DOUBLE_LITERALS(cls) -> DataSourceType:
        '''Use fast-access double variable for storing XValue, YValue, Value or BubbleSize of 
                    data point. Worksheet is NOT used for storing values.'''
        ...

    ...

class DisplayBlanksAsType:
    '''Determines how missing data will be displayed.'''
    @classmethod
    @property
    def GAP(cls) -> DisplayBlanksAsType:
        '''Specifies that blank values shall be left as a gap.'''
        ...

    @classmethod
    @property
    def SPAN(cls) -> DisplayBlanksAsType:
        '''Specifies that blank values shall be spanned with a line.'''
        ...

    @classmethod
    @property
    def ZERO(cls) -> DisplayBlanksAsType:
        '''Specifies that blank values shall be treated as zero.'''
        ...

    ...

class DisplayUnitType:
    '''Determines multiplicity of the displayed data.'''
    @classmethod
    @property
    def NONE(cls) -> DisplayUnitType:
        '''Values will dislayed as is.'''
        ...

    @classmethod
    @property
    def HUNDREDS(cls) -> DisplayUnitType:
        '''Specifies the values on the chart shall be divided by 100.'''
        ...

    @classmethod
    @property
    def THOUSANDS(cls) -> DisplayUnitType:
        '''Specifies the values on the chart shall be divided by 1,000.'''
        ...

    @classmethod
    @property
    def TEN_THOUSANDS(cls) -> DisplayUnitType:
        '''Specifies the values on the chart shall be divided by 10,000.'''
        ...

    @classmethod
    @property
    def HUNDRED_THOUSANDS(cls) -> DisplayUnitType:
        '''Specifies the values on the chart shall be divided by 100,000.'''
        ...

    @classmethod
    @property
    def MILLIONS(cls) -> DisplayUnitType:
        '''Specifies the values on the chart shall be divided by 1,000,000.'''
        ...

    @classmethod
    @property
    def TEN_MILLIONS(cls) -> DisplayUnitType:
        '''Specifies the values on the chart shall be divided by 10,000,000.'''
        ...

    @classmethod
    @property
    def HUNDRED_MILLIONS(cls) -> DisplayUnitType:
        '''Specifies the values on the chart shall be divided by 100,000,000.'''
        ...

    @classmethod
    @property
    def BILLIONS(cls) -> DisplayUnitType:
        '''Specifies the values on the chart shall be divided by 1,000,000,000.'''
        ...

    @classmethod
    @property
    def TRILLIONS(cls) -> DisplayUnitType:
        '''Specifies the values on the chart shall be divided by 1,000,000,000.'''
        ...

    @classmethod
    @property
    def CUSTOM_VALUE(cls) -> DisplayUnitType:
        '''Specifies the values on the chart shall be divided by a custom value.'''
        ...

    ...

class ErrorBarType:
    '''Represents type of error bar'''
    @classmethod
    @property
    def BOTH(cls) -> ErrorBarType:
        '''Specifies that error bars shall be shown in the positive and negative directions.'''
        ...

    @classmethod
    @property
    def MINUS(cls) -> ErrorBarType:
        '''Specifies that error bars shall be shown in the negative direction only.'''
        ...

    @classmethod
    @property
    def PLUS(cls) -> ErrorBarType:
        '''Specifies that error bars shall be shown in the positive direction only.'''
        ...

    ...

class ErrorBarValueType:
    '''Represents type of error bar value'''
    @classmethod
    @property
    def CUSTOM(cls) -> ErrorBarValueType:
        '''Specifies that the length of the error bars shall be determined by the Plus and Minus elements.'''
        ...

    @classmethod
    @property
    def FIXED(cls) -> ErrorBarValueType:
        '''Specifies that the length of the error bars shall be the fixed value determined by Error Bar Value.'''
        ...

    @classmethod
    @property
    def PERCENTAGE(cls) -> ErrorBarValueType:
        '''Specifies that the length of the error bars shall be Error Bar Value percent of the data.'''
        ...

    @classmethod
    @property
    def STANDARD_DEVIATION(cls) -> ErrorBarValueType:
        '''Specifies that the length of the error bars shall be Error Bar Value standard deviations of the data.'''
        ...

    @classmethod
    @property
    def STANDARD_ERROR(cls) -> ErrorBarValueType:
        '''Specifies that the length of the error bars shall be Error Bar Value standard errors of the data.'''
        ...

    ...

class LayoutTargetType:
    '''If layout of the plot area defined manually this property specifies whether 
                to layout the plot area by its inside (not including axis and axis labels) or outside
                (including axis and axis labels).'''
    @classmethod
    @property
    def INNER(cls) -> LayoutTargetType:
        '''Specifies that the plot area size shall determine the
                    size of the plot area, not including the tick marks and
                    axis labels.'''
        ...

    @classmethod
    @property
    def OUTER(cls) -> LayoutTargetType:
        '''Specifies that the plot area size shall determine the
                    size of the plot area, the tick marks, and the axis
                    labels.'''
        ...

    ...

class LegendDataLabelPosition:
    '''Determines position of data labels.'''
    @classmethod
    @property
    def NOT_DEFINED(cls) -> LegendDataLabelPosition:
        '''Position is not defined.'''
        ...

    @classmethod
    @property
    def BOTTOM(cls) -> LegendDataLabelPosition:
        '''Specifies that data labels shall be displayed below the data marker.'''
        ...

    @classmethod
    @property
    def BEST_FIT(cls) -> LegendDataLabelPosition:
        '''Specifies that data labels shall be displayed in the best position.'''
        ...

    @classmethod
    @property
    def CENTER(cls) -> LegendDataLabelPosition:
        '''Specifies that data labels shall be displayed centered on the data marker.'''
        ...

    @classmethod
    @property
    def INSIDE_BASE(cls) -> LegendDataLabelPosition:
        '''Specifies that data labels shall be displayed inside the base of the data marker.'''
        ...

    @classmethod
    @property
    def INSIDE_END(cls) -> LegendDataLabelPosition:
        '''Specifies that data labels shall be displayed inside the end of the data marker.'''
        ...

    @classmethod
    @property
    def LEFT(cls) -> LegendDataLabelPosition:
        '''Specifies that data labels shall be displayed to the left of the data marker.'''
        ...

    @classmethod
    @property
    def OUTSIDE_END(cls) -> LegendDataLabelPosition:
        '''Specifies that data labels shall be displayed outside the end of the data marker.'''
        ...

    @classmethod
    @property
    def RIGHT(cls) -> LegendDataLabelPosition:
        '''Specifies that data labels shall be displayed to the right of the data marker.'''
        ...

    @classmethod
    @property
    def TOP(cls) -> LegendDataLabelPosition:
        '''Specifies that data labels shall be displayed above the data marker.'''
        ...

    ...

class LegendPositionType:
    '''Determines a position of legend on a chart.'''
    @classmethod
    @property
    def BOTTOM(cls) -> LegendPositionType:
        '''Specifies that the legend shall be drawn at the bottom of the chart.'''
        ...

    @classmethod
    @property
    def LEFT(cls) -> LegendPositionType:
        '''Specifies that the legend shall be drawn at the left of the chart.'''
        ...

    @classmethod
    @property
    def RIGHT(cls) -> LegendPositionType:
        '''Specifies that the legend shall be drawn at the right of the chart.'''
        ...

    @classmethod
    @property
    def TOP(cls) -> LegendPositionType:
        '''Specifies that the legend shall be drawn at the top of the chart.'''
        ...

    @classmethod
    @property
    def TOP_RIGHT(cls) -> LegendPositionType:
        '''Specifies that the legend shall be drawn at the top right of the chart.'''
        ...

    ...

class MarkerStyleType:
    '''Determines form of marker on chart's data point.'''
    @classmethod
    @property
    def NOT_DEFINED(cls) -> MarkerStyleType:
        ...

    @classmethod
    @property
    def CIRCLE(cls) -> MarkerStyleType:
        '''Specifies a circle shall be drawn at each data point.'''
        ...

    @classmethod
    @property
    def DASH(cls) -> MarkerStyleType:
        '''Specifies a dash shall be drawn at each data point.'''
        ...

    @classmethod
    @property
    def DIAMOND(cls) -> MarkerStyleType:
        '''Specifies a diamond shall be drawn at each data point.'''
        ...

    @classmethod
    @property
    def DOT(cls) -> MarkerStyleType:
        '''Specifies a dot shall be drawn at each data point.'''
        ...

    @classmethod
    @property
    def NONE(cls) -> MarkerStyleType:
        '''Specifies nothing shall be drawn at each data point.'''
        ...

    @classmethod
    @property
    def PICTURE(cls) -> MarkerStyleType:
        '''Specifies a picture shall be drawn at each data point.'''
        ...

    @classmethod
    @property
    def PLUS(cls) -> MarkerStyleType:
        '''Specifies a plus shall be drawn at each data point.'''
        ...

    @classmethod
    @property
    def SQUARE(cls) -> MarkerStyleType:
        '''Specifies a square shall be drawn at each data point.'''
        ...

    @classmethod
    @property
    def STAR(cls) -> MarkerStyleType:
        '''Specifies a star shall be drawn at each data point.'''
        ...

    @classmethod
    @property
    def TRIANGLE(cls) -> MarkerStyleType:
        '''Specifies a triangle shall be drawn at each data point.'''
        ...

    @classmethod
    @property
    def X(cls) -> MarkerStyleType:
        '''Specifies an X shall be drawn at each data point.'''
        ...

    ...

class ParentLabelLayoutType:
    '''Represents layout of category data labels. Used with Treemap series only.'''
    @classmethod
    @property
    def BANNER(cls) -> ParentLabelLayoutType:
        '''Specifies that parent category labels are shown as banner'''
        ...

    @classmethod
    @property
    def NONE(cls) -> ParentLabelLayoutType:
        '''Specifies that parent category labels are not drawn'''
        ...

    @classmethod
    @property
    def OVERLAPPING(cls) -> ParentLabelLayoutType:
        '''Specifies that parent category labels are shown as overlapping'''
        ...

    ...

class PictureType:
    '''Determines mode of bar picture filling.'''
    @classmethod
    @property
    def NOT_DEFINED(cls) -> PictureType:
        '''Not defined.'''
        ...

    @classmethod
    @property
    def STACK(cls) -> PictureType:
        '''The picture is sized to repeat a maximum of 15 times in the longest stacked bar.'''
        ...

    @classmethod
    @property
    def STACK_SCALE(cls) -> PictureType:
        '''The picture is sized to a specified number of units and repeated the length of the bar.'''
        ...

    @classmethod
    @property
    def STRETCH(cls) -> PictureType:
        '''The picture is stretched the full length of the stacked bar.'''
        ...

    ...

class PieSplitType:
    '''Represents a type of splitting points in the second pie or bar 
                on a pie-of-pie or bar-of-pie chart.'''
    @classmethod
    @property
    def DEFAULT(cls) -> PieSplitType:
        '''Specifies the data points shall be split using the default 
                    mechanism for this chart type.'''
        ...

    @classmethod
    @property
    def CUSTOM(cls) -> PieSplitType:
        '''Specifies the data points shall be split between the 
                    pie and the second chart according to the Custom Split values.'''
        ...

    @classmethod
    @property
    def BY_PERCENTAGE(cls) -> PieSplitType:
        '''Specifies the data points shall be split between the pie and the 
                    second chart by putting the points with percentage less than 
                    Split Position percent in the second chart.'''
        ...

    @classmethod
    @property
    def BY_POS(cls) -> PieSplitType:
        '''Specifies the data points shall be split between the pie and the 
                    second chart by putting the last Split Position of the data points 
                    in the second chart.'''
        ...

    @classmethod
    @property
    def BY_VALUE(cls) -> PieSplitType:
        '''Specifies the data points shall be split between the pie and the 
                    second chart by putting the data points with value less than 
                    Split Position in the second chart.'''
        ...

    ...

class QuartileMethodType:
    '''Returns type of quartile method'''
    @classmethod
    @property
    def EXCLUSIVE(cls) -> QuartileMethodType:
        '''Represents exclusive quartile method.'''
        ...

    @classmethod
    @property
    def INCLUSIVE(cls) -> QuartileMethodType:
        '''Represents inclusive quartile method.'''
        ...

    ...

class StyleType:
    '''Represents chart style.'''
    @classmethod
    @property
    def STYLE1(cls) -> StyleType:
        '''Style 1'''
        ...

    @classmethod
    @property
    def STYLE2(cls) -> StyleType:
        '''Style 2'''
        ...

    @classmethod
    @property
    def STYLE3(cls) -> StyleType:
        '''Style 3'''
        ...

    @classmethod
    @property
    def STYLE4(cls) -> StyleType:
        '''Style 4'''
        ...

    @classmethod
    @property
    def STYLE5(cls) -> StyleType:
        '''Style 5'''
        ...

    @classmethod
    @property
    def STYLE6(cls) -> StyleType:
        '''Style 6'''
        ...

    @classmethod
    @property
    def STYLE7(cls) -> StyleType:
        '''Style 7'''
        ...

    @classmethod
    @property
    def STYLE8(cls) -> StyleType:
        '''Style 8'''
        ...

    @classmethod
    @property
    def STYLE9(cls) -> StyleType:
        '''Style 9'''
        ...

    @classmethod
    @property
    def STYLE10(cls) -> StyleType:
        '''Style 10'''
        ...

    @classmethod
    @property
    def STYLE11(cls) -> StyleType:
        '''Style 11'''
        ...

    @classmethod
    @property
    def STYLE12(cls) -> StyleType:
        '''Style 12'''
        ...

    @classmethod
    @property
    def STYLE13(cls) -> StyleType:
        '''Style 13'''
        ...

    @classmethod
    @property
    def STYLE14(cls) -> StyleType:
        '''Style 14'''
        ...

    @classmethod
    @property
    def STYLE15(cls) -> StyleType:
        '''Style 15'''
        ...

    @classmethod
    @property
    def STYLE16(cls) -> StyleType:
        '''Style 16'''
        ...

    @classmethod
    @property
    def STYLE17(cls) -> StyleType:
        '''Style 17'''
        ...

    @classmethod
    @property
    def STYLE18(cls) -> StyleType:
        '''Style 18'''
        ...

    @classmethod
    @property
    def STYLE19(cls) -> StyleType:
        '''Style 19'''
        ...

    @classmethod
    @property
    def STYLE20(cls) -> StyleType:
        '''Style 20'''
        ...

    @classmethod
    @property
    def STYLE21(cls) -> StyleType:
        '''Style 21'''
        ...

    @classmethod
    @property
    def STYLE22(cls) -> StyleType:
        '''Style 22'''
        ...

    @classmethod
    @property
    def STYLE23(cls) -> StyleType:
        '''Style 23'''
        ...

    @classmethod
    @property
    def STYLE24(cls) -> StyleType:
        '''Style 24'''
        ...

    @classmethod
    @property
    def STYLE25(cls) -> StyleType:
        '''Style 25'''
        ...

    @classmethod
    @property
    def STYLE26(cls) -> StyleType:
        '''Style 26'''
        ...

    @classmethod
    @property
    def STYLE27(cls) -> StyleType:
        '''Style 27'''
        ...

    @classmethod
    @property
    def STYLE28(cls) -> StyleType:
        '''Style 28'''
        ...

    @classmethod
    @property
    def STYLE29(cls) -> StyleType:
        '''Style 29'''
        ...

    @classmethod
    @property
    def STYLE30(cls) -> StyleType:
        '''Style 30'''
        ...

    @classmethod
    @property
    def STYLE31(cls) -> StyleType:
        '''Style 31'''
        ...

    @classmethod
    @property
    def STYLE32(cls) -> StyleType:
        '''Style 32'''
        ...

    @classmethod
    @property
    def STYLE33(cls) -> StyleType:
        '''Style 33'''
        ...

    @classmethod
    @property
    def STYLE34(cls) -> StyleType:
        '''Style 34'''
        ...

    @classmethod
    @property
    def STYLE35(cls) -> StyleType:
        '''Style 35'''
        ...

    @classmethod
    @property
    def STYLE36(cls) -> StyleType:
        '''Style 36'''
        ...

    @classmethod
    @property
    def STYLE37(cls) -> StyleType:
        '''Style 37'''
        ...

    @classmethod
    @property
    def STYLE38(cls) -> StyleType:
        '''Style 38'''
        ...

    @classmethod
    @property
    def STYLE39(cls) -> StyleType:
        '''Style 39'''
        ...

    @classmethod
    @property
    def STYLE40(cls) -> StyleType:
        '''Style 40'''
        ...

    @classmethod
    @property
    def STYLE41(cls) -> StyleType:
        '''Style 41'''
        ...

    @classmethod
    @property
    def STYLE42(cls) -> StyleType:
        '''Style 42'''
        ...

    @classmethod
    @property
    def STYLE43(cls) -> StyleType:
        '''Style 43'''
        ...

    @classmethod
    @property
    def STYLE44(cls) -> StyleType:
        '''Style 44'''
        ...

    @classmethod
    @property
    def STYLE45(cls) -> StyleType:
        '''Style 45'''
        ...

    @classmethod
    @property
    def STYLE46(cls) -> StyleType:
        '''Style 46'''
        ...

    @classmethod
    @property
    def STYLE47(cls) -> StyleType:
        '''Style 47'''
        ...

    @classmethod
    @property
    def STYLE48(cls) -> StyleType:
        '''Style 48'''
        ...

    ...

class TickLabelPositionType:
    '''Represents the position type of tick-mark labels on the specified axis.'''
    @classmethod
    @property
    def HIGH(cls) -> TickLabelPositionType:
        '''Specifies the axis labels shall be at the high end of the perpendicular axis.'''
        ...

    @classmethod
    @property
    def LOW(cls) -> TickLabelPositionType:
        '''Specifies the axis labels shall be at the low end of the perpendicular axis.'''
        ...

    @classmethod
    @property
    def NEXT_TO(cls) -> TickLabelPositionType:
        '''Specifies the axis labels shall be next to the axis.'''
        ...

    @classmethod
    @property
    def NONE(cls) -> TickLabelPositionType:
        '''Specifies the axis labels are not drawn.'''
        ...

    ...

class TickMarkType:
    '''Represents the tick mark type for the specified axis.'''
    @classmethod
    @property
    def CROSS(cls) -> TickMarkType:
        '''Specifies the tick marks shall cross the axis.'''
        ...

    @classmethod
    @property
    def INSIDE(cls) -> TickMarkType:
        '''Specifies the tick marks shall be inside the plot area.'''
        ...

    @classmethod
    @property
    def NONE(cls) -> TickMarkType:
        '''Specifies there shall be no tick marks.'''
        ...

    @classmethod
    @property
    def OUTSIDE(cls) -> TickMarkType:
        '''Specifies the tick marks shall be outside the plot area.'''
        ...

    ...

class TimeUnitType:
    '''Represents the base unit for the category axis'''
    @classmethod
    @property
    def NONE(cls) -> TimeUnitType:
        '''Values will displayed as is.'''
        ...

    @classmethod
    @property
    def DAYS(cls) -> TimeUnitType:
        '''Specifies the chart data shall be shown in days.'''
        ...

    @classmethod
    @property
    def MONTHS(cls) -> TimeUnitType:
        '''Specifies the chart data shall be shown in months.'''
        ...

    @classmethod
    @property
    def YEARS(cls) -> TimeUnitType:
        '''Specifies the chart data shall be shown in years.'''
        ...

    ...

class TrendlineType:
    '''Represents type of trend line'''
    @classmethod
    @property
    def EXPONENTIAL(cls) -> TrendlineType:
        '''Specifies the trendline shall be an exponential curve in the form.'''
        ...

    @classmethod
    @property
    def LINEAR(cls) -> TrendlineType:
        '''Specifies the trendline shall be a line in the form.'''
        ...

    @classmethod
    @property
    def LOGARITHMIC(cls) -> TrendlineType:
        '''Specifies the trendline shall be a logarithmic curve in  the form  , where log is the natural logarithm.'''
        ...

    @classmethod
    @property
    def MOVING_AVERAGE(cls) -> TrendlineType:
        '''Specifies the trendline shall be a moving average of period Period.'''
        ...

    @classmethod
    @property
    def POLYNOMIAL(cls) -> TrendlineType:
        '''Specifies the trendline shall be a polynomial curve of order Order in the form.'''
        ...

    @classmethod
    @property
    def POWER(cls) -> TrendlineType:
        '''Specifies the trendline shall be a power curve in the form.'''
        ...

    ...

