from typing import List, Optional, Dict, Iterable
import aspose.pycore
import aspose.pydrawing
import aspose.slides
import aspose.slides.animation
import aspose.slides.charts
import aspose.slides.dom.ole
import aspose.slides.effects
import aspose.slides.export
import aspose.slides.export.web
import aspose.slides.export.xaml
import aspose.slides.importing
import aspose.slides.ink
import aspose.slides.lowcode
import aspose.slides.mathtext
import aspose.slides.slideshow
import aspose.slides.smartart
import aspose.slides.spreadsheet
import aspose.slides.theme
import aspose.slides.util
import aspose.slides.vba
import aspose.slides.warnings

class BaseScript(MathElementBase):
    '''Math script'''
    @overload
    def join(self, math_element: IMathElement) -> IMathBlock:
        '''Joins a mathematical element and forms a mathematical block
        :param math_element: The element to be joined
        :returns: A new IMathBlock containing this instance and specified argument'''
        ...

    @overload
    def join(self, math_text: str) -> IMathBlock:
        '''Joins a mathematical text and forms a mathematical block
        :param math_text: Mathematical text to be joined
        :returns: A new IMathBlock containing this instance and specified argument'''
        ...

    @overload
    def divide(self, denominator: IMathElement) -> IMathFraction:
        '''Creates a fraction with this numerator and specified denominator
        :param denominator: Denominator
        :returns: new fraction'''
        ...

    @overload
    def divide(self, denominator: str) -> IMathFraction:
        '''Creates a fraction with this numerator and specified denominator
        :param denominator: Denominator
        :returns: new fraction'''
        ...

    @overload
    def divide(self, denominator: IMathElement, fraction_type: MathFractionTypes) -> IMathFraction:
        '''Creates a fraction of the specified type with this numerator and specified denominator
        :param denominator: Denominator
        :param fraction_type: Fraction type: Bar, NoBar, Skewed, Linear
        :returns: new fraction'''
        ...

    @overload
    def divide(self, denominator: str, fraction_type: MathFractionTypes) -> IMathFraction:
        '''Creates a fraction of the specified type with this numerator and specified denominator
        :param denominator: Denominator
        :param fraction_type: Fraction type: Bar, NoBar, Skewed, Linear
        :returns: new fraction'''
        ...

    @overload
    def enclose(self) -> IMathDelimiter:
        '''Encloses a math element in parenthesis
        :returns: The math element of type :py:class:`aspose.slides.mathtext.IMathDelimiter` which includes the parenthesis'''
        ...

    @overload
    def enclose(self, beginning_character: char, ending_character: char) -> IMathDelimiter:
        '''Encloses a math element in specified characters such as parenthesis or another characters as framing
        :param beginning_character: Beginning character (usually left bracket)
        :param ending_character: Ending character (usually right bracket)
        :returns: The math element of type :py:class:`aspose.slides.mathtext.IMathDelimiter` which includes specified characters as framing'''
        ...

    @overload
    def function(self, function_argument: IMathElement) -> IMathFunction:
        '''Takes a function of an argument using this instance as the function name
        :param function_argument: An argument of the function
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathFunction`'''
        ...

    @overload
    def function(self, function_argument: str) -> IMathFunction:
        '''Takes a function of an argument using this instance as the function name
        :param function_argument: An argument of the function
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathFunction`'''
        ...

    @overload
    def as_argument_of_function(self, function_name: IMathElement) -> IMathFunction:
        '''Takes specified function using this instance as the argument
        :param function_name: Function name
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathFunction`'''
        ...

    @overload
    def as_argument_of_function(self, function_name: str) -> IMathFunction:
        '''Takes specified function using this instance as the argument
        :param function_name: Function name
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathFunction`'''
        ...

    @overload
    def as_argument_of_function(self, function_type: MathFunctionsOfOneArgument) -> IMathFunction:
        '''Takes specified function using this instance as the argument
        :param function_type: One of the common function type of one argument
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathFunction`'''
        ...

    @overload
    def as_argument_of_function(self, function_type: MathFunctionsOfTwoArguments, additional_argument: IMathElement) -> IMathFunction:
        '''Takes specified function using this instance as the argument and specified additional argument
        :param function_type: One of the common function type of two arguments: Log, Lim, Min, Max
        :param additional_argument: Additional argument depending on the type of function
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathFunction`'''
        ...

    @overload
    def as_argument_of_function(self, function_type: MathFunctionsOfTwoArguments, additional_argument: str) -> IMathFunction:
        '''Takes specified function using this instance as the argument and specified additional argument
        :param function_type: One of the common function type of two arguments: Log, Lim, Min, Max
        :param additional_argument: Additional argument depending on the type of function
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathFunction`'''
        ...

    @overload
    def set_subscript(self, subscript: IMathElement) -> IMathSubscriptElement:
        '''Creates subscript
        :param subscript: Subscript (lower index on the right)
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathSubscriptElement`'''
        ...

    @overload
    def set_subscript(self, subscript: str) -> IMathSubscriptElement:
        '''Creates subscript
        :param subscript: Subscript (lower index on the right)
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathSubscriptElement`'''
        ...

    @overload
    def set_superscript(self, superscript: IMathElement) -> IMathSuperscriptElement:
        '''Creates superscript
        :param superscript: Superscript (upper index on the right)
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathSuperscriptElement`'''
        ...

    @overload
    def set_superscript(self, superscript: str) -> IMathSuperscriptElement:
        '''Creates superscript
        :param superscript: Superscript (upper index on the right)
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathSuperscriptElement`'''
        ...

    @overload
    def set_sub_superscript_on_the_right(self, subscript: IMathElement, superscript: IMathElement) -> IMathRightSubSuperscriptElement:
        '''Creates subscript and superscript on the right
        :param subscript: Subscript (lower index on the right)
        :param superscript: Superscript (upper index on the right)
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathRightSubSuperscriptElement`'''
        ...

    @overload
    def set_sub_superscript_on_the_right(self, subscript: str, superscript: str) -> IMathRightSubSuperscriptElement:
        '''Creates subscript and superscript on the right
        :param subscript: Subscript (lower index on the right)
        :param superscript: Superscript (upper index on the right)
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathRightSubSuperscriptElement`'''
        ...

    @overload
    def set_sub_superscript_on_the_left(self, subscript: IMathElement, superscript: IMathElement) -> IMathLeftSubSuperscriptElement:
        '''Creates subscript and superscript on the left
        :param subscript: Subscript (lower index on the left)
        :param superscript: Superscript (upper index on the left)
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathLeftSubSuperscriptElement`'''
        ...

    @overload
    def set_sub_superscript_on_the_left(self, subscript: str, superscript: str) -> IMathLeftSubSuperscriptElement:
        '''Creates subscript and superscript on the left
        :param subscript: Subscript (lower index on the left)
        :param superscript: Superscript (upper index on the left)
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathLeftSubSuperscriptElement`'''
        ...

    @overload
    def radical(self, degree: IMathElement) -> IMathRadical:
        '''Specifies the mathematical root of the given degree from the specified argument.
        :param degree: Argument of Radical
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathRadical`'''
        ...

    @overload
    def radical(self, degree: str) -> IMathRadical:
        '''Specifies the mathematical root of the given degree from the specified argument.
        :param degree: Argument of Radical
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathRadical`'''
        ...

    @overload
    def set_upper_limit(self, limit: IMathElement) -> IMathLimit:
        '''Takes upper limit
        :param limit: limit
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathLimit`'''
        ...

    @overload
    def set_upper_limit(self, limit: str) -> IMathLimit:
        '''Takes upper limit
        :param limit: limit
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathLimit`'''
        ...

    @overload
    def set_lower_limit(self, limit: IMathElement) -> IMathLimit:
        '''Takes lower limit
        :param limit: limit
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathLimit`'''
        ...

    @overload
    def set_lower_limit(self, limit: str) -> IMathLimit:
        '''Takes lower limit
        :param limit: limit
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathLimit`'''
        ...

    @overload
    def nary(self, type: MathNaryOperatorTypes, lower_limit: IMathElement, upper_limit: IMathElement) -> IMathNaryOperator:
        '''Creates a N-ary operator
        :param type: The N-ary operator type
        :param lower_limit: The lower limit
        :param upper_limit: The upper limit
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathNaryOperator`'''
        ...

    @overload
    def nary(self, type: MathNaryOperatorTypes, lower_limit: str, upper_limit: str) -> IMathNaryOperator:
        '''Creates a N-ary operator
        :param type: The N-ary operator type
        :param lower_limit: The lower limit
        :param upper_limit: The upper limit
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathNaryOperator`'''
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes, lower_limit: IMathElement, upper_limit: IMathElement, limit_locations: MathLimitLocations) -> IMathNaryOperator:
        '''Takes the integral
        :param integral_type: Integral type
        :param lower_limit: Lower limit of integral
        :param upper_limit: Upper limit of integral
        :param limit_locations: location of limits
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathNaryOperator`'''
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes, lower_limit: IMathElement, upper_limit: IMathElement) -> IMathNaryOperator:
        '''Takes the integral
        :param integral_type: Integral type
        :param lower_limit: Lower limit of integral
        :param upper_limit: Upper limit of integral
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathNaryOperator`'''
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes) -> IMathNaryOperator:
        '''Takes the integral without limits
        :param integral_type: Integral type
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathNaryOperator`'''
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes, lower_limit: str, upper_limit: str, limit_locations: MathLimitLocations) -> IMathNaryOperator:
        '''Takes the integral
        :param integral_type: Integral type
        :param lower_limit: Lower limit of integral
        :param upper_limit: Upper limit of integral
        :param limit_locations: location of limits
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathNaryOperator`'''
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes, lower_limit: str, upper_limit: str) -> IMathNaryOperator:
        '''Takes the integral
        :param integral_type: Integral type
        :param lower_limit: Lower limit of integral
        :param upper_limit: Upper limit of integral
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathNaryOperator`'''
        ...

    @overload
    def group(self) -> IMathGroupingCharacter:
        '''Places this element in a group using a bottom curly bracket
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathGroupingCharacter`'''
        ...

    @overload
    def group(self, character: char, position: MathTopBotPositions, vertical_justification: MathTopBotPositions) -> IMathGroupingCharacter:
        '''Places this element in a group using a grouping character such as bottom curly bracket or another
        :param character: Grouping Character such as BOTTOM CURLY BRACKET (U+23DF) or any other
        :param position: Position of grouping character
        :param vertical_justification: Vertical justification of group character.
                    Specifies the alignment of the object with respect to the baseline.
                    For example, when the group character is above the object, 
                    VerticalJustification of Top signifies that the top of the object falls on the baseline;
                    when VerticalJustification is set to Bottom, the bottom of the object is on the baseline
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathGroupingCharacter`'''
        ...

    @overload
    def to_border_box(self) -> IMathBorderBox:
        '''Places this element in a border-box
        :returns: Border-box with this element placed inside'''
        ...

    @overload
    def to_border_box(self, hide_top: bool, hide_bottom: bool, hide_left: bool, hide_right: bool, strikethrough_horizontal: bool, strikethrough_vertical: bool, strikethrough_bottom_left_to_top_right: bool, strikethrough_top_left_to_bottom_right: bool) -> IMathBorderBox:
        '''Places this element in a border-box
        :param hide_top: Hide Top Edge
        :param hide_bottom: Hide Bottom Edge
        :param hide_left: Hide Left Edge
        :param hide_right: Hide Right Edge
        :param strikethrough_horizontal: Border Box Strikethrough Horizontal
        :param strikethrough_vertical: Border Box Strikethrough Vertical
        :param strikethrough_bottom_left_to_top_right: Border Box Strikethrough Bottom-Left to Top-Right
        :param strikethrough_top_left_to_bottom_right: Border Box Strikethrough Top-Left to Bottom-Right
        :returns: Border-box with this element placed inside'''
        ...

    def to_math_array(self) -> IMathArray:
        '''Puts in a vertical array
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathArray`'''
        ...

    def accent(self, accent_character: char) -> IMathAccent:
        '''Sets an accent mark (a character on the top of this element)
        :param accent_character: Accent character. The value should be within the range of (U+0300–U+036F) or (U+20D0–U+20EF)
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathAccent`'''
        ...

    def overbar(self) -> IMathBar:
        '''Sets a bar on the top of this element
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathBar`'''
        ...

    def underbar(self) -> IMathBar:
        '''Sets a bar on the bottom of this element
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathBar`'''
        ...

    def to_box(self) -> IMathBox:
        '''Places this element in a non-visual box (logical grouping) 
                    which is used to group components of an equation or other instance of mathematical text.
                    A boxed object can (for example) serve as an operator emulator with or without an alignment point, 
                    serve as a line break point, or be grouped such as not to allow line breaks within.
        :returns: Logical box with this element placed inside'''
        ...

    def get_children(self) -> List[IMathElement]:
        ...

    @property
    def base(self) -> IMathElement:
        '''Base argument'''
        ...

    ...

class IMathAccent:
    '''Specifies the accent function, consisting of a base and a combining diacritical mark
                Example: 𝑎́'''
    @overload
    def join(self, math_element: IMathElement) -> IMathBlock:
        ...

    @overload
    def join(self, math_text: str) -> IMathBlock:
        ...

    @overload
    def divide(self, denominator: IMathElement) -> IMathFraction:
        ...

    @overload
    def divide(self, denominator: str) -> IMathFraction:
        ...

    @overload
    def divide(self, denominator: IMathElement, fraction_type: MathFractionTypes) -> IMathFraction:
        ...

    @overload
    def divide(self, denominator: str, fraction_type: MathFractionTypes) -> IMathFraction:
        ...

    @overload
    def enclose(self) -> IMathDelimiter:
        ...

    @overload
    def enclose(self, beginning_character: char, ending_character: char) -> IMathDelimiter:
        ...

    @overload
    def function(self, function_argument: IMathElement) -> IMathFunction:
        ...

    @overload
    def function(self, function_argument: str) -> IMathFunction:
        ...

    @overload
    def as_argument_of_function(self, function_name: IMathElement) -> IMathFunction:
        ...

    @overload
    def as_argument_of_function(self, function_name: str) -> IMathFunction:
        ...

    @overload
    def as_argument_of_function(self, function_type: MathFunctionsOfOneArgument) -> IMathFunction:
        ...

    @overload
    def as_argument_of_function(self, function_type: MathFunctionsOfTwoArguments, additional_argument: IMathElement) -> IMathFunction:
        ...

    @overload
    def as_argument_of_function(self, function_type: MathFunctionsOfTwoArguments, additional_argument: str) -> IMathFunction:
        ...

    @overload
    def set_subscript(self, subscript: IMathElement) -> IMathSubscriptElement:
        ...

    @overload
    def set_subscript(self, subscript: str) -> IMathSubscriptElement:
        ...

    @overload
    def set_superscript(self, superscript: IMathElement) -> IMathSuperscriptElement:
        ...

    @overload
    def set_superscript(self, superscript: str) -> IMathSuperscriptElement:
        ...

    @overload
    def set_sub_superscript_on_the_right(self, subscript: IMathElement, superscript: IMathElement) -> IMathRightSubSuperscriptElement:
        ...

    @overload
    def set_sub_superscript_on_the_right(self, subscript: str, superscript: str) -> IMathRightSubSuperscriptElement:
        ...

    @overload
    def set_sub_superscript_on_the_left(self, subscript: IMathElement, superscript: IMathElement) -> IMathLeftSubSuperscriptElement:
        ...

    @overload
    def set_sub_superscript_on_the_left(self, subscript: str, superscript: str) -> IMathLeftSubSuperscriptElement:
        ...

    @overload
    def radical(self, degree: IMathElement) -> IMathRadical:
        ...

    @overload
    def radical(self, degree: str) -> IMathRadical:
        ...

    @overload
    def set_upper_limit(self, limit: IMathElement) -> IMathLimit:
        ...

    @overload
    def set_upper_limit(self, limit: str) -> IMathLimit:
        ...

    @overload
    def set_lower_limit(self, limit: IMathElement) -> IMathLimit:
        ...

    @overload
    def set_lower_limit(self, limit: str) -> IMathLimit:
        ...

    @overload
    def nary(self, type: MathNaryOperatorTypes, lower_limit: IMathElement, upper_limit: IMathElement) -> IMathNaryOperator:
        ...

    @overload
    def nary(self, type: MathNaryOperatorTypes, lower_limit: str, upper_limit: str) -> IMathNaryOperator:
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes, lower_limit: IMathElement, upper_limit: IMathElement, limit_locations: MathLimitLocations) -> IMathNaryOperator:
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes, lower_limit: IMathElement, upper_limit: IMathElement) -> IMathNaryOperator:
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes) -> IMathNaryOperator:
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes, lower_limit: str, upper_limit: str, limit_locations: MathLimitLocations) -> IMathNaryOperator:
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes, lower_limit: str, upper_limit: str) -> IMathNaryOperator:
        ...

    @overload
    def group(self) -> IMathGroupingCharacter:
        ...

    @overload
    def group(self, character: char, position: MathTopBotPositions, vertical_justification: MathTopBotPositions) -> IMathGroupingCharacter:
        ...

    @overload
    def to_border_box(self) -> IMathBorderBox:
        ...

    @overload
    def to_border_box(self, hide_top: bool, hide_bottom: bool, hide_left: bool, hide_right: bool, strikethrough_horizontal: bool, strikethrough_vertical: bool, strikethrough_bottom_left_to_top_right: bool, strikethrough_top_left_to_bottom_right: bool) -> IMathBorderBox:
        ...

    def get_children(self) -> List[IMathElement]:
        ...

    def to_math_array(self) -> IMathArray:
        ...

    def accent(self, accent_character: char) -> IMathAccent:
        ...

    def overbar(self) -> IMathBar:
        ...

    def underbar(self) -> IMathBar:
        ...

    def to_box(self) -> IMathBox:
        ...

    @property
    def base(self) -> IMathElement:
        '''The argument to which the accent was applied'''
        ...

    @property
    def character(self) -> char:
        '''Accent Character
                    The value should be within the range of (U+0300–U+036F) or(U+20D0–U+20EF)
                    Default value: Combining Circumflex Accent (U+0302)'''
        ...

    @character.setter
    def character(self, value: char):
        '''Accent Character
                    The value should be within the range of (U+0300–U+036F) or(U+20D0–U+20EF)
                    Default value: Combining Circumflex Accent (U+0302)'''
        ...

    @property
    def as_i_math_element(self) -> IMathElement:
        ...

    ...

class IMathAccentFactory:
    '''Allows to create a math accent'''
    @overload
    def create_math_accent(self, element: IMathElement) -> IMathAccent:
        '''Creates a math accent applying to a specified math element with the default accent character value
        :param element: math element to apply accent
        :returns: new math accent'''
        ...

    @overload
    def create_math_accent(self, element: IMathElement, accent_character: char) -> IMathAccent:
        '''Creates a math accent applying to a specified math element
        :param element: math element to apply accent
        :param accent_character: accent character
        :returns: new math accent'''
        ...

    ...

class IMathArray:
    '''Specifies a vertical array of equations or any mathematical objects'''
    @overload
    def join(self, math_element: IMathElement) -> IMathBlock:
        ...

    @overload
    def join(self, math_text: str) -> IMathBlock:
        ...

    @overload
    def divide(self, denominator: IMathElement) -> IMathFraction:
        ...

    @overload
    def divide(self, denominator: str) -> IMathFraction:
        ...

    @overload
    def divide(self, denominator: IMathElement, fraction_type: MathFractionTypes) -> IMathFraction:
        ...

    @overload
    def divide(self, denominator: str, fraction_type: MathFractionTypes) -> IMathFraction:
        ...

    @overload
    def enclose(self) -> IMathDelimiter:
        ...

    @overload
    def enclose(self, beginning_character: char, ending_character: char) -> IMathDelimiter:
        ...

    @overload
    def function(self, function_argument: IMathElement) -> IMathFunction:
        ...

    @overload
    def function(self, function_argument: str) -> IMathFunction:
        ...

    @overload
    def as_argument_of_function(self, function_name: IMathElement) -> IMathFunction:
        ...

    @overload
    def as_argument_of_function(self, function_name: str) -> IMathFunction:
        ...

    @overload
    def as_argument_of_function(self, function_type: MathFunctionsOfOneArgument) -> IMathFunction:
        ...

    @overload
    def as_argument_of_function(self, function_type: MathFunctionsOfTwoArguments, additional_argument: IMathElement) -> IMathFunction:
        ...

    @overload
    def as_argument_of_function(self, function_type: MathFunctionsOfTwoArguments, additional_argument: str) -> IMathFunction:
        ...

    @overload
    def set_subscript(self, subscript: IMathElement) -> IMathSubscriptElement:
        ...

    @overload
    def set_subscript(self, subscript: str) -> IMathSubscriptElement:
        ...

    @overload
    def set_superscript(self, superscript: IMathElement) -> IMathSuperscriptElement:
        ...

    @overload
    def set_superscript(self, superscript: str) -> IMathSuperscriptElement:
        ...

    @overload
    def set_sub_superscript_on_the_right(self, subscript: IMathElement, superscript: IMathElement) -> IMathRightSubSuperscriptElement:
        ...

    @overload
    def set_sub_superscript_on_the_right(self, subscript: str, superscript: str) -> IMathRightSubSuperscriptElement:
        ...

    @overload
    def set_sub_superscript_on_the_left(self, subscript: IMathElement, superscript: IMathElement) -> IMathLeftSubSuperscriptElement:
        ...

    @overload
    def set_sub_superscript_on_the_left(self, subscript: str, superscript: str) -> IMathLeftSubSuperscriptElement:
        ...

    @overload
    def radical(self, degree: IMathElement) -> IMathRadical:
        ...

    @overload
    def radical(self, degree: str) -> IMathRadical:
        ...

    @overload
    def set_upper_limit(self, limit: IMathElement) -> IMathLimit:
        ...

    @overload
    def set_upper_limit(self, limit: str) -> IMathLimit:
        ...

    @overload
    def set_lower_limit(self, limit: IMathElement) -> IMathLimit:
        ...

    @overload
    def set_lower_limit(self, limit: str) -> IMathLimit:
        ...

    @overload
    def nary(self, type: MathNaryOperatorTypes, lower_limit: IMathElement, upper_limit: IMathElement) -> IMathNaryOperator:
        ...

    @overload
    def nary(self, type: MathNaryOperatorTypes, lower_limit: str, upper_limit: str) -> IMathNaryOperator:
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes, lower_limit: IMathElement, upper_limit: IMathElement, limit_locations: MathLimitLocations) -> IMathNaryOperator:
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes, lower_limit: IMathElement, upper_limit: IMathElement) -> IMathNaryOperator:
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes) -> IMathNaryOperator:
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes, lower_limit: str, upper_limit: str, limit_locations: MathLimitLocations) -> IMathNaryOperator:
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes, lower_limit: str, upper_limit: str) -> IMathNaryOperator:
        ...

    @overload
    def group(self) -> IMathGroupingCharacter:
        ...

    @overload
    def group(self, character: char, position: MathTopBotPositions, vertical_justification: MathTopBotPositions) -> IMathGroupingCharacter:
        ...

    @overload
    def to_border_box(self) -> IMathBorderBox:
        ...

    @overload
    def to_border_box(self, hide_top: bool, hide_bottom: bool, hide_left: bool, hide_right: bool, strikethrough_horizontal: bool, strikethrough_vertical: bool, strikethrough_bottom_left_to_top_right: bool, strikethrough_top_left_to_bottom_right: bool) -> IMathBorderBox:
        ...

    def get_children(self) -> List[IMathElement]:
        ...

    def to_math_array(self) -> IMathArray:
        ...

    def accent(self, accent_character: char) -> IMathAccent:
        ...

    def overbar(self) -> IMathBar:
        ...

    def underbar(self) -> IMathBar:
        ...

    def to_box(self) -> IMathBox:
        ...

    @property
    def arguments(self) -> IMathElementCollection:
        '''The set of items of the array'''
        ...

    @property
    def base_justification(self) -> MathVerticalAlignment:
        ...

    @base_justification.setter
    def base_justification(self, value: MathVerticalAlignment):
        ...

    @property
    def maximum_distribution(self) -> bool:
        ...

    @maximum_distribution.setter
    def maximum_distribution(self, value: bool):
        ...

    @property
    def object_distribution(self) -> bool:
        ...

    @object_distribution.setter
    def object_distribution(self, value: bool):
        ...

    @property
    def row_spacing_rule(self) -> MathRowSpacingRule:
        ...

    @row_spacing_rule.setter
    def row_spacing_rule(self, value: MathRowSpacingRule):
        ...

    @property
    def row_spacing(self) -> int:
        ...

    @row_spacing.setter
    def row_spacing(self, value: int):
        ...

    @property
    def as_i_math_element(self) -> IMathElement:
        ...

    ...

class IMathArrayFactory:
    '''Allows to create a math array'''
    @overload
    def create_math_array(self, element: IMathElement) -> IMathArray:
        '''Creates a math array and places the specified element in it
        :param element: math element to place in array
        :returns: new math array'''
        ...

    @overload
    def create_math_array(self, elements: IMathElementCollection) -> IMathArray:
        '''Creates a math array and places specified elements in it
        :param elements: math elements to place in array
        :returns: new math array'''
        ...

    ...

class IMathBar:
    '''Specifies the bar function, consisting of a base argument and an overbar or underbar'''
    @overload
    def join(self, math_element: IMathElement) -> IMathBlock:
        ...

    @overload
    def join(self, math_text: str) -> IMathBlock:
        ...

    @overload
    def divide(self, denominator: IMathElement) -> IMathFraction:
        ...

    @overload
    def divide(self, denominator: str) -> IMathFraction:
        ...

    @overload
    def divide(self, denominator: IMathElement, fraction_type: MathFractionTypes) -> IMathFraction:
        ...

    @overload
    def divide(self, denominator: str, fraction_type: MathFractionTypes) -> IMathFraction:
        ...

    @overload
    def enclose(self) -> IMathDelimiter:
        ...

    @overload
    def enclose(self, beginning_character: char, ending_character: char) -> IMathDelimiter:
        ...

    @overload
    def function(self, function_argument: IMathElement) -> IMathFunction:
        ...

    @overload
    def function(self, function_argument: str) -> IMathFunction:
        ...

    @overload
    def as_argument_of_function(self, function_name: IMathElement) -> IMathFunction:
        ...

    @overload
    def as_argument_of_function(self, function_name: str) -> IMathFunction:
        ...

    @overload
    def as_argument_of_function(self, function_type: MathFunctionsOfOneArgument) -> IMathFunction:
        ...

    @overload
    def as_argument_of_function(self, function_type: MathFunctionsOfTwoArguments, additional_argument: IMathElement) -> IMathFunction:
        ...

    @overload
    def as_argument_of_function(self, function_type: MathFunctionsOfTwoArguments, additional_argument: str) -> IMathFunction:
        ...

    @overload
    def set_subscript(self, subscript: IMathElement) -> IMathSubscriptElement:
        ...

    @overload
    def set_subscript(self, subscript: str) -> IMathSubscriptElement:
        ...

    @overload
    def set_superscript(self, superscript: IMathElement) -> IMathSuperscriptElement:
        ...

    @overload
    def set_superscript(self, superscript: str) -> IMathSuperscriptElement:
        ...

    @overload
    def set_sub_superscript_on_the_right(self, subscript: IMathElement, superscript: IMathElement) -> IMathRightSubSuperscriptElement:
        ...

    @overload
    def set_sub_superscript_on_the_right(self, subscript: str, superscript: str) -> IMathRightSubSuperscriptElement:
        ...

    @overload
    def set_sub_superscript_on_the_left(self, subscript: IMathElement, superscript: IMathElement) -> IMathLeftSubSuperscriptElement:
        ...

    @overload
    def set_sub_superscript_on_the_left(self, subscript: str, superscript: str) -> IMathLeftSubSuperscriptElement:
        ...

    @overload
    def radical(self, degree: IMathElement) -> IMathRadical:
        ...

    @overload
    def radical(self, degree: str) -> IMathRadical:
        ...

    @overload
    def set_upper_limit(self, limit: IMathElement) -> IMathLimit:
        ...

    @overload
    def set_upper_limit(self, limit: str) -> IMathLimit:
        ...

    @overload
    def set_lower_limit(self, limit: IMathElement) -> IMathLimit:
        ...

    @overload
    def set_lower_limit(self, limit: str) -> IMathLimit:
        ...

    @overload
    def nary(self, type: MathNaryOperatorTypes, lower_limit: IMathElement, upper_limit: IMathElement) -> IMathNaryOperator:
        ...

    @overload
    def nary(self, type: MathNaryOperatorTypes, lower_limit: str, upper_limit: str) -> IMathNaryOperator:
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes, lower_limit: IMathElement, upper_limit: IMathElement, limit_locations: MathLimitLocations) -> IMathNaryOperator:
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes, lower_limit: IMathElement, upper_limit: IMathElement) -> IMathNaryOperator:
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes) -> IMathNaryOperator:
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes, lower_limit: str, upper_limit: str, limit_locations: MathLimitLocations) -> IMathNaryOperator:
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes, lower_limit: str, upper_limit: str) -> IMathNaryOperator:
        ...

    @overload
    def group(self) -> IMathGroupingCharacter:
        ...

    @overload
    def group(self, character: char, position: MathTopBotPositions, vertical_justification: MathTopBotPositions) -> IMathGroupingCharacter:
        ...

    @overload
    def to_border_box(self) -> IMathBorderBox:
        ...

    @overload
    def to_border_box(self, hide_top: bool, hide_bottom: bool, hide_left: bool, hide_right: bool, strikethrough_horizontal: bool, strikethrough_vertical: bool, strikethrough_bottom_left_to_top_right: bool, strikethrough_top_left_to_bottom_right: bool) -> IMathBorderBox:
        ...

    def get_children(self) -> List[IMathElement]:
        ...

    def to_math_array(self) -> IMathArray:
        ...

    def accent(self, accent_character: char) -> IMathAccent:
        ...

    def overbar(self) -> IMathBar:
        ...

    def underbar(self) -> IMathBar:
        ...

    def to_box(self) -> IMathBox:
        ...

    @property
    def base(self) -> IMathElement:
        '''Base argument'''
        ...

    @property
    def position(self) -> MathTopBotPositions:
        '''Position of the bar line. 
                    Default: Top'''
        ...

    @position.setter
    def position(self, value: MathTopBotPositions):
        '''Position of the bar line. 
                    Default: Top'''
        ...

    @property
    def as_i_math_element(self) -> IMathElement:
        ...

    ...

class IMathBarFactory:
    '''Allows to create a math bar'''
    @overload
    def create_math_bar(self, element: IMathElement) -> IMathBar:
        '''Create a math bar by applying to the element
        :param element: math element to apply bar
        :returns: new math bar element'''
        ...

    @overload
    def create_math_bar(self, element: IMathElement, position: MathTopBotPositions) -> IMathBar:
        '''Create a math bar by applying to the element
        :param element: Math element to apply bar
        :param position: Position of the bar
        :returns: new math bar element'''
        ...

    ...

class IMathBlock:
    '''Specifies an instance of mathematical text that contained within a MathParagraph and starts on its own line.
                All math zones, including equations, expressions, arrays of equations or expressions, and formulas are represented by math block.'''
    @overload
    def enclose(self, beginning_character: char, ending_character: char, separator_character: char) -> IMathDelimiter:
        '''Encloses child elements of this block in specified characters such as parenthesis or another as framing
                    and delimit with a separator character
        :param beginning_character: Beginning character (usually left bracket)
        :param ending_character: Ending character (usually right bracket)
        :param separator_character: Separator character
        :returns: The math element of type :py:class:`aspose.slides.mathtext.IMathDelimiter` which includes specified characters as framing and delimiter'''
        ...

    @overload
    def enclose(self) -> IMathDelimiter:
        ...

    @overload
    def enclose(self, beginning_character: char, ending_character: char) -> IMathDelimiter:
        ...

    @overload
    def join(self, math_element: IMathElement) -> IMathBlock:
        ...

    @overload
    def join(self, math_text: str) -> IMathBlock:
        ...

    @overload
    def divide(self, denominator: IMathElement) -> IMathFraction:
        ...

    @overload
    def divide(self, denominator: str) -> IMathFraction:
        ...

    @overload
    def divide(self, denominator: IMathElement, fraction_type: MathFractionTypes) -> IMathFraction:
        ...

    @overload
    def divide(self, denominator: str, fraction_type: MathFractionTypes) -> IMathFraction:
        ...

    @overload
    def function(self, function_argument: IMathElement) -> IMathFunction:
        ...

    @overload
    def function(self, function_argument: str) -> IMathFunction:
        ...

    @overload
    def as_argument_of_function(self, function_name: IMathElement) -> IMathFunction:
        ...

    @overload
    def as_argument_of_function(self, function_name: str) -> IMathFunction:
        ...

    @overload
    def as_argument_of_function(self, function_type: MathFunctionsOfOneArgument) -> IMathFunction:
        ...

    @overload
    def as_argument_of_function(self, function_type: MathFunctionsOfTwoArguments, additional_argument: IMathElement) -> IMathFunction:
        ...

    @overload
    def as_argument_of_function(self, function_type: MathFunctionsOfTwoArguments, additional_argument: str) -> IMathFunction:
        ...

    @overload
    def set_subscript(self, subscript: IMathElement) -> IMathSubscriptElement:
        ...

    @overload
    def set_subscript(self, subscript: str) -> IMathSubscriptElement:
        ...

    @overload
    def set_superscript(self, superscript: IMathElement) -> IMathSuperscriptElement:
        ...

    @overload
    def set_superscript(self, superscript: str) -> IMathSuperscriptElement:
        ...

    @overload
    def set_sub_superscript_on_the_right(self, subscript: IMathElement, superscript: IMathElement) -> IMathRightSubSuperscriptElement:
        ...

    @overload
    def set_sub_superscript_on_the_right(self, subscript: str, superscript: str) -> IMathRightSubSuperscriptElement:
        ...

    @overload
    def set_sub_superscript_on_the_left(self, subscript: IMathElement, superscript: IMathElement) -> IMathLeftSubSuperscriptElement:
        ...

    @overload
    def set_sub_superscript_on_the_left(self, subscript: str, superscript: str) -> IMathLeftSubSuperscriptElement:
        ...

    @overload
    def radical(self, degree: IMathElement) -> IMathRadical:
        ...

    @overload
    def radical(self, degree: str) -> IMathRadical:
        ...

    @overload
    def set_upper_limit(self, limit: IMathElement) -> IMathLimit:
        ...

    @overload
    def set_upper_limit(self, limit: str) -> IMathLimit:
        ...

    @overload
    def set_lower_limit(self, limit: IMathElement) -> IMathLimit:
        ...

    @overload
    def set_lower_limit(self, limit: str) -> IMathLimit:
        ...

    @overload
    def nary(self, type: MathNaryOperatorTypes, lower_limit: IMathElement, upper_limit: IMathElement) -> IMathNaryOperator:
        ...

    @overload
    def nary(self, type: MathNaryOperatorTypes, lower_limit: str, upper_limit: str) -> IMathNaryOperator:
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes, lower_limit: IMathElement, upper_limit: IMathElement, limit_locations: MathLimitLocations) -> IMathNaryOperator:
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes, lower_limit: IMathElement, upper_limit: IMathElement) -> IMathNaryOperator:
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes) -> IMathNaryOperator:
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes, lower_limit: str, upper_limit: str, limit_locations: MathLimitLocations) -> IMathNaryOperator:
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes, lower_limit: str, upper_limit: str) -> IMathNaryOperator:
        ...

    @overload
    def group(self) -> IMathGroupingCharacter:
        ...

    @overload
    def group(self, character: char, position: MathTopBotPositions, vertical_justification: MathTopBotPositions) -> IMathGroupingCharacter:
        ...

    @overload
    def to_border_box(self) -> IMathBorderBox:
        ...

    @overload
    def to_border_box(self, hide_top: bool, hide_bottom: bool, hide_left: bool, hide_right: bool, strikethrough_horizontal: bool, strikethrough_vertical: bool, strikethrough_bottom_left_to_top_right: bool, strikethrough_top_left_to_bottom_right: bool) -> IMathBorderBox:
        ...

    def delimit(self, separator_character: char) -> IMathDelimiter:
        '''Delimits all child elements with separator character (without the brackets)
        :param separator_character: Character used as a separator
        :returns: Instance of IMathDelimiter element'''
        ...

    def join_block(self, other: IMathBlock) -> IMathBlock:
        '''Joins another mathematical block with this one
        :param other: The joining block
        :returns: this mathematical block after joining'''
        ...

    def write_as_math_ml(self, stream: io.RawIOBase) -> None:
        '''Saves content of this :py:class:`aspose.slides.mathtext.IMathBlock` as MathML
        :param stream: Target stream'''
        ...

    def add(self, item: IMathElement) -> None:
        ...

    def index_of(self, item: IMathElement) -> int:
        ...

    def insert(self, index: int, item: IMathElement) -> None:
        ...

    def clear(self) -> None:
        ...

    def contains(self, item: IMathElement) -> bool:
        ...

    def remove(self, item: IMathElement) -> bool:
        ...

    def remove_at(self, index: int) -> None:
        ...

    def copy_to(self, array: List[IMathElement], array_index: int) -> None:
        ...

    def get_children(self) -> List[IMathElement]:
        ...

    def to_math_array(self) -> IMathArray:
        ...

    def accent(self, accent_character: char) -> IMathAccent:
        ...

    def overbar(self) -> IMathBar:
        ...

    def underbar(self) -> IMathBar:
        ...

    def to_box(self) -> IMathBox:
        ...

    @property
    def as_i_math_element_collection(self) -> IMathElementCollection:
        ...

    @property
    def as_i_math_element(self) -> IMathElement:
        ...

    @property
    def count(self) -> int:
        ...

    @property
    def as_i_enumerable(self) -> collections.abc.Iterable:
        ...

    def __getitem__(self, key: int) -> IMathElement
        ...

    ...

class IMathBlockCollection:
    '''Collection of math blocks (IMathBlock)'''
    def add(self, item: IMathBlock) -> None:
        '''Adds IMathBlock to the end of collection.
        :param item: A mathematical block that will be added to the end of the collection'''
        ...

    def insert(self, index: int, item: IMathBlock) -> None:
        '''Inserts IMathBlock into the collection at the specified index.
        :param index: The zero-based index at which an item should be inserted.
        :param item: The IMathBlock to insert.'''
        ...

    def remove(self, item: IMathBlock) -> bool:
        '''Removes the first occurrence of a specific object from the collection/\>.
        :param item: The object to remove from the collection.
        :returns: true if ``item`` was successfully removed from the collection; otherwise, false. 
                    This method also returns false if ``item`` is not found in the original collection/\>.'''
        ...

    def remove_at(self, index: int) -> None:
        '''Removes an item at the specified index of the collection.
        :param index: The zero-based index of the item to remove.'''
        ...

    def contains(self, item: IMathBlock) -> bool:
        '''Determines whether the collection contains a specific value.
        :param item: The object to locate in the collection.
        :returns: true if ``item`` is found in the collection; otherwise, false.'''
        ...

    def index_of(self, item: IMathBlock) -> int:
        '''Determines the index of a specific IMathBlock in collection.
        :param item: The item to locate in the collection.
        :returns: The index of ``item`` if found in the collection; otherwise, -1.'''
        ...

    def clear(self) -> None:
        '''Removes all elements from the collection.'''
        ...

    @property
    def count(self) -> int:
        '''Gets the number of elements actually contained in the collection.
                    Read-only :py:class:`int`.'''
        ...

    @property
    def as_i_enumerable(self) -> collections.abc.Iterable:
        ...

    def __getitem__(self, key: int) -> IMathBlock
        ...

    def __setitem__(self, key: int, value: IMathBlock
        ...

    ...

class IMathBlockFactory:
    '''Allows to create a math block'''
    @overload
    def create_math_block(self) -> IMathBlock:
        '''Create a math block
        :returns: new math block'''
        ...

    @overload
    def create_math_block(self, math_element: IMathElement) -> IMathBlock:
        '''Create a math block and place the element in it
        :param math_element: A math element
        :returns: new math block'''
        ...

    @overload
    def create_math_block(self, math_elements: IMathElementCollection) -> IMathBlock:
        '''Create a math block and place elements in it
        :param math_elements: math elements
        :returns: new math block'''
        ...

    ...

class IMathBorderBox:
    '''Draws a rectangular or some other border around the IMathElement.'''
    @overload
    def join(self, math_element: IMathElement) -> IMathBlock:
        ...

    @overload
    def join(self, math_text: str) -> IMathBlock:
        ...

    @overload
    def divide(self, denominator: IMathElement) -> IMathFraction:
        ...

    @overload
    def divide(self, denominator: str) -> IMathFraction:
        ...

    @overload
    def divide(self, denominator: IMathElement, fraction_type: MathFractionTypes) -> IMathFraction:
        ...

    @overload
    def divide(self, denominator: str, fraction_type: MathFractionTypes) -> IMathFraction:
        ...

    @overload
    def enclose(self) -> IMathDelimiter:
        ...

    @overload
    def enclose(self, beginning_character: char, ending_character: char) -> IMathDelimiter:
        ...

    @overload
    def function(self, function_argument: IMathElement) -> IMathFunction:
        ...

    @overload
    def function(self, function_argument: str) -> IMathFunction:
        ...

    @overload
    def as_argument_of_function(self, function_name: IMathElement) -> IMathFunction:
        ...

    @overload
    def as_argument_of_function(self, function_name: str) -> IMathFunction:
        ...

    @overload
    def as_argument_of_function(self, function_type: MathFunctionsOfOneArgument) -> IMathFunction:
        ...

    @overload
    def as_argument_of_function(self, function_type: MathFunctionsOfTwoArguments, additional_argument: IMathElement) -> IMathFunction:
        ...

    @overload
    def as_argument_of_function(self, function_type: MathFunctionsOfTwoArguments, additional_argument: str) -> IMathFunction:
        ...

    @overload
    def set_subscript(self, subscript: IMathElement) -> IMathSubscriptElement:
        ...

    @overload
    def set_subscript(self, subscript: str) -> IMathSubscriptElement:
        ...

    @overload
    def set_superscript(self, superscript: IMathElement) -> IMathSuperscriptElement:
        ...

    @overload
    def set_superscript(self, superscript: str) -> IMathSuperscriptElement:
        ...

    @overload
    def set_sub_superscript_on_the_right(self, subscript: IMathElement, superscript: IMathElement) -> IMathRightSubSuperscriptElement:
        ...

    @overload
    def set_sub_superscript_on_the_right(self, subscript: str, superscript: str) -> IMathRightSubSuperscriptElement:
        ...

    @overload
    def set_sub_superscript_on_the_left(self, subscript: IMathElement, superscript: IMathElement) -> IMathLeftSubSuperscriptElement:
        ...

    @overload
    def set_sub_superscript_on_the_left(self, subscript: str, superscript: str) -> IMathLeftSubSuperscriptElement:
        ...

    @overload
    def radical(self, degree: IMathElement) -> IMathRadical:
        ...

    @overload
    def radical(self, degree: str) -> IMathRadical:
        ...

    @overload
    def set_upper_limit(self, limit: IMathElement) -> IMathLimit:
        ...

    @overload
    def set_upper_limit(self, limit: str) -> IMathLimit:
        ...

    @overload
    def set_lower_limit(self, limit: IMathElement) -> IMathLimit:
        ...

    @overload
    def set_lower_limit(self, limit: str) -> IMathLimit:
        ...

    @overload
    def nary(self, type: MathNaryOperatorTypes, lower_limit: IMathElement, upper_limit: IMathElement) -> IMathNaryOperator:
        ...

    @overload
    def nary(self, type: MathNaryOperatorTypes, lower_limit: str, upper_limit: str) -> IMathNaryOperator:
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes, lower_limit: IMathElement, upper_limit: IMathElement, limit_locations: MathLimitLocations) -> IMathNaryOperator:
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes, lower_limit: IMathElement, upper_limit: IMathElement) -> IMathNaryOperator:
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes) -> IMathNaryOperator:
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes, lower_limit: str, upper_limit: str, limit_locations: MathLimitLocations) -> IMathNaryOperator:
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes, lower_limit: str, upper_limit: str) -> IMathNaryOperator:
        ...

    @overload
    def group(self) -> IMathGroupingCharacter:
        ...

    @overload
    def group(self, character: char, position: MathTopBotPositions, vertical_justification: MathTopBotPositions) -> IMathGroupingCharacter:
        ...

    @overload
    def to_border_box(self) -> IMathBorderBox:
        ...

    @overload
    def to_border_box(self, hide_top: bool, hide_bottom: bool, hide_left: bool, hide_right: bool, strikethrough_horizontal: bool, strikethrough_vertical: bool, strikethrough_bottom_left_to_top_right: bool, strikethrough_top_left_to_bottom_right: bool) -> IMathBorderBox:
        ...

    def get_children(self) -> List[IMathElement]:
        ...

    def to_math_array(self) -> IMathArray:
        ...

    def accent(self, accent_character: char) -> IMathAccent:
        ...

    def overbar(self) -> IMathBar:
        ...

    def underbar(self) -> IMathBar:
        ...

    def to_box(self) -> IMathBox:
        ...

    @property
    def base(self) -> IMathElement:
        '''Base argument'''
        ...

    @property
    def hide_top(self) -> bool:
        ...

    @hide_top.setter
    def hide_top(self, value: bool):
        ...

    @property
    def hide_bottom(self) -> bool:
        ...

    @hide_bottom.setter
    def hide_bottom(self, value: bool):
        ...

    @property
    def hide_left(self) -> bool:
        ...

    @hide_left.setter
    def hide_left(self, value: bool):
        ...

    @property
    def hide_right(self) -> bool:
        ...

    @hide_right.setter
    def hide_right(self, value: bool):
        ...

    @property
    def strikethrough_horizontal(self) -> bool:
        ...

    @strikethrough_horizontal.setter
    def strikethrough_horizontal(self, value: bool):
        ...

    @property
    def strikethrough_vertical(self) -> bool:
        ...

    @strikethrough_vertical.setter
    def strikethrough_vertical(self, value: bool):
        ...

    @property
    def strikethrough_bottom_left_to_top_right(self) -> bool:
        ...

    @strikethrough_bottom_left_to_top_right.setter
    def strikethrough_bottom_left_to_top_right(self, value: bool):
        ...

    @property
    def strikethrough_top_left_to_bottom_right(self) -> bool:
        ...

    @strikethrough_top_left_to_bottom_right.setter
    def strikethrough_top_left_to_bottom_right(self, value: bool):
        ...

    @property
    def as_i_math_element(self) -> IMathElement:
        ...

    ...

class IMathBorderBoxFactory:
    '''Allows to create a math border box'''
    @overload
    def create_math_border_box(self, element: IMathElement) -> IMathBorderBox:
        '''Create a math border box by applying to the element
        :param element: math element to apply border box
        :returns: new border box element'''
        ...

    @overload
    def create_math_border_box(self, element: IMathElement, hide_top: bool, hide_bottom: bool, hide_left: bool, hide_right: bool, strikethrough_horizontal: bool, strikethrough_vertical: bool, strikethrough_bottom_left_to_top_right: bool, strikethrough_top_left_to_bottom_right: bool) -> IMathBorderBox:
        '''Create a math border box by applying to the element
        :param element: math element to apply border box
        :param hide_top: Hide Top Edge
        :param hide_bottom: Hide Bottom Edge
        :param hide_left: Hide Left Edge
        :param hide_right: Hide Right Edge
        :param strikethrough_horizontal: Border Box Strikethrough Horizontal
        :param strikethrough_vertical: Border Box Strikethrough Vertical
        :param strikethrough_bottom_left_to_top_right: Border Box Strikethrough Bottom-Left to Top-Right
        :param strikethrough_top_left_to_bottom_right: Border Box Strikethrough Top-Left to Bottom-Right
        :returns: new border box element'''
        ...

    ...

class IMathBox:
    '''Specifies the logical boxing (packaging) of mathematical element.
                For example, a boxed object can serve as an operator emulator with or without an alignment point, 
                serve as a line break point, or be grouped such as not to allow line breaks within.
                For example, the "==" operator should be boxed to prevent line breaks.'''
    @overload
    def join(self, math_element: IMathElement) -> IMathBlock:
        ...

    @overload
    def join(self, math_text: str) -> IMathBlock:
        ...

    @overload
    def divide(self, denominator: IMathElement) -> IMathFraction:
        ...

    @overload
    def divide(self, denominator: str) -> IMathFraction:
        ...

    @overload
    def divide(self, denominator: IMathElement, fraction_type: MathFractionTypes) -> IMathFraction:
        ...

    @overload
    def divide(self, denominator: str, fraction_type: MathFractionTypes) -> IMathFraction:
        ...

    @overload
    def enclose(self) -> IMathDelimiter:
        ...

    @overload
    def enclose(self, beginning_character: char, ending_character: char) -> IMathDelimiter:
        ...

    @overload
    def function(self, function_argument: IMathElement) -> IMathFunction:
        ...

    @overload
    def function(self, function_argument: str) -> IMathFunction:
        ...

    @overload
    def as_argument_of_function(self, function_name: IMathElement) -> IMathFunction:
        ...

    @overload
    def as_argument_of_function(self, function_name: str) -> IMathFunction:
        ...

    @overload
    def as_argument_of_function(self, function_type: MathFunctionsOfOneArgument) -> IMathFunction:
        ...

    @overload
    def as_argument_of_function(self, function_type: MathFunctionsOfTwoArguments, additional_argument: IMathElement) -> IMathFunction:
        ...

    @overload
    def as_argument_of_function(self, function_type: MathFunctionsOfTwoArguments, additional_argument: str) -> IMathFunction:
        ...

    @overload
    def set_subscript(self, subscript: IMathElement) -> IMathSubscriptElement:
        ...

    @overload
    def set_subscript(self, subscript: str) -> IMathSubscriptElement:
        ...

    @overload
    def set_superscript(self, superscript: IMathElement) -> IMathSuperscriptElement:
        ...

    @overload
    def set_superscript(self, superscript: str) -> IMathSuperscriptElement:
        ...

    @overload
    def set_sub_superscript_on_the_right(self, subscript: IMathElement, superscript: IMathElement) -> IMathRightSubSuperscriptElement:
        ...

    @overload
    def set_sub_superscript_on_the_right(self, subscript: str, superscript: str) -> IMathRightSubSuperscriptElement:
        ...

    @overload
    def set_sub_superscript_on_the_left(self, subscript: IMathElement, superscript: IMathElement) -> IMathLeftSubSuperscriptElement:
        ...

    @overload
    def set_sub_superscript_on_the_left(self, subscript: str, superscript: str) -> IMathLeftSubSuperscriptElement:
        ...

    @overload
    def radical(self, degree: IMathElement) -> IMathRadical:
        ...

    @overload
    def radical(self, degree: str) -> IMathRadical:
        ...

    @overload
    def set_upper_limit(self, limit: IMathElement) -> IMathLimit:
        ...

    @overload
    def set_upper_limit(self, limit: str) -> IMathLimit:
        ...

    @overload
    def set_lower_limit(self, limit: IMathElement) -> IMathLimit:
        ...

    @overload
    def set_lower_limit(self, limit: str) -> IMathLimit:
        ...

    @overload
    def nary(self, type: MathNaryOperatorTypes, lower_limit: IMathElement, upper_limit: IMathElement) -> IMathNaryOperator:
        ...

    @overload
    def nary(self, type: MathNaryOperatorTypes, lower_limit: str, upper_limit: str) -> IMathNaryOperator:
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes, lower_limit: IMathElement, upper_limit: IMathElement, limit_locations: MathLimitLocations) -> IMathNaryOperator:
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes, lower_limit: IMathElement, upper_limit: IMathElement) -> IMathNaryOperator:
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes) -> IMathNaryOperator:
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes, lower_limit: str, upper_limit: str, limit_locations: MathLimitLocations) -> IMathNaryOperator:
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes, lower_limit: str, upper_limit: str) -> IMathNaryOperator:
        ...

    @overload
    def group(self) -> IMathGroupingCharacter:
        ...

    @overload
    def group(self, character: char, position: MathTopBotPositions, vertical_justification: MathTopBotPositions) -> IMathGroupingCharacter:
        ...

    @overload
    def to_border_box(self) -> IMathBorderBox:
        ...

    @overload
    def to_border_box(self, hide_top: bool, hide_bottom: bool, hide_left: bool, hide_right: bool, strikethrough_horizontal: bool, strikethrough_vertical: bool, strikethrough_bottom_left_to_top_right: bool, strikethrough_top_left_to_bottom_right: bool) -> IMathBorderBox:
        ...

    def get_children(self) -> List[IMathElement]:
        ...

    def to_math_array(self) -> IMathArray:
        ...

    def accent(self, accent_character: char) -> IMathAccent:
        ...

    def overbar(self) -> IMathBar:
        ...

    def underbar(self) -> IMathBar:
        ...

    def to_box(self) -> IMathBox:
        ...

    @property
    def base(self) -> IMathElement:
        '''Base argument'''
        ...

    @property
    def operator_emulator(self) -> bool:
        ...

    @operator_emulator.setter
    def operator_emulator(self, value: bool):
        ...

    @property
    def no_break(self) -> bool:
        ...

    @no_break.setter
    def no_break(self, value: bool):
        ...

    @property
    def differential(self) -> bool:
        '''Differential.
                    When true, the box acts as a differential (e.g., 𝑑𝑥 in an integrand), and receives the appropriate 
                    horizontal spacing for the mathematical differential.
                    Default: false'''
        ...

    @differential.setter
    def differential(self, value: bool):
        '''Differential.
                    When true, the box acts as a differential (e.g., 𝑑𝑥 in an integrand), and receives the appropriate 
                    horizontal spacing for the mathematical differential.
                    Default: false'''
        ...

    @property
    def alignment_point(self) -> bool:
        ...

    @alignment_point.setter
    def alignment_point(self, value: bool):
        ...

    @property
    def explicit_break(self) -> int:
        ...

    @explicit_break.setter
    def explicit_break(self, value: int):
        ...

    @property
    def as_i_math_element(self) -> IMathElement:
        ...

    ...

class IMathBoxFactory:
    '''Allows to create a math box'''
    def create_math_box(self, element: IMathElement) -> IMathBox:
        '''Create a math box by applying to the element
        :param element: math element to apply box
        :returns: new box element'''
        ...

    ...

class IMathDelimiter:
    '''Specifies the delimiter object, consisting of opening and closing characters (such as parentheses, 
                braces, brackets, and vertical bars), and one or more mathematical elements inside, separated by a specified character.
                Examples: (𝑥2); [𝑥2|𝑦2]'''
    @overload
    def join(self, math_element: IMathElement) -> IMathBlock:
        ...

    @overload
    def join(self, math_text: str) -> IMathBlock:
        ...

    @overload
    def divide(self, denominator: IMathElement) -> IMathFraction:
        ...

    @overload
    def divide(self, denominator: str) -> IMathFraction:
        ...

    @overload
    def divide(self, denominator: IMathElement, fraction_type: MathFractionTypes) -> IMathFraction:
        ...

    @overload
    def divide(self, denominator: str, fraction_type: MathFractionTypes) -> IMathFraction:
        ...

    @overload
    def enclose(self) -> IMathDelimiter:
        ...

    @overload
    def enclose(self, beginning_character: char, ending_character: char) -> IMathDelimiter:
        ...

    @overload
    def function(self, function_argument: IMathElement) -> IMathFunction:
        ...

    @overload
    def function(self, function_argument: str) -> IMathFunction:
        ...

    @overload
    def as_argument_of_function(self, function_name: IMathElement) -> IMathFunction:
        ...

    @overload
    def as_argument_of_function(self, function_name: str) -> IMathFunction:
        ...

    @overload
    def as_argument_of_function(self, function_type: MathFunctionsOfOneArgument) -> IMathFunction:
        ...

    @overload
    def as_argument_of_function(self, function_type: MathFunctionsOfTwoArguments, additional_argument: IMathElement) -> IMathFunction:
        ...

    @overload
    def as_argument_of_function(self, function_type: MathFunctionsOfTwoArguments, additional_argument: str) -> IMathFunction:
        ...

    @overload
    def set_subscript(self, subscript: IMathElement) -> IMathSubscriptElement:
        ...

    @overload
    def set_subscript(self, subscript: str) -> IMathSubscriptElement:
        ...

    @overload
    def set_superscript(self, superscript: IMathElement) -> IMathSuperscriptElement:
        ...

    @overload
    def set_superscript(self, superscript: str) -> IMathSuperscriptElement:
        ...

    @overload
    def set_sub_superscript_on_the_right(self, subscript: IMathElement, superscript: IMathElement) -> IMathRightSubSuperscriptElement:
        ...

    @overload
    def set_sub_superscript_on_the_right(self, subscript: str, superscript: str) -> IMathRightSubSuperscriptElement:
        ...

    @overload
    def set_sub_superscript_on_the_left(self, subscript: IMathElement, superscript: IMathElement) -> IMathLeftSubSuperscriptElement:
        ...

    @overload
    def set_sub_superscript_on_the_left(self, subscript: str, superscript: str) -> IMathLeftSubSuperscriptElement:
        ...

    @overload
    def radical(self, degree: IMathElement) -> IMathRadical:
        ...

    @overload
    def radical(self, degree: str) -> IMathRadical:
        ...

    @overload
    def set_upper_limit(self, limit: IMathElement) -> IMathLimit:
        ...

    @overload
    def set_upper_limit(self, limit: str) -> IMathLimit:
        ...

    @overload
    def set_lower_limit(self, limit: IMathElement) -> IMathLimit:
        ...

    @overload
    def set_lower_limit(self, limit: str) -> IMathLimit:
        ...

    @overload
    def nary(self, type: MathNaryOperatorTypes, lower_limit: IMathElement, upper_limit: IMathElement) -> IMathNaryOperator:
        ...

    @overload
    def nary(self, type: MathNaryOperatorTypes, lower_limit: str, upper_limit: str) -> IMathNaryOperator:
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes, lower_limit: IMathElement, upper_limit: IMathElement, limit_locations: MathLimitLocations) -> IMathNaryOperator:
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes, lower_limit: IMathElement, upper_limit: IMathElement) -> IMathNaryOperator:
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes) -> IMathNaryOperator:
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes, lower_limit: str, upper_limit: str, limit_locations: MathLimitLocations) -> IMathNaryOperator:
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes, lower_limit: str, upper_limit: str) -> IMathNaryOperator:
        ...

    @overload
    def group(self) -> IMathGroupingCharacter:
        ...

    @overload
    def group(self, character: char, position: MathTopBotPositions, vertical_justification: MathTopBotPositions) -> IMathGroupingCharacter:
        ...

    @overload
    def to_border_box(self) -> IMathBorderBox:
        ...

    @overload
    def to_border_box(self, hide_top: bool, hide_bottom: bool, hide_left: bool, hide_right: bool, strikethrough_horizontal: bool, strikethrough_vertical: bool, strikethrough_bottom_left_to_top_right: bool, strikethrough_top_left_to_bottom_right: bool) -> IMathBorderBox:
        ...

    def delimit(self, separator_character: char) -> IMathDelimiter:
        '''Delimits arguments using the specified delimiter character
        :param separator_character: delimiter character
        :returns: This object after applying the delimiter character'''
        ...

    def get_children(self) -> List[IMathElement]:
        ...

    def to_math_array(self) -> IMathArray:
        ...

    def accent(self, accent_character: char) -> IMathAccent:
        ...

    def overbar(self) -> IMathBar:
        ...

    def underbar(self) -> IMathBar:
        ...

    def to_box(self) -> IMathBox:
        ...

    @property
    def arguments(self) -> IMathElementCollection:
        '''One or more mathematical elements separated by delimiter characters'''
        ...

    @property
    def beginning_character(self) -> char:
        ...

    @beginning_character.setter
    def beginning_character(self, value: char):
        ...

    @property
    def separator_character(self) -> char:
        ...

    @separator_character.setter
    def separator_character(self, value: char):
        ...

    @property
    def ending_character(self) -> char:
        ...

    @ending_character.setter
    def ending_character(self, value: char):
        ...

    @property
    def grow_to_match_operand_height(self) -> bool:
        ...

    @grow_to_match_operand_height.setter
    def grow_to_match_operand_height(self, value: bool):
        ...

    @property
    def delimiter_shape(self) -> MathDelimiterShape:
        ...

    @delimiter_shape.setter
    def delimiter_shape(self, value: MathDelimiterShape):
        ...

    @property
    def as_i_math_element(self) -> IMathElement:
        ...

    ...

class IMathDelimiterFactory:
    '''Allows to create a math delimiter'''
    @overload
    def create_math_delimiter(self, element: IMathElement) -> IMathDelimiter:
        '''Create a math delimiter by applying to the element
        :param element: math element to apply delimiter
        :returns: new math delimiter'''
        ...

    @overload
    def create_math_delimiter(self, math_elements: IMathElementCollection) -> IMathDelimiter:
        '''Create a math delimiter by applying to the element
        :param math_elements: math elements to apply delimiter
        :returns: new math delimiter'''
        ...

    ...

class IMathElement:
    '''Base interface of any mathematical element: 
                fraction, mathmatical text, function, expression with multiple elements etc'''
    @overload
    def join(self, math_element: IMathElement) -> IMathBlock:
        '''Joins a mathematical element and forms a mathematical block
        :param math_element: The element to be joined
        :returns: A new IMathBlock containing this instance and specified argument'''
        ...

    @overload
    def join(self, math_text: str) -> IMathBlock:
        '''Joins a mathematical text and forms a mathematical block
        :param math_text: Mathematical text to be joined
        :returns: A new IMathBlock containing this instance and specified argument'''
        ...

    @overload
    def divide(self, denominator: IMathElement) -> IMathFraction:
        '''Creates a fraction with this numerator and specified denominator
        :param denominator: Denominator
        :returns: new fraction'''
        ...

    @overload
    def divide(self, denominator: str) -> IMathFraction:
        '''Creates a fraction with this numerator and specified denominator
        :param denominator: Denominator
        :returns: new fraction'''
        ...

    @overload
    def divide(self, denominator: IMathElement, fraction_type: MathFractionTypes) -> IMathFraction:
        '''Creates a fraction of the specified type with this numerator and specified denominator
        :param denominator: Denominator
        :param fraction_type: Fraction type: Bar, NoBar, Skewed, Linear
        :returns: new fraction'''
        ...

    @overload
    def divide(self, denominator: str, fraction_type: MathFractionTypes) -> IMathFraction:
        '''Creates a fraction of the specified type with this numerator and specified denominator
        :param denominator: Denominator
        :param fraction_type: Fraction type: Bar, NoBar, Skewed, Linear
        :returns: new fraction'''
        ...

    @overload
    def enclose(self) -> IMathDelimiter:
        '''Encloses a math element in parenthesis
        :returns: The math element of type :py:class:`aspose.slides.mathtext.IMathDelimiter` which includes the parenthesis'''
        ...

    @overload
    def enclose(self, beginning_character: char, ending_character: char) -> IMathDelimiter:
        '''Encloses this element in specified characters such as parenthesis or another characters as framing
        :param beginning_character: Beginning character (usually left bracket)
        :param ending_character: Ending character (usually right bracket)
        :returns: The math element of type :py:class:`aspose.slides.mathtext.IMathDelimiter` which includes specified characters as framing'''
        ...

    @overload
    def function(self, function_argument: IMathElement) -> IMathFunction:
        '''Takes a function of an argument using this instance as the function name
        :param function_argument: An argument of the function
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathFunction`'''
        ...

    @overload
    def function(self, function_argument: str) -> IMathFunction:
        '''Takes a function of an argument using this instance as the function name
        :param function_argument: An argument of the function
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathFunction`'''
        ...

    @overload
    def as_argument_of_function(self, function_name: IMathElement) -> IMathFunction:
        '''Takes specified function using this instance as the argument
        :param function_name: Function name
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathFunction`'''
        ...

    @overload
    def as_argument_of_function(self, function_name: str) -> IMathFunction:
        '''Takes specified function using this instance as the argument
        :param function_name: Function name
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathFunction`'''
        ...

    @overload
    def as_argument_of_function(self, function_type: MathFunctionsOfOneArgument) -> IMathFunction:
        '''Takes specified function using this instance as the argument
        :param function_type: One of the common function type of one argument
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathFunction`'''
        ...

    @overload
    def as_argument_of_function(self, function_type: MathFunctionsOfTwoArguments, additional_argument: IMathElement) -> IMathFunction:
        '''Takes specified function using this instance as the argument and specified additional argument
        :param function_type: One of the common function type of two arguments: Log, Lim, Min, Max
        :param additional_argument: Additional argument depending on the type of function
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathFunction`'''
        ...

    @overload
    def as_argument_of_function(self, function_type: MathFunctionsOfTwoArguments, additional_argument: str) -> IMathFunction:
        '''Takes specified function using this instance as the argument and specified additional argument
        :param function_type: One of the common function type of two arguments: Log, Lim, Min, Max
        :param additional_argument: Additional argument depending on the type of function
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathFunction`'''
        ...

    @overload
    def set_subscript(self, subscript: IMathElement) -> IMathSubscriptElement:
        '''Creates subscript
        :param subscript: Subscript (lower index on the right)
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathSubscriptElement`'''
        ...

    @overload
    def set_subscript(self, subscript: str) -> IMathSubscriptElement:
        '''Creates subscript
        :param subscript: Subscript (lower index on the right)
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathSubscriptElement`'''
        ...

    @overload
    def set_superscript(self, superscript: IMathElement) -> IMathSuperscriptElement:
        '''Creates superscript
        :param superscript: Superscript (upper index on the right)
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathSuperscriptElement`'''
        ...

    @overload
    def set_superscript(self, superscript: str) -> IMathSuperscriptElement:
        '''Creates superscript
        :param superscript: Superscript (upper index on the right)
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathSuperscriptElement`'''
        ...

    @overload
    def set_sub_superscript_on_the_right(self, subscript: IMathElement, superscript: IMathElement) -> IMathRightSubSuperscriptElement:
        '''Creates subscript and superscript on the right
        :param subscript: Subscript (lower index on the right)
        :param superscript: Superscript (upper index on the right)
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathRightSubSuperscriptElement`'''
        ...

    @overload
    def set_sub_superscript_on_the_right(self, subscript: str, superscript: str) -> IMathRightSubSuperscriptElement:
        '''Creates subscript and superscript on the right
        :param subscript: Subscript (lower index on the right)
        :param superscript: Superscript (upper index on the right)
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathRightSubSuperscriptElement`'''
        ...

    @overload
    def set_sub_superscript_on_the_left(self, subscript: IMathElement, superscript: IMathElement) -> IMathLeftSubSuperscriptElement:
        '''Creates subscript and superscript on the left
        :param subscript: Subscript (lower index on the left)
        :param superscript: Superscript (upper index on the left)
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathLeftSubSuperscriptElement`'''
        ...

    @overload
    def set_sub_superscript_on_the_left(self, subscript: str, superscript: str) -> IMathLeftSubSuperscriptElement:
        '''Creates subscript and superscript on the left
        :param subscript: Subscript (lower index on the left)
        :param superscript: Superscript (upper index on the left)
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathLeftSubSuperscriptElement`'''
        ...

    @overload
    def radical(self, degree: IMathElement) -> IMathRadical:
        '''Specifies the mathematical root of the given degree from the specified argument.
        :param degree: Argument of Radical
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathRadical`'''
        ...

    @overload
    def radical(self, degree: str) -> IMathRadical:
        '''Specifies the mathematical root of the given degree from the specified argument.
        :param degree: Argument of Radical
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathRadical`'''
        ...

    @overload
    def set_upper_limit(self, limit: IMathElement) -> IMathLimit:
        '''Takes upper limit
        :param limit: limit
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathLimit`'''
        ...

    @overload
    def set_upper_limit(self, limit: str) -> IMathLimit:
        '''Takes upper limit
        :param limit: limit
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathLimit`'''
        ...

    @overload
    def set_lower_limit(self, limit: IMathElement) -> IMathLimit:
        '''Takes lower limit
        :param limit: limit
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathLimit`'''
        ...

    @overload
    def set_lower_limit(self, limit: str) -> IMathLimit:
        '''Takes lower limit
        :param limit: limit
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathLimit`'''
        ...

    @overload
    def nary(self, type: MathNaryOperatorTypes, lower_limit: IMathElement, upper_limit: IMathElement) -> IMathNaryOperator:
        '''Creates a N-ary operator
        :param type: The N-ary operator type
        :param lower_limit: The lower limit
        :param upper_limit: The upper limit
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathNaryOperator`'''
        ...

    @overload
    def nary(self, type: MathNaryOperatorTypes, lower_limit: str, upper_limit: str) -> IMathNaryOperator:
        '''Creates a N-ary operator
        :param type: The N-ary operator type
        :param lower_limit: The lower limit
        :param upper_limit: The upper limit
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathNaryOperator`'''
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes, lower_limit: IMathElement, upper_limit: IMathElement, limit_locations: MathLimitLocations) -> IMathNaryOperator:
        '''Takes the integral
        :param integral_type: Integral type
        :param lower_limit: Lower limit of integral
        :param upper_limit: Upper limit of integral
        :param limit_locations: location of limits
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathNaryOperator`'''
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes, lower_limit: IMathElement, upper_limit: IMathElement) -> IMathNaryOperator:
        '''Takes the integral
        :param integral_type: Integral type
        :param lower_limit: Lower limit of integral
        :param upper_limit: Upper limit of integral
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathNaryOperator`'''
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes) -> IMathNaryOperator:
        '''Takes the integral without limits
        :param integral_type: Integral type
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathNaryOperator`'''
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes, lower_limit: str, upper_limit: str, limit_locations: MathLimitLocations) -> IMathNaryOperator:
        '''Takes the integral
        :param integral_type: Integral type
        :param lower_limit: Lower limit of integral
        :param upper_limit: Upper limit of integral
        :param limit_locations: location of limits
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathNaryOperator`'''
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes, lower_limit: str, upper_limit: str) -> IMathNaryOperator:
        '''Takes the integral
        :param integral_type: Integral type
        :param lower_limit: Lower limit of integral
        :param upper_limit: Upper limit of integral
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathNaryOperator`'''
        ...

    @overload
    def group(self) -> IMathGroupingCharacter:
        '''Places this element in a group using a bottom curly bracket
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathGroupingCharacter`'''
        ...

    @overload
    def group(self, character: char, position: MathTopBotPositions, vertical_justification: MathTopBotPositions) -> IMathGroupingCharacter:
        '''Places this element in a group using a grouping character such as bottom curly bracket or another
        :param character: Grouping Character such as BOTTOM CURLY BRACKET (U+23DF) or any other
        :param position: Position of grouping character
        :param vertical_justification: Vertical justification of group character.
                    Specifies the alignment of the object with respect to the baseline.
                    For example, when the group character is above the object, 
                    VerticalJustification of Top signifies that the top of the object falls on the baseline;
                    when VerticalJustification is set to Bottom, the bottom of the object is on the baseline
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathGroupingCharacter`'''
        ...

    @overload
    def to_border_box(self) -> IMathBorderBox:
        '''Places this element in a border-box
        :returns: Border-box with this element placed inside'''
        ...

    @overload
    def to_border_box(self, hide_top: bool, hide_bottom: bool, hide_left: bool, hide_right: bool, strikethrough_horizontal: bool, strikethrough_vertical: bool, strikethrough_bottom_left_to_top_right: bool, strikethrough_top_left_to_bottom_right: bool) -> IMathBorderBox:
        '''Places this element in a border-box
        :param hide_top: Hide Top Edge
        :param hide_bottom: Hide Bottom Edge
        :param hide_left: Hide Left Edge
        :param hide_right: Hide Right Edge
        :param strikethrough_horizontal: Border Box Strikethrough Horizontal
        :param strikethrough_vertical: Border Box Strikethrough Vertical
        :param strikethrough_bottom_left_to_top_right: Border Box Strikethrough Bottom-Left to Top-Right
        :param strikethrough_top_left_to_bottom_right: Border Box Strikethrough Top-Left to Bottom-Right
        :returns: Border-box with this element placed inside'''
        ...

    def get_children(self) -> List[IMathElement]:
        '''Get children elements'''
        ...

    def to_math_array(self) -> IMathArray:
        '''Puts in a vertical array
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathArray`'''
        ...

    def accent(self, accent_character: char) -> IMathAccent:
        '''Sets an accent mark (a character on the top of this element)
        :param accent_character: Accent character. The value should be within the range of (U+0300–U+036F) or (U+20D0–U+20EF)
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathAccent`'''
        ...

    def overbar(self) -> IMathBar:
        '''Sets a bar on the top of this element
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathBar`'''
        ...

    def underbar(self) -> IMathBar:
        '''Sets a bar on the bottom of this element
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathBar`'''
        ...

    def to_box(self) -> IMathBox:
        '''Places this element in a non-visual box (logical grouping) 
                    which is used to group components of an equation or other instance of mathematical text.
                    A boxed object can (for example) serve as an operator emulator with or without an alignment point, 
                    serve as a line break point, or be grouped such as not to allow line breaks within.
        :returns: Logical box with this element placed inside'''
        ...

    ...

class IMathElementCollection:
    '''Represents a collection of mathematical elements (MathElement).'''
    def add(self, item: IMathElement) -> None:
        '''Adds a math element to the end of the collection.
        :param item: The IMathElement to be added to the end of the collection.'''
        ...

    def index_of(self, item: IMathElement) -> int:
        '''Determines the index of a specific math element in collection.
        :param item: The element to locate in the collection.
        :returns: The index of ``item`` if found in the collection; otherwise, -1.'''
        ...

    def insert(self, index: int, item: IMathElement) -> None:
        '''Inserts a math element into the collection at the specified index.
        :param index: The zero-based index at which IMathElement should be inserted.
        :param item: The IMathElement to insert.'''
        ...

    def clear(self) -> None:
        '''Removes all elements from the collection.'''
        ...

    def contains(self, item: IMathElement) -> bool:
        '''Determines whether the collection contains a specific value.
        :param item: The object to locate in the collection.
        :returns: true if ``item`` is found in the collection; otherwise, false.'''
        ...

    def remove(self, item: IMathElement) -> bool:
        '''Removes the first occurrence of a specific object from the collection.
        :param item: The object to remove from the collection.
        :returns: true if ``item`` was successfully removed from the collection; otherwise, false. This method also returns false if ``item`` is not found in the original collection.'''
        ...

    def remove_at(self, index: int) -> None:
        '''Removes the element at the specified index of the collection.
        :param index: The zero-based index of the element to remove.'''
        ...

    def copy_to(self, array: List[IMathElement], array_index: int) -> None:
        '''Copy to specified array.
        :param array: Array to copy to.
        :param array_index: Index to begin copying.'''
        ...

    @property
    def count(self) -> int:
        '''Gets the number of elements actually contained in the collection.
                    Read-only :py:class:`int`.'''
        ...

    @property
    def as_i_enumerable(self) -> collections.abc.Iterable:
        ...

    def __getitem__(self, key: int) -> IMathElement
        ...

    ...

class IMathFraction:
    '''Specifies the fraction object, consisting of a numerator and denominator separated by a fraction bar.
                The fraction bar can be horizontal or diagonal, depending on the fraction properties.
                The fraction object is also used to represent the stack function, which places one element above another, with no fraction bar.'''
    @overload
    def join(self, math_element: IMathElement) -> IMathBlock:
        ...

    @overload
    def join(self, math_text: str) -> IMathBlock:
        ...

    @overload
    def divide(self, denominator: IMathElement) -> IMathFraction:
        ...

    @overload
    def divide(self, denominator: str) -> IMathFraction:
        ...

    @overload
    def divide(self, denominator: IMathElement, fraction_type: MathFractionTypes) -> IMathFraction:
        ...

    @overload
    def divide(self, denominator: str, fraction_type: MathFractionTypes) -> IMathFraction:
        ...

    @overload
    def enclose(self) -> IMathDelimiter:
        ...

    @overload
    def enclose(self, beginning_character: char, ending_character: char) -> IMathDelimiter:
        ...

    @overload
    def function(self, function_argument: IMathElement) -> IMathFunction:
        ...

    @overload
    def function(self, function_argument: str) -> IMathFunction:
        ...

    @overload
    def as_argument_of_function(self, function_name: IMathElement) -> IMathFunction:
        ...

    @overload
    def as_argument_of_function(self, function_name: str) -> IMathFunction:
        ...

    @overload
    def as_argument_of_function(self, function_type: MathFunctionsOfOneArgument) -> IMathFunction:
        ...

    @overload
    def as_argument_of_function(self, function_type: MathFunctionsOfTwoArguments, additional_argument: IMathElement) -> IMathFunction:
        ...

    @overload
    def as_argument_of_function(self, function_type: MathFunctionsOfTwoArguments, additional_argument: str) -> IMathFunction:
        ...

    @overload
    def set_subscript(self, subscript: IMathElement) -> IMathSubscriptElement:
        ...

    @overload
    def set_subscript(self, subscript: str) -> IMathSubscriptElement:
        ...

    @overload
    def set_superscript(self, superscript: IMathElement) -> IMathSuperscriptElement:
        ...

    @overload
    def set_superscript(self, superscript: str) -> IMathSuperscriptElement:
        ...

    @overload
    def set_sub_superscript_on_the_right(self, subscript: IMathElement, superscript: IMathElement) -> IMathRightSubSuperscriptElement:
        ...

    @overload
    def set_sub_superscript_on_the_right(self, subscript: str, superscript: str) -> IMathRightSubSuperscriptElement:
        ...

    @overload
    def set_sub_superscript_on_the_left(self, subscript: IMathElement, superscript: IMathElement) -> IMathLeftSubSuperscriptElement:
        ...

    @overload
    def set_sub_superscript_on_the_left(self, subscript: str, superscript: str) -> IMathLeftSubSuperscriptElement:
        ...

    @overload
    def radical(self, degree: IMathElement) -> IMathRadical:
        ...

    @overload
    def radical(self, degree: str) -> IMathRadical:
        ...

    @overload
    def set_upper_limit(self, limit: IMathElement) -> IMathLimit:
        ...

    @overload
    def set_upper_limit(self, limit: str) -> IMathLimit:
        ...

    @overload
    def set_lower_limit(self, limit: IMathElement) -> IMathLimit:
        ...

    @overload
    def set_lower_limit(self, limit: str) -> IMathLimit:
        ...

    @overload
    def nary(self, type: MathNaryOperatorTypes, lower_limit: IMathElement, upper_limit: IMathElement) -> IMathNaryOperator:
        ...

    @overload
    def nary(self, type: MathNaryOperatorTypes, lower_limit: str, upper_limit: str) -> IMathNaryOperator:
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes, lower_limit: IMathElement, upper_limit: IMathElement, limit_locations: MathLimitLocations) -> IMathNaryOperator:
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes, lower_limit: IMathElement, upper_limit: IMathElement) -> IMathNaryOperator:
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes) -> IMathNaryOperator:
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes, lower_limit: str, upper_limit: str, limit_locations: MathLimitLocations) -> IMathNaryOperator:
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes, lower_limit: str, upper_limit: str) -> IMathNaryOperator:
        ...

    @overload
    def group(self) -> IMathGroupingCharacter:
        ...

    @overload
    def group(self, character: char, position: MathTopBotPositions, vertical_justification: MathTopBotPositions) -> IMathGroupingCharacter:
        ...

    @overload
    def to_border_box(self) -> IMathBorderBox:
        ...

    @overload
    def to_border_box(self, hide_top: bool, hide_bottom: bool, hide_left: bool, hide_right: bool, strikethrough_horizontal: bool, strikethrough_vertical: bool, strikethrough_bottom_left_to_top_right: bool, strikethrough_top_left_to_bottom_right: bool) -> IMathBorderBox:
        ...

    def get_children(self) -> List[IMathElement]:
        ...

    def to_math_array(self) -> IMathArray:
        ...

    def accent(self, accent_character: char) -> IMathAccent:
        ...

    def overbar(self) -> IMathBar:
        ...

    def underbar(self) -> IMathBar:
        ...

    def to_box(self) -> IMathBox:
        ...

    @property
    def fraction_type(self) -> MathFractionTypes:
        ...

    @fraction_type.setter
    def fraction_type(self, value: MathFractionTypes):
        ...

    @property
    def numerator(self) -> IMathElement:
        '''Numerator'''
        ...

    @property
    def denominator(self) -> IMathElement:
        '''Denominator'''
        ...

    @property
    def as_i_math_element(self) -> IMathElement:
        ...

    ...

class IMathFractionFactory:
    '''Allows to create a math fraction'''
    @overload
    def create_math_fraction(self, numerator: IMathElement, denominator: IMathElement, fraction_type: MathFractionTypes) -> IMathFraction:
        '''Creates a math fraction
        :param numerator: Numerator
        :param denominator: Denominator
        :param fraction_type: Fraction type
        :returns: New math fraction :py:class:`aspose.slides.mathtext.IMathFraction`'''
        ...

    @overload
    def create_math_fraction(self, numerator: IMathElement, denominator: IMathElement) -> IMathFraction:
        '''Creates a math fraction
        :param numerator: Numerator
        :param denominator: Denominator
        :returns: New math fraction :py:class:`aspose.slides.mathtext.IMathFraction`'''
        ...

    ...

class IMathFunction:
    '''Specifies a function of an argument.'''
    @overload
    def join(self, math_element: IMathElement) -> IMathBlock:
        ...

    @overload
    def join(self, math_text: str) -> IMathBlock:
        ...

    @overload
    def divide(self, denominator: IMathElement) -> IMathFraction:
        ...

    @overload
    def divide(self, denominator: str) -> IMathFraction:
        ...

    @overload
    def divide(self, denominator: IMathElement, fraction_type: MathFractionTypes) -> IMathFraction:
        ...

    @overload
    def divide(self, denominator: str, fraction_type: MathFractionTypes) -> IMathFraction:
        ...

    @overload
    def enclose(self) -> IMathDelimiter:
        ...

    @overload
    def enclose(self, beginning_character: char, ending_character: char) -> IMathDelimiter:
        ...

    @overload
    def function(self, function_argument: IMathElement) -> IMathFunction:
        ...

    @overload
    def function(self, function_argument: str) -> IMathFunction:
        ...

    @overload
    def as_argument_of_function(self, function_name: IMathElement) -> IMathFunction:
        ...

    @overload
    def as_argument_of_function(self, function_name: str) -> IMathFunction:
        ...

    @overload
    def as_argument_of_function(self, function_type: MathFunctionsOfOneArgument) -> IMathFunction:
        ...

    @overload
    def as_argument_of_function(self, function_type: MathFunctionsOfTwoArguments, additional_argument: IMathElement) -> IMathFunction:
        ...

    @overload
    def as_argument_of_function(self, function_type: MathFunctionsOfTwoArguments, additional_argument: str) -> IMathFunction:
        ...

    @overload
    def set_subscript(self, subscript: IMathElement) -> IMathSubscriptElement:
        ...

    @overload
    def set_subscript(self, subscript: str) -> IMathSubscriptElement:
        ...

    @overload
    def set_superscript(self, superscript: IMathElement) -> IMathSuperscriptElement:
        ...

    @overload
    def set_superscript(self, superscript: str) -> IMathSuperscriptElement:
        ...

    @overload
    def set_sub_superscript_on_the_right(self, subscript: IMathElement, superscript: IMathElement) -> IMathRightSubSuperscriptElement:
        ...

    @overload
    def set_sub_superscript_on_the_right(self, subscript: str, superscript: str) -> IMathRightSubSuperscriptElement:
        ...

    @overload
    def set_sub_superscript_on_the_left(self, subscript: IMathElement, superscript: IMathElement) -> IMathLeftSubSuperscriptElement:
        ...

    @overload
    def set_sub_superscript_on_the_left(self, subscript: str, superscript: str) -> IMathLeftSubSuperscriptElement:
        ...

    @overload
    def radical(self, degree: IMathElement) -> IMathRadical:
        ...

    @overload
    def radical(self, degree: str) -> IMathRadical:
        ...

    @overload
    def set_upper_limit(self, limit: IMathElement) -> IMathLimit:
        ...

    @overload
    def set_upper_limit(self, limit: str) -> IMathLimit:
        ...

    @overload
    def set_lower_limit(self, limit: IMathElement) -> IMathLimit:
        ...

    @overload
    def set_lower_limit(self, limit: str) -> IMathLimit:
        ...

    @overload
    def nary(self, type: MathNaryOperatorTypes, lower_limit: IMathElement, upper_limit: IMathElement) -> IMathNaryOperator:
        ...

    @overload
    def nary(self, type: MathNaryOperatorTypes, lower_limit: str, upper_limit: str) -> IMathNaryOperator:
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes, lower_limit: IMathElement, upper_limit: IMathElement, limit_locations: MathLimitLocations) -> IMathNaryOperator:
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes, lower_limit: IMathElement, upper_limit: IMathElement) -> IMathNaryOperator:
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes) -> IMathNaryOperator:
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes, lower_limit: str, upper_limit: str, limit_locations: MathLimitLocations) -> IMathNaryOperator:
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes, lower_limit: str, upper_limit: str) -> IMathNaryOperator:
        ...

    @overload
    def group(self) -> IMathGroupingCharacter:
        ...

    @overload
    def group(self, character: char, position: MathTopBotPositions, vertical_justification: MathTopBotPositions) -> IMathGroupingCharacter:
        ...

    @overload
    def to_border_box(self) -> IMathBorderBox:
        ...

    @overload
    def to_border_box(self, hide_top: bool, hide_bottom: bool, hide_left: bool, hide_right: bool, strikethrough_horizontal: bool, strikethrough_vertical: bool, strikethrough_bottom_left_to_top_right: bool, strikethrough_top_left_to_bottom_right: bool) -> IMathBorderBox:
        ...

    def get_children(self) -> List[IMathElement]:
        ...

    def to_math_array(self) -> IMathArray:
        ...

    def accent(self, accent_character: char) -> IMathAccent:
        ...

    def overbar(self) -> IMathBar:
        ...

    def underbar(self) -> IMathBar:
        ...

    def to_box(self) -> IMathBox:
        ...

    @property
    def name(self) -> IMathElement:
        '''Function name
                    For example, function names are sin and cos'''
        ...

    @property
    def base(self) -> IMathElement:
        '''Function Argument'''
        ...

    @property
    def as_i_math_element(self) -> IMathElement:
        ...

    ...

class IMathFunctionFactory:
    '''Allows to create a math function'''
    @overload
    def create_math_function(self, func_name: IMathElement, base_argument: IMathElement) -> IMathFunction:
        '''Creates math function
        :param func_name: Element used as a function name
        :param base_argument: Element used as a function argument
        :returns: new math function'''
        ...

    @overload
    def create_math_function(self, func_name: str, base_argument: IMathElement) -> IMathFunction:
        '''Creates math function
        :param func_name: Function name
        :param base_argument: Element used as a function argument
        :returns: new math function'''
        ...

    ...

class IMathGroupingCharacter:
    '''Specifies a grouping symbol above or below an expression, usually to highlight the relationship between elements'''
    @overload
    def join(self, math_element: IMathElement) -> IMathBlock:
        ...

    @overload
    def join(self, math_text: str) -> IMathBlock:
        ...

    @overload
    def divide(self, denominator: IMathElement) -> IMathFraction:
        ...

    @overload
    def divide(self, denominator: str) -> IMathFraction:
        ...

    @overload
    def divide(self, denominator: IMathElement, fraction_type: MathFractionTypes) -> IMathFraction:
        ...

    @overload
    def divide(self, denominator: str, fraction_type: MathFractionTypes) -> IMathFraction:
        ...

    @overload
    def enclose(self) -> IMathDelimiter:
        ...

    @overload
    def enclose(self, beginning_character: char, ending_character: char) -> IMathDelimiter:
        ...

    @overload
    def function(self, function_argument: IMathElement) -> IMathFunction:
        ...

    @overload
    def function(self, function_argument: str) -> IMathFunction:
        ...

    @overload
    def as_argument_of_function(self, function_name: IMathElement) -> IMathFunction:
        ...

    @overload
    def as_argument_of_function(self, function_name: str) -> IMathFunction:
        ...

    @overload
    def as_argument_of_function(self, function_type: MathFunctionsOfOneArgument) -> IMathFunction:
        ...

    @overload
    def as_argument_of_function(self, function_type: MathFunctionsOfTwoArguments, additional_argument: IMathElement) -> IMathFunction:
        ...

    @overload
    def as_argument_of_function(self, function_type: MathFunctionsOfTwoArguments, additional_argument: str) -> IMathFunction:
        ...

    @overload
    def set_subscript(self, subscript: IMathElement) -> IMathSubscriptElement:
        ...

    @overload
    def set_subscript(self, subscript: str) -> IMathSubscriptElement:
        ...

    @overload
    def set_superscript(self, superscript: IMathElement) -> IMathSuperscriptElement:
        ...

    @overload
    def set_superscript(self, superscript: str) -> IMathSuperscriptElement:
        ...

    @overload
    def set_sub_superscript_on_the_right(self, subscript: IMathElement, superscript: IMathElement) -> IMathRightSubSuperscriptElement:
        ...

    @overload
    def set_sub_superscript_on_the_right(self, subscript: str, superscript: str) -> IMathRightSubSuperscriptElement:
        ...

    @overload
    def set_sub_superscript_on_the_left(self, subscript: IMathElement, superscript: IMathElement) -> IMathLeftSubSuperscriptElement:
        ...

    @overload
    def set_sub_superscript_on_the_left(self, subscript: str, superscript: str) -> IMathLeftSubSuperscriptElement:
        ...

    @overload
    def radical(self, degree: IMathElement) -> IMathRadical:
        ...

    @overload
    def radical(self, degree: str) -> IMathRadical:
        ...

    @overload
    def set_upper_limit(self, limit: IMathElement) -> IMathLimit:
        ...

    @overload
    def set_upper_limit(self, limit: str) -> IMathLimit:
        ...

    @overload
    def set_lower_limit(self, limit: IMathElement) -> IMathLimit:
        ...

    @overload
    def set_lower_limit(self, limit: str) -> IMathLimit:
        ...

    @overload
    def nary(self, type: MathNaryOperatorTypes, lower_limit: IMathElement, upper_limit: IMathElement) -> IMathNaryOperator:
        ...

    @overload
    def nary(self, type: MathNaryOperatorTypes, lower_limit: str, upper_limit: str) -> IMathNaryOperator:
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes, lower_limit: IMathElement, upper_limit: IMathElement, limit_locations: MathLimitLocations) -> IMathNaryOperator:
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes, lower_limit: IMathElement, upper_limit: IMathElement) -> IMathNaryOperator:
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes) -> IMathNaryOperator:
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes, lower_limit: str, upper_limit: str, limit_locations: MathLimitLocations) -> IMathNaryOperator:
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes, lower_limit: str, upper_limit: str) -> IMathNaryOperator:
        ...

    @overload
    def group(self) -> IMathGroupingCharacter:
        ...

    @overload
    def group(self, character: char, position: MathTopBotPositions, vertical_justification: MathTopBotPositions) -> IMathGroupingCharacter:
        ...

    @overload
    def to_border_box(self) -> IMathBorderBox:
        ...

    @overload
    def to_border_box(self, hide_top: bool, hide_bottom: bool, hide_left: bool, hide_right: bool, strikethrough_horizontal: bool, strikethrough_vertical: bool, strikethrough_bottom_left_to_top_right: bool, strikethrough_top_left_to_bottom_right: bool) -> IMathBorderBox:
        ...

    def get_children(self) -> List[IMathElement]:
        ...

    def to_math_array(self) -> IMathArray:
        ...

    def accent(self, accent_character: char) -> IMathAccent:
        ...

    def overbar(self) -> IMathBar:
        ...

    def underbar(self) -> IMathBar:
        ...

    def to_box(self) -> IMathBox:
        ...

    @property
    def base(self) -> IMathElement:
        '''Base argument'''
        ...

    @property
    def character(self) -> char:
        '''Grouping Character
                    Default value: U+23DF (BOTTOM CURLY BRACKET)'''
        ...

    @character.setter
    def character(self, value: char):
        '''Grouping Character
                    Default value: U+23DF (BOTTOM CURLY BRACKET)'''
        ...

    @property
    def position(self) -> MathTopBotPositions:
        '''Position of grouping character.
                    Default: Bottom'''
        ...

    @position.setter
    def position(self, value: MathTopBotPositions):
        '''Position of grouping character.
                    Default: Bottom'''
        ...

    @property
    def vertical_justification(self) -> MathTopBotPositions:
        ...

    @vertical_justification.setter
    def vertical_justification(self, value: MathTopBotPositions):
        ...

    @property
    def as_i_math_element(self) -> IMathElement:
        ...

    ...

class IMathGroupingCharacterFactory:
    '''Allows to create a math grouping character'''
    @overload
    def create_math_grouping_character(self, element: IMathElement, character: char, position: MathTopBotPositions, vertical_justification: MathTopBotPositions) -> IMathGroupingCharacter:
        '''Creates a math grouping character
        :param element: math element to apply grouping character
        :param character: grouping character
        :param position: position of grouping character
        :param vertical_justification: vertical justification
        :returns: new grouping character element'''
        ...

    @overload
    def create_math_grouping_character(self, element: IMathElement) -> IMathGroupingCharacter:
        '''Creates a math grouping character
        :param element: math element to apply grouping character
        :returns: new grouping character element'''
        ...

    ...

class IMathLeftSubSuperscriptElement:
    '''Specifies the Sub-Superscript object, which consists of a base 
                and a subscript and superscript placed to the left of the base.'''
    @overload
    def join(self, math_element: IMathElement) -> IMathBlock:
        ...

    @overload
    def join(self, math_text: str) -> IMathBlock:
        ...

    @overload
    def divide(self, denominator: IMathElement) -> IMathFraction:
        ...

    @overload
    def divide(self, denominator: str) -> IMathFraction:
        ...

    @overload
    def divide(self, denominator: IMathElement, fraction_type: MathFractionTypes) -> IMathFraction:
        ...

    @overload
    def divide(self, denominator: str, fraction_type: MathFractionTypes) -> IMathFraction:
        ...

    @overload
    def enclose(self) -> IMathDelimiter:
        ...

    @overload
    def enclose(self, beginning_character: char, ending_character: char) -> IMathDelimiter:
        ...

    @overload
    def function(self, function_argument: IMathElement) -> IMathFunction:
        ...

    @overload
    def function(self, function_argument: str) -> IMathFunction:
        ...

    @overload
    def as_argument_of_function(self, function_name: IMathElement) -> IMathFunction:
        ...

    @overload
    def as_argument_of_function(self, function_name: str) -> IMathFunction:
        ...

    @overload
    def as_argument_of_function(self, function_type: MathFunctionsOfOneArgument) -> IMathFunction:
        ...

    @overload
    def as_argument_of_function(self, function_type: MathFunctionsOfTwoArguments, additional_argument: IMathElement) -> IMathFunction:
        ...

    @overload
    def as_argument_of_function(self, function_type: MathFunctionsOfTwoArguments, additional_argument: str) -> IMathFunction:
        ...

    @overload
    def set_subscript(self, subscript: IMathElement) -> IMathSubscriptElement:
        ...

    @overload
    def set_subscript(self, subscript: str) -> IMathSubscriptElement:
        ...

    @overload
    def set_superscript(self, superscript: IMathElement) -> IMathSuperscriptElement:
        ...

    @overload
    def set_superscript(self, superscript: str) -> IMathSuperscriptElement:
        ...

    @overload
    def set_sub_superscript_on_the_right(self, subscript: IMathElement, superscript: IMathElement) -> IMathRightSubSuperscriptElement:
        ...

    @overload
    def set_sub_superscript_on_the_right(self, subscript: str, superscript: str) -> IMathRightSubSuperscriptElement:
        ...

    @overload
    def set_sub_superscript_on_the_left(self, subscript: IMathElement, superscript: IMathElement) -> IMathLeftSubSuperscriptElement:
        ...

    @overload
    def set_sub_superscript_on_the_left(self, subscript: str, superscript: str) -> IMathLeftSubSuperscriptElement:
        ...

    @overload
    def radical(self, degree: IMathElement) -> IMathRadical:
        ...

    @overload
    def radical(self, degree: str) -> IMathRadical:
        ...

    @overload
    def set_upper_limit(self, limit: IMathElement) -> IMathLimit:
        ...

    @overload
    def set_upper_limit(self, limit: str) -> IMathLimit:
        ...

    @overload
    def set_lower_limit(self, limit: IMathElement) -> IMathLimit:
        ...

    @overload
    def set_lower_limit(self, limit: str) -> IMathLimit:
        ...

    @overload
    def nary(self, type: MathNaryOperatorTypes, lower_limit: IMathElement, upper_limit: IMathElement) -> IMathNaryOperator:
        ...

    @overload
    def nary(self, type: MathNaryOperatorTypes, lower_limit: str, upper_limit: str) -> IMathNaryOperator:
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes, lower_limit: IMathElement, upper_limit: IMathElement, limit_locations: MathLimitLocations) -> IMathNaryOperator:
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes, lower_limit: IMathElement, upper_limit: IMathElement) -> IMathNaryOperator:
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes) -> IMathNaryOperator:
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes, lower_limit: str, upper_limit: str, limit_locations: MathLimitLocations) -> IMathNaryOperator:
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes, lower_limit: str, upper_limit: str) -> IMathNaryOperator:
        ...

    @overload
    def group(self) -> IMathGroupingCharacter:
        ...

    @overload
    def group(self, character: char, position: MathTopBotPositions, vertical_justification: MathTopBotPositions) -> IMathGroupingCharacter:
        ...

    @overload
    def to_border_box(self) -> IMathBorderBox:
        ...

    @overload
    def to_border_box(self, hide_top: bool, hide_bottom: bool, hide_left: bool, hide_right: bool, strikethrough_horizontal: bool, strikethrough_vertical: bool, strikethrough_bottom_left_to_top_right: bool, strikethrough_top_left_to_bottom_right: bool) -> IMathBorderBox:
        ...

    def get_children(self) -> List[IMathElement]:
        ...

    def to_math_array(self) -> IMathArray:
        ...

    def accent(self, accent_character: char) -> IMathAccent:
        ...

    def overbar(self) -> IMathBar:
        ...

    def underbar(self) -> IMathBar:
        ...

    def to_box(self) -> IMathBox:
        ...

    @property
    def base(self) -> IMathElement:
        '''Base argument'''
        ...

    @property
    def subscript(self) -> IMathElement:
        '''Subscript'''
        ...

    @property
    def superscript(self) -> IMathElement:
        '''Superscript'''
        ...

    @property
    def as_i_math_element(self) -> IMathElement:
        ...

    ...

class IMathLimit:
    '''Specifies the Limit object, consisting of text on the baseline and reduced-size text immediately above or below it.'''
    @overload
    def join(self, math_element: IMathElement) -> IMathBlock:
        ...

    @overload
    def join(self, math_text: str) -> IMathBlock:
        ...

    @overload
    def divide(self, denominator: IMathElement) -> IMathFraction:
        ...

    @overload
    def divide(self, denominator: str) -> IMathFraction:
        ...

    @overload
    def divide(self, denominator: IMathElement, fraction_type: MathFractionTypes) -> IMathFraction:
        ...

    @overload
    def divide(self, denominator: str, fraction_type: MathFractionTypes) -> IMathFraction:
        ...

    @overload
    def enclose(self) -> IMathDelimiter:
        ...

    @overload
    def enclose(self, beginning_character: char, ending_character: char) -> IMathDelimiter:
        ...

    @overload
    def function(self, function_argument: IMathElement) -> IMathFunction:
        ...

    @overload
    def function(self, function_argument: str) -> IMathFunction:
        ...

    @overload
    def as_argument_of_function(self, function_name: IMathElement) -> IMathFunction:
        ...

    @overload
    def as_argument_of_function(self, function_name: str) -> IMathFunction:
        ...

    @overload
    def as_argument_of_function(self, function_type: MathFunctionsOfOneArgument) -> IMathFunction:
        ...

    @overload
    def as_argument_of_function(self, function_type: MathFunctionsOfTwoArguments, additional_argument: IMathElement) -> IMathFunction:
        ...

    @overload
    def as_argument_of_function(self, function_type: MathFunctionsOfTwoArguments, additional_argument: str) -> IMathFunction:
        ...

    @overload
    def set_subscript(self, subscript: IMathElement) -> IMathSubscriptElement:
        ...

    @overload
    def set_subscript(self, subscript: str) -> IMathSubscriptElement:
        ...

    @overload
    def set_superscript(self, superscript: IMathElement) -> IMathSuperscriptElement:
        ...

    @overload
    def set_superscript(self, superscript: str) -> IMathSuperscriptElement:
        ...

    @overload
    def set_sub_superscript_on_the_right(self, subscript: IMathElement, superscript: IMathElement) -> IMathRightSubSuperscriptElement:
        ...

    @overload
    def set_sub_superscript_on_the_right(self, subscript: str, superscript: str) -> IMathRightSubSuperscriptElement:
        ...

    @overload
    def set_sub_superscript_on_the_left(self, subscript: IMathElement, superscript: IMathElement) -> IMathLeftSubSuperscriptElement:
        ...

    @overload
    def set_sub_superscript_on_the_left(self, subscript: str, superscript: str) -> IMathLeftSubSuperscriptElement:
        ...

    @overload
    def radical(self, degree: IMathElement) -> IMathRadical:
        ...

    @overload
    def radical(self, degree: str) -> IMathRadical:
        ...

    @overload
    def set_upper_limit(self, limit: IMathElement) -> IMathLimit:
        ...

    @overload
    def set_upper_limit(self, limit: str) -> IMathLimit:
        ...

    @overload
    def set_lower_limit(self, limit: IMathElement) -> IMathLimit:
        ...

    @overload
    def set_lower_limit(self, limit: str) -> IMathLimit:
        ...

    @overload
    def nary(self, type: MathNaryOperatorTypes, lower_limit: IMathElement, upper_limit: IMathElement) -> IMathNaryOperator:
        ...

    @overload
    def nary(self, type: MathNaryOperatorTypes, lower_limit: str, upper_limit: str) -> IMathNaryOperator:
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes, lower_limit: IMathElement, upper_limit: IMathElement, limit_locations: MathLimitLocations) -> IMathNaryOperator:
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes, lower_limit: IMathElement, upper_limit: IMathElement) -> IMathNaryOperator:
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes) -> IMathNaryOperator:
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes, lower_limit: str, upper_limit: str, limit_locations: MathLimitLocations) -> IMathNaryOperator:
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes, lower_limit: str, upper_limit: str) -> IMathNaryOperator:
        ...

    @overload
    def group(self) -> IMathGroupingCharacter:
        ...

    @overload
    def group(self, character: char, position: MathTopBotPositions, vertical_justification: MathTopBotPositions) -> IMathGroupingCharacter:
        ...

    @overload
    def to_border_box(self) -> IMathBorderBox:
        ...

    @overload
    def to_border_box(self, hide_top: bool, hide_bottom: bool, hide_left: bool, hide_right: bool, strikethrough_horizontal: bool, strikethrough_vertical: bool, strikethrough_bottom_left_to_top_right: bool, strikethrough_top_left_to_bottom_right: bool) -> IMathBorderBox:
        ...

    def get_children(self) -> List[IMathElement]:
        ...

    def to_math_array(self) -> IMathArray:
        ...

    def accent(self, accent_character: char) -> IMathAccent:
        ...

    def overbar(self) -> IMathBar:
        ...

    def underbar(self) -> IMathBar:
        ...

    def to_box(self) -> IMathBox:
        ...

    @property
    def base(self) -> IMathElement:
        '''Base argument'''
        ...

    @property
    def limit(self) -> IMathElement:
        '''Limit argument'''
        ...

    @property
    def upper_limit(self) -> bool:
        ...

    @upper_limit.setter
    def upper_limit(self, value: bool):
        ...

    @property
    def as_i_math_element(self) -> IMathElement:
        ...

    ...

class IMathLimitFactory:
    '''Allows to create IMathLimit'''
    @overload
    def create_math_limit(self, base_arg: IMathElement, limit: IMathElement, upper_limit: bool) -> IMathLimit:
        '''Creates IMathLimit
        :param base_arg: Base argument to apply the limit
        :param limit: Limit element
        :param upper_limit: Sets the placement of the limit on top
        :returns: new math limit'''
        ...

    @overload
    def create_math_limit(self, base_arg: IMathElement, limit: IMathElement) -> IMathLimit:
        '''Creates IMathLimit with limit at the bottom
        :param base_arg: Base argument to apply the limit
        :param limit: Limit element
        :returns: new math limit'''
        ...

    ...

class IMathMatrix:
    '''Specifies the Matrix object, consisting of child elements laid out in one or more rows and columns. 
                It is important to note that matrices do not have built in delimiters. 
                To place the matrix in the brackets you should use the delimiter object (IMathDelimiter).
                Null arguments can be used to create gaps in matrices.'''
    @overload
    def join(self, math_element: IMathElement) -> IMathBlock:
        ...

    @overload
    def join(self, math_text: str) -> IMathBlock:
        ...

    @overload
    def divide(self, denominator: IMathElement) -> IMathFraction:
        ...

    @overload
    def divide(self, denominator: str) -> IMathFraction:
        ...

    @overload
    def divide(self, denominator: IMathElement, fraction_type: MathFractionTypes) -> IMathFraction:
        ...

    @overload
    def divide(self, denominator: str, fraction_type: MathFractionTypes) -> IMathFraction:
        ...

    @overload
    def enclose(self) -> IMathDelimiter:
        ...

    @overload
    def enclose(self, beginning_character: char, ending_character: char) -> IMathDelimiter:
        ...

    @overload
    def function(self, function_argument: IMathElement) -> IMathFunction:
        ...

    @overload
    def function(self, function_argument: str) -> IMathFunction:
        ...

    @overload
    def as_argument_of_function(self, function_name: IMathElement) -> IMathFunction:
        ...

    @overload
    def as_argument_of_function(self, function_name: str) -> IMathFunction:
        ...

    @overload
    def as_argument_of_function(self, function_type: MathFunctionsOfOneArgument) -> IMathFunction:
        ...

    @overload
    def as_argument_of_function(self, function_type: MathFunctionsOfTwoArguments, additional_argument: IMathElement) -> IMathFunction:
        ...

    @overload
    def as_argument_of_function(self, function_type: MathFunctionsOfTwoArguments, additional_argument: str) -> IMathFunction:
        ...

    @overload
    def set_subscript(self, subscript: IMathElement) -> IMathSubscriptElement:
        ...

    @overload
    def set_subscript(self, subscript: str) -> IMathSubscriptElement:
        ...

    @overload
    def set_superscript(self, superscript: IMathElement) -> IMathSuperscriptElement:
        ...

    @overload
    def set_superscript(self, superscript: str) -> IMathSuperscriptElement:
        ...

    @overload
    def set_sub_superscript_on_the_right(self, subscript: IMathElement, superscript: IMathElement) -> IMathRightSubSuperscriptElement:
        ...

    @overload
    def set_sub_superscript_on_the_right(self, subscript: str, superscript: str) -> IMathRightSubSuperscriptElement:
        ...

    @overload
    def set_sub_superscript_on_the_left(self, subscript: IMathElement, superscript: IMathElement) -> IMathLeftSubSuperscriptElement:
        ...

    @overload
    def set_sub_superscript_on_the_left(self, subscript: str, superscript: str) -> IMathLeftSubSuperscriptElement:
        ...

    @overload
    def radical(self, degree: IMathElement) -> IMathRadical:
        ...

    @overload
    def radical(self, degree: str) -> IMathRadical:
        ...

    @overload
    def set_upper_limit(self, limit: IMathElement) -> IMathLimit:
        ...

    @overload
    def set_upper_limit(self, limit: str) -> IMathLimit:
        ...

    @overload
    def set_lower_limit(self, limit: IMathElement) -> IMathLimit:
        ...

    @overload
    def set_lower_limit(self, limit: str) -> IMathLimit:
        ...

    @overload
    def nary(self, type: MathNaryOperatorTypes, lower_limit: IMathElement, upper_limit: IMathElement) -> IMathNaryOperator:
        ...

    @overload
    def nary(self, type: MathNaryOperatorTypes, lower_limit: str, upper_limit: str) -> IMathNaryOperator:
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes, lower_limit: IMathElement, upper_limit: IMathElement, limit_locations: MathLimitLocations) -> IMathNaryOperator:
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes, lower_limit: IMathElement, upper_limit: IMathElement) -> IMathNaryOperator:
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes) -> IMathNaryOperator:
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes, lower_limit: str, upper_limit: str, limit_locations: MathLimitLocations) -> IMathNaryOperator:
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes, lower_limit: str, upper_limit: str) -> IMathNaryOperator:
        ...

    @overload
    def group(self) -> IMathGroupingCharacter:
        ...

    @overload
    def group(self, character: char, position: MathTopBotPositions, vertical_justification: MathTopBotPositions) -> IMathGroupingCharacter:
        ...

    @overload
    def to_border_box(self) -> IMathBorderBox:
        ...

    @overload
    def to_border_box(self, hide_top: bool, hide_bottom: bool, hide_left: bool, hide_right: bool, strikethrough_horizontal: bool, strikethrough_vertical: bool, strikethrough_bottom_left_to_top_right: bool, strikethrough_top_left_to_bottom_right: bool) -> IMathBorderBox:
        ...

    def get_column_alignment(self, column_index: int) -> MathHorizontalAlignment:
        '''Get the horizontal alignment of the specified column
        :param column_index: Zero-based column index
        :returns: Horizontal Alignment of specified column'''
        ...

    def set_column_alignment(self, column_index: int, val: MathHorizontalAlignment) -> None:
        '''Set the horizontal alignment of the specified column
        :param column_index: Zero-based column index
        :param val: New value of horizontal alignment of specified column'''
        ...

    def set_columns_alignment(self, column_index: int, columns_count: int, val: MathHorizontalAlignment) -> None:
        '''Set the horizontal alignment of the specified columns
        :param column_index: Zero-based index of the first column to set alignment
        :param columns_count: The number of columns to specify the alignment
        :param val: New value of horizontal alignment of specified column'''
        ...

    def insert_row_before(self, row_index: int) -> None:
        '''Insert a new row before the specified one
                    Initially all elements in the new row are None.
        :param row_index: Index of the row before which to insert a new one'''
        ...

    def insert_row_after(self, row_index: int) -> None:
        '''Insert a new row after the specified one
                    Initially all elements in the new row are None.
        :param row_index: Index of the row after which to insert a new one'''
        ...

    def delete_row(self, row_index: int) -> None:
        '''Deletes the specified row
        :param row_index: The zero-based index of the row to delete.'''
        ...

    def insert_column_before(self, column_index: int) -> None:
        '''Insert a new column before the specified one
                    Initially all elements in the new column are None.
        :param column_index: Index of the column before which to insert a new one'''
        ...

    def insert_column_after(self, column_index: int) -> None:
        '''Insert a new column after the specified one
                    Initially all elements in the new column are None.
        :param column_index: Index of the column after which to insert a new one'''
        ...

    def delete_column(self, column_index: int) -> None:
        '''Deletes the specified column
        :param column_index: The zero-based index of the column to delete.'''
        ...

    def get_children(self) -> List[IMathElement]:
        ...

    def to_math_array(self) -> IMathArray:
        ...

    def accent(self, accent_character: char) -> IMathAccent:
        ...

    def overbar(self) -> IMathBar:
        ...

    def underbar(self) -> IMathBar:
        ...

    def to_box(self) -> IMathBox:
        ...

    @property
    def row_count(self) -> int:
        ...

    @property
    def column_count(self) -> int:
        ...

    @property
    def hide_placeholders(self) -> bool:
        ...

    @hide_placeholders.setter
    def hide_placeholders(self, value: bool):
        ...

    @property
    def base_justification(self) -> MathVerticalAlignment:
        ...

    @base_justification.setter
    def base_justification(self, value: MathVerticalAlignment):
        ...

    @property
    def min_column_width(self) -> int:
        ...

    @min_column_width.setter
    def min_column_width(self, value: int):
        ...

    @property
    def column_gap_rule(self) -> MathSpacingRules:
        ...

    @column_gap_rule.setter
    def column_gap_rule(self, value: MathSpacingRules):
        ...

    @property
    def column_gap(self) -> int:
        ...

    @column_gap.setter
    def column_gap(self, value: int):
        ...

    @property
    def row_gap_rule(self) -> MathSpacingRules:
        ...

    @row_gap_rule.setter
    def row_gap_rule(self, value: MathSpacingRules):
        ...

    @property
    def row_gap(self) -> int:
        ...

    @row_gap.setter
    def row_gap(self, value: int):
        ...

    @property
    def as_i_math_element(self) -> IMathElement:
        ...

    ...

class IMathMatrixFactory:
    '''Allows to create a math matrix'''
    def create_math_matrix(self, row_count: int, column_count: int) -> IMathMatrix:
        '''Creates a math matrix
        :param row_count: row count
        :param column_count: column count
        :returns: new math matrix'''
        ...

    ...

class IMathNaryOperator:
    '''Specifies an N-ary mathematical object, such as Summation and Integral.
                It consists of an operator, a base (or operand), and optional upper and lower limits. 
                Examples of N-ary operators are: Summation, Union, Intersection, Integral'''
    @overload
    def join(self, math_element: IMathElement) -> IMathBlock:
        ...

    @overload
    def join(self, math_text: str) -> IMathBlock:
        ...

    @overload
    def divide(self, denominator: IMathElement) -> IMathFraction:
        ...

    @overload
    def divide(self, denominator: str) -> IMathFraction:
        ...

    @overload
    def divide(self, denominator: IMathElement, fraction_type: MathFractionTypes) -> IMathFraction:
        ...

    @overload
    def divide(self, denominator: str, fraction_type: MathFractionTypes) -> IMathFraction:
        ...

    @overload
    def enclose(self) -> IMathDelimiter:
        ...

    @overload
    def enclose(self, beginning_character: char, ending_character: char) -> IMathDelimiter:
        ...

    @overload
    def function(self, function_argument: IMathElement) -> IMathFunction:
        ...

    @overload
    def function(self, function_argument: str) -> IMathFunction:
        ...

    @overload
    def as_argument_of_function(self, function_name: IMathElement) -> IMathFunction:
        ...

    @overload
    def as_argument_of_function(self, function_name: str) -> IMathFunction:
        ...

    @overload
    def as_argument_of_function(self, function_type: MathFunctionsOfOneArgument) -> IMathFunction:
        ...

    @overload
    def as_argument_of_function(self, function_type: MathFunctionsOfTwoArguments, additional_argument: IMathElement) -> IMathFunction:
        ...

    @overload
    def as_argument_of_function(self, function_type: MathFunctionsOfTwoArguments, additional_argument: str) -> IMathFunction:
        ...

    @overload
    def set_subscript(self, subscript: IMathElement) -> IMathSubscriptElement:
        ...

    @overload
    def set_subscript(self, subscript: str) -> IMathSubscriptElement:
        ...

    @overload
    def set_superscript(self, superscript: IMathElement) -> IMathSuperscriptElement:
        ...

    @overload
    def set_superscript(self, superscript: str) -> IMathSuperscriptElement:
        ...

    @overload
    def set_sub_superscript_on_the_right(self, subscript: IMathElement, superscript: IMathElement) -> IMathRightSubSuperscriptElement:
        ...

    @overload
    def set_sub_superscript_on_the_right(self, subscript: str, superscript: str) -> IMathRightSubSuperscriptElement:
        ...

    @overload
    def set_sub_superscript_on_the_left(self, subscript: IMathElement, superscript: IMathElement) -> IMathLeftSubSuperscriptElement:
        ...

    @overload
    def set_sub_superscript_on_the_left(self, subscript: str, superscript: str) -> IMathLeftSubSuperscriptElement:
        ...

    @overload
    def radical(self, degree: IMathElement) -> IMathRadical:
        ...

    @overload
    def radical(self, degree: str) -> IMathRadical:
        ...

    @overload
    def set_upper_limit(self, limit: IMathElement) -> IMathLimit:
        ...

    @overload
    def set_upper_limit(self, limit: str) -> IMathLimit:
        ...

    @overload
    def set_lower_limit(self, limit: IMathElement) -> IMathLimit:
        ...

    @overload
    def set_lower_limit(self, limit: str) -> IMathLimit:
        ...

    @overload
    def nary(self, type: MathNaryOperatorTypes, lower_limit: IMathElement, upper_limit: IMathElement) -> IMathNaryOperator:
        ...

    @overload
    def nary(self, type: MathNaryOperatorTypes, lower_limit: str, upper_limit: str) -> IMathNaryOperator:
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes, lower_limit: IMathElement, upper_limit: IMathElement, limit_locations: MathLimitLocations) -> IMathNaryOperator:
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes, lower_limit: IMathElement, upper_limit: IMathElement) -> IMathNaryOperator:
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes) -> IMathNaryOperator:
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes, lower_limit: str, upper_limit: str, limit_locations: MathLimitLocations) -> IMathNaryOperator:
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes, lower_limit: str, upper_limit: str) -> IMathNaryOperator:
        ...

    @overload
    def group(self) -> IMathGroupingCharacter:
        ...

    @overload
    def group(self, character: char, position: MathTopBotPositions, vertical_justification: MathTopBotPositions) -> IMathGroupingCharacter:
        ...

    @overload
    def to_border_box(self) -> IMathBorderBox:
        ...

    @overload
    def to_border_box(self, hide_top: bool, hide_bottom: bool, hide_left: bool, hide_right: bool, strikethrough_horizontal: bool, strikethrough_vertical: bool, strikethrough_bottom_left_to_top_right: bool, strikethrough_top_left_to_bottom_right: bool) -> IMathBorderBox:
        ...

    def get_children(self) -> List[IMathElement]:
        ...

    def to_math_array(self) -> IMathArray:
        ...

    def accent(self, accent_character: char) -> IMathAccent:
        ...

    def overbar(self) -> IMathBar:
        ...

    def underbar(self) -> IMathBar:
        ...

    def to_box(self) -> IMathBox:
        ...

    @property
    def base(self) -> IMathElement:
        '''Base argument'''
        ...

    @property
    def subscript(self) -> IMathElement:
        '''Specifies a subscript argument that, for example, in the case of an integral, sets the lower limit'''
        ...

    @property
    def superscript(self) -> IMathElement:
        '''Specifies a supersript argument that, for example, in the case of an integral, sets the upper limit'''
        ...

    @property
    def as_i_math_element(self) -> IMathElement:
        ...

    @property
    def as_i_math_nary_operator_properties(self) -> IMathNaryOperatorProperties:
        ...

    @property
    def operator(self) -> char:
        ...

    @operator.setter
    def operator(self, value: char):
        ...

    @property
    def limit_location(self) -> MathLimitLocations:
        ...

    @limit_location.setter
    def limit_location(self, value: MathLimitLocations):
        ...

    @property
    def grow_to_match_operand_height(self) -> bool:
        ...

    @grow_to_match_operand_height.setter
    def grow_to_match_operand_height(self, value: bool):
        ...

    @property
    def hide_subscript(self) -> bool:
        ...

    @hide_subscript.setter
    def hide_subscript(self, value: bool):
        ...

    @property
    def hide_superscript(self) -> bool:
        ...

    @hide_superscript.setter
    def hide_superscript(self, value: bool):
        ...

    ...

class IMathNaryOperatorFactory:
    '''Allows to create IMathNaryOperator'''
    @overload
    def create_math_nary_operator(self, operator_symbol: char, base_argument: IMathElement, lower_limit: IMathElement, upper_limit: IMathElement) -> IMathNaryOperator:
        '''Creates IMathNaryOperator
        :param operator_symbol: The operator sign
        :param base_argument: Base argument to apply operator
        :param lower_limit: Lower limit
        :param upper_limit: Upper limit
        :returns: new IMathNaryOperator'''
        ...

    @overload
    def create_math_nary_operator(self, operator_symbol: char, base_argument: IMathElement, lower_limit: IMathElement) -> IMathNaryOperator:
        '''Creates IMathNaryOperator
        :param operator_symbol: The operator sign
        :param base_argument: Base argument to apply operator
        :param lower_limit: Lower limit
        :returns: new IMathNaryOperator'''
        ...

    @overload
    def create_math_nary_operator(self, operator_symbol: char, base_argument: IMathElement) -> IMathNaryOperator:
        '''Creates IMathNaryOperator
        :param operator_symbol: The operator sign
        :param base_argument: Base argument to apply operator
        :returns: new IMathNaryOperator'''
        ...

    ...

class IMathNaryOperatorProperties:
    '''Specifies properties of IMathNaryOperator'''
    @property
    def operator(self) -> char:
        '''Nary Operator Character
                    For example: '∑', '∫''''
        ...

    @operator.setter
    def operator(self, value: char):
        '''Nary Operator Character
                    For example: '∑', '∫''''
        ...

    @property
    def limit_location(self) -> MathLimitLocations:
        ...

    @limit_location.setter
    def limit_location(self, value: MathLimitLocations):
        ...

    @property
    def grow_to_match_operand_height(self) -> bool:
        ...

    @grow_to_match_operand_height.setter
    def grow_to_match_operand_height(self, value: bool):
        ...

    @property
    def hide_subscript(self) -> bool:
        ...

    @hide_subscript.setter
    def hide_subscript(self, value: bool):
        ...

    @property
    def hide_superscript(self) -> bool:
        ...

    @hide_superscript.setter
    def hide_superscript(self, value: bool):
        ...

    ...

class IMathParagraph:
    '''Mathematical paragraph that is a container for mathematical blocks (IMathBlock)'''
    def write_as_math_ml(self, stream: io.RawIOBase) -> None:
        '''Saves content of this :py:class:`aspose.slides.mathtext.IMathParagraph` as MathML
        :param stream: Target stream'''
        ...

    def to_latex(self) -> str:
        '''Gets mathematical equation in LaTeX format'''
        ...

    def add(self, item: IMathBlock) -> None:
        ...

    def insert(self, index: int, item: IMathBlock) -> None:
        ...

    def remove(self, item: IMathBlock) -> bool:
        ...

    def remove_at(self, index: int) -> None:
        ...

    def contains(self, item: IMathBlock) -> bool:
        ...

    def index_of(self, item: IMathBlock) -> int:
        ...

    def clear(self) -> None:
        ...

    @property
    def justification(self) -> MathJustification:
        '''Paragraph Justification 
                    Default value: CenteredAsGroup'''
        ...

    @justification.setter
    def justification(self, value: MathJustification):
        '''Paragraph Justification 
                    Default value: CenteredAsGroup'''
        ...

    @property
    def as_i_math_block_collection(self) -> IMathBlockCollection:
        ...

    @property
    def count(self) -> int:
        ...

    @property
    def as_i_enumerable(self) -> collections.abc.Iterable:
        ...

    def __getitem__(self, key: int) -> IMathBlock
        ...

    def __setitem__(self, key: int, value: IMathBlock
        ...

    ...

class IMathParagraphFactory:
    '''Allows to create a math paragraph'''
    @overload
    def create_math_paragraph(self) -> IMathParagraph:
        '''Create empty math paragraph
        :returns: new math paragraph'''
        ...

    @overload
    def create_math_paragraph(self, math_block: IMathBlock) -> IMathParagraph:
        '''Creates a math paragraph and places the specified math block in it
        :param math_block: math block to place in the paragraph
        :returns: new math paragraph'''
        ...

    ...

class IMathPortion:
    '''Represents a portion with mathematical context inside.'''
    @property
    def math_paragraph(self) -> IMathParagraph:
        ...

    ...

class IMathRadical:
    '''Specifies the radical function, consisting of a base, and an optional degree.
                Example of radical object is √𝑥.'''
    @overload
    def join(self, math_element: IMathElement) -> IMathBlock:
        ...

    @overload
    def join(self, math_text: str) -> IMathBlock:
        ...

    @overload
    def divide(self, denominator: IMathElement) -> IMathFraction:
        ...

    @overload
    def divide(self, denominator: str) -> IMathFraction:
        ...

    @overload
    def divide(self, denominator: IMathElement, fraction_type: MathFractionTypes) -> IMathFraction:
        ...

    @overload
    def divide(self, denominator: str, fraction_type: MathFractionTypes) -> IMathFraction:
        ...

    @overload
    def enclose(self) -> IMathDelimiter:
        ...

    @overload
    def enclose(self, beginning_character: char, ending_character: char) -> IMathDelimiter:
        ...

    @overload
    def function(self, function_argument: IMathElement) -> IMathFunction:
        ...

    @overload
    def function(self, function_argument: str) -> IMathFunction:
        ...

    @overload
    def as_argument_of_function(self, function_name: IMathElement) -> IMathFunction:
        ...

    @overload
    def as_argument_of_function(self, function_name: str) -> IMathFunction:
        ...

    @overload
    def as_argument_of_function(self, function_type: MathFunctionsOfOneArgument) -> IMathFunction:
        ...

    @overload
    def as_argument_of_function(self, function_type: MathFunctionsOfTwoArguments, additional_argument: IMathElement) -> IMathFunction:
        ...

    @overload
    def as_argument_of_function(self, function_type: MathFunctionsOfTwoArguments, additional_argument: str) -> IMathFunction:
        ...

    @overload
    def set_subscript(self, subscript: IMathElement) -> IMathSubscriptElement:
        ...

    @overload
    def set_subscript(self, subscript: str) -> IMathSubscriptElement:
        ...

    @overload
    def set_superscript(self, superscript: IMathElement) -> IMathSuperscriptElement:
        ...

    @overload
    def set_superscript(self, superscript: str) -> IMathSuperscriptElement:
        ...

    @overload
    def set_sub_superscript_on_the_right(self, subscript: IMathElement, superscript: IMathElement) -> IMathRightSubSuperscriptElement:
        ...

    @overload
    def set_sub_superscript_on_the_right(self, subscript: str, superscript: str) -> IMathRightSubSuperscriptElement:
        ...

    @overload
    def set_sub_superscript_on_the_left(self, subscript: IMathElement, superscript: IMathElement) -> IMathLeftSubSuperscriptElement:
        ...

    @overload
    def set_sub_superscript_on_the_left(self, subscript: str, superscript: str) -> IMathLeftSubSuperscriptElement:
        ...

    @overload
    def radical(self, degree: IMathElement) -> IMathRadical:
        ...

    @overload
    def radical(self, degree: str) -> IMathRadical:
        ...

    @overload
    def set_upper_limit(self, limit: IMathElement) -> IMathLimit:
        ...

    @overload
    def set_upper_limit(self, limit: str) -> IMathLimit:
        ...

    @overload
    def set_lower_limit(self, limit: IMathElement) -> IMathLimit:
        ...

    @overload
    def set_lower_limit(self, limit: str) -> IMathLimit:
        ...

    @overload
    def nary(self, type: MathNaryOperatorTypes, lower_limit: IMathElement, upper_limit: IMathElement) -> IMathNaryOperator:
        ...

    @overload
    def nary(self, type: MathNaryOperatorTypes, lower_limit: str, upper_limit: str) -> IMathNaryOperator:
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes, lower_limit: IMathElement, upper_limit: IMathElement, limit_locations: MathLimitLocations) -> IMathNaryOperator:
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes, lower_limit: IMathElement, upper_limit: IMathElement) -> IMathNaryOperator:
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes) -> IMathNaryOperator:
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes, lower_limit: str, upper_limit: str, limit_locations: MathLimitLocations) -> IMathNaryOperator:
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes, lower_limit: str, upper_limit: str) -> IMathNaryOperator:
        ...

    @overload
    def group(self) -> IMathGroupingCharacter:
        ...

    @overload
    def group(self, character: char, position: MathTopBotPositions, vertical_justification: MathTopBotPositions) -> IMathGroupingCharacter:
        ...

    @overload
    def to_border_box(self) -> IMathBorderBox:
        ...

    @overload
    def to_border_box(self, hide_top: bool, hide_bottom: bool, hide_left: bool, hide_right: bool, strikethrough_horizontal: bool, strikethrough_vertical: bool, strikethrough_bottom_left_to_top_right: bool, strikethrough_top_left_to_bottom_right: bool) -> IMathBorderBox:
        ...

    def get_children(self) -> List[IMathElement]:
        ...

    def to_math_array(self) -> IMathArray:
        ...

    def accent(self, accent_character: char) -> IMathAccent:
        ...

    def overbar(self) -> IMathBar:
        ...

    def underbar(self) -> IMathBar:
        ...

    def to_box(self) -> IMathBox:
        ...

    @property
    def base(self) -> IMathElement:
        '''Base argument'''
        ...

    @property
    def degree(self) -> IMathElement:
        '''Degree argument'''
        ...

    @property
    def hide_degree(self) -> bool:
        ...

    @hide_degree.setter
    def hide_degree(self, value: bool):
        ...

    @property
    def as_i_math_element(self) -> IMathElement:
        ...

    ...

class IMathRadicalFactory:
    '''Allows to create math radical'''
    def create_math_radical(self, base_argument: IMathElement, degree_argument: IMathElement) -> IMathRadical:
        '''Creates a math radical
        :param base_argument: Base argument to apply radical
        :param degree_argument: Degree value
        :returns: new radical element'''
        ...

    ...

class IMathRightSubSuperscriptElement:
    '''Specifies the Sub-Superscript object, which consists of a base 
                and a subscript and superscript placed to the right of the base.'''
    @overload
    def join(self, math_element: IMathElement) -> IMathBlock:
        ...

    @overload
    def join(self, math_text: str) -> IMathBlock:
        ...

    @overload
    def divide(self, denominator: IMathElement) -> IMathFraction:
        ...

    @overload
    def divide(self, denominator: str) -> IMathFraction:
        ...

    @overload
    def divide(self, denominator: IMathElement, fraction_type: MathFractionTypes) -> IMathFraction:
        ...

    @overload
    def divide(self, denominator: str, fraction_type: MathFractionTypes) -> IMathFraction:
        ...

    @overload
    def enclose(self) -> IMathDelimiter:
        ...

    @overload
    def enclose(self, beginning_character: char, ending_character: char) -> IMathDelimiter:
        ...

    @overload
    def function(self, function_argument: IMathElement) -> IMathFunction:
        ...

    @overload
    def function(self, function_argument: str) -> IMathFunction:
        ...

    @overload
    def as_argument_of_function(self, function_name: IMathElement) -> IMathFunction:
        ...

    @overload
    def as_argument_of_function(self, function_name: str) -> IMathFunction:
        ...

    @overload
    def as_argument_of_function(self, function_type: MathFunctionsOfOneArgument) -> IMathFunction:
        ...

    @overload
    def as_argument_of_function(self, function_type: MathFunctionsOfTwoArguments, additional_argument: IMathElement) -> IMathFunction:
        ...

    @overload
    def as_argument_of_function(self, function_type: MathFunctionsOfTwoArguments, additional_argument: str) -> IMathFunction:
        ...

    @overload
    def set_subscript(self, subscript: IMathElement) -> IMathSubscriptElement:
        ...

    @overload
    def set_subscript(self, subscript: str) -> IMathSubscriptElement:
        ...

    @overload
    def set_superscript(self, superscript: IMathElement) -> IMathSuperscriptElement:
        ...

    @overload
    def set_superscript(self, superscript: str) -> IMathSuperscriptElement:
        ...

    @overload
    def set_sub_superscript_on_the_right(self, subscript: IMathElement, superscript: IMathElement) -> IMathRightSubSuperscriptElement:
        ...

    @overload
    def set_sub_superscript_on_the_right(self, subscript: str, superscript: str) -> IMathRightSubSuperscriptElement:
        ...

    @overload
    def set_sub_superscript_on_the_left(self, subscript: IMathElement, superscript: IMathElement) -> IMathLeftSubSuperscriptElement:
        ...

    @overload
    def set_sub_superscript_on_the_left(self, subscript: str, superscript: str) -> IMathLeftSubSuperscriptElement:
        ...

    @overload
    def radical(self, degree: IMathElement) -> IMathRadical:
        ...

    @overload
    def radical(self, degree: str) -> IMathRadical:
        ...

    @overload
    def set_upper_limit(self, limit: IMathElement) -> IMathLimit:
        ...

    @overload
    def set_upper_limit(self, limit: str) -> IMathLimit:
        ...

    @overload
    def set_lower_limit(self, limit: IMathElement) -> IMathLimit:
        ...

    @overload
    def set_lower_limit(self, limit: str) -> IMathLimit:
        ...

    @overload
    def nary(self, type: MathNaryOperatorTypes, lower_limit: IMathElement, upper_limit: IMathElement) -> IMathNaryOperator:
        ...

    @overload
    def nary(self, type: MathNaryOperatorTypes, lower_limit: str, upper_limit: str) -> IMathNaryOperator:
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes, lower_limit: IMathElement, upper_limit: IMathElement, limit_locations: MathLimitLocations) -> IMathNaryOperator:
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes, lower_limit: IMathElement, upper_limit: IMathElement) -> IMathNaryOperator:
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes) -> IMathNaryOperator:
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes, lower_limit: str, upper_limit: str, limit_locations: MathLimitLocations) -> IMathNaryOperator:
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes, lower_limit: str, upper_limit: str) -> IMathNaryOperator:
        ...

    @overload
    def group(self) -> IMathGroupingCharacter:
        ...

    @overload
    def group(self, character: char, position: MathTopBotPositions, vertical_justification: MathTopBotPositions) -> IMathGroupingCharacter:
        ...

    @overload
    def to_border_box(self) -> IMathBorderBox:
        ...

    @overload
    def to_border_box(self, hide_top: bool, hide_bottom: bool, hide_left: bool, hide_right: bool, strikethrough_horizontal: bool, strikethrough_vertical: bool, strikethrough_bottom_left_to_top_right: bool, strikethrough_top_left_to_bottom_right: bool) -> IMathBorderBox:
        ...

    def get_children(self) -> List[IMathElement]:
        ...

    def to_math_array(self) -> IMathArray:
        ...

    def accent(self, accent_character: char) -> IMathAccent:
        ...

    def overbar(self) -> IMathBar:
        ...

    def underbar(self) -> IMathBar:
        ...

    def to_box(self) -> IMathBox:
        ...

    @property
    def base(self) -> IMathElement:
        '''Base argument'''
        ...

    @property
    def subscript(self) -> IMathElement:
        '''Subscript argument'''
        ...

    @property
    def superscript(self) -> IMathElement:
        '''Superscript argument'''
        ...

    @property
    def align_scripts(self) -> bool:
        ...

    @align_scripts.setter
    def align_scripts(self, value: bool):
        ...

    @property
    def as_i_math_element(self) -> IMathElement:
        ...

    ...

class IMathRightSubSuperscriptElementFactory:
    '''Allows to create IMathRightSubSuperscriptElementFactory'''
    def create_math_right_sub_superscript_element(self, base_arg: IMathElement, sub_script: IMathElement, super_script: IMathElement) -> IMathRightSubSuperscriptElement:
        '''Creates IMathRightSubSuperscriptElementFactory
        :param base_arg: Base argument to apply indexes
        :param sub_script: lower right index
        :param super_script: upper right index
        :returns: new IMathLeftSubSuperscriptElement'''
        ...

    ...

class IMathSubscriptElement:
    '''Specifies the subscript object, which consists of a base 
                and a reduced-size subscript placed below and to the right.'''
    @overload
    def join(self, math_element: IMathElement) -> IMathBlock:
        ...

    @overload
    def join(self, math_text: str) -> IMathBlock:
        ...

    @overload
    def divide(self, denominator: IMathElement) -> IMathFraction:
        ...

    @overload
    def divide(self, denominator: str) -> IMathFraction:
        ...

    @overload
    def divide(self, denominator: IMathElement, fraction_type: MathFractionTypes) -> IMathFraction:
        ...

    @overload
    def divide(self, denominator: str, fraction_type: MathFractionTypes) -> IMathFraction:
        ...

    @overload
    def enclose(self) -> IMathDelimiter:
        ...

    @overload
    def enclose(self, beginning_character: char, ending_character: char) -> IMathDelimiter:
        ...

    @overload
    def function(self, function_argument: IMathElement) -> IMathFunction:
        ...

    @overload
    def function(self, function_argument: str) -> IMathFunction:
        ...

    @overload
    def as_argument_of_function(self, function_name: IMathElement) -> IMathFunction:
        ...

    @overload
    def as_argument_of_function(self, function_name: str) -> IMathFunction:
        ...

    @overload
    def as_argument_of_function(self, function_type: MathFunctionsOfOneArgument) -> IMathFunction:
        ...

    @overload
    def as_argument_of_function(self, function_type: MathFunctionsOfTwoArguments, additional_argument: IMathElement) -> IMathFunction:
        ...

    @overload
    def as_argument_of_function(self, function_type: MathFunctionsOfTwoArguments, additional_argument: str) -> IMathFunction:
        ...

    @overload
    def set_subscript(self, subscript: IMathElement) -> IMathSubscriptElement:
        ...

    @overload
    def set_subscript(self, subscript: str) -> IMathSubscriptElement:
        ...

    @overload
    def set_superscript(self, superscript: IMathElement) -> IMathSuperscriptElement:
        ...

    @overload
    def set_superscript(self, superscript: str) -> IMathSuperscriptElement:
        ...

    @overload
    def set_sub_superscript_on_the_right(self, subscript: IMathElement, superscript: IMathElement) -> IMathRightSubSuperscriptElement:
        ...

    @overload
    def set_sub_superscript_on_the_right(self, subscript: str, superscript: str) -> IMathRightSubSuperscriptElement:
        ...

    @overload
    def set_sub_superscript_on_the_left(self, subscript: IMathElement, superscript: IMathElement) -> IMathLeftSubSuperscriptElement:
        ...

    @overload
    def set_sub_superscript_on_the_left(self, subscript: str, superscript: str) -> IMathLeftSubSuperscriptElement:
        ...

    @overload
    def radical(self, degree: IMathElement) -> IMathRadical:
        ...

    @overload
    def radical(self, degree: str) -> IMathRadical:
        ...

    @overload
    def set_upper_limit(self, limit: IMathElement) -> IMathLimit:
        ...

    @overload
    def set_upper_limit(self, limit: str) -> IMathLimit:
        ...

    @overload
    def set_lower_limit(self, limit: IMathElement) -> IMathLimit:
        ...

    @overload
    def set_lower_limit(self, limit: str) -> IMathLimit:
        ...

    @overload
    def nary(self, type: MathNaryOperatorTypes, lower_limit: IMathElement, upper_limit: IMathElement) -> IMathNaryOperator:
        ...

    @overload
    def nary(self, type: MathNaryOperatorTypes, lower_limit: str, upper_limit: str) -> IMathNaryOperator:
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes, lower_limit: IMathElement, upper_limit: IMathElement, limit_locations: MathLimitLocations) -> IMathNaryOperator:
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes, lower_limit: IMathElement, upper_limit: IMathElement) -> IMathNaryOperator:
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes) -> IMathNaryOperator:
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes, lower_limit: str, upper_limit: str, limit_locations: MathLimitLocations) -> IMathNaryOperator:
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes, lower_limit: str, upper_limit: str) -> IMathNaryOperator:
        ...

    @overload
    def group(self) -> IMathGroupingCharacter:
        ...

    @overload
    def group(self, character: char, position: MathTopBotPositions, vertical_justification: MathTopBotPositions) -> IMathGroupingCharacter:
        ...

    @overload
    def to_border_box(self) -> IMathBorderBox:
        ...

    @overload
    def to_border_box(self, hide_top: bool, hide_bottom: bool, hide_left: bool, hide_right: bool, strikethrough_horizontal: bool, strikethrough_vertical: bool, strikethrough_bottom_left_to_top_right: bool, strikethrough_top_left_to_bottom_right: bool) -> IMathBorderBox:
        ...

    def get_children(self) -> List[IMathElement]:
        ...

    def to_math_array(self) -> IMathArray:
        ...

    def accent(self, accent_character: char) -> IMathAccent:
        ...

    def overbar(self) -> IMathBar:
        ...

    def underbar(self) -> IMathBar:
        ...

    def to_box(self) -> IMathBox:
        ...

    @property
    def base(self) -> IMathElement:
        '''Base argument'''
        ...

    @property
    def subscript(self) -> IMathElement:
        '''Subscript'''
        ...

    @property
    def as_i_math_element(self) -> IMathElement:
        ...

    ...

class IMathSubscriptElementFactory:
    '''Allows to create IMathSubscriptElement'''
    def create_math_subscript_element(self, base_arg: IMathElement, sub_script: IMathElement) -> IMathSubscriptElement:
        '''Creates IMathSubscriptElement
        :param base_arg: Base argument to apply indexe
        :param sub_script: lower right index
        :returns: new IMathSubscriptElement'''
        ...

    ...

class IMathSuperscriptElement:
    '''Specifies the superscript object, which consists of a base 
                and a reduced-size superscript placed above and to the right'''
    @overload
    def join(self, math_element: IMathElement) -> IMathBlock:
        ...

    @overload
    def join(self, math_text: str) -> IMathBlock:
        ...

    @overload
    def divide(self, denominator: IMathElement) -> IMathFraction:
        ...

    @overload
    def divide(self, denominator: str) -> IMathFraction:
        ...

    @overload
    def divide(self, denominator: IMathElement, fraction_type: MathFractionTypes) -> IMathFraction:
        ...

    @overload
    def divide(self, denominator: str, fraction_type: MathFractionTypes) -> IMathFraction:
        ...

    @overload
    def enclose(self) -> IMathDelimiter:
        ...

    @overload
    def enclose(self, beginning_character: char, ending_character: char) -> IMathDelimiter:
        ...

    @overload
    def function(self, function_argument: IMathElement) -> IMathFunction:
        ...

    @overload
    def function(self, function_argument: str) -> IMathFunction:
        ...

    @overload
    def as_argument_of_function(self, function_name: IMathElement) -> IMathFunction:
        ...

    @overload
    def as_argument_of_function(self, function_name: str) -> IMathFunction:
        ...

    @overload
    def as_argument_of_function(self, function_type: MathFunctionsOfOneArgument) -> IMathFunction:
        ...

    @overload
    def as_argument_of_function(self, function_type: MathFunctionsOfTwoArguments, additional_argument: IMathElement) -> IMathFunction:
        ...

    @overload
    def as_argument_of_function(self, function_type: MathFunctionsOfTwoArguments, additional_argument: str) -> IMathFunction:
        ...

    @overload
    def set_subscript(self, subscript: IMathElement) -> IMathSubscriptElement:
        ...

    @overload
    def set_subscript(self, subscript: str) -> IMathSubscriptElement:
        ...

    @overload
    def set_superscript(self, superscript: IMathElement) -> IMathSuperscriptElement:
        ...

    @overload
    def set_superscript(self, superscript: str) -> IMathSuperscriptElement:
        ...

    @overload
    def set_sub_superscript_on_the_right(self, subscript: IMathElement, superscript: IMathElement) -> IMathRightSubSuperscriptElement:
        ...

    @overload
    def set_sub_superscript_on_the_right(self, subscript: str, superscript: str) -> IMathRightSubSuperscriptElement:
        ...

    @overload
    def set_sub_superscript_on_the_left(self, subscript: IMathElement, superscript: IMathElement) -> IMathLeftSubSuperscriptElement:
        ...

    @overload
    def set_sub_superscript_on_the_left(self, subscript: str, superscript: str) -> IMathLeftSubSuperscriptElement:
        ...

    @overload
    def radical(self, degree: IMathElement) -> IMathRadical:
        ...

    @overload
    def radical(self, degree: str) -> IMathRadical:
        ...

    @overload
    def set_upper_limit(self, limit: IMathElement) -> IMathLimit:
        ...

    @overload
    def set_upper_limit(self, limit: str) -> IMathLimit:
        ...

    @overload
    def set_lower_limit(self, limit: IMathElement) -> IMathLimit:
        ...

    @overload
    def set_lower_limit(self, limit: str) -> IMathLimit:
        ...

    @overload
    def nary(self, type: MathNaryOperatorTypes, lower_limit: IMathElement, upper_limit: IMathElement) -> IMathNaryOperator:
        ...

    @overload
    def nary(self, type: MathNaryOperatorTypes, lower_limit: str, upper_limit: str) -> IMathNaryOperator:
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes, lower_limit: IMathElement, upper_limit: IMathElement, limit_locations: MathLimitLocations) -> IMathNaryOperator:
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes, lower_limit: IMathElement, upper_limit: IMathElement) -> IMathNaryOperator:
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes) -> IMathNaryOperator:
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes, lower_limit: str, upper_limit: str, limit_locations: MathLimitLocations) -> IMathNaryOperator:
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes, lower_limit: str, upper_limit: str) -> IMathNaryOperator:
        ...

    @overload
    def group(self) -> IMathGroupingCharacter:
        ...

    @overload
    def group(self, character: char, position: MathTopBotPositions, vertical_justification: MathTopBotPositions) -> IMathGroupingCharacter:
        ...

    @overload
    def to_border_box(self) -> IMathBorderBox:
        ...

    @overload
    def to_border_box(self, hide_top: bool, hide_bottom: bool, hide_left: bool, hide_right: bool, strikethrough_horizontal: bool, strikethrough_vertical: bool, strikethrough_bottom_left_to_top_right: bool, strikethrough_top_left_to_bottom_right: bool) -> IMathBorderBox:
        ...

    def get_children(self) -> List[IMathElement]:
        ...

    def to_math_array(self) -> IMathArray:
        ...

    def accent(self, accent_character: char) -> IMathAccent:
        ...

    def overbar(self) -> IMathBar:
        ...

    def underbar(self) -> IMathBar:
        ...

    def to_box(self) -> IMathBox:
        ...

    @property
    def base(self) -> IMathElement:
        '''Base argument'''
        ...

    @property
    def superscript(self) -> IMathElement:
        '''Superscript'''
        ...

    @property
    def as_i_math_element(self) -> IMathElement:
        ...

    ...

class IMathSuperscriptElementFactory:
    '''Allows to create IMathSuperscriptElement'''
    def create_math_superscript_element(self, base_arg: IMathElement, super_script: IMathElement) -> IMathSuperscriptElement:
        '''Creates IMathSuperscriptElement
        :param base_arg: Base argument to apply superscript
        :param super_script: upper right index
        :returns: new IMathSuperscriptElement'''
        ...

    ...

class IMathematicalText:
    '''Mathematical text'''
    @overload
    def join(self, math_element: IMathElement) -> IMathBlock:
        ...

    @overload
    def join(self, math_text: str) -> IMathBlock:
        ...

    @overload
    def divide(self, denominator: IMathElement) -> IMathFraction:
        ...

    @overload
    def divide(self, denominator: str) -> IMathFraction:
        ...

    @overload
    def divide(self, denominator: IMathElement, fraction_type: MathFractionTypes) -> IMathFraction:
        ...

    @overload
    def divide(self, denominator: str, fraction_type: MathFractionTypes) -> IMathFraction:
        ...

    @overload
    def enclose(self) -> IMathDelimiter:
        ...

    @overload
    def enclose(self, beginning_character: char, ending_character: char) -> IMathDelimiter:
        ...

    @overload
    def function(self, function_argument: IMathElement) -> IMathFunction:
        ...

    @overload
    def function(self, function_argument: str) -> IMathFunction:
        ...

    @overload
    def as_argument_of_function(self, function_name: IMathElement) -> IMathFunction:
        ...

    @overload
    def as_argument_of_function(self, function_name: str) -> IMathFunction:
        ...

    @overload
    def as_argument_of_function(self, function_type: MathFunctionsOfOneArgument) -> IMathFunction:
        ...

    @overload
    def as_argument_of_function(self, function_type: MathFunctionsOfTwoArguments, additional_argument: IMathElement) -> IMathFunction:
        ...

    @overload
    def as_argument_of_function(self, function_type: MathFunctionsOfTwoArguments, additional_argument: str) -> IMathFunction:
        ...

    @overload
    def set_subscript(self, subscript: IMathElement) -> IMathSubscriptElement:
        ...

    @overload
    def set_subscript(self, subscript: str) -> IMathSubscriptElement:
        ...

    @overload
    def set_superscript(self, superscript: IMathElement) -> IMathSuperscriptElement:
        ...

    @overload
    def set_superscript(self, superscript: str) -> IMathSuperscriptElement:
        ...

    @overload
    def set_sub_superscript_on_the_right(self, subscript: IMathElement, superscript: IMathElement) -> IMathRightSubSuperscriptElement:
        ...

    @overload
    def set_sub_superscript_on_the_right(self, subscript: str, superscript: str) -> IMathRightSubSuperscriptElement:
        ...

    @overload
    def set_sub_superscript_on_the_left(self, subscript: IMathElement, superscript: IMathElement) -> IMathLeftSubSuperscriptElement:
        ...

    @overload
    def set_sub_superscript_on_the_left(self, subscript: str, superscript: str) -> IMathLeftSubSuperscriptElement:
        ...

    @overload
    def radical(self, degree: IMathElement) -> IMathRadical:
        ...

    @overload
    def radical(self, degree: str) -> IMathRadical:
        ...

    @overload
    def set_upper_limit(self, limit: IMathElement) -> IMathLimit:
        ...

    @overload
    def set_upper_limit(self, limit: str) -> IMathLimit:
        ...

    @overload
    def set_lower_limit(self, limit: IMathElement) -> IMathLimit:
        ...

    @overload
    def set_lower_limit(self, limit: str) -> IMathLimit:
        ...

    @overload
    def nary(self, type: MathNaryOperatorTypes, lower_limit: IMathElement, upper_limit: IMathElement) -> IMathNaryOperator:
        ...

    @overload
    def nary(self, type: MathNaryOperatorTypes, lower_limit: str, upper_limit: str) -> IMathNaryOperator:
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes, lower_limit: IMathElement, upper_limit: IMathElement, limit_locations: MathLimitLocations) -> IMathNaryOperator:
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes, lower_limit: IMathElement, upper_limit: IMathElement) -> IMathNaryOperator:
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes) -> IMathNaryOperator:
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes, lower_limit: str, upper_limit: str, limit_locations: MathLimitLocations) -> IMathNaryOperator:
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes, lower_limit: str, upper_limit: str) -> IMathNaryOperator:
        ...

    @overload
    def group(self) -> IMathGroupingCharacter:
        ...

    @overload
    def group(self, character: char, position: MathTopBotPositions, vertical_justification: MathTopBotPositions) -> IMathGroupingCharacter:
        ...

    @overload
    def to_border_box(self) -> IMathBorderBox:
        ...

    @overload
    def to_border_box(self, hide_top: bool, hide_bottom: bool, hide_left: bool, hide_right: bool, strikethrough_horizontal: bool, strikethrough_vertical: bool, strikethrough_bottom_left_to_top_right: bool, strikethrough_top_left_to_bottom_right: bool) -> IMathBorderBox:
        ...

    def get_children(self) -> List[IMathElement]:
        ...

    def to_math_array(self) -> IMathArray:
        ...

    def accent(self, accent_character: char) -> IMathAccent:
        ...

    def overbar(self) -> IMathBar:
        ...

    def underbar(self) -> IMathBar:
        ...

    def to_box(self) -> IMathBox:
        ...

    @property
    def value(self) -> str:
        '''Text value'''
        ...

    @value.setter
    def value(self, value: str):
        '''Text value'''
        ...

    @property
    def format(self) -> IPortionFormat:
        '''Text formatting properties'''
        ...

    @property
    def as_i_math_element(self) -> IMathElement:
        ...

    ...

class IMathematicalTextFactory:
    '''Allows to create a MathematicalText element'''
    @overload
    def create_mathematical_text(self) -> IMathematicalText:
        '''Create empty mathematical text element
        :returns: new Mathematical Text'''
        ...

    @overload
    def create_mathematical_text(self, math_symbol: char) -> IMathematicalText:
        '''Create mathematical text element with the specified value
        :param math_symbol: single symbol to use as text value
        :returns: new Mathematical Text'''
        ...

    @overload
    def create_mathematical_text(self, math_text: str) -> IMathematicalText:
        '''Create empty mathematical text element with the specified value
        :param math_text: text value
        :returns: new Mathematical Text'''
        ...

    @overload
    def create_mathematical_text(self, math_text: str, portion_format: IPortionFormat) -> IMathematicalText:
        '''Create empty mathematical text element with the specified value and formatting properties
        :param math_text: text value
        :param portion_format: text format settings
        :returns: new Mathematical Text'''
        ...

    ...

class MathAccent(MathElementBase):
    '''Specifies the accent function, consisting of a base and a combining diacritical mark
                Example: 𝑎́'''
    def __init__(self, element: IMathElement):
        '''Creates a math accent applying to a specified math element with the default accent character value
        :param element: a math element to apply accent'''
        ...

    def __init__(self, element: IMathElement, accent_character: char):
        '''Creates a math accent applying to a specified math element
        :param element: math element to apply accent
        :param accent_character: accent character'''
        ...

    @overload
    def join(self, math_element: IMathElement) -> IMathBlock:
        '''Joins a mathematical element and forms a mathematical block
        :param math_element: The element to be joined
        :returns: A new IMathBlock containing this instance and specified argument'''
        ...

    @overload
    def join(self, math_text: str) -> IMathBlock:
        '''Joins a mathematical text and forms a mathematical block
        :param math_text: Mathematical text to be joined
        :returns: A new IMathBlock containing this instance and specified argument'''
        ...

    @overload
    def divide(self, denominator: IMathElement) -> IMathFraction:
        '''Creates a fraction with this numerator and specified denominator
        :param denominator: Denominator
        :returns: new fraction'''
        ...

    @overload
    def divide(self, denominator: str) -> IMathFraction:
        '''Creates a fraction with this numerator and specified denominator
        :param denominator: Denominator
        :returns: new fraction'''
        ...

    @overload
    def divide(self, denominator: IMathElement, fraction_type: MathFractionTypes) -> IMathFraction:
        '''Creates a fraction of the specified type with this numerator and specified denominator
        :param denominator: Denominator
        :param fraction_type: Fraction type: Bar, NoBar, Skewed, Linear
        :returns: new fraction'''
        ...

    @overload
    def divide(self, denominator: str, fraction_type: MathFractionTypes) -> IMathFraction:
        '''Creates a fraction of the specified type with this numerator and specified denominator
        :param denominator: Denominator
        :param fraction_type: Fraction type: Bar, NoBar, Skewed, Linear
        :returns: new fraction'''
        ...

    @overload
    def enclose(self) -> IMathDelimiter:
        '''Encloses a math element in parenthesis
        :returns: The math element of type :py:class:`aspose.slides.mathtext.IMathDelimiter` which includes the parenthesis'''
        ...

    @overload
    def enclose(self, beginning_character: char, ending_character: char) -> IMathDelimiter:
        '''Encloses a math element in specified characters such as parenthesis or another characters as framing
        :param beginning_character: Beginning character (usually left bracket)
        :param ending_character: Ending character (usually right bracket)
        :returns: The math element of type :py:class:`aspose.slides.mathtext.IMathDelimiter` which includes specified characters as framing'''
        ...

    @overload
    def function(self, function_argument: IMathElement) -> IMathFunction:
        '''Takes a function of an argument using this instance as the function name
        :param function_argument: An argument of the function
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathFunction`'''
        ...

    @overload
    def function(self, function_argument: str) -> IMathFunction:
        '''Takes a function of an argument using this instance as the function name
        :param function_argument: An argument of the function
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathFunction`'''
        ...

    @overload
    def as_argument_of_function(self, function_name: IMathElement) -> IMathFunction:
        '''Takes specified function using this instance as the argument
        :param function_name: Function name
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathFunction`'''
        ...

    @overload
    def as_argument_of_function(self, function_name: str) -> IMathFunction:
        '''Takes specified function using this instance as the argument
        :param function_name: Function name
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathFunction`'''
        ...

    @overload
    def as_argument_of_function(self, function_type: MathFunctionsOfOneArgument) -> IMathFunction:
        '''Takes specified function using this instance as the argument
        :param function_type: One of the common function type of one argument
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathFunction`'''
        ...

    @overload
    def as_argument_of_function(self, function_type: MathFunctionsOfTwoArguments, additional_argument: IMathElement) -> IMathFunction:
        '''Takes specified function using this instance as the argument and specified additional argument
        :param function_type: One of the common function type of two arguments: Log, Lim, Min, Max
        :param additional_argument: Additional argument depending on the type of function
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathFunction`'''
        ...

    @overload
    def as_argument_of_function(self, function_type: MathFunctionsOfTwoArguments, additional_argument: str) -> IMathFunction:
        '''Takes specified function using this instance as the argument and specified additional argument
        :param function_type: One of the common function type of two arguments: Log, Lim, Min, Max
        :param additional_argument: Additional argument depending on the type of function
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathFunction`'''
        ...

    @overload
    def set_subscript(self, subscript: IMathElement) -> IMathSubscriptElement:
        '''Creates subscript
        :param subscript: Subscript (lower index on the right)
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathSubscriptElement`'''
        ...

    @overload
    def set_subscript(self, subscript: str) -> IMathSubscriptElement:
        '''Creates subscript
        :param subscript: Subscript (lower index on the right)
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathSubscriptElement`'''
        ...

    @overload
    def set_superscript(self, superscript: IMathElement) -> IMathSuperscriptElement:
        '''Creates superscript
        :param superscript: Superscript (upper index on the right)
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathSuperscriptElement`'''
        ...

    @overload
    def set_superscript(self, superscript: str) -> IMathSuperscriptElement:
        '''Creates superscript
        :param superscript: Superscript (upper index on the right)
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathSuperscriptElement`'''
        ...

    @overload
    def set_sub_superscript_on_the_right(self, subscript: IMathElement, superscript: IMathElement) -> IMathRightSubSuperscriptElement:
        '''Creates subscript and superscript on the right
        :param subscript: Subscript (lower index on the right)
        :param superscript: Superscript (upper index on the right)
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathRightSubSuperscriptElement`'''
        ...

    @overload
    def set_sub_superscript_on_the_right(self, subscript: str, superscript: str) -> IMathRightSubSuperscriptElement:
        '''Creates subscript and superscript on the right
        :param subscript: Subscript (lower index on the right)
        :param superscript: Superscript (upper index on the right)
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathRightSubSuperscriptElement`'''
        ...

    @overload
    def set_sub_superscript_on_the_left(self, subscript: IMathElement, superscript: IMathElement) -> IMathLeftSubSuperscriptElement:
        '''Creates subscript and superscript on the left
        :param subscript: Subscript (lower index on the left)
        :param superscript: Superscript (upper index on the left)
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathLeftSubSuperscriptElement`'''
        ...

    @overload
    def set_sub_superscript_on_the_left(self, subscript: str, superscript: str) -> IMathLeftSubSuperscriptElement:
        '''Creates subscript and superscript on the left
        :param subscript: Subscript (lower index on the left)
        :param superscript: Superscript (upper index on the left)
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathLeftSubSuperscriptElement`'''
        ...

    @overload
    def radical(self, degree: IMathElement) -> IMathRadical:
        '''Specifies the mathematical root of the given degree from the specified argument.
        :param degree: Argument of Radical
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathRadical`'''
        ...

    @overload
    def radical(self, degree: str) -> IMathRadical:
        '''Specifies the mathematical root of the given degree from the specified argument.
        :param degree: Argument of Radical
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathRadical`'''
        ...

    @overload
    def set_upper_limit(self, limit: IMathElement) -> IMathLimit:
        '''Takes upper limit
        :param limit: limit
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathLimit`'''
        ...

    @overload
    def set_upper_limit(self, limit: str) -> IMathLimit:
        '''Takes upper limit
        :param limit: limit
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathLimit`'''
        ...

    @overload
    def set_lower_limit(self, limit: IMathElement) -> IMathLimit:
        '''Takes lower limit
        :param limit: limit
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathLimit`'''
        ...

    @overload
    def set_lower_limit(self, limit: str) -> IMathLimit:
        '''Takes lower limit
        :param limit: limit
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathLimit`'''
        ...

    @overload
    def nary(self, type: MathNaryOperatorTypes, lower_limit: IMathElement, upper_limit: IMathElement) -> IMathNaryOperator:
        '''Creates a N-ary operator
        :param type: The N-ary operator type
        :param lower_limit: The lower limit
        :param upper_limit: The upper limit
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathNaryOperator`'''
        ...

    @overload
    def nary(self, type: MathNaryOperatorTypes, lower_limit: str, upper_limit: str) -> IMathNaryOperator:
        '''Creates a N-ary operator
        :param type: The N-ary operator type
        :param lower_limit: The lower limit
        :param upper_limit: The upper limit
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathNaryOperator`'''
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes, lower_limit: IMathElement, upper_limit: IMathElement, limit_locations: MathLimitLocations) -> IMathNaryOperator:
        '''Takes the integral
        :param integral_type: Integral type
        :param lower_limit: Lower limit of integral
        :param upper_limit: Upper limit of integral
        :param limit_locations: location of limits
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathNaryOperator`'''
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes, lower_limit: IMathElement, upper_limit: IMathElement) -> IMathNaryOperator:
        '''Takes the integral
        :param integral_type: Integral type
        :param lower_limit: Lower limit of integral
        :param upper_limit: Upper limit of integral
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathNaryOperator`'''
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes) -> IMathNaryOperator:
        '''Takes the integral without limits
        :param integral_type: Integral type
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathNaryOperator`'''
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes, lower_limit: str, upper_limit: str, limit_locations: MathLimitLocations) -> IMathNaryOperator:
        '''Takes the integral
        :param integral_type: Integral type
        :param lower_limit: Lower limit of integral
        :param upper_limit: Upper limit of integral
        :param limit_locations: location of limits
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathNaryOperator`'''
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes, lower_limit: str, upper_limit: str) -> IMathNaryOperator:
        '''Takes the integral
        :param integral_type: Integral type
        :param lower_limit: Lower limit of integral
        :param upper_limit: Upper limit of integral
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathNaryOperator`'''
        ...

    @overload
    def group(self) -> IMathGroupingCharacter:
        '''Places this element in a group using a bottom curly bracket
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathGroupingCharacter`'''
        ...

    @overload
    def group(self, character: char, position: MathTopBotPositions, vertical_justification: MathTopBotPositions) -> IMathGroupingCharacter:
        '''Places this element in a group using a grouping character such as bottom curly bracket or another
        :param character: Grouping Character such as BOTTOM CURLY BRACKET (U+23DF) or any other
        :param position: Position of grouping character
        :param vertical_justification: Vertical justification of group character.
                    Specifies the alignment of the object with respect to the baseline.
                    For example, when the group character is above the object, 
                    VerticalJustification of Top signifies that the top of the object falls on the baseline;
                    when VerticalJustification is set to Bottom, the bottom of the object is on the baseline
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathGroupingCharacter`'''
        ...

    @overload
    def to_border_box(self) -> IMathBorderBox:
        '''Places this element in a border-box
        :returns: Border-box with this element placed inside'''
        ...

    @overload
    def to_border_box(self, hide_top: bool, hide_bottom: bool, hide_left: bool, hide_right: bool, strikethrough_horizontal: bool, strikethrough_vertical: bool, strikethrough_bottom_left_to_top_right: bool, strikethrough_top_left_to_bottom_right: bool) -> IMathBorderBox:
        '''Places this element in a border-box
        :param hide_top: Hide Top Edge
        :param hide_bottom: Hide Bottom Edge
        :param hide_left: Hide Left Edge
        :param hide_right: Hide Right Edge
        :param strikethrough_horizontal: Border Box Strikethrough Horizontal
        :param strikethrough_vertical: Border Box Strikethrough Vertical
        :param strikethrough_bottom_left_to_top_right: Border Box Strikethrough Bottom-Left to Top-Right
        :param strikethrough_top_left_to_bottom_right: Border Box Strikethrough Top-Left to Bottom-Right
        :returns: Border-box with this element placed inside'''
        ...

    def to_math_array(self) -> IMathArray:
        '''Puts in a vertical array
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathArray`'''
        ...

    def accent(self, accent_character: char) -> IMathAccent:
        '''Sets an accent mark (a character on the top of this element)
        :param accent_character: Accent character. The value should be within the range of (U+0300–U+036F) or (U+20D0–U+20EF)
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathAccent`'''
        ...

    def overbar(self) -> IMathBar:
        '''Sets a bar on the top of this element
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathBar`'''
        ...

    def underbar(self) -> IMathBar:
        '''Sets a bar on the bottom of this element
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathBar`'''
        ...

    def to_box(self) -> IMathBox:
        '''Places this element in a non-visual box (logical grouping) 
                    which is used to group components of an equation or other instance of mathematical text.
                    A boxed object can (for example) serve as an operator emulator with or without an alignment point, 
                    serve as a line break point, or be grouped such as not to allow line breaks within.
        :returns: Logical box with this element placed inside'''
        ...

    def get_children(self) -> List[IMathElement]:
        '''Get children elements'''
        ...

    @property
    def base(self) -> IMathElement:
        '''The argument to which the accent was applied'''
        ...

    @property
    def character(self) -> char:
        '''Accent Character
                    The value should be within the range of (U+0300–U+036F) or(U+20D0–U+20EF)
                    Default value: Combining Circumflex Accent (U+0302)'''
        ...

    @character.setter
    def character(self, value: char):
        '''Accent Character
                    The value should be within the range of (U+0300–U+036F) or(U+20D0–U+20EF)
                    Default value: Combining Circumflex Accent (U+0302)'''
        ...

    @property
    def as_i_math_element(self) -> IMathElement:
        ...

    ...

class MathAccentFactory:
    '''Allows to create a math accent'''
    def __init__(self):
        ...

    @overload
    def create_math_accent(self, element: IMathElement) -> IMathAccent:
        '''Creates a math accent applying to a specified math element with the default accent character value
        :param element: math element to apply accent
        :returns: new math accent'''
        ...

    @overload
    def create_math_accent(self, element: IMathElement, accent_character: char) -> IMathAccent:
        '''Creates a math accent applying to a specified math element
        :param element: math element to apply accent
        :param accent_character: accent character
        :returns: new math accent'''
        ...

    ...

class MathArray(MathElementBase):
    '''Specifies a vertical array of equations or any mathematical objects'''
    def __init__(self, element: IMathElement):
        '''Creates a mathematical array and places the specified element in it
        :param element: The element to place in the array'''
        ...

    def __init__(self, elements: Iterable[IMathElement]):
        ...

    @overload
    def join(self, math_element: IMathElement) -> IMathBlock:
        '''Joins a mathematical element and forms a mathematical block
        :param math_element: The element to be joined
        :returns: A new IMathBlock containing this instance and specified argument'''
        ...

    @overload
    def join(self, math_text: str) -> IMathBlock:
        '''Joins a mathematical text and forms a mathematical block
        :param math_text: Mathematical text to be joined
        :returns: A new IMathBlock containing this instance and specified argument'''
        ...

    @overload
    def divide(self, denominator: IMathElement) -> IMathFraction:
        '''Creates a fraction with this numerator and specified denominator
        :param denominator: Denominator
        :returns: new fraction'''
        ...

    @overload
    def divide(self, denominator: str) -> IMathFraction:
        '''Creates a fraction with this numerator and specified denominator
        :param denominator: Denominator
        :returns: new fraction'''
        ...

    @overload
    def divide(self, denominator: IMathElement, fraction_type: MathFractionTypes) -> IMathFraction:
        '''Creates a fraction of the specified type with this numerator and specified denominator
        :param denominator: Denominator
        :param fraction_type: Fraction type: Bar, NoBar, Skewed, Linear
        :returns: new fraction'''
        ...

    @overload
    def divide(self, denominator: str, fraction_type: MathFractionTypes) -> IMathFraction:
        '''Creates a fraction of the specified type with this numerator and specified denominator
        :param denominator: Denominator
        :param fraction_type: Fraction type: Bar, NoBar, Skewed, Linear
        :returns: new fraction'''
        ...

    @overload
    def enclose(self) -> IMathDelimiter:
        '''Encloses a math element in parenthesis
        :returns: The math element of type :py:class:`aspose.slides.mathtext.IMathDelimiter` which includes the parenthesis'''
        ...

    @overload
    def enclose(self, beginning_character: char, ending_character: char) -> IMathDelimiter:
        '''Encloses a math element in specified characters such as parenthesis or another characters as framing
        :param beginning_character: Beginning character (usually left bracket)
        :param ending_character: Ending character (usually right bracket)
        :returns: The math element of type :py:class:`aspose.slides.mathtext.IMathDelimiter` which includes specified characters as framing'''
        ...

    @overload
    def function(self, function_argument: IMathElement) -> IMathFunction:
        '''Takes a function of an argument using this instance as the function name
        :param function_argument: An argument of the function
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathFunction`'''
        ...

    @overload
    def function(self, function_argument: str) -> IMathFunction:
        '''Takes a function of an argument using this instance as the function name
        :param function_argument: An argument of the function
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathFunction`'''
        ...

    @overload
    def as_argument_of_function(self, function_name: IMathElement) -> IMathFunction:
        '''Takes specified function using this instance as the argument
        :param function_name: Function name
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathFunction`'''
        ...

    @overload
    def as_argument_of_function(self, function_name: str) -> IMathFunction:
        '''Takes specified function using this instance as the argument
        :param function_name: Function name
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathFunction`'''
        ...

    @overload
    def as_argument_of_function(self, function_type: MathFunctionsOfOneArgument) -> IMathFunction:
        '''Takes specified function using this instance as the argument
        :param function_type: One of the common function type of one argument
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathFunction`'''
        ...

    @overload
    def as_argument_of_function(self, function_type: MathFunctionsOfTwoArguments, additional_argument: IMathElement) -> IMathFunction:
        '''Takes specified function using this instance as the argument and specified additional argument
        :param function_type: One of the common function type of two arguments: Log, Lim, Min, Max
        :param additional_argument: Additional argument depending on the type of function
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathFunction`'''
        ...

    @overload
    def as_argument_of_function(self, function_type: MathFunctionsOfTwoArguments, additional_argument: str) -> IMathFunction:
        '''Takes specified function using this instance as the argument and specified additional argument
        :param function_type: One of the common function type of two arguments: Log, Lim, Min, Max
        :param additional_argument: Additional argument depending on the type of function
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathFunction`'''
        ...

    @overload
    def set_subscript(self, subscript: IMathElement) -> IMathSubscriptElement:
        '''Creates subscript
        :param subscript: Subscript (lower index on the right)
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathSubscriptElement`'''
        ...

    @overload
    def set_subscript(self, subscript: str) -> IMathSubscriptElement:
        '''Creates subscript
        :param subscript: Subscript (lower index on the right)
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathSubscriptElement`'''
        ...

    @overload
    def set_superscript(self, superscript: IMathElement) -> IMathSuperscriptElement:
        '''Creates superscript
        :param superscript: Superscript (upper index on the right)
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathSuperscriptElement`'''
        ...

    @overload
    def set_superscript(self, superscript: str) -> IMathSuperscriptElement:
        '''Creates superscript
        :param superscript: Superscript (upper index on the right)
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathSuperscriptElement`'''
        ...

    @overload
    def set_sub_superscript_on_the_right(self, subscript: IMathElement, superscript: IMathElement) -> IMathRightSubSuperscriptElement:
        '''Creates subscript and superscript on the right
        :param subscript: Subscript (lower index on the right)
        :param superscript: Superscript (upper index on the right)
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathRightSubSuperscriptElement`'''
        ...

    @overload
    def set_sub_superscript_on_the_right(self, subscript: str, superscript: str) -> IMathRightSubSuperscriptElement:
        '''Creates subscript and superscript on the right
        :param subscript: Subscript (lower index on the right)
        :param superscript: Superscript (upper index on the right)
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathRightSubSuperscriptElement`'''
        ...

    @overload
    def set_sub_superscript_on_the_left(self, subscript: IMathElement, superscript: IMathElement) -> IMathLeftSubSuperscriptElement:
        '''Creates subscript and superscript on the left
        :param subscript: Subscript (lower index on the left)
        :param superscript: Superscript (upper index on the left)
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathLeftSubSuperscriptElement`'''
        ...

    @overload
    def set_sub_superscript_on_the_left(self, subscript: str, superscript: str) -> IMathLeftSubSuperscriptElement:
        '''Creates subscript and superscript on the left
        :param subscript: Subscript (lower index on the left)
        :param superscript: Superscript (upper index on the left)
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathLeftSubSuperscriptElement`'''
        ...

    @overload
    def radical(self, degree: IMathElement) -> IMathRadical:
        '''Specifies the mathematical root of the given degree from the specified argument.
        :param degree: Argument of Radical
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathRadical`'''
        ...

    @overload
    def radical(self, degree: str) -> IMathRadical:
        '''Specifies the mathematical root of the given degree from the specified argument.
        :param degree: Argument of Radical
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathRadical`'''
        ...

    @overload
    def set_upper_limit(self, limit: IMathElement) -> IMathLimit:
        '''Takes upper limit
        :param limit: limit
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathLimit`'''
        ...

    @overload
    def set_upper_limit(self, limit: str) -> IMathLimit:
        '''Takes upper limit
        :param limit: limit
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathLimit`'''
        ...

    @overload
    def set_lower_limit(self, limit: IMathElement) -> IMathLimit:
        '''Takes lower limit
        :param limit: limit
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathLimit`'''
        ...

    @overload
    def set_lower_limit(self, limit: str) -> IMathLimit:
        '''Takes lower limit
        :param limit: limit
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathLimit`'''
        ...

    @overload
    def nary(self, type: MathNaryOperatorTypes, lower_limit: IMathElement, upper_limit: IMathElement) -> IMathNaryOperator:
        '''Creates a N-ary operator
        :param type: The N-ary operator type
        :param lower_limit: The lower limit
        :param upper_limit: The upper limit
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathNaryOperator`'''
        ...

    @overload
    def nary(self, type: MathNaryOperatorTypes, lower_limit: str, upper_limit: str) -> IMathNaryOperator:
        '''Creates a N-ary operator
        :param type: The N-ary operator type
        :param lower_limit: The lower limit
        :param upper_limit: The upper limit
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathNaryOperator`'''
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes, lower_limit: IMathElement, upper_limit: IMathElement, limit_locations: MathLimitLocations) -> IMathNaryOperator:
        '''Takes the integral
        :param integral_type: Integral type
        :param lower_limit: Lower limit of integral
        :param upper_limit: Upper limit of integral
        :param limit_locations: location of limits
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathNaryOperator`'''
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes, lower_limit: IMathElement, upper_limit: IMathElement) -> IMathNaryOperator:
        '''Takes the integral
        :param integral_type: Integral type
        :param lower_limit: Lower limit of integral
        :param upper_limit: Upper limit of integral
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathNaryOperator`'''
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes) -> IMathNaryOperator:
        '''Takes the integral without limits
        :param integral_type: Integral type
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathNaryOperator`'''
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes, lower_limit: str, upper_limit: str, limit_locations: MathLimitLocations) -> IMathNaryOperator:
        '''Takes the integral
        :param integral_type: Integral type
        :param lower_limit: Lower limit of integral
        :param upper_limit: Upper limit of integral
        :param limit_locations: location of limits
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathNaryOperator`'''
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes, lower_limit: str, upper_limit: str) -> IMathNaryOperator:
        '''Takes the integral
        :param integral_type: Integral type
        :param lower_limit: Lower limit of integral
        :param upper_limit: Upper limit of integral
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathNaryOperator`'''
        ...

    @overload
    def group(self) -> IMathGroupingCharacter:
        '''Places this element in a group using a bottom curly bracket
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathGroupingCharacter`'''
        ...

    @overload
    def group(self, character: char, position: MathTopBotPositions, vertical_justification: MathTopBotPositions) -> IMathGroupingCharacter:
        '''Places this element in a group using a grouping character such as bottom curly bracket or another
        :param character: Grouping Character such as BOTTOM CURLY BRACKET (U+23DF) or any other
        :param position: Position of grouping character
        :param vertical_justification: Vertical justification of group character.
                    Specifies the alignment of the object with respect to the baseline.
                    For example, when the group character is above the object, 
                    VerticalJustification of Top signifies that the top of the object falls on the baseline;
                    when VerticalJustification is set to Bottom, the bottom of the object is on the baseline
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathGroupingCharacter`'''
        ...

    @overload
    def to_border_box(self) -> IMathBorderBox:
        '''Places this element in a border-box
        :returns: Border-box with this element placed inside'''
        ...

    @overload
    def to_border_box(self, hide_top: bool, hide_bottom: bool, hide_left: bool, hide_right: bool, strikethrough_horizontal: bool, strikethrough_vertical: bool, strikethrough_bottom_left_to_top_right: bool, strikethrough_top_left_to_bottom_right: bool) -> IMathBorderBox:
        '''Places this element in a border-box
        :param hide_top: Hide Top Edge
        :param hide_bottom: Hide Bottom Edge
        :param hide_left: Hide Left Edge
        :param hide_right: Hide Right Edge
        :param strikethrough_horizontal: Border Box Strikethrough Horizontal
        :param strikethrough_vertical: Border Box Strikethrough Vertical
        :param strikethrough_bottom_left_to_top_right: Border Box Strikethrough Bottom-Left to Top-Right
        :param strikethrough_top_left_to_bottom_right: Border Box Strikethrough Top-Left to Bottom-Right
        :returns: Border-box with this element placed inside'''
        ...

    def to_math_array(self) -> IMathArray:
        '''Puts in a vertical array
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathArray`'''
        ...

    def accent(self, accent_character: char) -> IMathAccent:
        '''Sets an accent mark (a character on the top of this element)
        :param accent_character: Accent character. The value should be within the range of (U+0300–U+036F) or (U+20D0–U+20EF)
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathAccent`'''
        ...

    def overbar(self) -> IMathBar:
        '''Sets a bar on the top of this element
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathBar`'''
        ...

    def underbar(self) -> IMathBar:
        '''Sets a bar on the bottom of this element
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathBar`'''
        ...

    def to_box(self) -> IMathBox:
        '''Places this element in a non-visual box (logical grouping) 
                    which is used to group components of an equation or other instance of mathematical text.
                    A boxed object can (for example) serve as an operator emulator with or without an alignment point, 
                    serve as a line break point, or be grouped such as not to allow line breaks within.
        :returns: Logical box with this element placed inside'''
        ...

    def get_children(self) -> List[IMathElement]:
        '''Get children elements'''
        ...

    @property
    def arguments(self) -> IMathElementCollection:
        '''The set of items of the array'''
        ...

    @property
    def base_justification(self) -> MathVerticalAlignment:
        ...

    @base_justification.setter
    def base_justification(self, value: MathVerticalAlignment):
        ...

    @property
    def maximum_distribution(self) -> bool:
        ...

    @maximum_distribution.setter
    def maximum_distribution(self, value: bool):
        ...

    @property
    def object_distribution(self) -> bool:
        ...

    @object_distribution.setter
    def object_distribution(self, value: bool):
        ...

    @property
    def row_spacing_rule(self) -> MathRowSpacingRule:
        ...

    @row_spacing_rule.setter
    def row_spacing_rule(self, value: MathRowSpacingRule):
        ...

    @property
    def row_spacing(self) -> int:
        ...

    @row_spacing.setter
    def row_spacing(self, value: int):
        ...

    @property
    def as_i_math_element(self) -> IMathElement:
        ...

    ...

class MathArrayFactory:
    '''Allows to create a math array'''
    def __init__(self):
        ...

    @overload
    def create_math_array(self, element: IMathElement) -> IMathArray:
        '''Creates a math array and places the specified element in it
        :param element: math element to place in array
        :returns: new math array'''
        ...

    @overload
    def create_math_array(self, elements: IMathElementCollection) -> IMathArray:
        '''Creates a math array and places specified elements in it
        :param elements: math elements to place in array
        :returns: new math array'''
        ...

    ...

class MathBar(MathElementBase):
    '''Specifies the bar function, consisting of a base argument and an overbar or underbar'''
    def __init__(self, element: IMathElement):
        '''Initializes MathBar with overbar (Top position)
        :param element: The base element to which the bar is applied'''
        ...

    def __init__(self, element: IMathElement, position: MathTopBotPositions):
        '''Initializes MathBar with specified position
        :param element: The base element to which the bar is applied
        :param position: Position of the bar line.'''
        ...

    @overload
    def join(self, math_element: IMathElement) -> IMathBlock:
        '''Joins a mathematical element and forms a mathematical block
        :param math_element: The element to be joined
        :returns: A new IMathBlock containing this instance and specified argument'''
        ...

    @overload
    def join(self, math_text: str) -> IMathBlock:
        '''Joins a mathematical text and forms a mathematical block
        :param math_text: Mathematical text to be joined
        :returns: A new IMathBlock containing this instance and specified argument'''
        ...

    @overload
    def divide(self, denominator: IMathElement) -> IMathFraction:
        '''Creates a fraction with this numerator and specified denominator
        :param denominator: Denominator
        :returns: new fraction'''
        ...

    @overload
    def divide(self, denominator: str) -> IMathFraction:
        '''Creates a fraction with this numerator and specified denominator
        :param denominator: Denominator
        :returns: new fraction'''
        ...

    @overload
    def divide(self, denominator: IMathElement, fraction_type: MathFractionTypes) -> IMathFraction:
        '''Creates a fraction of the specified type with this numerator and specified denominator
        :param denominator: Denominator
        :param fraction_type: Fraction type: Bar, NoBar, Skewed, Linear
        :returns: new fraction'''
        ...

    @overload
    def divide(self, denominator: str, fraction_type: MathFractionTypes) -> IMathFraction:
        '''Creates a fraction of the specified type with this numerator and specified denominator
        :param denominator: Denominator
        :param fraction_type: Fraction type: Bar, NoBar, Skewed, Linear
        :returns: new fraction'''
        ...

    @overload
    def enclose(self) -> IMathDelimiter:
        '''Encloses a math element in parenthesis
        :returns: The math element of type :py:class:`aspose.slides.mathtext.IMathDelimiter` which includes the parenthesis'''
        ...

    @overload
    def enclose(self, beginning_character: char, ending_character: char) -> IMathDelimiter:
        '''Encloses a math element in specified characters such as parenthesis or another characters as framing
        :param beginning_character: Beginning character (usually left bracket)
        :param ending_character: Ending character (usually right bracket)
        :returns: The math element of type :py:class:`aspose.slides.mathtext.IMathDelimiter` which includes specified characters as framing'''
        ...

    @overload
    def function(self, function_argument: IMathElement) -> IMathFunction:
        '''Takes a function of an argument using this instance as the function name
        :param function_argument: An argument of the function
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathFunction`'''
        ...

    @overload
    def function(self, function_argument: str) -> IMathFunction:
        '''Takes a function of an argument using this instance as the function name
        :param function_argument: An argument of the function
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathFunction`'''
        ...

    @overload
    def as_argument_of_function(self, function_name: IMathElement) -> IMathFunction:
        '''Takes specified function using this instance as the argument
        :param function_name: Function name
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathFunction`'''
        ...

    @overload
    def as_argument_of_function(self, function_name: str) -> IMathFunction:
        '''Takes specified function using this instance as the argument
        :param function_name: Function name
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathFunction`'''
        ...

    @overload
    def as_argument_of_function(self, function_type: MathFunctionsOfOneArgument) -> IMathFunction:
        '''Takes specified function using this instance as the argument
        :param function_type: One of the common function type of one argument
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathFunction`'''
        ...

    @overload
    def as_argument_of_function(self, function_type: MathFunctionsOfTwoArguments, additional_argument: IMathElement) -> IMathFunction:
        '''Takes specified function using this instance as the argument and specified additional argument
        :param function_type: One of the common function type of two arguments: Log, Lim, Min, Max
        :param additional_argument: Additional argument depending on the type of function
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathFunction`'''
        ...

    @overload
    def as_argument_of_function(self, function_type: MathFunctionsOfTwoArguments, additional_argument: str) -> IMathFunction:
        '''Takes specified function using this instance as the argument and specified additional argument
        :param function_type: One of the common function type of two arguments: Log, Lim, Min, Max
        :param additional_argument: Additional argument depending on the type of function
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathFunction`'''
        ...

    @overload
    def set_subscript(self, subscript: IMathElement) -> IMathSubscriptElement:
        '''Creates subscript
        :param subscript: Subscript (lower index on the right)
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathSubscriptElement`'''
        ...

    @overload
    def set_subscript(self, subscript: str) -> IMathSubscriptElement:
        '''Creates subscript
        :param subscript: Subscript (lower index on the right)
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathSubscriptElement`'''
        ...

    @overload
    def set_superscript(self, superscript: IMathElement) -> IMathSuperscriptElement:
        '''Creates superscript
        :param superscript: Superscript (upper index on the right)
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathSuperscriptElement`'''
        ...

    @overload
    def set_superscript(self, superscript: str) -> IMathSuperscriptElement:
        '''Creates superscript
        :param superscript: Superscript (upper index on the right)
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathSuperscriptElement`'''
        ...

    @overload
    def set_sub_superscript_on_the_right(self, subscript: IMathElement, superscript: IMathElement) -> IMathRightSubSuperscriptElement:
        '''Creates subscript and superscript on the right
        :param subscript: Subscript (lower index on the right)
        :param superscript: Superscript (upper index on the right)
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathRightSubSuperscriptElement`'''
        ...

    @overload
    def set_sub_superscript_on_the_right(self, subscript: str, superscript: str) -> IMathRightSubSuperscriptElement:
        '''Creates subscript and superscript on the right
        :param subscript: Subscript (lower index on the right)
        :param superscript: Superscript (upper index on the right)
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathRightSubSuperscriptElement`'''
        ...

    @overload
    def set_sub_superscript_on_the_left(self, subscript: IMathElement, superscript: IMathElement) -> IMathLeftSubSuperscriptElement:
        '''Creates subscript and superscript on the left
        :param subscript: Subscript (lower index on the left)
        :param superscript: Superscript (upper index on the left)
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathLeftSubSuperscriptElement`'''
        ...

    @overload
    def set_sub_superscript_on_the_left(self, subscript: str, superscript: str) -> IMathLeftSubSuperscriptElement:
        '''Creates subscript and superscript on the left
        :param subscript: Subscript (lower index on the left)
        :param superscript: Superscript (upper index on the left)
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathLeftSubSuperscriptElement`'''
        ...

    @overload
    def radical(self, degree: IMathElement) -> IMathRadical:
        '''Specifies the mathematical root of the given degree from the specified argument.
        :param degree: Argument of Radical
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathRadical`'''
        ...

    @overload
    def radical(self, degree: str) -> IMathRadical:
        '''Specifies the mathematical root of the given degree from the specified argument.
        :param degree: Argument of Radical
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathRadical`'''
        ...

    @overload
    def set_upper_limit(self, limit: IMathElement) -> IMathLimit:
        '''Takes upper limit
        :param limit: limit
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathLimit`'''
        ...

    @overload
    def set_upper_limit(self, limit: str) -> IMathLimit:
        '''Takes upper limit
        :param limit: limit
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathLimit`'''
        ...

    @overload
    def set_lower_limit(self, limit: IMathElement) -> IMathLimit:
        '''Takes lower limit
        :param limit: limit
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathLimit`'''
        ...

    @overload
    def set_lower_limit(self, limit: str) -> IMathLimit:
        '''Takes lower limit
        :param limit: limit
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathLimit`'''
        ...

    @overload
    def nary(self, type: MathNaryOperatorTypes, lower_limit: IMathElement, upper_limit: IMathElement) -> IMathNaryOperator:
        '''Creates a N-ary operator
        :param type: The N-ary operator type
        :param lower_limit: The lower limit
        :param upper_limit: The upper limit
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathNaryOperator`'''
        ...

    @overload
    def nary(self, type: MathNaryOperatorTypes, lower_limit: str, upper_limit: str) -> IMathNaryOperator:
        '''Creates a N-ary operator
        :param type: The N-ary operator type
        :param lower_limit: The lower limit
        :param upper_limit: The upper limit
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathNaryOperator`'''
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes, lower_limit: IMathElement, upper_limit: IMathElement, limit_locations: MathLimitLocations) -> IMathNaryOperator:
        '''Takes the integral
        :param integral_type: Integral type
        :param lower_limit: Lower limit of integral
        :param upper_limit: Upper limit of integral
        :param limit_locations: location of limits
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathNaryOperator`'''
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes, lower_limit: IMathElement, upper_limit: IMathElement) -> IMathNaryOperator:
        '''Takes the integral
        :param integral_type: Integral type
        :param lower_limit: Lower limit of integral
        :param upper_limit: Upper limit of integral
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathNaryOperator`'''
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes) -> IMathNaryOperator:
        '''Takes the integral without limits
        :param integral_type: Integral type
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathNaryOperator`'''
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes, lower_limit: str, upper_limit: str, limit_locations: MathLimitLocations) -> IMathNaryOperator:
        '''Takes the integral
        :param integral_type: Integral type
        :param lower_limit: Lower limit of integral
        :param upper_limit: Upper limit of integral
        :param limit_locations: location of limits
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathNaryOperator`'''
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes, lower_limit: str, upper_limit: str) -> IMathNaryOperator:
        '''Takes the integral
        :param integral_type: Integral type
        :param lower_limit: Lower limit of integral
        :param upper_limit: Upper limit of integral
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathNaryOperator`'''
        ...

    @overload
    def group(self) -> IMathGroupingCharacter:
        '''Places this element in a group using a bottom curly bracket
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathGroupingCharacter`'''
        ...

    @overload
    def group(self, character: char, position: MathTopBotPositions, vertical_justification: MathTopBotPositions) -> IMathGroupingCharacter:
        '''Places this element in a group using a grouping character such as bottom curly bracket or another
        :param character: Grouping Character such as BOTTOM CURLY BRACKET (U+23DF) or any other
        :param position: Position of grouping character
        :param vertical_justification: Vertical justification of group character.
                    Specifies the alignment of the object with respect to the baseline.
                    For example, when the group character is above the object, 
                    VerticalJustification of Top signifies that the top of the object falls on the baseline;
                    when VerticalJustification is set to Bottom, the bottom of the object is on the baseline
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathGroupingCharacter`'''
        ...

    @overload
    def to_border_box(self) -> IMathBorderBox:
        '''Places this element in a border-box
        :returns: Border-box with this element placed inside'''
        ...

    @overload
    def to_border_box(self, hide_top: bool, hide_bottom: bool, hide_left: bool, hide_right: bool, strikethrough_horizontal: bool, strikethrough_vertical: bool, strikethrough_bottom_left_to_top_right: bool, strikethrough_top_left_to_bottom_right: bool) -> IMathBorderBox:
        '''Places this element in a border-box
        :param hide_top: Hide Top Edge
        :param hide_bottom: Hide Bottom Edge
        :param hide_left: Hide Left Edge
        :param hide_right: Hide Right Edge
        :param strikethrough_horizontal: Border Box Strikethrough Horizontal
        :param strikethrough_vertical: Border Box Strikethrough Vertical
        :param strikethrough_bottom_left_to_top_right: Border Box Strikethrough Bottom-Left to Top-Right
        :param strikethrough_top_left_to_bottom_right: Border Box Strikethrough Top-Left to Bottom-Right
        :returns: Border-box with this element placed inside'''
        ...

    def to_math_array(self) -> IMathArray:
        '''Puts in a vertical array
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathArray`'''
        ...

    def accent(self, accent_character: char) -> IMathAccent:
        '''Sets an accent mark (a character on the top of this element)
        :param accent_character: Accent character. The value should be within the range of (U+0300–U+036F) or (U+20D0–U+20EF)
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathAccent`'''
        ...

    def overbar(self) -> IMathBar:
        '''Sets a bar on the top of this element
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathBar`'''
        ...

    def underbar(self) -> IMathBar:
        '''Sets a bar on the bottom of this element
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathBar`'''
        ...

    def to_box(self) -> IMathBox:
        '''Places this element in a non-visual box (logical grouping) 
                    which is used to group components of an equation or other instance of mathematical text.
                    A boxed object can (for example) serve as an operator emulator with or without an alignment point, 
                    serve as a line break point, or be grouped such as not to allow line breaks within.
        :returns: Logical box with this element placed inside'''
        ...

    def get_children(self) -> List[IMathElement]:
        '''Get children elements'''
        ...

    @property
    def base(self) -> IMathElement:
        '''Base argument'''
        ...

    @property
    def position(self) -> MathTopBotPositions:
        '''Position of the bar line. 
                    Default: Top'''
        ...

    @position.setter
    def position(self, value: MathTopBotPositions):
        '''Position of the bar line. 
                    Default: Top'''
        ...

    @property
    def as_i_math_element(self) -> IMathElement:
        ...

    ...

class MathBarFactory:
    '''Allows to create a math bar'''
    def __init__(self):
        ...

    @overload
    def create_math_bar(self, element: IMathElement) -> IMathBar:
        '''Create a math bar by applying to the element
        :param element: math element to apply bar
        :returns: new math bar element'''
        ...

    @overload
    def create_math_bar(self, element: IMathElement, position: MathTopBotPositions) -> IMathBar:
        '''Create a math bar by applying to the element
        :param element: Math element to apply bar
        :param position: Position of the bar
        :returns: new math bar element'''
        ...

    ...

class MathBlock(MathElementBase):
    '''Specifies an instance of mathematical text that contained within a MathParagraph and starts on its own line.
                All math zones, including equations, expressions, arrays of equations or expressions, and formulas are represented by math block.'''
    def __init__(self):
        '''Initializes a new instance of the MathBlock class.'''
        ...

    def __init__(self, math_element: IMathElement):
        '''Creates a new mathematical block and puts specified element in it
        :param math_element: The mathematical element to put in the block'''
        ...

    def __init__(self, math_elements: Iterable[IMathElement]):
        ...

    @overload
    def join(self, math_element: IMathElement) -> IMathBlock:
        '''Joins a mathematical element with this mathematical block
        :param math_element: The element to be joined
        :returns: The current instance of IMathBlock'''
        ...

    @overload
    def join(self, math_text: str) -> IMathBlock:
        '''Joins a mathematical text with this mathematical block
        :param math_text: Mathematical text to be joined
        :returns: A new IMathBlock containing this instance and specified argument'''
        ...

    @overload
    def divide(self, denominator: IMathElement) -> IMathFraction:
        '''Creates a fraction with this numerator and specified denominator
        :param denominator: Denominator
        :returns: new fraction'''
        ...

    @overload
    def divide(self, denominator: str) -> IMathFraction:
        '''Creates a fraction with this numerator and specified denominator
        :param denominator: Denominator
        :returns: new fraction'''
        ...

    @overload
    def divide(self, denominator: IMathElement, fraction_type: MathFractionTypes) -> IMathFraction:
        '''Creates a fraction of the specified type with this numerator and specified denominator
        :param denominator: Denominator
        :param fraction_type: Fraction type: Bar, NoBar, Skewed, Linear
        :returns: new fraction'''
        ...

    @overload
    def divide(self, denominator: str, fraction_type: MathFractionTypes) -> IMathFraction:
        '''Creates a fraction of the specified type with this numerator and specified denominator
        :param denominator: Denominator
        :param fraction_type: Fraction type: Bar, NoBar, Skewed, Linear
        :returns: new fraction'''
        ...

    @overload
    def enclose(self, beginning_character: char, ending_character: char) -> IMathDelimiter:
        '''Encloses child elements of this block in specified characters such as parenthesis or another characters as framing
        :param beginning_character: Beginning character (usually left bracket)
        :param ending_character: Ending character (usually right bracket)
        :returns: The math element of type :py:class:`aspose.slides.mathtext.IMathDelimiter` which includes specified characters as framing'''
        ...

    @overload
    def enclose(self, beginning_character: char, ending_character: char, separator_character: char) -> IMathDelimiter:
        '''Encloses child elements of this block in specified characters such as parenthesis or another as framing
                    and delimit with a separator character
        :param beginning_character: Beginning character (usually left bracket)
        :param ending_character: Ending character (usually right bracket)
        :param separator_character: Separator character
        :returns: The math element of type :py:class:`aspose.slides.mathtext.IMathDelimiter` which includes specified characters as framing and delimiter'''
        ...

    @overload
    def enclose(self) -> IMathDelimiter:
        '''Encloses a math element in parenthesis
        :returns: The math element of type :py:class:`aspose.slides.mathtext.IMathDelimiter` which includes the parenthesis'''
        ...

    @overload
    def function(self, function_argument: IMathElement) -> IMathFunction:
        '''Takes a function of an argument using this instance as the function name
        :param function_argument: An argument of the function
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathFunction`'''
        ...

    @overload
    def function(self, function_argument: str) -> IMathFunction:
        '''Takes a function of an argument using this instance as the function name
        :param function_argument: An argument of the function
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathFunction`'''
        ...

    @overload
    def as_argument_of_function(self, function_name: IMathElement) -> IMathFunction:
        '''Takes specified function using this instance as the argument
        :param function_name: Function name
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathFunction`'''
        ...

    @overload
    def as_argument_of_function(self, function_name: str) -> IMathFunction:
        '''Takes specified function using this instance as the argument
        :param function_name: Function name
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathFunction`'''
        ...

    @overload
    def as_argument_of_function(self, function_type: MathFunctionsOfOneArgument) -> IMathFunction:
        '''Takes specified function using this instance as the argument
        :param function_type: One of the common function type of one argument
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathFunction`'''
        ...

    @overload
    def as_argument_of_function(self, function_type: MathFunctionsOfTwoArguments, additional_argument: IMathElement) -> IMathFunction:
        '''Takes specified function using this instance as the argument and specified additional argument
        :param function_type: One of the common function type of two arguments: Log, Lim, Min, Max
        :param additional_argument: Additional argument depending on the type of function
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathFunction`'''
        ...

    @overload
    def as_argument_of_function(self, function_type: MathFunctionsOfTwoArguments, additional_argument: str) -> IMathFunction:
        '''Takes specified function using this instance as the argument and specified additional argument
        :param function_type: One of the common function type of two arguments: Log, Lim, Min, Max
        :param additional_argument: Additional argument depending on the type of function
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathFunction`'''
        ...

    @overload
    def set_subscript(self, subscript: IMathElement) -> IMathSubscriptElement:
        '''Creates subscript
        :param subscript: Subscript (lower index on the right)
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathSubscriptElement`'''
        ...

    @overload
    def set_subscript(self, subscript: str) -> IMathSubscriptElement:
        '''Creates subscript
        :param subscript: Subscript (lower index on the right)
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathSubscriptElement`'''
        ...

    @overload
    def set_superscript(self, superscript: IMathElement) -> IMathSuperscriptElement:
        '''Creates superscript
        :param superscript: Superscript (upper index on the right)
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathSuperscriptElement`'''
        ...

    @overload
    def set_superscript(self, superscript: str) -> IMathSuperscriptElement:
        '''Creates superscript
        :param superscript: Superscript (upper index on the right)
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathSuperscriptElement`'''
        ...

    @overload
    def set_sub_superscript_on_the_right(self, subscript: IMathElement, superscript: IMathElement) -> IMathRightSubSuperscriptElement:
        '''Creates subscript and superscript on the right
        :param subscript: Subscript (lower index on the right)
        :param superscript: Superscript (upper index on the right)
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathRightSubSuperscriptElement`'''
        ...

    @overload
    def set_sub_superscript_on_the_right(self, subscript: str, superscript: str) -> IMathRightSubSuperscriptElement:
        '''Creates subscript and superscript on the right
        :param subscript: Subscript (lower index on the right)
        :param superscript: Superscript (upper index on the right)
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathRightSubSuperscriptElement`'''
        ...

    @overload
    def set_sub_superscript_on_the_left(self, subscript: IMathElement, superscript: IMathElement) -> IMathLeftSubSuperscriptElement:
        '''Creates subscript and superscript on the left
        :param subscript: Subscript (lower index on the left)
        :param superscript: Superscript (upper index on the left)
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathLeftSubSuperscriptElement`'''
        ...

    @overload
    def set_sub_superscript_on_the_left(self, subscript: str, superscript: str) -> IMathLeftSubSuperscriptElement:
        '''Creates subscript and superscript on the left
        :param subscript: Subscript (lower index on the left)
        :param superscript: Superscript (upper index on the left)
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathLeftSubSuperscriptElement`'''
        ...

    @overload
    def radical(self, degree: IMathElement) -> IMathRadical:
        '''Specifies the mathematical root of the given degree from the specified argument.
        :param degree: Argument of Radical
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathRadical`'''
        ...

    @overload
    def radical(self, degree: str) -> IMathRadical:
        '''Specifies the mathematical root of the given degree from the specified argument.
        :param degree: Argument of Radical
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathRadical`'''
        ...

    @overload
    def set_upper_limit(self, limit: IMathElement) -> IMathLimit:
        '''Takes upper limit
        :param limit: limit
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathLimit`'''
        ...

    @overload
    def set_upper_limit(self, limit: str) -> IMathLimit:
        '''Takes upper limit
        :param limit: limit
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathLimit`'''
        ...

    @overload
    def set_lower_limit(self, limit: IMathElement) -> IMathLimit:
        '''Takes lower limit
        :param limit: limit
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathLimit`'''
        ...

    @overload
    def set_lower_limit(self, limit: str) -> IMathLimit:
        '''Takes lower limit
        :param limit: limit
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathLimit`'''
        ...

    @overload
    def nary(self, type: MathNaryOperatorTypes, lower_limit: IMathElement, upper_limit: IMathElement) -> IMathNaryOperator:
        '''Creates a N-ary operator
        :param type: The N-ary operator type
        :param lower_limit: The lower limit
        :param upper_limit: The upper limit
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathNaryOperator`'''
        ...

    @overload
    def nary(self, type: MathNaryOperatorTypes, lower_limit: str, upper_limit: str) -> IMathNaryOperator:
        '''Creates a N-ary operator
        :param type: The N-ary operator type
        :param lower_limit: The lower limit
        :param upper_limit: The upper limit
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathNaryOperator`'''
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes, lower_limit: IMathElement, upper_limit: IMathElement, limit_locations: MathLimitLocations) -> IMathNaryOperator:
        '''Takes the integral
        :param integral_type: Integral type
        :param lower_limit: Lower limit of integral
        :param upper_limit: Upper limit of integral
        :param limit_locations: location of limits
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathNaryOperator`'''
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes, lower_limit: IMathElement, upper_limit: IMathElement) -> IMathNaryOperator:
        '''Takes the integral
        :param integral_type: Integral type
        :param lower_limit: Lower limit of integral
        :param upper_limit: Upper limit of integral
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathNaryOperator`'''
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes) -> IMathNaryOperator:
        '''Takes the integral without limits
        :param integral_type: Integral type
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathNaryOperator`'''
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes, lower_limit: str, upper_limit: str, limit_locations: MathLimitLocations) -> IMathNaryOperator:
        '''Takes the integral
        :param integral_type: Integral type
        :param lower_limit: Lower limit of integral
        :param upper_limit: Upper limit of integral
        :param limit_locations: location of limits
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathNaryOperator`'''
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes, lower_limit: str, upper_limit: str) -> IMathNaryOperator:
        '''Takes the integral
        :param integral_type: Integral type
        :param lower_limit: Lower limit of integral
        :param upper_limit: Upper limit of integral
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathNaryOperator`'''
        ...

    @overload
    def group(self) -> IMathGroupingCharacter:
        '''Places this element in a group using a bottom curly bracket
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathGroupingCharacter`'''
        ...

    @overload
    def group(self, character: char, position: MathTopBotPositions, vertical_justification: MathTopBotPositions) -> IMathGroupingCharacter:
        '''Places this element in a group using a grouping character such as bottom curly bracket or another
        :param character: Grouping Character such as BOTTOM CURLY BRACKET (U+23DF) or any other
        :param position: Position of grouping character
        :param vertical_justification: Vertical justification of group character.
                    Specifies the alignment of the object with respect to the baseline.
                    For example, when the group character is above the object, 
                    VerticalJustification of Top signifies that the top of the object falls on the baseline;
                    when VerticalJustification is set to Bottom, the bottom of the object is on the baseline
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathGroupingCharacter`'''
        ...

    @overload
    def to_border_box(self) -> IMathBorderBox:
        '''Places this element in a border-box
        :returns: Border-box with this element placed inside'''
        ...

    @overload
    def to_border_box(self, hide_top: bool, hide_bottom: bool, hide_left: bool, hide_right: bool, strikethrough_horizontal: bool, strikethrough_vertical: bool, strikethrough_bottom_left_to_top_right: bool, strikethrough_top_left_to_bottom_right: bool) -> IMathBorderBox:
        '''Places this element in a border-box
        :param hide_top: Hide Top Edge
        :param hide_bottom: Hide Bottom Edge
        :param hide_left: Hide Left Edge
        :param hide_right: Hide Right Edge
        :param strikethrough_horizontal: Border Box Strikethrough Horizontal
        :param strikethrough_vertical: Border Box Strikethrough Vertical
        :param strikethrough_bottom_left_to_top_right: Border Box Strikethrough Bottom-Left to Top-Right
        :param strikethrough_top_left_to_bottom_right: Border Box Strikethrough Top-Left to Bottom-Right
        :returns: Border-box with this element placed inside'''
        ...

    def to_math_array(self) -> IMathArray:
        '''Puts child elements in a vertical array
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathArray`'''
        ...

    def accent(self, accent_character: char) -> IMathAccent:
        '''Sets an accent mark (a character on the top of this element)
        :param accent_character: Accent character. The value should be within the range of (U+0300–U+036F) or (U+20D0–U+20EF)
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathAccent`'''
        ...

    def overbar(self) -> IMathBar:
        '''Sets a bar on the top of this element
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathBar`'''
        ...

    def underbar(self) -> IMathBar:
        '''Sets a bar on the bottom of this element
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathBar`'''
        ...

    def to_box(self) -> IMathBox:
        '''Places this element in a non-visual box (logical grouping) 
                    which is used to group components of an equation or other instance of mathematical text.
                    A boxed object can (for example) serve as an operator emulator with or without an alignment point, 
                    serve as a line break point, or be grouped such as not to allow line breaks within.
        :returns: Logical box with this element placed inside'''
        ...

    def get_children(self) -> List[IMathElement]:
        '''Get children elements'''
        ...

    def add(self, item: IMathElement) -> None:
        '''Adds a math element to the end of the collection.
        :param item: The IMathElement to be added to the end of the collection.'''
        ...

    def clear(self) -> None:
        '''Removes all elements from the collection.'''
        ...

    def contains(self, item: IMathElement) -> bool:
        '''Determines whether the collection contains a specific value.
        :param item: The object to locate in the collection.
        :returns: true if ``item`` is found in the collection; otherwise, false.'''
        ...

    def copy_to(self, array: List[IMathElement], array_index: int) -> None:
        '''Copy to specified array.
        :param array: Array to copy to.
        :param array_index: Index to begin copying.'''
        ...

    def remove(self, item: IMathElement) -> bool:
        '''Removes the first occurrence of a specific object from the collection.
        :param item: The object to remove from the collection.
        :returns: true if ``item`` was successfully removed from the collection; otherwise, false. This method also returns false if ``item`` is not found in the original collection.'''
        ...

    def index_of(self, item: IMathElement) -> int:
        '''Determines the index of a specific math element in collection.
        :param item: The element to locate in the collection.
        :returns: The index of ``item`` if found in the collection; otherwise, -1.'''
        ...

    def insert(self, index: int, item: IMathElement) -> None:
        '''Inserts a MathElement into the collection at the specified index.
        :param index: The zero-based index at which MathElement should be inserted.
        :param item: The MathElement to insert.'''
        ...

    def remove_at(self, index: int) -> None:
        '''Removes the element at the specified index of the collection.
        :param index: The zero-based index of the element to remove.'''
        ...

    def join_block(self, other: IMathBlock) -> IMathBlock:
        '''Joins another mathematical block with this one
        :param other: The joining block
        :returns: this mathematical block after joining'''
        ...

    def delimit(self, separator_character: char) -> IMathDelimiter:
        '''Delimits child elements with separator character (without the brackets)
        :param separator_character: Separator character
        :returns: The math element of type :py:class:`aspose.slides.mathtext.IMathDelimiter`'''
        ...

    def write_as_math_ml(self, stream: io.RawIOBase) -> None:
        '''Saves content of this :py:class:`aspose.slides.mathtext.MathBlock` as MathML
        :param stream: Target stream'''
        ...

    @property
    def count(self) -> int:
        '''Gets the number of child math elements actually contained in the collection.
                    Read-only :py:class:`int`.'''
        ...

    @property
    def is_read_only(self) -> bool:
        ...

    @property
    def as_i_math_element_collection(self) -> IMathElementCollection:
        ...

    @property
    def as_i_math_element(self) -> IMathElement:
        ...

    @property
    def as_i_enumerable(self) -> collections.abc.Iterable:
        ...

    def __getitem__(self, key: int) -> IMathElement
        ...

    def __setitem__(self, key: int, value: IMathElement
        ...

    ...

class MathBlockFactory:
    '''Allows to create a math block'''
    def __init__(self):
        ...

    @overload
    def create_math_block(self) -> IMathBlock:
        '''Create a math block
        :returns: new math block'''
        ...

    @overload
    def create_math_block(self, math_element: IMathElement) -> IMathBlock:
        '''Create a math block and place the element in it
        :param math_element: A math element
        :returns: new math block'''
        ...

    @overload
    def create_math_block(self, math_elements: IMathElementCollection) -> IMathBlock:
        '''Create a math block and place elements in it
        :param math_elements: math elements
        :returns: new math block'''
        ...

    ...

class MathBorderBox(MathElementBase):
    '''Draws a rectangular or some other border around the IMathElement.'''
    def __init__(self, element: IMathElement):
        '''Creates MathBorderBox element with rectangular border
        :param element: The base element to which the border box is applied. Can be None.'''
        ...

    def __init__(self, element: IMathElement, hide_top: bool, hide_bottom: bool, hide_left: bool, hide_right: bool, strikethrough_horizontal: bool, strikethrough_vertical: bool, strikethrough_bottom_left_to_top_right: bool, strikethrough_top_left_to_bottom_right: bool):
        '''Creates MathBorderBox element
        :param element: The base element to which the border box is applied
        :param hide_top: Hide Top Edge
        :param hide_bottom: Hide Bottom Edge
        :param hide_left: Hide Left Edge
        :param hide_right: Hide Right Edge
        :param strikethrough_horizontal: Strikethrough Horizontal
        :param strikethrough_vertical: Strikethrough Vertical
        :param strikethrough_bottom_left_to_top_right: Strikethrough Bottom-Left to Top-Right
        :param strikethrough_top_left_to_bottom_right: Strikethrough Top-Left to Bottom-Right'''
        ...

    @overload
    def join(self, math_element: IMathElement) -> IMathBlock:
        '''Joins a mathematical element and forms a mathematical block
        :param math_element: The element to be joined
        :returns: A new IMathBlock containing this instance and specified argument'''
        ...

    @overload
    def join(self, math_text: str) -> IMathBlock:
        '''Joins a mathematical text and forms a mathematical block
        :param math_text: Mathematical text to be joined
        :returns: A new IMathBlock containing this instance and specified argument'''
        ...

    @overload
    def divide(self, denominator: IMathElement) -> IMathFraction:
        '''Creates a fraction with this numerator and specified denominator
        :param denominator: Denominator
        :returns: new fraction'''
        ...

    @overload
    def divide(self, denominator: str) -> IMathFraction:
        '''Creates a fraction with this numerator and specified denominator
        :param denominator: Denominator
        :returns: new fraction'''
        ...

    @overload
    def divide(self, denominator: IMathElement, fraction_type: MathFractionTypes) -> IMathFraction:
        '''Creates a fraction of the specified type with this numerator and specified denominator
        :param denominator: Denominator
        :param fraction_type: Fraction type: Bar, NoBar, Skewed, Linear
        :returns: new fraction'''
        ...

    @overload
    def divide(self, denominator: str, fraction_type: MathFractionTypes) -> IMathFraction:
        '''Creates a fraction of the specified type with this numerator and specified denominator
        :param denominator: Denominator
        :param fraction_type: Fraction type: Bar, NoBar, Skewed, Linear
        :returns: new fraction'''
        ...

    @overload
    def enclose(self) -> IMathDelimiter:
        '''Encloses a math element in parenthesis
        :returns: The math element of type :py:class:`aspose.slides.mathtext.IMathDelimiter` which includes the parenthesis'''
        ...

    @overload
    def enclose(self, beginning_character: char, ending_character: char) -> IMathDelimiter:
        '''Encloses a math element in specified characters such as parenthesis or another characters as framing
        :param beginning_character: Beginning character (usually left bracket)
        :param ending_character: Ending character (usually right bracket)
        :returns: The math element of type :py:class:`aspose.slides.mathtext.IMathDelimiter` which includes specified characters as framing'''
        ...

    @overload
    def function(self, function_argument: IMathElement) -> IMathFunction:
        '''Takes a function of an argument using this instance as the function name
        :param function_argument: An argument of the function
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathFunction`'''
        ...

    @overload
    def function(self, function_argument: str) -> IMathFunction:
        '''Takes a function of an argument using this instance as the function name
        :param function_argument: An argument of the function
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathFunction`'''
        ...

    @overload
    def as_argument_of_function(self, function_name: IMathElement) -> IMathFunction:
        '''Takes specified function using this instance as the argument
        :param function_name: Function name
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathFunction`'''
        ...

    @overload
    def as_argument_of_function(self, function_name: str) -> IMathFunction:
        '''Takes specified function using this instance as the argument
        :param function_name: Function name
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathFunction`'''
        ...

    @overload
    def as_argument_of_function(self, function_type: MathFunctionsOfOneArgument) -> IMathFunction:
        '''Takes specified function using this instance as the argument
        :param function_type: One of the common function type of one argument
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathFunction`'''
        ...

    @overload
    def as_argument_of_function(self, function_type: MathFunctionsOfTwoArguments, additional_argument: IMathElement) -> IMathFunction:
        '''Takes specified function using this instance as the argument and specified additional argument
        :param function_type: One of the common function type of two arguments: Log, Lim, Min, Max
        :param additional_argument: Additional argument depending on the type of function
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathFunction`'''
        ...

    @overload
    def as_argument_of_function(self, function_type: MathFunctionsOfTwoArguments, additional_argument: str) -> IMathFunction:
        '''Takes specified function using this instance as the argument and specified additional argument
        :param function_type: One of the common function type of two arguments: Log, Lim, Min, Max
        :param additional_argument: Additional argument depending on the type of function
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathFunction`'''
        ...

    @overload
    def set_subscript(self, subscript: IMathElement) -> IMathSubscriptElement:
        '''Creates subscript
        :param subscript: Subscript (lower index on the right)
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathSubscriptElement`'''
        ...

    @overload
    def set_subscript(self, subscript: str) -> IMathSubscriptElement:
        '''Creates subscript
        :param subscript: Subscript (lower index on the right)
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathSubscriptElement`'''
        ...

    @overload
    def set_superscript(self, superscript: IMathElement) -> IMathSuperscriptElement:
        '''Creates superscript
        :param superscript: Superscript (upper index on the right)
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathSuperscriptElement`'''
        ...

    @overload
    def set_superscript(self, superscript: str) -> IMathSuperscriptElement:
        '''Creates superscript
        :param superscript: Superscript (upper index on the right)
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathSuperscriptElement`'''
        ...

    @overload
    def set_sub_superscript_on_the_right(self, subscript: IMathElement, superscript: IMathElement) -> IMathRightSubSuperscriptElement:
        '''Creates subscript and superscript on the right
        :param subscript: Subscript (lower index on the right)
        :param superscript: Superscript (upper index on the right)
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathRightSubSuperscriptElement`'''
        ...

    @overload
    def set_sub_superscript_on_the_right(self, subscript: str, superscript: str) -> IMathRightSubSuperscriptElement:
        '''Creates subscript and superscript on the right
        :param subscript: Subscript (lower index on the right)
        :param superscript: Superscript (upper index on the right)
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathRightSubSuperscriptElement`'''
        ...

    @overload
    def set_sub_superscript_on_the_left(self, subscript: IMathElement, superscript: IMathElement) -> IMathLeftSubSuperscriptElement:
        '''Creates subscript and superscript on the left
        :param subscript: Subscript (lower index on the left)
        :param superscript: Superscript (upper index on the left)
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathLeftSubSuperscriptElement`'''
        ...

    @overload
    def set_sub_superscript_on_the_left(self, subscript: str, superscript: str) -> IMathLeftSubSuperscriptElement:
        '''Creates subscript and superscript on the left
        :param subscript: Subscript (lower index on the left)
        :param superscript: Superscript (upper index on the left)
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathLeftSubSuperscriptElement`'''
        ...

    @overload
    def radical(self, degree: IMathElement) -> IMathRadical:
        '''Specifies the mathematical root of the given degree from the specified argument.
        :param degree: Argument of Radical
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathRadical`'''
        ...

    @overload
    def radical(self, degree: str) -> IMathRadical:
        '''Specifies the mathematical root of the given degree from the specified argument.
        :param degree: Argument of Radical
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathRadical`'''
        ...

    @overload
    def set_upper_limit(self, limit: IMathElement) -> IMathLimit:
        '''Takes upper limit
        :param limit: limit
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathLimit`'''
        ...

    @overload
    def set_upper_limit(self, limit: str) -> IMathLimit:
        '''Takes upper limit
        :param limit: limit
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathLimit`'''
        ...

    @overload
    def set_lower_limit(self, limit: IMathElement) -> IMathLimit:
        '''Takes lower limit
        :param limit: limit
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathLimit`'''
        ...

    @overload
    def set_lower_limit(self, limit: str) -> IMathLimit:
        '''Takes lower limit
        :param limit: limit
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathLimit`'''
        ...

    @overload
    def nary(self, type: MathNaryOperatorTypes, lower_limit: IMathElement, upper_limit: IMathElement) -> IMathNaryOperator:
        '''Creates a N-ary operator
        :param type: The N-ary operator type
        :param lower_limit: The lower limit
        :param upper_limit: The upper limit
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathNaryOperator`'''
        ...

    @overload
    def nary(self, type: MathNaryOperatorTypes, lower_limit: str, upper_limit: str) -> IMathNaryOperator:
        '''Creates a N-ary operator
        :param type: The N-ary operator type
        :param lower_limit: The lower limit
        :param upper_limit: The upper limit
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathNaryOperator`'''
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes, lower_limit: IMathElement, upper_limit: IMathElement, limit_locations: MathLimitLocations) -> IMathNaryOperator:
        '''Takes the integral
        :param integral_type: Integral type
        :param lower_limit: Lower limit of integral
        :param upper_limit: Upper limit of integral
        :param limit_locations: location of limits
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathNaryOperator`'''
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes, lower_limit: IMathElement, upper_limit: IMathElement) -> IMathNaryOperator:
        '''Takes the integral
        :param integral_type: Integral type
        :param lower_limit: Lower limit of integral
        :param upper_limit: Upper limit of integral
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathNaryOperator`'''
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes) -> IMathNaryOperator:
        '''Takes the integral without limits
        :param integral_type: Integral type
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathNaryOperator`'''
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes, lower_limit: str, upper_limit: str, limit_locations: MathLimitLocations) -> IMathNaryOperator:
        '''Takes the integral
        :param integral_type: Integral type
        :param lower_limit: Lower limit of integral
        :param upper_limit: Upper limit of integral
        :param limit_locations: location of limits
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathNaryOperator`'''
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes, lower_limit: str, upper_limit: str) -> IMathNaryOperator:
        '''Takes the integral
        :param integral_type: Integral type
        :param lower_limit: Lower limit of integral
        :param upper_limit: Upper limit of integral
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathNaryOperator`'''
        ...

    @overload
    def group(self) -> IMathGroupingCharacter:
        '''Places this element in a group using a bottom curly bracket
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathGroupingCharacter`'''
        ...

    @overload
    def group(self, character: char, position: MathTopBotPositions, vertical_justification: MathTopBotPositions) -> IMathGroupingCharacter:
        '''Places this element in a group using a grouping character such as bottom curly bracket or another
        :param character: Grouping Character such as BOTTOM CURLY BRACKET (U+23DF) or any other
        :param position: Position of grouping character
        :param vertical_justification: Vertical justification of group character.
                    Specifies the alignment of the object with respect to the baseline.
                    For example, when the group character is above the object, 
                    VerticalJustification of Top signifies that the top of the object falls on the baseline;
                    when VerticalJustification is set to Bottom, the bottom of the object is on the baseline
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathGroupingCharacter`'''
        ...

    @overload
    def to_border_box(self) -> IMathBorderBox:
        '''Places this element in a border-box
        :returns: Border-box with this element placed inside'''
        ...

    @overload
    def to_border_box(self, hide_top: bool, hide_bottom: bool, hide_left: bool, hide_right: bool, strikethrough_horizontal: bool, strikethrough_vertical: bool, strikethrough_bottom_left_to_top_right: bool, strikethrough_top_left_to_bottom_right: bool) -> IMathBorderBox:
        '''Places this element in a border-box
        :param hide_top: Hide Top Edge
        :param hide_bottom: Hide Bottom Edge
        :param hide_left: Hide Left Edge
        :param hide_right: Hide Right Edge
        :param strikethrough_horizontal: Border Box Strikethrough Horizontal
        :param strikethrough_vertical: Border Box Strikethrough Vertical
        :param strikethrough_bottom_left_to_top_right: Border Box Strikethrough Bottom-Left to Top-Right
        :param strikethrough_top_left_to_bottom_right: Border Box Strikethrough Top-Left to Bottom-Right
        :returns: Border-box with this element placed inside'''
        ...

    def to_math_array(self) -> IMathArray:
        '''Puts in a vertical array
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathArray`'''
        ...

    def accent(self, accent_character: char) -> IMathAccent:
        '''Sets an accent mark (a character on the top of this element)
        :param accent_character: Accent character. The value should be within the range of (U+0300–U+036F) or (U+20D0–U+20EF)
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathAccent`'''
        ...

    def overbar(self) -> IMathBar:
        '''Sets a bar on the top of this element
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathBar`'''
        ...

    def underbar(self) -> IMathBar:
        '''Sets a bar on the bottom of this element
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathBar`'''
        ...

    def to_box(self) -> IMathBox:
        '''Places this element in a non-visual box (logical grouping) 
                    which is used to group components of an equation or other instance of mathematical text.
                    A boxed object can (for example) serve as an operator emulator with or without an alignment point, 
                    serve as a line break point, or be grouped such as not to allow line breaks within.
        :returns: Logical box with this element placed inside'''
        ...

    def get_children(self) -> List[IMathElement]:
        '''Get children elements'''
        ...

    @property
    def base(self) -> IMathElement:
        '''Base argument'''
        ...

    @property
    def hide_top(self) -> bool:
        ...

    @hide_top.setter
    def hide_top(self, value: bool):
        ...

    @property
    def hide_bottom(self) -> bool:
        ...

    @hide_bottom.setter
    def hide_bottom(self, value: bool):
        ...

    @property
    def hide_left(self) -> bool:
        ...

    @hide_left.setter
    def hide_left(self, value: bool):
        ...

    @property
    def hide_right(self) -> bool:
        ...

    @hide_right.setter
    def hide_right(self, value: bool):
        ...

    @property
    def strikethrough_horizontal(self) -> bool:
        ...

    @strikethrough_horizontal.setter
    def strikethrough_horizontal(self, value: bool):
        ...

    @property
    def strikethrough_vertical(self) -> bool:
        ...

    @strikethrough_vertical.setter
    def strikethrough_vertical(self, value: bool):
        ...

    @property
    def strikethrough_bottom_left_to_top_right(self) -> bool:
        ...

    @strikethrough_bottom_left_to_top_right.setter
    def strikethrough_bottom_left_to_top_right(self, value: bool):
        ...

    @property
    def strikethrough_top_left_to_bottom_right(self) -> bool:
        ...

    @strikethrough_top_left_to_bottom_right.setter
    def strikethrough_top_left_to_bottom_right(self, value: bool):
        ...

    @property
    def as_i_math_element(self) -> IMathElement:
        ...

    ...

class MathBorderBoxFactory:
    '''Allows to create a math border box'''
    def __init__(self):
        ...

    @overload
    def create_math_border_box(self, element: IMathElement) -> IMathBorderBox:
        '''Create a math border box by applying to the element
        :param element: math element to apply border box
        :returns: new border box element'''
        ...

    @overload
    def create_math_border_box(self, element: IMathElement, hide_top: bool, hide_bottom: bool, hide_left: bool, hide_right: bool, strikethrough_horizontal: bool, strikethrough_vertical: bool, strikethrough_bottom_left_to_top_right: bool, strikethrough_top_left_to_bottom_right: bool) -> IMathBorderBox:
        '''Create a math border box by applying to the element
        :param element: math element to apply border box
        :param hide_top: Hide Top Edge
        :param hide_bottom: Hide Bottom Edge
        :param hide_left: Hide Left Edge
        :param hide_right: Hide Right Edge
        :param strikethrough_horizontal: Border Box Strikethrough Horizontal
        :param strikethrough_vertical: Border Box Strikethrough Vertical
        :param strikethrough_bottom_left_to_top_right: Border Box Strikethrough Bottom-Left to Top-Right
        :param strikethrough_top_left_to_bottom_right: Border Box Strikethrough Top-Left to Bottom-Right
        :returns: new border box element'''
        ...

    ...

class MathBox(MathElementBase):
    '''Specifies the logical boxing (packaging) of mathematical element.
                For example, a boxed object can serve as an operator emulator with or without an alignment point, 
                serve as a line break point, or be grouped such as not to allow line breaks within.
                For example, the "==" operator should be boxed to prevent line breaks.'''
    def __init__(self, element: IMathElement):
        '''Initializes MathBox with the specified element as an argument
        :param element: The base element to which the box is applied. Can be None.'''
        ...

    @overload
    def join(self, math_element: IMathElement) -> IMathBlock:
        '''Joins a mathematical element and forms a mathematical block
        :param math_element: The element to be joined
        :returns: A new IMathBlock containing this instance and specified argument'''
        ...

    @overload
    def join(self, math_text: str) -> IMathBlock:
        '''Joins a mathematical text and forms a mathematical block
        :param math_text: Mathematical text to be joined
        :returns: A new IMathBlock containing this instance and specified argument'''
        ...

    @overload
    def divide(self, denominator: IMathElement) -> IMathFraction:
        '''Creates a fraction with this numerator and specified denominator
        :param denominator: Denominator
        :returns: new fraction'''
        ...

    @overload
    def divide(self, denominator: str) -> IMathFraction:
        '''Creates a fraction with this numerator and specified denominator
        :param denominator: Denominator
        :returns: new fraction'''
        ...

    @overload
    def divide(self, denominator: IMathElement, fraction_type: MathFractionTypes) -> IMathFraction:
        '''Creates a fraction of the specified type with this numerator and specified denominator
        :param denominator: Denominator
        :param fraction_type: Fraction type: Bar, NoBar, Skewed, Linear
        :returns: new fraction'''
        ...

    @overload
    def divide(self, denominator: str, fraction_type: MathFractionTypes) -> IMathFraction:
        '''Creates a fraction of the specified type with this numerator and specified denominator
        :param denominator: Denominator
        :param fraction_type: Fraction type: Bar, NoBar, Skewed, Linear
        :returns: new fraction'''
        ...

    @overload
    def enclose(self) -> IMathDelimiter:
        '''Encloses a math element in parenthesis
        :returns: The math element of type :py:class:`aspose.slides.mathtext.IMathDelimiter` which includes the parenthesis'''
        ...

    @overload
    def enclose(self, beginning_character: char, ending_character: char) -> IMathDelimiter:
        '''Encloses a math element in specified characters such as parenthesis or another characters as framing
        :param beginning_character: Beginning character (usually left bracket)
        :param ending_character: Ending character (usually right bracket)
        :returns: The math element of type :py:class:`aspose.slides.mathtext.IMathDelimiter` which includes specified characters as framing'''
        ...

    @overload
    def function(self, function_argument: IMathElement) -> IMathFunction:
        '''Takes a function of an argument using this instance as the function name
        :param function_argument: An argument of the function
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathFunction`'''
        ...

    @overload
    def function(self, function_argument: str) -> IMathFunction:
        '''Takes a function of an argument using this instance as the function name
        :param function_argument: An argument of the function
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathFunction`'''
        ...

    @overload
    def as_argument_of_function(self, function_name: IMathElement) -> IMathFunction:
        '''Takes specified function using this instance as the argument
        :param function_name: Function name
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathFunction`'''
        ...

    @overload
    def as_argument_of_function(self, function_name: str) -> IMathFunction:
        '''Takes specified function using this instance as the argument
        :param function_name: Function name
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathFunction`'''
        ...

    @overload
    def as_argument_of_function(self, function_type: MathFunctionsOfOneArgument) -> IMathFunction:
        '''Takes specified function using this instance as the argument
        :param function_type: One of the common function type of one argument
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathFunction`'''
        ...

    @overload
    def as_argument_of_function(self, function_type: MathFunctionsOfTwoArguments, additional_argument: IMathElement) -> IMathFunction:
        '''Takes specified function using this instance as the argument and specified additional argument
        :param function_type: One of the common function type of two arguments: Log, Lim, Min, Max
        :param additional_argument: Additional argument depending on the type of function
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathFunction`'''
        ...

    @overload
    def as_argument_of_function(self, function_type: MathFunctionsOfTwoArguments, additional_argument: str) -> IMathFunction:
        '''Takes specified function using this instance as the argument and specified additional argument
        :param function_type: One of the common function type of two arguments: Log, Lim, Min, Max
        :param additional_argument: Additional argument depending on the type of function
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathFunction`'''
        ...

    @overload
    def set_subscript(self, subscript: IMathElement) -> IMathSubscriptElement:
        '''Creates subscript
        :param subscript: Subscript (lower index on the right)
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathSubscriptElement`'''
        ...

    @overload
    def set_subscript(self, subscript: str) -> IMathSubscriptElement:
        '''Creates subscript
        :param subscript: Subscript (lower index on the right)
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathSubscriptElement`'''
        ...

    @overload
    def set_superscript(self, superscript: IMathElement) -> IMathSuperscriptElement:
        '''Creates superscript
        :param superscript: Superscript (upper index on the right)
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathSuperscriptElement`'''
        ...

    @overload
    def set_superscript(self, superscript: str) -> IMathSuperscriptElement:
        '''Creates superscript
        :param superscript: Superscript (upper index on the right)
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathSuperscriptElement`'''
        ...

    @overload
    def set_sub_superscript_on_the_right(self, subscript: IMathElement, superscript: IMathElement) -> IMathRightSubSuperscriptElement:
        '''Creates subscript and superscript on the right
        :param subscript: Subscript (lower index on the right)
        :param superscript: Superscript (upper index on the right)
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathRightSubSuperscriptElement`'''
        ...

    @overload
    def set_sub_superscript_on_the_right(self, subscript: str, superscript: str) -> IMathRightSubSuperscriptElement:
        '''Creates subscript and superscript on the right
        :param subscript: Subscript (lower index on the right)
        :param superscript: Superscript (upper index on the right)
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathRightSubSuperscriptElement`'''
        ...

    @overload
    def set_sub_superscript_on_the_left(self, subscript: IMathElement, superscript: IMathElement) -> IMathLeftSubSuperscriptElement:
        '''Creates subscript and superscript on the left
        :param subscript: Subscript (lower index on the left)
        :param superscript: Superscript (upper index on the left)
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathLeftSubSuperscriptElement`'''
        ...

    @overload
    def set_sub_superscript_on_the_left(self, subscript: str, superscript: str) -> IMathLeftSubSuperscriptElement:
        '''Creates subscript and superscript on the left
        :param subscript: Subscript (lower index on the left)
        :param superscript: Superscript (upper index on the left)
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathLeftSubSuperscriptElement`'''
        ...

    @overload
    def radical(self, degree: IMathElement) -> IMathRadical:
        '''Specifies the mathematical root of the given degree from the specified argument.
        :param degree: Argument of Radical
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathRadical`'''
        ...

    @overload
    def radical(self, degree: str) -> IMathRadical:
        '''Specifies the mathematical root of the given degree from the specified argument.
        :param degree: Argument of Radical
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathRadical`'''
        ...

    @overload
    def set_upper_limit(self, limit: IMathElement) -> IMathLimit:
        '''Takes upper limit
        :param limit: limit
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathLimit`'''
        ...

    @overload
    def set_upper_limit(self, limit: str) -> IMathLimit:
        '''Takes upper limit
        :param limit: limit
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathLimit`'''
        ...

    @overload
    def set_lower_limit(self, limit: IMathElement) -> IMathLimit:
        '''Takes lower limit
        :param limit: limit
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathLimit`'''
        ...

    @overload
    def set_lower_limit(self, limit: str) -> IMathLimit:
        '''Takes lower limit
        :param limit: limit
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathLimit`'''
        ...

    @overload
    def nary(self, type: MathNaryOperatorTypes, lower_limit: IMathElement, upper_limit: IMathElement) -> IMathNaryOperator:
        '''Creates a N-ary operator
        :param type: The N-ary operator type
        :param lower_limit: The lower limit
        :param upper_limit: The upper limit
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathNaryOperator`'''
        ...

    @overload
    def nary(self, type: MathNaryOperatorTypes, lower_limit: str, upper_limit: str) -> IMathNaryOperator:
        '''Creates a N-ary operator
        :param type: The N-ary operator type
        :param lower_limit: The lower limit
        :param upper_limit: The upper limit
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathNaryOperator`'''
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes, lower_limit: IMathElement, upper_limit: IMathElement, limit_locations: MathLimitLocations) -> IMathNaryOperator:
        '''Takes the integral
        :param integral_type: Integral type
        :param lower_limit: Lower limit of integral
        :param upper_limit: Upper limit of integral
        :param limit_locations: location of limits
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathNaryOperator`'''
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes, lower_limit: IMathElement, upper_limit: IMathElement) -> IMathNaryOperator:
        '''Takes the integral
        :param integral_type: Integral type
        :param lower_limit: Lower limit of integral
        :param upper_limit: Upper limit of integral
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathNaryOperator`'''
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes) -> IMathNaryOperator:
        '''Takes the integral without limits
        :param integral_type: Integral type
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathNaryOperator`'''
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes, lower_limit: str, upper_limit: str, limit_locations: MathLimitLocations) -> IMathNaryOperator:
        '''Takes the integral
        :param integral_type: Integral type
        :param lower_limit: Lower limit of integral
        :param upper_limit: Upper limit of integral
        :param limit_locations: location of limits
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathNaryOperator`'''
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes, lower_limit: str, upper_limit: str) -> IMathNaryOperator:
        '''Takes the integral
        :param integral_type: Integral type
        :param lower_limit: Lower limit of integral
        :param upper_limit: Upper limit of integral
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathNaryOperator`'''
        ...

    @overload
    def group(self) -> IMathGroupingCharacter:
        '''Places this element in a group using a bottom curly bracket
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathGroupingCharacter`'''
        ...

    @overload
    def group(self, character: char, position: MathTopBotPositions, vertical_justification: MathTopBotPositions) -> IMathGroupingCharacter:
        '''Places this element in a group using a grouping character such as bottom curly bracket or another
        :param character: Grouping Character such as BOTTOM CURLY BRACKET (U+23DF) or any other
        :param position: Position of grouping character
        :param vertical_justification: Vertical justification of group character.
                    Specifies the alignment of the object with respect to the baseline.
                    For example, when the group character is above the object, 
                    VerticalJustification of Top signifies that the top of the object falls on the baseline;
                    when VerticalJustification is set to Bottom, the bottom of the object is on the baseline
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathGroupingCharacter`'''
        ...

    @overload
    def to_border_box(self) -> IMathBorderBox:
        '''Places this element in a border-box
        :returns: Border-box with this element placed inside'''
        ...

    @overload
    def to_border_box(self, hide_top: bool, hide_bottom: bool, hide_left: bool, hide_right: bool, strikethrough_horizontal: bool, strikethrough_vertical: bool, strikethrough_bottom_left_to_top_right: bool, strikethrough_top_left_to_bottom_right: bool) -> IMathBorderBox:
        '''Places this element in a border-box
        :param hide_top: Hide Top Edge
        :param hide_bottom: Hide Bottom Edge
        :param hide_left: Hide Left Edge
        :param hide_right: Hide Right Edge
        :param strikethrough_horizontal: Border Box Strikethrough Horizontal
        :param strikethrough_vertical: Border Box Strikethrough Vertical
        :param strikethrough_bottom_left_to_top_right: Border Box Strikethrough Bottom-Left to Top-Right
        :param strikethrough_top_left_to_bottom_right: Border Box Strikethrough Top-Left to Bottom-Right
        :returns: Border-box with this element placed inside'''
        ...

    def to_math_array(self) -> IMathArray:
        '''Puts in a vertical array
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathArray`'''
        ...

    def accent(self, accent_character: char) -> IMathAccent:
        '''Sets an accent mark (a character on the top of this element)
        :param accent_character: Accent character. The value should be within the range of (U+0300–U+036F) or (U+20D0–U+20EF)
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathAccent`'''
        ...

    def overbar(self) -> IMathBar:
        '''Sets a bar on the top of this element
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathBar`'''
        ...

    def underbar(self) -> IMathBar:
        '''Sets a bar on the bottom of this element
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathBar`'''
        ...

    def to_box(self) -> IMathBox:
        '''Places this element in a non-visual box (logical grouping) 
                    which is used to group components of an equation or other instance of mathematical text.
                    A boxed object can (for example) serve as an operator emulator with or without an alignment point, 
                    serve as a line break point, or be grouped such as not to allow line breaks within.
        :returns: Logical box with this element placed inside'''
        ...

    def get_children(self) -> List[IMathElement]:
        '''Get children elements'''
        ...

    @property
    def base(self) -> IMathElement:
        '''Base argument'''
        ...

    @property
    def operator_emulator(self) -> bool:
        ...

    @operator_emulator.setter
    def operator_emulator(self, value: bool):
        ...

    @property
    def no_break(self) -> bool:
        ...

    @no_break.setter
    def no_break(self, value: bool):
        ...

    @property
    def differential(self) -> bool:
        '''Differential
                    When true, the box acts as a differential (e.g., 𝑑𝑥 in an integrand), and receives the appropriate 
                    horizontal spacing for the mathematical differential.
                    Default: false'''
        ...

    @differential.setter
    def differential(self, value: bool):
        '''Differential
                    When true, the box acts as a differential (e.g., 𝑑𝑥 in an integrand), and receives the appropriate 
                    horizontal spacing for the mathematical differential.
                    Default: false'''
        ...

    @property
    def alignment_point(self) -> bool:
        ...

    @alignment_point.setter
    def alignment_point(self, value: bool):
        ...

    @property
    def explicit_break(self) -> int:
        ...

    @explicit_break.setter
    def explicit_break(self, value: int):
        ...

    @property
    def as_i_math_element(self) -> IMathElement:
        ...

    ...

class MathBoxFactory:
    '''Allows to create a math box'''
    def __init__(self):
        ...

    def create_math_box(self, element: IMathElement) -> IMathBox:
        '''Create a math box by applying to the element
        :param element: math element to apply box
        :returns: new box element'''
        ...

    ...

class MathDelimiter(MathElementBase):
    '''Specifies the delimiter object, consisting of opening and closing characters (such as parentheses, 
                braces, brackets, and vertical bars), and one or more mathematical elements inside, separated by a specified character.
                Examples: (𝑥2); [𝑥2|𝑦2]'''
    def __init__(self, element: IMathElement):
        '''Initializes MathDelimiter with the specified element as single base argument
        :param element: The base element to which the delimiter is applied. Can be None.'''
        ...

    @overload
    def join(self, math_element: IMathElement) -> IMathBlock:
        '''Joins a mathematical element and forms a mathematical block
        :param math_element: The element to be joined
        :returns: A new IMathBlock containing this instance and specified argument'''
        ...

    @overload
    def join(self, math_text: str) -> IMathBlock:
        '''Joins a mathematical text and forms a mathematical block
        :param math_text: Mathematical text to be joined
        :returns: A new IMathBlock containing this instance and specified argument'''
        ...

    @overload
    def divide(self, denominator: IMathElement) -> IMathFraction:
        '''Creates a fraction with this numerator and specified denominator
        :param denominator: Denominator
        :returns: new fraction'''
        ...

    @overload
    def divide(self, denominator: str) -> IMathFraction:
        '''Creates a fraction with this numerator and specified denominator
        :param denominator: Denominator
        :returns: new fraction'''
        ...

    @overload
    def divide(self, denominator: IMathElement, fraction_type: MathFractionTypes) -> IMathFraction:
        '''Creates a fraction of the specified type with this numerator and specified denominator
        :param denominator: Denominator
        :param fraction_type: Fraction type: Bar, NoBar, Skewed, Linear
        :returns: new fraction'''
        ...

    @overload
    def divide(self, denominator: str, fraction_type: MathFractionTypes) -> IMathFraction:
        '''Creates a fraction of the specified type with this numerator and specified denominator
        :param denominator: Denominator
        :param fraction_type: Fraction type: Bar, NoBar, Skewed, Linear
        :returns: new fraction'''
        ...

    @overload
    def enclose(self, beginning_character: char, ending_character: char) -> IMathDelimiter:
        '''Encloses a math element in specified characters such as parenthesis or another characters as framing
        :param beginning_character: Beginning character (usually left bracket)
        :param ending_character: Ending character (usually right bracket)
        :returns: If ``beginningCharacter`` and ``endingCharacter`` are None, 
                    corresponding properties are assigned values only and no new object is created (returns this instance).
                    Otherwise, returns new math element of type Delimiter which includes specified characters as framing 
                    and this instance of :py:class:`aspose.slides.mathtext.MathDelimiter` framed inside.'''
        ...

    @overload
    def enclose(self) -> IMathDelimiter:
        '''Encloses a math element in parenthesis
        :returns: The math element of type :py:class:`aspose.slides.mathtext.IMathDelimiter` which includes the parenthesis'''
        ...

    @overload
    def function(self, function_argument: IMathElement) -> IMathFunction:
        '''Takes a function of an argument using this instance as the function name
        :param function_argument: An argument of the function
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathFunction`'''
        ...

    @overload
    def function(self, function_argument: str) -> IMathFunction:
        '''Takes a function of an argument using this instance as the function name
        :param function_argument: An argument of the function
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathFunction`'''
        ...

    @overload
    def as_argument_of_function(self, function_name: IMathElement) -> IMathFunction:
        '''Takes specified function using this instance as the argument
        :param function_name: Function name
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathFunction`'''
        ...

    @overload
    def as_argument_of_function(self, function_name: str) -> IMathFunction:
        '''Takes specified function using this instance as the argument
        :param function_name: Function name
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathFunction`'''
        ...

    @overload
    def as_argument_of_function(self, function_type: MathFunctionsOfOneArgument) -> IMathFunction:
        '''Takes specified function using this instance as the argument
        :param function_type: One of the common function type of one argument
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathFunction`'''
        ...

    @overload
    def as_argument_of_function(self, function_type: MathFunctionsOfTwoArguments, additional_argument: IMathElement) -> IMathFunction:
        '''Takes specified function using this instance as the argument and specified additional argument
        :param function_type: One of the common function type of two arguments: Log, Lim, Min, Max
        :param additional_argument: Additional argument depending on the type of function
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathFunction`'''
        ...

    @overload
    def as_argument_of_function(self, function_type: MathFunctionsOfTwoArguments, additional_argument: str) -> IMathFunction:
        '''Takes specified function using this instance as the argument and specified additional argument
        :param function_type: One of the common function type of two arguments: Log, Lim, Min, Max
        :param additional_argument: Additional argument depending on the type of function
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathFunction`'''
        ...

    @overload
    def set_subscript(self, subscript: IMathElement) -> IMathSubscriptElement:
        '''Creates subscript
        :param subscript: Subscript (lower index on the right)
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathSubscriptElement`'''
        ...

    @overload
    def set_subscript(self, subscript: str) -> IMathSubscriptElement:
        '''Creates subscript
        :param subscript: Subscript (lower index on the right)
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathSubscriptElement`'''
        ...

    @overload
    def set_superscript(self, superscript: IMathElement) -> IMathSuperscriptElement:
        '''Creates superscript
        :param superscript: Superscript (upper index on the right)
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathSuperscriptElement`'''
        ...

    @overload
    def set_superscript(self, superscript: str) -> IMathSuperscriptElement:
        '''Creates superscript
        :param superscript: Superscript (upper index on the right)
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathSuperscriptElement`'''
        ...

    @overload
    def set_sub_superscript_on_the_right(self, subscript: IMathElement, superscript: IMathElement) -> IMathRightSubSuperscriptElement:
        '''Creates subscript and superscript on the right
        :param subscript: Subscript (lower index on the right)
        :param superscript: Superscript (upper index on the right)
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathRightSubSuperscriptElement`'''
        ...

    @overload
    def set_sub_superscript_on_the_right(self, subscript: str, superscript: str) -> IMathRightSubSuperscriptElement:
        '''Creates subscript and superscript on the right
        :param subscript: Subscript (lower index on the right)
        :param superscript: Superscript (upper index on the right)
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathRightSubSuperscriptElement`'''
        ...

    @overload
    def set_sub_superscript_on_the_left(self, subscript: IMathElement, superscript: IMathElement) -> IMathLeftSubSuperscriptElement:
        '''Creates subscript and superscript on the left
        :param subscript: Subscript (lower index on the left)
        :param superscript: Superscript (upper index on the left)
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathLeftSubSuperscriptElement`'''
        ...

    @overload
    def set_sub_superscript_on_the_left(self, subscript: str, superscript: str) -> IMathLeftSubSuperscriptElement:
        '''Creates subscript and superscript on the left
        :param subscript: Subscript (lower index on the left)
        :param superscript: Superscript (upper index on the left)
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathLeftSubSuperscriptElement`'''
        ...

    @overload
    def radical(self, degree: IMathElement) -> IMathRadical:
        '''Specifies the mathematical root of the given degree from the specified argument.
        :param degree: Argument of Radical
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathRadical`'''
        ...

    @overload
    def radical(self, degree: str) -> IMathRadical:
        '''Specifies the mathematical root of the given degree from the specified argument.
        :param degree: Argument of Radical
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathRadical`'''
        ...

    @overload
    def set_upper_limit(self, limit: IMathElement) -> IMathLimit:
        '''Takes upper limit
        :param limit: limit
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathLimit`'''
        ...

    @overload
    def set_upper_limit(self, limit: str) -> IMathLimit:
        '''Takes upper limit
        :param limit: limit
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathLimit`'''
        ...

    @overload
    def set_lower_limit(self, limit: IMathElement) -> IMathLimit:
        '''Takes lower limit
        :param limit: limit
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathLimit`'''
        ...

    @overload
    def set_lower_limit(self, limit: str) -> IMathLimit:
        '''Takes lower limit
        :param limit: limit
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathLimit`'''
        ...

    @overload
    def nary(self, type: MathNaryOperatorTypes, lower_limit: IMathElement, upper_limit: IMathElement) -> IMathNaryOperator:
        '''Creates a N-ary operator
        :param type: The N-ary operator type
        :param lower_limit: The lower limit
        :param upper_limit: The upper limit
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathNaryOperator`'''
        ...

    @overload
    def nary(self, type: MathNaryOperatorTypes, lower_limit: str, upper_limit: str) -> IMathNaryOperator:
        '''Creates a N-ary operator
        :param type: The N-ary operator type
        :param lower_limit: The lower limit
        :param upper_limit: The upper limit
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathNaryOperator`'''
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes, lower_limit: IMathElement, upper_limit: IMathElement, limit_locations: MathLimitLocations) -> IMathNaryOperator:
        '''Takes the integral
        :param integral_type: Integral type
        :param lower_limit: Lower limit of integral
        :param upper_limit: Upper limit of integral
        :param limit_locations: location of limits
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathNaryOperator`'''
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes, lower_limit: IMathElement, upper_limit: IMathElement) -> IMathNaryOperator:
        '''Takes the integral
        :param integral_type: Integral type
        :param lower_limit: Lower limit of integral
        :param upper_limit: Upper limit of integral
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathNaryOperator`'''
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes) -> IMathNaryOperator:
        '''Takes the integral without limits
        :param integral_type: Integral type
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathNaryOperator`'''
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes, lower_limit: str, upper_limit: str, limit_locations: MathLimitLocations) -> IMathNaryOperator:
        '''Takes the integral
        :param integral_type: Integral type
        :param lower_limit: Lower limit of integral
        :param upper_limit: Upper limit of integral
        :param limit_locations: location of limits
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathNaryOperator`'''
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes, lower_limit: str, upper_limit: str) -> IMathNaryOperator:
        '''Takes the integral
        :param integral_type: Integral type
        :param lower_limit: Lower limit of integral
        :param upper_limit: Upper limit of integral
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathNaryOperator`'''
        ...

    @overload
    def group(self) -> IMathGroupingCharacter:
        '''Places this element in a group using a bottom curly bracket
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathGroupingCharacter`'''
        ...

    @overload
    def group(self, character: char, position: MathTopBotPositions, vertical_justification: MathTopBotPositions) -> IMathGroupingCharacter:
        '''Places this element in a group using a grouping character such as bottom curly bracket or another
        :param character: Grouping Character such as BOTTOM CURLY BRACKET (U+23DF) or any other
        :param position: Position of grouping character
        :param vertical_justification: Vertical justification of group character.
                    Specifies the alignment of the object with respect to the baseline.
                    For example, when the group character is above the object, 
                    VerticalJustification of Top signifies that the top of the object falls on the baseline;
                    when VerticalJustification is set to Bottom, the bottom of the object is on the baseline
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathGroupingCharacter`'''
        ...

    @overload
    def to_border_box(self) -> IMathBorderBox:
        '''Places this element in a border-box
        :returns: Border-box with this element placed inside'''
        ...

    @overload
    def to_border_box(self, hide_top: bool, hide_bottom: bool, hide_left: bool, hide_right: bool, strikethrough_horizontal: bool, strikethrough_vertical: bool, strikethrough_bottom_left_to_top_right: bool, strikethrough_top_left_to_bottom_right: bool) -> IMathBorderBox:
        '''Places this element in a border-box
        :param hide_top: Hide Top Edge
        :param hide_bottom: Hide Bottom Edge
        :param hide_left: Hide Left Edge
        :param hide_right: Hide Right Edge
        :param strikethrough_horizontal: Border Box Strikethrough Horizontal
        :param strikethrough_vertical: Border Box Strikethrough Vertical
        :param strikethrough_bottom_left_to_top_right: Border Box Strikethrough Bottom-Left to Top-Right
        :param strikethrough_top_left_to_bottom_right: Border Box Strikethrough Top-Left to Bottom-Right
        :returns: Border-box with this element placed inside'''
        ...

    def to_math_array(self) -> IMathArray:
        '''Puts in a vertical array
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathArray`'''
        ...

    def accent(self, accent_character: char) -> IMathAccent:
        '''Sets an accent mark (a character on the top of this element)
        :param accent_character: Accent character. The value should be within the range of (U+0300–U+036F) or (U+20D0–U+20EF)
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathAccent`'''
        ...

    def overbar(self) -> IMathBar:
        '''Sets a bar on the top of this element
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathBar`'''
        ...

    def underbar(self) -> IMathBar:
        '''Sets a bar on the bottom of this element
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathBar`'''
        ...

    def to_box(self) -> IMathBox:
        '''Places this element in a non-visual box (logical grouping) 
                    which is used to group components of an equation or other instance of mathematical text.
                    A boxed object can (for example) serve as an operator emulator with or without an alignment point, 
                    serve as a line break point, or be grouped such as not to allow line breaks within.
        :returns: Logical box with this element placed inside'''
        ...

    def delimit(self, separator_character: char) -> IMathDelimiter:
        '''Delimits arguments using the specified delimiter character
        :param separator_character: delimiter character
        :returns: This object after applying the delimiter character'''
        ...

    def get_children(self) -> List[IMathElement]:
        '''Get children elements'''
        ...

    @property
    def arguments(self) -> IMathElementCollection:
        '''One or more mathematical elements separated by delimiter characters'''
        ...

    @property
    def beginning_character(self) -> char:
        ...

    @beginning_character.setter
    def beginning_character(self, value: char):
        ...

    @property
    def separator_character(self) -> char:
        ...

    @separator_character.setter
    def separator_character(self, value: char):
        ...

    @property
    def ending_character(self) -> char:
        ...

    @ending_character.setter
    def ending_character(self, value: char):
        ...

    @property
    def grow_to_match_operand_height(self) -> bool:
        ...

    @grow_to_match_operand_height.setter
    def grow_to_match_operand_height(self, value: bool):
        ...

    @property
    def delimiter_shape(self) -> MathDelimiterShape:
        ...

    @delimiter_shape.setter
    def delimiter_shape(self, value: MathDelimiterShape):
        ...

    @property
    def as_i_math_element(self) -> IMathElement:
        ...

    ...

class MathDelimiterFactory:
    '''Allows to create a math delimiter'''
    def __init__(self):
        ...

    @overload
    def create_math_delimiter(self, element: IMathElement) -> IMathDelimiter:
        '''Create a math delimiter by applying to the element
        :param element: math element to apply delimiter
        :returns: new math delimiter'''
        ...

    @overload
    def create_math_delimiter(self, math_elements: IMathElementCollection) -> IMathDelimiter:
        '''Create a math delimiter by applying to the element
        :param math_elements: math elements to apply delimiter
        :returns: new math delimiter'''
        ...

    ...

class MathElementBase:
    '''Base class for IMathElement with the implementation of some methods that are common to all inherited classes
                For internal use only. Inherited class must be IMathElement.'''
    @overload
    def join(self, math_element: IMathElement) -> IMathBlock:
        '''Joins a mathematical element and forms a mathematical block
        :param math_element: The element to be joined
        :returns: A new IMathBlock containing this instance and specified argument'''
        ...

    @overload
    def join(self, math_text: str) -> IMathBlock:
        '''Joins a mathematical text and forms a mathematical block
        :param math_text: Mathematical text to be joined
        :returns: A new IMathBlock containing this instance and specified argument'''
        ...

    @overload
    def divide(self, denominator: IMathElement) -> IMathFraction:
        '''Creates a fraction with this numerator and specified denominator
        :param denominator: Denominator
        :returns: new fraction'''
        ...

    @overload
    def divide(self, denominator: str) -> IMathFraction:
        '''Creates a fraction with this numerator and specified denominator
        :param denominator: Denominator
        :returns: new fraction'''
        ...

    @overload
    def divide(self, denominator: IMathElement, fraction_type: MathFractionTypes) -> IMathFraction:
        '''Creates a fraction of the specified type with this numerator and specified denominator
        :param denominator: Denominator
        :param fraction_type: Fraction type: Bar, NoBar, Skewed, Linear
        :returns: new fraction'''
        ...

    @overload
    def divide(self, denominator: str, fraction_type: MathFractionTypes) -> IMathFraction:
        '''Creates a fraction of the specified type with this numerator and specified denominator
        :param denominator: Denominator
        :param fraction_type: Fraction type: Bar, NoBar, Skewed, Linear
        :returns: new fraction'''
        ...

    @overload
    def enclose(self) -> IMathDelimiter:
        '''Encloses a math element in parenthesis
        :returns: The math element of type :py:class:`aspose.slides.mathtext.IMathDelimiter` which includes the parenthesis'''
        ...

    @overload
    def enclose(self, beginning_character: char, ending_character: char) -> IMathDelimiter:
        '''Encloses a math element in specified characters such as parenthesis or another characters as framing
        :param beginning_character: Beginning character (usually left bracket)
        :param ending_character: Ending character (usually right bracket)
        :returns: The math element of type :py:class:`aspose.slides.mathtext.IMathDelimiter` which includes specified characters as framing'''
        ...

    @overload
    def function(self, function_argument: IMathElement) -> IMathFunction:
        '''Takes a function of an argument using this instance as the function name
        :param function_argument: An argument of the function
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathFunction`'''
        ...

    @overload
    def function(self, function_argument: str) -> IMathFunction:
        '''Takes a function of an argument using this instance as the function name
        :param function_argument: An argument of the function
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathFunction`'''
        ...

    @overload
    def as_argument_of_function(self, function_name: IMathElement) -> IMathFunction:
        '''Takes specified function using this instance as the argument
        :param function_name: Function name
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathFunction`'''
        ...

    @overload
    def as_argument_of_function(self, function_name: str) -> IMathFunction:
        '''Takes specified function using this instance as the argument
        :param function_name: Function name
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathFunction`'''
        ...

    @overload
    def as_argument_of_function(self, function_type: MathFunctionsOfOneArgument) -> IMathFunction:
        '''Takes specified function using this instance as the argument
        :param function_type: One of the common function type of one argument
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathFunction`'''
        ...

    @overload
    def as_argument_of_function(self, function_type: MathFunctionsOfTwoArguments, additional_argument: IMathElement) -> IMathFunction:
        '''Takes specified function using this instance as the argument and specified additional argument
        :param function_type: One of the common function type of two arguments: Log, Lim, Min, Max
        :param additional_argument: Additional argument depending on the type of function
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathFunction`'''
        ...

    @overload
    def as_argument_of_function(self, function_type: MathFunctionsOfTwoArguments, additional_argument: str) -> IMathFunction:
        '''Takes specified function using this instance as the argument and specified additional argument
        :param function_type: One of the common function type of two arguments: Log, Lim, Min, Max
        :param additional_argument: Additional argument depending on the type of function
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathFunction`'''
        ...

    @overload
    def set_subscript(self, subscript: IMathElement) -> IMathSubscriptElement:
        '''Creates subscript
        :param subscript: Subscript (lower index on the right)
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathSubscriptElement`'''
        ...

    @overload
    def set_subscript(self, subscript: str) -> IMathSubscriptElement:
        '''Creates subscript
        :param subscript: Subscript (lower index on the right)
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathSubscriptElement`'''
        ...

    @overload
    def set_superscript(self, superscript: IMathElement) -> IMathSuperscriptElement:
        '''Creates superscript
        :param superscript: Superscript (upper index on the right)
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathSuperscriptElement`'''
        ...

    @overload
    def set_superscript(self, superscript: str) -> IMathSuperscriptElement:
        '''Creates superscript
        :param superscript: Superscript (upper index on the right)
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathSuperscriptElement`'''
        ...

    @overload
    def set_sub_superscript_on_the_right(self, subscript: IMathElement, superscript: IMathElement) -> IMathRightSubSuperscriptElement:
        '''Creates subscript and superscript on the right
        :param subscript: Subscript (lower index on the right)
        :param superscript: Superscript (upper index on the right)
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathRightSubSuperscriptElement`'''
        ...

    @overload
    def set_sub_superscript_on_the_right(self, subscript: str, superscript: str) -> IMathRightSubSuperscriptElement:
        '''Creates subscript and superscript on the right
        :param subscript: Subscript (lower index on the right)
        :param superscript: Superscript (upper index on the right)
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathRightSubSuperscriptElement`'''
        ...

    @overload
    def set_sub_superscript_on_the_left(self, subscript: IMathElement, superscript: IMathElement) -> IMathLeftSubSuperscriptElement:
        '''Creates subscript and superscript on the left
        :param subscript: Subscript (lower index on the left)
        :param superscript: Superscript (upper index on the left)
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathLeftSubSuperscriptElement`'''
        ...

    @overload
    def set_sub_superscript_on_the_left(self, subscript: str, superscript: str) -> IMathLeftSubSuperscriptElement:
        '''Creates subscript and superscript on the left
        :param subscript: Subscript (lower index on the left)
        :param superscript: Superscript (upper index on the left)
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathLeftSubSuperscriptElement`'''
        ...

    @overload
    def radical(self, degree: IMathElement) -> IMathRadical:
        '''Specifies the mathematical root of the given degree from the specified argument.
        :param degree: Argument of Radical
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathRadical`'''
        ...

    @overload
    def radical(self, degree: str) -> IMathRadical:
        '''Specifies the mathematical root of the given degree from the specified argument.
        :param degree: Argument of Radical
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathRadical`'''
        ...

    @overload
    def set_upper_limit(self, limit: IMathElement) -> IMathLimit:
        '''Takes upper limit
        :param limit: limit
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathLimit`'''
        ...

    @overload
    def set_upper_limit(self, limit: str) -> IMathLimit:
        '''Takes upper limit
        :param limit: limit
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathLimit`'''
        ...

    @overload
    def set_lower_limit(self, limit: IMathElement) -> IMathLimit:
        '''Takes lower limit
        :param limit: limit
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathLimit`'''
        ...

    @overload
    def set_lower_limit(self, limit: str) -> IMathLimit:
        '''Takes lower limit
        :param limit: limit
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathLimit`'''
        ...

    @overload
    def nary(self, type: MathNaryOperatorTypes, lower_limit: IMathElement, upper_limit: IMathElement) -> IMathNaryOperator:
        '''Creates a N-ary operator
        :param type: The N-ary operator type
        :param lower_limit: The lower limit
        :param upper_limit: The upper limit
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathNaryOperator`'''
        ...

    @overload
    def nary(self, type: MathNaryOperatorTypes, lower_limit: str, upper_limit: str) -> IMathNaryOperator:
        '''Creates a N-ary operator
        :param type: The N-ary operator type
        :param lower_limit: The lower limit
        :param upper_limit: The upper limit
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathNaryOperator`'''
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes, lower_limit: IMathElement, upper_limit: IMathElement, limit_locations: MathLimitLocations) -> IMathNaryOperator:
        '''Takes the integral
        :param integral_type: Integral type
        :param lower_limit: Lower limit of integral
        :param upper_limit: Upper limit of integral
        :param limit_locations: location of limits
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathNaryOperator`'''
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes, lower_limit: IMathElement, upper_limit: IMathElement) -> IMathNaryOperator:
        '''Takes the integral
        :param integral_type: Integral type
        :param lower_limit: Lower limit of integral
        :param upper_limit: Upper limit of integral
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathNaryOperator`'''
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes) -> IMathNaryOperator:
        '''Takes the integral without limits
        :param integral_type: Integral type
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathNaryOperator`'''
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes, lower_limit: str, upper_limit: str, limit_locations: MathLimitLocations) -> IMathNaryOperator:
        '''Takes the integral
        :param integral_type: Integral type
        :param lower_limit: Lower limit of integral
        :param upper_limit: Upper limit of integral
        :param limit_locations: location of limits
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathNaryOperator`'''
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes, lower_limit: str, upper_limit: str) -> IMathNaryOperator:
        '''Takes the integral
        :param integral_type: Integral type
        :param lower_limit: Lower limit of integral
        :param upper_limit: Upper limit of integral
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathNaryOperator`'''
        ...

    @overload
    def group(self) -> IMathGroupingCharacter:
        '''Places this element in a group using a bottom curly bracket
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathGroupingCharacter`'''
        ...

    @overload
    def group(self, character: char, position: MathTopBotPositions, vertical_justification: MathTopBotPositions) -> IMathGroupingCharacter:
        '''Places this element in a group using a grouping character such as bottom curly bracket or another
        :param character: Grouping Character such as BOTTOM CURLY BRACKET (U+23DF) or any other
        :param position: Position of grouping character
        :param vertical_justification: Vertical justification of group character.
                    Specifies the alignment of the object with respect to the baseline.
                    For example, when the group character is above the object, 
                    VerticalJustification of Top signifies that the top of the object falls on the baseline;
                    when VerticalJustification is set to Bottom, the bottom of the object is on the baseline
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathGroupingCharacter`'''
        ...

    @overload
    def to_border_box(self) -> IMathBorderBox:
        '''Places this element in a border-box
        :returns: Border-box with this element placed inside'''
        ...

    @overload
    def to_border_box(self, hide_top: bool, hide_bottom: bool, hide_left: bool, hide_right: bool, strikethrough_horizontal: bool, strikethrough_vertical: bool, strikethrough_bottom_left_to_top_right: bool, strikethrough_top_left_to_bottom_right: bool) -> IMathBorderBox:
        '''Places this element in a border-box
        :param hide_top: Hide Top Edge
        :param hide_bottom: Hide Bottom Edge
        :param hide_left: Hide Left Edge
        :param hide_right: Hide Right Edge
        :param strikethrough_horizontal: Border Box Strikethrough Horizontal
        :param strikethrough_vertical: Border Box Strikethrough Vertical
        :param strikethrough_bottom_left_to_top_right: Border Box Strikethrough Bottom-Left to Top-Right
        :param strikethrough_top_left_to_bottom_right: Border Box Strikethrough Top-Left to Bottom-Right
        :returns: Border-box with this element placed inside'''
        ...

    def to_math_array(self) -> IMathArray:
        '''Puts in a vertical array
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathArray`'''
        ...

    def accent(self, accent_character: char) -> IMathAccent:
        '''Sets an accent mark (a character on the top of this element)
        :param accent_character: Accent character. The value should be within the range of (U+0300–U+036F) or (U+20D0–U+20EF)
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathAccent`'''
        ...

    def overbar(self) -> IMathBar:
        '''Sets a bar on the top of this element
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathBar`'''
        ...

    def underbar(self) -> IMathBar:
        '''Sets a bar on the bottom of this element
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathBar`'''
        ...

    def to_box(self) -> IMathBox:
        '''Places this element in a non-visual box (logical grouping) 
                    which is used to group components of an equation or other instance of mathematical text.
                    A boxed object can (for example) serve as an operator emulator with or without an alignment point, 
                    serve as a line break point, or be grouped such as not to allow line breaks within.
        :returns: Logical box with this element placed inside'''
        ...

    def get_children(self) -> List[IMathElement]:
        ...

    ...

class MathFraction(MathElementBase):
    '''Specifies the fraction object, consisting of a numerator and denominator separated by a fraction bar.
                The fraction bar can be horizontal or diagonal, depending on the fraction properties.
                The fraction object is also used to represent the stack function, which places one element above another, with no fraction bar.'''
    def __init__(self, numerator: IMathElement, denominator: IMathElement, fraction_type: MathFractionTypes):
        '''Initializes MathFraction with the specified numerator, denominator and type
        :param numerator: Numerator
        :param denominator: Denominator
        :param fraction_type: Fraction type'''
        ...

    def __init__(self, numerator: IMathElement, denominator: IMathElement):
        '''Initializes a MathFraction of type 'Bar' with the specified numerator and denominator
        :param numerator: Numerator
        :param denominator: Denominator'''
        ...

    @overload
    def join(self, math_element: IMathElement) -> IMathBlock:
        '''Joins a mathematical element and forms a mathematical block
        :param math_element: The element to be joined
        :returns: A new IMathBlock containing this instance and specified argument'''
        ...

    @overload
    def join(self, math_text: str) -> IMathBlock:
        '''Joins a mathematical text and forms a mathematical block
        :param math_text: Mathematical text to be joined
        :returns: A new IMathBlock containing this instance and specified argument'''
        ...

    @overload
    def divide(self, denominator: IMathElement) -> IMathFraction:
        '''Creates a fraction with this numerator and specified denominator
        :param denominator: Denominator
        :returns: new fraction'''
        ...

    @overload
    def divide(self, denominator: str) -> IMathFraction:
        '''Creates a fraction with this numerator and specified denominator
        :param denominator: Denominator
        :returns: new fraction'''
        ...

    @overload
    def divide(self, denominator: IMathElement, fraction_type: MathFractionTypes) -> IMathFraction:
        '''Creates a fraction of the specified type with this numerator and specified denominator
        :param denominator: Denominator
        :param fraction_type: Fraction type: Bar, NoBar, Skewed, Linear
        :returns: new fraction'''
        ...

    @overload
    def divide(self, denominator: str, fraction_type: MathFractionTypes) -> IMathFraction:
        '''Creates a fraction of the specified type with this numerator and specified denominator
        :param denominator: Denominator
        :param fraction_type: Fraction type: Bar, NoBar, Skewed, Linear
        :returns: new fraction'''
        ...

    @overload
    def enclose(self) -> IMathDelimiter:
        '''Encloses a math element in parenthesis
        :returns: The math element of type :py:class:`aspose.slides.mathtext.IMathDelimiter` which includes the parenthesis'''
        ...

    @overload
    def enclose(self, beginning_character: char, ending_character: char) -> IMathDelimiter:
        '''Encloses a math element in specified characters such as parenthesis or another characters as framing
        :param beginning_character: Beginning character (usually left bracket)
        :param ending_character: Ending character (usually right bracket)
        :returns: The math element of type :py:class:`aspose.slides.mathtext.IMathDelimiter` which includes specified characters as framing'''
        ...

    @overload
    def function(self, function_argument: IMathElement) -> IMathFunction:
        '''Takes a function of an argument using this instance as the function name
        :param function_argument: An argument of the function
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathFunction`'''
        ...

    @overload
    def function(self, function_argument: str) -> IMathFunction:
        '''Takes a function of an argument using this instance as the function name
        :param function_argument: An argument of the function
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathFunction`'''
        ...

    @overload
    def as_argument_of_function(self, function_name: IMathElement) -> IMathFunction:
        '''Takes specified function using this instance as the argument
        :param function_name: Function name
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathFunction`'''
        ...

    @overload
    def as_argument_of_function(self, function_name: str) -> IMathFunction:
        '''Takes specified function using this instance as the argument
        :param function_name: Function name
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathFunction`'''
        ...

    @overload
    def as_argument_of_function(self, function_type: MathFunctionsOfOneArgument) -> IMathFunction:
        '''Takes specified function using this instance as the argument
        :param function_type: One of the common function type of one argument
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathFunction`'''
        ...

    @overload
    def as_argument_of_function(self, function_type: MathFunctionsOfTwoArguments, additional_argument: IMathElement) -> IMathFunction:
        '''Takes specified function using this instance as the argument and specified additional argument
        :param function_type: One of the common function type of two arguments: Log, Lim, Min, Max
        :param additional_argument: Additional argument depending on the type of function
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathFunction`'''
        ...

    @overload
    def as_argument_of_function(self, function_type: MathFunctionsOfTwoArguments, additional_argument: str) -> IMathFunction:
        '''Takes specified function using this instance as the argument and specified additional argument
        :param function_type: One of the common function type of two arguments: Log, Lim, Min, Max
        :param additional_argument: Additional argument depending on the type of function
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathFunction`'''
        ...

    @overload
    def set_subscript(self, subscript: IMathElement) -> IMathSubscriptElement:
        '''Creates subscript
        :param subscript: Subscript (lower index on the right)
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathSubscriptElement`'''
        ...

    @overload
    def set_subscript(self, subscript: str) -> IMathSubscriptElement:
        '''Creates subscript
        :param subscript: Subscript (lower index on the right)
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathSubscriptElement`'''
        ...

    @overload
    def set_superscript(self, superscript: IMathElement) -> IMathSuperscriptElement:
        '''Creates superscript
        :param superscript: Superscript (upper index on the right)
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathSuperscriptElement`'''
        ...

    @overload
    def set_superscript(self, superscript: str) -> IMathSuperscriptElement:
        '''Creates superscript
        :param superscript: Superscript (upper index on the right)
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathSuperscriptElement`'''
        ...

    @overload
    def set_sub_superscript_on_the_right(self, subscript: IMathElement, superscript: IMathElement) -> IMathRightSubSuperscriptElement:
        '''Creates subscript and superscript on the right
        :param subscript: Subscript (lower index on the right)
        :param superscript: Superscript (upper index on the right)
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathRightSubSuperscriptElement`'''
        ...

    @overload
    def set_sub_superscript_on_the_right(self, subscript: str, superscript: str) -> IMathRightSubSuperscriptElement:
        '''Creates subscript and superscript on the right
        :param subscript: Subscript (lower index on the right)
        :param superscript: Superscript (upper index on the right)
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathRightSubSuperscriptElement`'''
        ...

    @overload
    def set_sub_superscript_on_the_left(self, subscript: IMathElement, superscript: IMathElement) -> IMathLeftSubSuperscriptElement:
        '''Creates subscript and superscript on the left
        :param subscript: Subscript (lower index on the left)
        :param superscript: Superscript (upper index on the left)
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathLeftSubSuperscriptElement`'''
        ...

    @overload
    def set_sub_superscript_on_the_left(self, subscript: str, superscript: str) -> IMathLeftSubSuperscriptElement:
        '''Creates subscript and superscript on the left
        :param subscript: Subscript (lower index on the left)
        :param superscript: Superscript (upper index on the left)
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathLeftSubSuperscriptElement`'''
        ...

    @overload
    def radical(self, degree: IMathElement) -> IMathRadical:
        '''Specifies the mathematical root of the given degree from the specified argument.
        :param degree: Argument of Radical
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathRadical`'''
        ...

    @overload
    def radical(self, degree: str) -> IMathRadical:
        '''Specifies the mathematical root of the given degree from the specified argument.
        :param degree: Argument of Radical
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathRadical`'''
        ...

    @overload
    def set_upper_limit(self, limit: IMathElement) -> IMathLimit:
        '''Takes upper limit
        :param limit: limit
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathLimit`'''
        ...

    @overload
    def set_upper_limit(self, limit: str) -> IMathLimit:
        '''Takes upper limit
        :param limit: limit
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathLimit`'''
        ...

    @overload
    def set_lower_limit(self, limit: IMathElement) -> IMathLimit:
        '''Takes lower limit
        :param limit: limit
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathLimit`'''
        ...

    @overload
    def set_lower_limit(self, limit: str) -> IMathLimit:
        '''Takes lower limit
        :param limit: limit
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathLimit`'''
        ...

    @overload
    def nary(self, type: MathNaryOperatorTypes, lower_limit: IMathElement, upper_limit: IMathElement) -> IMathNaryOperator:
        '''Creates a N-ary operator
        :param type: The N-ary operator type
        :param lower_limit: The lower limit
        :param upper_limit: The upper limit
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathNaryOperator`'''
        ...

    @overload
    def nary(self, type: MathNaryOperatorTypes, lower_limit: str, upper_limit: str) -> IMathNaryOperator:
        '''Creates a N-ary operator
        :param type: The N-ary operator type
        :param lower_limit: The lower limit
        :param upper_limit: The upper limit
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathNaryOperator`'''
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes, lower_limit: IMathElement, upper_limit: IMathElement, limit_locations: MathLimitLocations) -> IMathNaryOperator:
        '''Takes the integral
        :param integral_type: Integral type
        :param lower_limit: Lower limit of integral
        :param upper_limit: Upper limit of integral
        :param limit_locations: location of limits
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathNaryOperator`'''
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes, lower_limit: IMathElement, upper_limit: IMathElement) -> IMathNaryOperator:
        '''Takes the integral
        :param integral_type: Integral type
        :param lower_limit: Lower limit of integral
        :param upper_limit: Upper limit of integral
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathNaryOperator`'''
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes) -> IMathNaryOperator:
        '''Takes the integral without limits
        :param integral_type: Integral type
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathNaryOperator`'''
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes, lower_limit: str, upper_limit: str, limit_locations: MathLimitLocations) -> IMathNaryOperator:
        '''Takes the integral
        :param integral_type: Integral type
        :param lower_limit: Lower limit of integral
        :param upper_limit: Upper limit of integral
        :param limit_locations: location of limits
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathNaryOperator`'''
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes, lower_limit: str, upper_limit: str) -> IMathNaryOperator:
        '''Takes the integral
        :param integral_type: Integral type
        :param lower_limit: Lower limit of integral
        :param upper_limit: Upper limit of integral
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathNaryOperator`'''
        ...

    @overload
    def group(self) -> IMathGroupingCharacter:
        '''Places this element in a group using a bottom curly bracket
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathGroupingCharacter`'''
        ...

    @overload
    def group(self, character: char, position: MathTopBotPositions, vertical_justification: MathTopBotPositions) -> IMathGroupingCharacter:
        '''Places this element in a group using a grouping character such as bottom curly bracket or another
        :param character: Grouping Character such as BOTTOM CURLY BRACKET (U+23DF) or any other
        :param position: Position of grouping character
        :param vertical_justification: Vertical justification of group character.
                    Specifies the alignment of the object with respect to the baseline.
                    For example, when the group character is above the object, 
                    VerticalJustification of Top signifies that the top of the object falls on the baseline;
                    when VerticalJustification is set to Bottom, the bottom of the object is on the baseline
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathGroupingCharacter`'''
        ...

    @overload
    def to_border_box(self) -> IMathBorderBox:
        '''Places this element in a border-box
        :returns: Border-box with this element placed inside'''
        ...

    @overload
    def to_border_box(self, hide_top: bool, hide_bottom: bool, hide_left: bool, hide_right: bool, strikethrough_horizontal: bool, strikethrough_vertical: bool, strikethrough_bottom_left_to_top_right: bool, strikethrough_top_left_to_bottom_right: bool) -> IMathBorderBox:
        '''Places this element in a border-box
        :param hide_top: Hide Top Edge
        :param hide_bottom: Hide Bottom Edge
        :param hide_left: Hide Left Edge
        :param hide_right: Hide Right Edge
        :param strikethrough_horizontal: Border Box Strikethrough Horizontal
        :param strikethrough_vertical: Border Box Strikethrough Vertical
        :param strikethrough_bottom_left_to_top_right: Border Box Strikethrough Bottom-Left to Top-Right
        :param strikethrough_top_left_to_bottom_right: Border Box Strikethrough Top-Left to Bottom-Right
        :returns: Border-box with this element placed inside'''
        ...

    def to_math_array(self) -> IMathArray:
        '''Puts in a vertical array
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathArray`'''
        ...

    def accent(self, accent_character: char) -> IMathAccent:
        '''Sets an accent mark (a character on the top of this element)
        :param accent_character: Accent character. The value should be within the range of (U+0300–U+036F) or (U+20D0–U+20EF)
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathAccent`'''
        ...

    def overbar(self) -> IMathBar:
        '''Sets a bar on the top of this element
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathBar`'''
        ...

    def underbar(self) -> IMathBar:
        '''Sets a bar on the bottom of this element
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathBar`'''
        ...

    def to_box(self) -> IMathBox:
        '''Places this element in a non-visual box (logical grouping) 
                    which is used to group components of an equation or other instance of mathematical text.
                    A boxed object can (for example) serve as an operator emulator with or without an alignment point, 
                    serve as a line break point, or be grouped such as not to allow line breaks within.
        :returns: Logical box with this element placed inside'''
        ...

    def get_children(self) -> List[IMathElement]:
        '''Get children elements'''
        ...

    @property
    def fraction_type(self) -> MathFractionTypes:
        ...

    @fraction_type.setter
    def fraction_type(self, value: MathFractionTypes):
        ...

    @property
    def numerator(self) -> IMathElement:
        '''Numerator'''
        ...

    @property
    def denominator(self) -> IMathElement:
        '''Denominator'''
        ...

    @property
    def as_i_math_element(self) -> IMathElement:
        ...

    ...

class MathFractionFactory:
    '''Allows to create a math fraction'''
    def __init__(self):
        ...

    @overload
    def create_math_fraction(self, numerator: IMathElement, denominator: IMathElement, fraction_type: MathFractionTypes) -> IMathFraction:
        '''Creates a math fraction
        :param numerator: Numerator
        :param denominator: Denominator
        :param fraction_type: Fraction type'''
        ...

    @overload
    def create_math_fraction(self, numerator: IMathElement, denominator: IMathElement) -> IMathFraction:
        '''Creates a math fraction
        :param numerator: Numerator
        :param denominator: Denominator'''
        ...

    ...

class MathFunction(MathElementBase):
    '''Specifies a function of an argument.'''
    def __init__(self, func_name: IMathElement, base_argument: IMathElement):
        '''Initializes a new instance of the MathFunction class.'''
        ...

    def __init__(self, func_name: str, base_argument: IMathElement):
        '''Initializes a new instance of the MathFunction class.'''
        ...

    @overload
    def join(self, math_element: IMathElement) -> IMathBlock:
        '''Joins a mathematical element and forms a mathematical block
        :param math_element: The element to be joined
        :returns: A new IMathBlock containing this instance and specified argument'''
        ...

    @overload
    def join(self, math_text: str) -> IMathBlock:
        '''Joins a mathematical text and forms a mathematical block
        :param math_text: Mathematical text to be joined
        :returns: A new IMathBlock containing this instance and specified argument'''
        ...

    @overload
    def divide(self, denominator: IMathElement) -> IMathFraction:
        '''Creates a fraction with this numerator and specified denominator
        :param denominator: Denominator
        :returns: new fraction'''
        ...

    @overload
    def divide(self, denominator: str) -> IMathFraction:
        '''Creates a fraction with this numerator and specified denominator
        :param denominator: Denominator
        :returns: new fraction'''
        ...

    @overload
    def divide(self, denominator: IMathElement, fraction_type: MathFractionTypes) -> IMathFraction:
        '''Creates a fraction of the specified type with this numerator and specified denominator
        :param denominator: Denominator
        :param fraction_type: Fraction type: Bar, NoBar, Skewed, Linear
        :returns: new fraction'''
        ...

    @overload
    def divide(self, denominator: str, fraction_type: MathFractionTypes) -> IMathFraction:
        '''Creates a fraction of the specified type with this numerator and specified denominator
        :param denominator: Denominator
        :param fraction_type: Fraction type: Bar, NoBar, Skewed, Linear
        :returns: new fraction'''
        ...

    @overload
    def enclose(self) -> IMathDelimiter:
        '''Encloses a math element in parenthesis
        :returns: The math element of type :py:class:`aspose.slides.mathtext.IMathDelimiter` which includes the parenthesis'''
        ...

    @overload
    def enclose(self, beginning_character: char, ending_character: char) -> IMathDelimiter:
        '''Encloses a math element in specified characters such as parenthesis or another characters as framing
        :param beginning_character: Beginning character (usually left bracket)
        :param ending_character: Ending character (usually right bracket)
        :returns: The math element of type :py:class:`aspose.slides.mathtext.IMathDelimiter` which includes specified characters as framing'''
        ...

    @overload
    def function(self, function_argument: IMathElement) -> IMathFunction:
        '''Takes a function of an argument using this instance as the function name
        :param function_argument: An argument of the function
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathFunction`'''
        ...

    @overload
    def function(self, function_argument: str) -> IMathFunction:
        '''Takes a function of an argument using this instance as the function name
        :param function_argument: An argument of the function
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathFunction`'''
        ...

    @overload
    def as_argument_of_function(self, function_name: IMathElement) -> IMathFunction:
        '''Takes specified function using this instance as the argument
        :param function_name: Function name
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathFunction`'''
        ...

    @overload
    def as_argument_of_function(self, function_name: str) -> IMathFunction:
        '''Takes specified function using this instance as the argument
        :param function_name: Function name
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathFunction`'''
        ...

    @overload
    def as_argument_of_function(self, function_type: MathFunctionsOfOneArgument) -> IMathFunction:
        '''Takes specified function using this instance as the argument
        :param function_type: One of the common function type of one argument
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathFunction`'''
        ...

    @overload
    def as_argument_of_function(self, function_type: MathFunctionsOfTwoArguments, additional_argument: IMathElement) -> IMathFunction:
        '''Takes specified function using this instance as the argument and specified additional argument
        :param function_type: One of the common function type of two arguments: Log, Lim, Min, Max
        :param additional_argument: Additional argument depending on the type of function
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathFunction`'''
        ...

    @overload
    def as_argument_of_function(self, function_type: MathFunctionsOfTwoArguments, additional_argument: str) -> IMathFunction:
        '''Takes specified function using this instance as the argument and specified additional argument
        :param function_type: One of the common function type of two arguments: Log, Lim, Min, Max
        :param additional_argument: Additional argument depending on the type of function
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathFunction`'''
        ...

    @overload
    def set_subscript(self, subscript: IMathElement) -> IMathSubscriptElement:
        '''Creates subscript
        :param subscript: Subscript (lower index on the right)
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathSubscriptElement`'''
        ...

    @overload
    def set_subscript(self, subscript: str) -> IMathSubscriptElement:
        '''Creates subscript
        :param subscript: Subscript (lower index on the right)
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathSubscriptElement`'''
        ...

    @overload
    def set_superscript(self, superscript: IMathElement) -> IMathSuperscriptElement:
        '''Creates superscript
        :param superscript: Superscript (upper index on the right)
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathSuperscriptElement`'''
        ...

    @overload
    def set_superscript(self, superscript: str) -> IMathSuperscriptElement:
        '''Creates superscript
        :param superscript: Superscript (upper index on the right)
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathSuperscriptElement`'''
        ...

    @overload
    def set_sub_superscript_on_the_right(self, subscript: IMathElement, superscript: IMathElement) -> IMathRightSubSuperscriptElement:
        '''Creates subscript and superscript on the right
        :param subscript: Subscript (lower index on the right)
        :param superscript: Superscript (upper index on the right)
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathRightSubSuperscriptElement`'''
        ...

    @overload
    def set_sub_superscript_on_the_right(self, subscript: str, superscript: str) -> IMathRightSubSuperscriptElement:
        '''Creates subscript and superscript on the right
        :param subscript: Subscript (lower index on the right)
        :param superscript: Superscript (upper index on the right)
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathRightSubSuperscriptElement`'''
        ...

    @overload
    def set_sub_superscript_on_the_left(self, subscript: IMathElement, superscript: IMathElement) -> IMathLeftSubSuperscriptElement:
        '''Creates subscript and superscript on the left
        :param subscript: Subscript (lower index on the left)
        :param superscript: Superscript (upper index on the left)
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathLeftSubSuperscriptElement`'''
        ...

    @overload
    def set_sub_superscript_on_the_left(self, subscript: str, superscript: str) -> IMathLeftSubSuperscriptElement:
        '''Creates subscript and superscript on the left
        :param subscript: Subscript (lower index on the left)
        :param superscript: Superscript (upper index on the left)
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathLeftSubSuperscriptElement`'''
        ...

    @overload
    def radical(self, degree: IMathElement) -> IMathRadical:
        '''Specifies the mathematical root of the given degree from the specified argument.
        :param degree: Argument of Radical
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathRadical`'''
        ...

    @overload
    def radical(self, degree: str) -> IMathRadical:
        '''Specifies the mathematical root of the given degree from the specified argument.
        :param degree: Argument of Radical
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathRadical`'''
        ...

    @overload
    def set_upper_limit(self, limit: IMathElement) -> IMathLimit:
        '''Takes upper limit
        :param limit: limit
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathLimit`'''
        ...

    @overload
    def set_upper_limit(self, limit: str) -> IMathLimit:
        '''Takes upper limit
        :param limit: limit
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathLimit`'''
        ...

    @overload
    def set_lower_limit(self, limit: IMathElement) -> IMathLimit:
        '''Takes lower limit
        :param limit: limit
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathLimit`'''
        ...

    @overload
    def set_lower_limit(self, limit: str) -> IMathLimit:
        '''Takes lower limit
        :param limit: limit
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathLimit`'''
        ...

    @overload
    def nary(self, type: MathNaryOperatorTypes, lower_limit: IMathElement, upper_limit: IMathElement) -> IMathNaryOperator:
        '''Creates a N-ary operator
        :param type: The N-ary operator type
        :param lower_limit: The lower limit
        :param upper_limit: The upper limit
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathNaryOperator`'''
        ...

    @overload
    def nary(self, type: MathNaryOperatorTypes, lower_limit: str, upper_limit: str) -> IMathNaryOperator:
        '''Creates a N-ary operator
        :param type: The N-ary operator type
        :param lower_limit: The lower limit
        :param upper_limit: The upper limit
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathNaryOperator`'''
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes, lower_limit: IMathElement, upper_limit: IMathElement, limit_locations: MathLimitLocations) -> IMathNaryOperator:
        '''Takes the integral
        :param integral_type: Integral type
        :param lower_limit: Lower limit of integral
        :param upper_limit: Upper limit of integral
        :param limit_locations: location of limits
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathNaryOperator`'''
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes, lower_limit: IMathElement, upper_limit: IMathElement) -> IMathNaryOperator:
        '''Takes the integral
        :param integral_type: Integral type
        :param lower_limit: Lower limit of integral
        :param upper_limit: Upper limit of integral
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathNaryOperator`'''
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes) -> IMathNaryOperator:
        '''Takes the integral without limits
        :param integral_type: Integral type
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathNaryOperator`'''
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes, lower_limit: str, upper_limit: str, limit_locations: MathLimitLocations) -> IMathNaryOperator:
        '''Takes the integral
        :param integral_type: Integral type
        :param lower_limit: Lower limit of integral
        :param upper_limit: Upper limit of integral
        :param limit_locations: location of limits
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathNaryOperator`'''
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes, lower_limit: str, upper_limit: str) -> IMathNaryOperator:
        '''Takes the integral
        :param integral_type: Integral type
        :param lower_limit: Lower limit of integral
        :param upper_limit: Upper limit of integral
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathNaryOperator`'''
        ...

    @overload
    def group(self) -> IMathGroupingCharacter:
        '''Places this element in a group using a bottom curly bracket
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathGroupingCharacter`'''
        ...

    @overload
    def group(self, character: char, position: MathTopBotPositions, vertical_justification: MathTopBotPositions) -> IMathGroupingCharacter:
        '''Places this element in a group using a grouping character such as bottom curly bracket or another
        :param character: Grouping Character such as BOTTOM CURLY BRACKET (U+23DF) or any other
        :param position: Position of grouping character
        :param vertical_justification: Vertical justification of group character.
                    Specifies the alignment of the object with respect to the baseline.
                    For example, when the group character is above the object, 
                    VerticalJustification of Top signifies that the top of the object falls on the baseline;
                    when VerticalJustification is set to Bottom, the bottom of the object is on the baseline
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathGroupingCharacter`'''
        ...

    @overload
    def to_border_box(self) -> IMathBorderBox:
        '''Places this element in a border-box
        :returns: Border-box with this element placed inside'''
        ...

    @overload
    def to_border_box(self, hide_top: bool, hide_bottom: bool, hide_left: bool, hide_right: bool, strikethrough_horizontal: bool, strikethrough_vertical: bool, strikethrough_bottom_left_to_top_right: bool, strikethrough_top_left_to_bottom_right: bool) -> IMathBorderBox:
        '''Places this element in a border-box
        :param hide_top: Hide Top Edge
        :param hide_bottom: Hide Bottom Edge
        :param hide_left: Hide Left Edge
        :param hide_right: Hide Right Edge
        :param strikethrough_horizontal: Border Box Strikethrough Horizontal
        :param strikethrough_vertical: Border Box Strikethrough Vertical
        :param strikethrough_bottom_left_to_top_right: Border Box Strikethrough Bottom-Left to Top-Right
        :param strikethrough_top_left_to_bottom_right: Border Box Strikethrough Top-Left to Bottom-Right
        :returns: Border-box with this element placed inside'''
        ...

    def to_math_array(self) -> IMathArray:
        '''Puts in a vertical array
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathArray`'''
        ...

    def accent(self, accent_character: char) -> IMathAccent:
        '''Sets an accent mark (a character on the top of this element)
        :param accent_character: Accent character. The value should be within the range of (U+0300–U+036F) or (U+20D0–U+20EF)
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathAccent`'''
        ...

    def overbar(self) -> IMathBar:
        '''Sets a bar on the top of this element
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathBar`'''
        ...

    def underbar(self) -> IMathBar:
        '''Sets a bar on the bottom of this element
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathBar`'''
        ...

    def to_box(self) -> IMathBox:
        '''Places this element in a non-visual box (logical grouping) 
                    which is used to group components of an equation or other instance of mathematical text.
                    A boxed object can (for example) serve as an operator emulator with or without an alignment point, 
                    serve as a line break point, or be grouped such as not to allow line breaks within.
        :returns: Logical box with this element placed inside'''
        ...

    def get_children(self) -> List[IMathElement]:
        '''Get children elements'''
        ...

    @property
    def name(self) -> IMathElement:
        '''Function name
                    For example, function names are sin and cos'''
        ...

    @property
    def base(self) -> IMathElement:
        '''Function Argument'''
        ...

    @property
    def as_i_math_element(self) -> IMathElement:
        ...

    ...

class MathFunctionFactory:
    '''Allows to create a math function'''
    def __init__(self):
        ...

    @overload
    def create_math_function(self, func_name: IMathElement, base_argument: IMathElement) -> IMathFunction:
        '''Creates math function
        :param func_name: Element used as a function name
        :param base_argument: Element used as a function argument
        :returns: new math function'''
        ...

    @overload
    def create_math_function(self, func_name: str, base_argument: IMathElement) -> IMathFunction:
        '''Creates math function
        :param func_name: Function name
        :param base_argument: Element used as a function argument
        :returns: new math function'''
        ...

    ...

class MathGroupingCharacter(MathElementBase):
    '''Specifies a grouping symbol above or below an expression, usually to highlight the relationship between elements'''
    def __init__(self, element: IMathElement):
        '''Initializes a new instance of the MathGroupingCharacter class 
                    with the default grouping character U+23DF (BOTTOM CURLY BRACKET)
        :param element: The base element to which the bar is applied'''
        ...

    def __init__(self, element: IMathElement, character: char, position: MathTopBotPositions, vertical_justification: MathTopBotPositions):
        '''Initializes a new instance of the MathGroupingCharacter class.
        :param element: The base element to which the bar is applied
        :param character: Grouping Character
        :param position: Position of grouping character
        :param vertical_justification: Vertical justification of group character'''
        ...

    @overload
    def join(self, math_element: IMathElement) -> IMathBlock:
        '''Joins a mathematical element and forms a mathematical block
        :param math_element: The element to be joined
        :returns: A new IMathBlock containing this instance and specified argument'''
        ...

    @overload
    def join(self, math_text: str) -> IMathBlock:
        '''Joins a mathematical text and forms a mathematical block
        :param math_text: Mathematical text to be joined
        :returns: A new IMathBlock containing this instance and specified argument'''
        ...

    @overload
    def divide(self, denominator: IMathElement) -> IMathFraction:
        '''Creates a fraction with this numerator and specified denominator
        :param denominator: Denominator
        :returns: new fraction'''
        ...

    @overload
    def divide(self, denominator: str) -> IMathFraction:
        '''Creates a fraction with this numerator and specified denominator
        :param denominator: Denominator
        :returns: new fraction'''
        ...

    @overload
    def divide(self, denominator: IMathElement, fraction_type: MathFractionTypes) -> IMathFraction:
        '''Creates a fraction of the specified type with this numerator and specified denominator
        :param denominator: Denominator
        :param fraction_type: Fraction type: Bar, NoBar, Skewed, Linear
        :returns: new fraction'''
        ...

    @overload
    def divide(self, denominator: str, fraction_type: MathFractionTypes) -> IMathFraction:
        '''Creates a fraction of the specified type with this numerator and specified denominator
        :param denominator: Denominator
        :param fraction_type: Fraction type: Bar, NoBar, Skewed, Linear
        :returns: new fraction'''
        ...

    @overload
    def enclose(self) -> IMathDelimiter:
        '''Encloses a math element in parenthesis
        :returns: The math element of type :py:class:`aspose.slides.mathtext.IMathDelimiter` which includes the parenthesis'''
        ...

    @overload
    def enclose(self, beginning_character: char, ending_character: char) -> IMathDelimiter:
        '''Encloses a math element in specified characters such as parenthesis or another characters as framing
        :param beginning_character: Beginning character (usually left bracket)
        :param ending_character: Ending character (usually right bracket)
        :returns: The math element of type :py:class:`aspose.slides.mathtext.IMathDelimiter` which includes specified characters as framing'''
        ...

    @overload
    def function(self, function_argument: IMathElement) -> IMathFunction:
        '''Takes a function of an argument using this instance as the function name
        :param function_argument: An argument of the function
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathFunction`'''
        ...

    @overload
    def function(self, function_argument: str) -> IMathFunction:
        '''Takes a function of an argument using this instance as the function name
        :param function_argument: An argument of the function
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathFunction`'''
        ...

    @overload
    def as_argument_of_function(self, function_name: IMathElement) -> IMathFunction:
        '''Takes specified function using this instance as the argument
        :param function_name: Function name
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathFunction`'''
        ...

    @overload
    def as_argument_of_function(self, function_name: str) -> IMathFunction:
        '''Takes specified function using this instance as the argument
        :param function_name: Function name
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathFunction`'''
        ...

    @overload
    def as_argument_of_function(self, function_type: MathFunctionsOfOneArgument) -> IMathFunction:
        '''Takes specified function using this instance as the argument
        :param function_type: One of the common function type of one argument
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathFunction`'''
        ...

    @overload
    def as_argument_of_function(self, function_type: MathFunctionsOfTwoArguments, additional_argument: IMathElement) -> IMathFunction:
        '''Takes specified function using this instance as the argument and specified additional argument
        :param function_type: One of the common function type of two arguments: Log, Lim, Min, Max
        :param additional_argument: Additional argument depending on the type of function
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathFunction`'''
        ...

    @overload
    def as_argument_of_function(self, function_type: MathFunctionsOfTwoArguments, additional_argument: str) -> IMathFunction:
        '''Takes specified function using this instance as the argument and specified additional argument
        :param function_type: One of the common function type of two arguments: Log, Lim, Min, Max
        :param additional_argument: Additional argument depending on the type of function
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathFunction`'''
        ...

    @overload
    def set_subscript(self, subscript: IMathElement) -> IMathSubscriptElement:
        '''Creates subscript
        :param subscript: Subscript (lower index on the right)
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathSubscriptElement`'''
        ...

    @overload
    def set_subscript(self, subscript: str) -> IMathSubscriptElement:
        '''Creates subscript
        :param subscript: Subscript (lower index on the right)
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathSubscriptElement`'''
        ...

    @overload
    def set_superscript(self, superscript: IMathElement) -> IMathSuperscriptElement:
        '''Creates superscript
        :param superscript: Superscript (upper index on the right)
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathSuperscriptElement`'''
        ...

    @overload
    def set_superscript(self, superscript: str) -> IMathSuperscriptElement:
        '''Creates superscript
        :param superscript: Superscript (upper index on the right)
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathSuperscriptElement`'''
        ...

    @overload
    def set_sub_superscript_on_the_right(self, subscript: IMathElement, superscript: IMathElement) -> IMathRightSubSuperscriptElement:
        '''Creates subscript and superscript on the right
        :param subscript: Subscript (lower index on the right)
        :param superscript: Superscript (upper index on the right)
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathRightSubSuperscriptElement`'''
        ...

    @overload
    def set_sub_superscript_on_the_right(self, subscript: str, superscript: str) -> IMathRightSubSuperscriptElement:
        '''Creates subscript and superscript on the right
        :param subscript: Subscript (lower index on the right)
        :param superscript: Superscript (upper index on the right)
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathRightSubSuperscriptElement`'''
        ...

    @overload
    def set_sub_superscript_on_the_left(self, subscript: IMathElement, superscript: IMathElement) -> IMathLeftSubSuperscriptElement:
        '''Creates subscript and superscript on the left
        :param subscript: Subscript (lower index on the left)
        :param superscript: Superscript (upper index on the left)
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathLeftSubSuperscriptElement`'''
        ...

    @overload
    def set_sub_superscript_on_the_left(self, subscript: str, superscript: str) -> IMathLeftSubSuperscriptElement:
        '''Creates subscript and superscript on the left
        :param subscript: Subscript (lower index on the left)
        :param superscript: Superscript (upper index on the left)
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathLeftSubSuperscriptElement`'''
        ...

    @overload
    def radical(self, degree: IMathElement) -> IMathRadical:
        '''Specifies the mathematical root of the given degree from the specified argument.
        :param degree: Argument of Radical
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathRadical`'''
        ...

    @overload
    def radical(self, degree: str) -> IMathRadical:
        '''Specifies the mathematical root of the given degree from the specified argument.
        :param degree: Argument of Radical
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathRadical`'''
        ...

    @overload
    def set_upper_limit(self, limit: IMathElement) -> IMathLimit:
        '''Takes upper limit
        :param limit: limit
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathLimit`'''
        ...

    @overload
    def set_upper_limit(self, limit: str) -> IMathLimit:
        '''Takes upper limit
        :param limit: limit
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathLimit`'''
        ...

    @overload
    def set_lower_limit(self, limit: IMathElement) -> IMathLimit:
        '''Takes lower limit
        :param limit: limit
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathLimit`'''
        ...

    @overload
    def set_lower_limit(self, limit: str) -> IMathLimit:
        '''Takes lower limit
        :param limit: limit
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathLimit`'''
        ...

    @overload
    def nary(self, type: MathNaryOperatorTypes, lower_limit: IMathElement, upper_limit: IMathElement) -> IMathNaryOperator:
        '''Creates a N-ary operator
        :param type: The N-ary operator type
        :param lower_limit: The lower limit
        :param upper_limit: The upper limit
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathNaryOperator`'''
        ...

    @overload
    def nary(self, type: MathNaryOperatorTypes, lower_limit: str, upper_limit: str) -> IMathNaryOperator:
        '''Creates a N-ary operator
        :param type: The N-ary operator type
        :param lower_limit: The lower limit
        :param upper_limit: The upper limit
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathNaryOperator`'''
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes, lower_limit: IMathElement, upper_limit: IMathElement, limit_locations: MathLimitLocations) -> IMathNaryOperator:
        '''Takes the integral
        :param integral_type: Integral type
        :param lower_limit: Lower limit of integral
        :param upper_limit: Upper limit of integral
        :param limit_locations: location of limits
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathNaryOperator`'''
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes, lower_limit: IMathElement, upper_limit: IMathElement) -> IMathNaryOperator:
        '''Takes the integral
        :param integral_type: Integral type
        :param lower_limit: Lower limit of integral
        :param upper_limit: Upper limit of integral
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathNaryOperator`'''
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes) -> IMathNaryOperator:
        '''Takes the integral without limits
        :param integral_type: Integral type
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathNaryOperator`'''
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes, lower_limit: str, upper_limit: str, limit_locations: MathLimitLocations) -> IMathNaryOperator:
        '''Takes the integral
        :param integral_type: Integral type
        :param lower_limit: Lower limit of integral
        :param upper_limit: Upper limit of integral
        :param limit_locations: location of limits
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathNaryOperator`'''
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes, lower_limit: str, upper_limit: str) -> IMathNaryOperator:
        '''Takes the integral
        :param integral_type: Integral type
        :param lower_limit: Lower limit of integral
        :param upper_limit: Upper limit of integral
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathNaryOperator`'''
        ...

    @overload
    def group(self) -> IMathGroupingCharacter:
        '''Places this element in a group using a bottom curly bracket
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathGroupingCharacter`'''
        ...

    @overload
    def group(self, character: char, position: MathTopBotPositions, vertical_justification: MathTopBotPositions) -> IMathGroupingCharacter:
        '''Places this element in a group using a grouping character such as bottom curly bracket or another
        :param character: Grouping Character such as BOTTOM CURLY BRACKET (U+23DF) or any other
        :param position: Position of grouping character
        :param vertical_justification: Vertical justification of group character.
                    Specifies the alignment of the object with respect to the baseline.
                    For example, when the group character is above the object, 
                    VerticalJustification of Top signifies that the top of the object falls on the baseline;
                    when VerticalJustification is set to Bottom, the bottom of the object is on the baseline
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathGroupingCharacter`'''
        ...

    @overload
    def to_border_box(self) -> IMathBorderBox:
        '''Places this element in a border-box
        :returns: Border-box with this element placed inside'''
        ...

    @overload
    def to_border_box(self, hide_top: bool, hide_bottom: bool, hide_left: bool, hide_right: bool, strikethrough_horizontal: bool, strikethrough_vertical: bool, strikethrough_bottom_left_to_top_right: bool, strikethrough_top_left_to_bottom_right: bool) -> IMathBorderBox:
        '''Places this element in a border-box
        :param hide_top: Hide Top Edge
        :param hide_bottom: Hide Bottom Edge
        :param hide_left: Hide Left Edge
        :param hide_right: Hide Right Edge
        :param strikethrough_horizontal: Border Box Strikethrough Horizontal
        :param strikethrough_vertical: Border Box Strikethrough Vertical
        :param strikethrough_bottom_left_to_top_right: Border Box Strikethrough Bottom-Left to Top-Right
        :param strikethrough_top_left_to_bottom_right: Border Box Strikethrough Top-Left to Bottom-Right
        :returns: Border-box with this element placed inside'''
        ...

    def to_math_array(self) -> IMathArray:
        '''Puts in a vertical array
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathArray`'''
        ...

    def accent(self, accent_character: char) -> IMathAccent:
        '''Sets an accent mark (a character on the top of this element)
        :param accent_character: Accent character. The value should be within the range of (U+0300–U+036F) or (U+20D0–U+20EF)
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathAccent`'''
        ...

    def overbar(self) -> IMathBar:
        '''Sets a bar on the top of this element
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathBar`'''
        ...

    def underbar(self) -> IMathBar:
        '''Sets a bar on the bottom of this element
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathBar`'''
        ...

    def to_box(self) -> IMathBox:
        '''Places this element in a non-visual box (logical grouping) 
                    which is used to group components of an equation or other instance of mathematical text.
                    A boxed object can (for example) serve as an operator emulator with or without an alignment point, 
                    serve as a line break point, or be grouped such as not to allow line breaks within.
        :returns: Logical box with this element placed inside'''
        ...

    def get_children(self) -> List[IMathElement]:
        '''Get children elements'''
        ...

    @property
    def base(self) -> IMathElement:
        '''Base argument'''
        ...

    @property
    def character(self) -> char:
        '''Grouping Character
                    Default value: U+23DF (BOTTOM CURLY BRACKET)'''
        ...

    @character.setter
    def character(self, value: char):
        '''Grouping Character
                    Default value: U+23DF (BOTTOM CURLY BRACKET)'''
        ...

    @property
    def position(self) -> MathTopBotPositions:
        '''Position of grouping character.
                    Default: Bottom'''
        ...

    @position.setter
    def position(self, value: MathTopBotPositions):
        '''Position of grouping character.
                    Default: Bottom'''
        ...

    @property
    def vertical_justification(self) -> MathTopBotPositions:
        ...

    @vertical_justification.setter
    def vertical_justification(self, value: MathTopBotPositions):
        ...

    @property
    def as_i_math_element(self) -> IMathElement:
        ...

    ...

class MathGroupingCharacterFactory:
    '''Allows to create a math grouping character'''
    def __init__(self):
        ...

    @overload
    def create_math_grouping_character(self, element: IMathElement, character: char, position: MathTopBotPositions, vertical_justification: MathTopBotPositions) -> IMathGroupingCharacter:
        '''Creates a math grouping character
        :param element: math element to apply grouping character
        :param character: grouping character
        :param position: position of grouping character
        :param vertical_justification: vertical justification
        :returns: new grouping character element'''
        ...

    @overload
    def create_math_grouping_character(self, element: IMathElement) -> IMathGroupingCharacter:
        '''Creates a math grouping character
        :param element: math element to apply grouping character
        :returns: new grouping character element'''
        ...

    ...

class MathLeftSubSuperscriptElement(BaseScript):
    '''Specifies the Sub-Superscript object, which consists of a base 
                and a subscript and superscript placed to the left of the base.'''
    def __init__(self, base_arg: IMathElement, sub_script: IMathElement, super_script: IMathElement):
        '''Initializes a new instance of the MathLeftSubSuperscriptElement class.'''
        ...

    @overload
    def join(self, math_element: IMathElement) -> IMathBlock:
        '''Joins a mathematical element and forms a mathematical block
        :param math_element: The element to be joined
        :returns: A new IMathBlock containing this instance and specified argument'''
        ...

    @overload
    def join(self, math_text: str) -> IMathBlock:
        '''Joins a mathematical text and forms a mathematical block
        :param math_text: Mathematical text to be joined
        :returns: A new IMathBlock containing this instance and specified argument'''
        ...

    @overload
    def divide(self, denominator: IMathElement) -> IMathFraction:
        '''Creates a fraction with this numerator and specified denominator
        :param denominator: Denominator
        :returns: new fraction'''
        ...

    @overload
    def divide(self, denominator: str) -> IMathFraction:
        '''Creates a fraction with this numerator and specified denominator
        :param denominator: Denominator
        :returns: new fraction'''
        ...

    @overload
    def divide(self, denominator: IMathElement, fraction_type: MathFractionTypes) -> IMathFraction:
        '''Creates a fraction of the specified type with this numerator and specified denominator
        :param denominator: Denominator
        :param fraction_type: Fraction type: Bar, NoBar, Skewed, Linear
        :returns: new fraction'''
        ...

    @overload
    def divide(self, denominator: str, fraction_type: MathFractionTypes) -> IMathFraction:
        '''Creates a fraction of the specified type with this numerator and specified denominator
        :param denominator: Denominator
        :param fraction_type: Fraction type: Bar, NoBar, Skewed, Linear
        :returns: new fraction'''
        ...

    @overload
    def enclose(self) -> IMathDelimiter:
        '''Encloses a math element in parenthesis
        :returns: The math element of type :py:class:`aspose.slides.mathtext.IMathDelimiter` which includes the parenthesis'''
        ...

    @overload
    def enclose(self, beginning_character: char, ending_character: char) -> IMathDelimiter:
        '''Encloses a math element in specified characters such as parenthesis or another characters as framing
        :param beginning_character: Beginning character (usually left bracket)
        :param ending_character: Ending character (usually right bracket)
        :returns: The math element of type :py:class:`aspose.slides.mathtext.IMathDelimiter` which includes specified characters as framing'''
        ...

    @overload
    def function(self, function_argument: IMathElement) -> IMathFunction:
        '''Takes a function of an argument using this instance as the function name
        :param function_argument: An argument of the function
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathFunction`'''
        ...

    @overload
    def function(self, function_argument: str) -> IMathFunction:
        '''Takes a function of an argument using this instance as the function name
        :param function_argument: An argument of the function
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathFunction`'''
        ...

    @overload
    def as_argument_of_function(self, function_name: IMathElement) -> IMathFunction:
        '''Takes specified function using this instance as the argument
        :param function_name: Function name
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathFunction`'''
        ...

    @overload
    def as_argument_of_function(self, function_name: str) -> IMathFunction:
        '''Takes specified function using this instance as the argument
        :param function_name: Function name
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathFunction`'''
        ...

    @overload
    def as_argument_of_function(self, function_type: MathFunctionsOfOneArgument) -> IMathFunction:
        '''Takes specified function using this instance as the argument
        :param function_type: One of the common function type of one argument
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathFunction`'''
        ...

    @overload
    def as_argument_of_function(self, function_type: MathFunctionsOfTwoArguments, additional_argument: IMathElement) -> IMathFunction:
        '''Takes specified function using this instance as the argument and specified additional argument
        :param function_type: One of the common function type of two arguments: Log, Lim, Min, Max
        :param additional_argument: Additional argument depending on the type of function
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathFunction`'''
        ...

    @overload
    def as_argument_of_function(self, function_type: MathFunctionsOfTwoArguments, additional_argument: str) -> IMathFunction:
        '''Takes specified function using this instance as the argument and specified additional argument
        :param function_type: One of the common function type of two arguments: Log, Lim, Min, Max
        :param additional_argument: Additional argument depending on the type of function
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathFunction`'''
        ...

    @overload
    def set_subscript(self, subscript: IMathElement) -> IMathSubscriptElement:
        '''Creates subscript
        :param subscript: Subscript (lower index on the right)
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathSubscriptElement`'''
        ...

    @overload
    def set_subscript(self, subscript: str) -> IMathSubscriptElement:
        '''Creates subscript
        :param subscript: Subscript (lower index on the right)
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathSubscriptElement`'''
        ...

    @overload
    def set_superscript(self, superscript: IMathElement) -> IMathSuperscriptElement:
        '''Creates superscript
        :param superscript: Superscript (upper index on the right)
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathSuperscriptElement`'''
        ...

    @overload
    def set_superscript(self, superscript: str) -> IMathSuperscriptElement:
        '''Creates superscript
        :param superscript: Superscript (upper index on the right)
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathSuperscriptElement`'''
        ...

    @overload
    def set_sub_superscript_on_the_right(self, subscript: IMathElement, superscript: IMathElement) -> IMathRightSubSuperscriptElement:
        '''Creates subscript and superscript on the right
        :param subscript: Subscript (lower index on the right)
        :param superscript: Superscript (upper index on the right)
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathRightSubSuperscriptElement`'''
        ...

    @overload
    def set_sub_superscript_on_the_right(self, subscript: str, superscript: str) -> IMathRightSubSuperscriptElement:
        '''Creates subscript and superscript on the right
        :param subscript: Subscript (lower index on the right)
        :param superscript: Superscript (upper index on the right)
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathRightSubSuperscriptElement`'''
        ...

    @overload
    def set_sub_superscript_on_the_left(self, subscript: IMathElement, superscript: IMathElement) -> IMathLeftSubSuperscriptElement:
        '''Creates subscript and superscript on the left
        :param subscript: Subscript (lower index on the left)
        :param superscript: Superscript (upper index on the left)
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathLeftSubSuperscriptElement`'''
        ...

    @overload
    def set_sub_superscript_on_the_left(self, subscript: str, superscript: str) -> IMathLeftSubSuperscriptElement:
        '''Creates subscript and superscript on the left
        :param subscript: Subscript (lower index on the left)
        :param superscript: Superscript (upper index on the left)
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathLeftSubSuperscriptElement`'''
        ...

    @overload
    def radical(self, degree: IMathElement) -> IMathRadical:
        '''Specifies the mathematical root of the given degree from the specified argument.
        :param degree: Argument of Radical
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathRadical`'''
        ...

    @overload
    def radical(self, degree: str) -> IMathRadical:
        '''Specifies the mathematical root of the given degree from the specified argument.
        :param degree: Argument of Radical
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathRadical`'''
        ...

    @overload
    def set_upper_limit(self, limit: IMathElement) -> IMathLimit:
        '''Takes upper limit
        :param limit: limit
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathLimit`'''
        ...

    @overload
    def set_upper_limit(self, limit: str) -> IMathLimit:
        '''Takes upper limit
        :param limit: limit
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathLimit`'''
        ...

    @overload
    def set_lower_limit(self, limit: IMathElement) -> IMathLimit:
        '''Takes lower limit
        :param limit: limit
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathLimit`'''
        ...

    @overload
    def set_lower_limit(self, limit: str) -> IMathLimit:
        '''Takes lower limit
        :param limit: limit
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathLimit`'''
        ...

    @overload
    def nary(self, type: MathNaryOperatorTypes, lower_limit: IMathElement, upper_limit: IMathElement) -> IMathNaryOperator:
        '''Creates a N-ary operator
        :param type: The N-ary operator type
        :param lower_limit: The lower limit
        :param upper_limit: The upper limit
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathNaryOperator`'''
        ...

    @overload
    def nary(self, type: MathNaryOperatorTypes, lower_limit: str, upper_limit: str) -> IMathNaryOperator:
        '''Creates a N-ary operator
        :param type: The N-ary operator type
        :param lower_limit: The lower limit
        :param upper_limit: The upper limit
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathNaryOperator`'''
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes, lower_limit: IMathElement, upper_limit: IMathElement, limit_locations: MathLimitLocations) -> IMathNaryOperator:
        '''Takes the integral
        :param integral_type: Integral type
        :param lower_limit: Lower limit of integral
        :param upper_limit: Upper limit of integral
        :param limit_locations: location of limits
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathNaryOperator`'''
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes, lower_limit: IMathElement, upper_limit: IMathElement) -> IMathNaryOperator:
        '''Takes the integral
        :param integral_type: Integral type
        :param lower_limit: Lower limit of integral
        :param upper_limit: Upper limit of integral
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathNaryOperator`'''
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes) -> IMathNaryOperator:
        '''Takes the integral without limits
        :param integral_type: Integral type
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathNaryOperator`'''
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes, lower_limit: str, upper_limit: str, limit_locations: MathLimitLocations) -> IMathNaryOperator:
        '''Takes the integral
        :param integral_type: Integral type
        :param lower_limit: Lower limit of integral
        :param upper_limit: Upper limit of integral
        :param limit_locations: location of limits
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathNaryOperator`'''
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes, lower_limit: str, upper_limit: str) -> IMathNaryOperator:
        '''Takes the integral
        :param integral_type: Integral type
        :param lower_limit: Lower limit of integral
        :param upper_limit: Upper limit of integral
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathNaryOperator`'''
        ...

    @overload
    def group(self) -> IMathGroupingCharacter:
        '''Places this element in a group using a bottom curly bracket
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathGroupingCharacter`'''
        ...

    @overload
    def group(self, character: char, position: MathTopBotPositions, vertical_justification: MathTopBotPositions) -> IMathGroupingCharacter:
        '''Places this element in a group using a grouping character such as bottom curly bracket or another
        :param character: Grouping Character such as BOTTOM CURLY BRACKET (U+23DF) or any other
        :param position: Position of grouping character
        :param vertical_justification: Vertical justification of group character.
                    Specifies the alignment of the object with respect to the baseline.
                    For example, when the group character is above the object, 
                    VerticalJustification of Top signifies that the top of the object falls on the baseline;
                    when VerticalJustification is set to Bottom, the bottom of the object is on the baseline
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathGroupingCharacter`'''
        ...

    @overload
    def to_border_box(self) -> IMathBorderBox:
        '''Places this element in a border-box
        :returns: Border-box with this element placed inside'''
        ...

    @overload
    def to_border_box(self, hide_top: bool, hide_bottom: bool, hide_left: bool, hide_right: bool, strikethrough_horizontal: bool, strikethrough_vertical: bool, strikethrough_bottom_left_to_top_right: bool, strikethrough_top_left_to_bottom_right: bool) -> IMathBorderBox:
        '''Places this element in a border-box
        :param hide_top: Hide Top Edge
        :param hide_bottom: Hide Bottom Edge
        :param hide_left: Hide Left Edge
        :param hide_right: Hide Right Edge
        :param strikethrough_horizontal: Border Box Strikethrough Horizontal
        :param strikethrough_vertical: Border Box Strikethrough Vertical
        :param strikethrough_bottom_left_to_top_right: Border Box Strikethrough Bottom-Left to Top-Right
        :param strikethrough_top_left_to_bottom_right: Border Box Strikethrough Top-Left to Bottom-Right
        :returns: Border-box with this element placed inside'''
        ...

    def to_math_array(self) -> IMathArray:
        '''Puts in a vertical array
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathArray`'''
        ...

    def accent(self, accent_character: char) -> IMathAccent:
        '''Sets an accent mark (a character on the top of this element)
        :param accent_character: Accent character. The value should be within the range of (U+0300–U+036F) or (U+20D0–U+20EF)
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathAccent`'''
        ...

    def overbar(self) -> IMathBar:
        '''Sets a bar on the top of this element
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathBar`'''
        ...

    def underbar(self) -> IMathBar:
        '''Sets a bar on the bottom of this element
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathBar`'''
        ...

    def to_box(self) -> IMathBox:
        '''Places this element in a non-visual box (logical grouping) 
                    which is used to group components of an equation or other instance of mathematical text.
                    A boxed object can (for example) serve as an operator emulator with or without an alignment point, 
                    serve as a line break point, or be grouped such as not to allow line breaks within.
        :returns: Logical box with this element placed inside'''
        ...

    def get_children(self) -> List[IMathElement]:
        '''Get children elements'''
        ...

    @property
    def base(self) -> IMathElement:
        '''Base argument'''
        ...

    @property
    def subscript(self) -> IMathElement:
        '''Subscript'''
        ...

    @property
    def superscript(self) -> IMathElement:
        '''Superscript'''
        ...

    @property
    def as_i_math_element(self) -> IMathElement:
        ...

    ...

class MathLimit(MathElementBase):
    '''Specifies the Limit object, consisting of text on the baseline and reduced-size text immediately above or below it.'''
    def __init__(self, base_arg: IMathElement, limit: IMathElement, upper_limit: bool):
        '''Initializes a new instance of the MathLimit class.'''
        ...

    def __init__(self, base_arg: IMathElement, limit: IMathElement):
        '''Initializes a new instance of the MathLimit class with lower limit'''
        ...

    @overload
    def join(self, math_element: IMathElement) -> IMathBlock:
        '''Joins a mathematical element and forms a mathematical block
        :param math_element: The element to be joined
        :returns: A new IMathBlock containing this instance and specified argument'''
        ...

    @overload
    def join(self, math_text: str) -> IMathBlock:
        '''Joins a mathematical text and forms a mathematical block
        :param math_text: Mathematical text to be joined
        :returns: A new IMathBlock containing this instance and specified argument'''
        ...

    @overload
    def divide(self, denominator: IMathElement) -> IMathFraction:
        '''Creates a fraction with this numerator and specified denominator
        :param denominator: Denominator
        :returns: new fraction'''
        ...

    @overload
    def divide(self, denominator: str) -> IMathFraction:
        '''Creates a fraction with this numerator and specified denominator
        :param denominator: Denominator
        :returns: new fraction'''
        ...

    @overload
    def divide(self, denominator: IMathElement, fraction_type: MathFractionTypes) -> IMathFraction:
        '''Creates a fraction of the specified type with this numerator and specified denominator
        :param denominator: Denominator
        :param fraction_type: Fraction type: Bar, NoBar, Skewed, Linear
        :returns: new fraction'''
        ...

    @overload
    def divide(self, denominator: str, fraction_type: MathFractionTypes) -> IMathFraction:
        '''Creates a fraction of the specified type with this numerator and specified denominator
        :param denominator: Denominator
        :param fraction_type: Fraction type: Bar, NoBar, Skewed, Linear
        :returns: new fraction'''
        ...

    @overload
    def enclose(self) -> IMathDelimiter:
        '''Encloses a math element in parenthesis
        :returns: The math element of type :py:class:`aspose.slides.mathtext.IMathDelimiter` which includes the parenthesis'''
        ...

    @overload
    def enclose(self, beginning_character: char, ending_character: char) -> IMathDelimiter:
        '''Encloses a math element in specified characters such as parenthesis or another characters as framing
        :param beginning_character: Beginning character (usually left bracket)
        :param ending_character: Ending character (usually right bracket)
        :returns: The math element of type :py:class:`aspose.slides.mathtext.IMathDelimiter` which includes specified characters as framing'''
        ...

    @overload
    def function(self, function_argument: IMathElement) -> IMathFunction:
        '''Takes a function of an argument using this instance as the function name
        :param function_argument: An argument of the function
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathFunction`'''
        ...

    @overload
    def function(self, function_argument: str) -> IMathFunction:
        '''Takes a function of an argument using this instance as the function name
        :param function_argument: An argument of the function
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathFunction`'''
        ...

    @overload
    def as_argument_of_function(self, function_name: IMathElement) -> IMathFunction:
        '''Takes specified function using this instance as the argument
        :param function_name: Function name
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathFunction`'''
        ...

    @overload
    def as_argument_of_function(self, function_name: str) -> IMathFunction:
        '''Takes specified function using this instance as the argument
        :param function_name: Function name
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathFunction`'''
        ...

    @overload
    def as_argument_of_function(self, function_type: MathFunctionsOfOneArgument) -> IMathFunction:
        '''Takes specified function using this instance as the argument
        :param function_type: One of the common function type of one argument
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathFunction`'''
        ...

    @overload
    def as_argument_of_function(self, function_type: MathFunctionsOfTwoArguments, additional_argument: IMathElement) -> IMathFunction:
        '''Takes specified function using this instance as the argument and specified additional argument
        :param function_type: One of the common function type of two arguments: Log, Lim, Min, Max
        :param additional_argument: Additional argument depending on the type of function
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathFunction`'''
        ...

    @overload
    def as_argument_of_function(self, function_type: MathFunctionsOfTwoArguments, additional_argument: str) -> IMathFunction:
        '''Takes specified function using this instance as the argument and specified additional argument
        :param function_type: One of the common function type of two arguments: Log, Lim, Min, Max
        :param additional_argument: Additional argument depending on the type of function
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathFunction`'''
        ...

    @overload
    def set_subscript(self, subscript: IMathElement) -> IMathSubscriptElement:
        '''Creates subscript
        :param subscript: Subscript (lower index on the right)
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathSubscriptElement`'''
        ...

    @overload
    def set_subscript(self, subscript: str) -> IMathSubscriptElement:
        '''Creates subscript
        :param subscript: Subscript (lower index on the right)
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathSubscriptElement`'''
        ...

    @overload
    def set_superscript(self, superscript: IMathElement) -> IMathSuperscriptElement:
        '''Creates superscript
        :param superscript: Superscript (upper index on the right)
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathSuperscriptElement`'''
        ...

    @overload
    def set_superscript(self, superscript: str) -> IMathSuperscriptElement:
        '''Creates superscript
        :param superscript: Superscript (upper index on the right)
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathSuperscriptElement`'''
        ...

    @overload
    def set_sub_superscript_on_the_right(self, subscript: IMathElement, superscript: IMathElement) -> IMathRightSubSuperscriptElement:
        '''Creates subscript and superscript on the right
        :param subscript: Subscript (lower index on the right)
        :param superscript: Superscript (upper index on the right)
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathRightSubSuperscriptElement`'''
        ...

    @overload
    def set_sub_superscript_on_the_right(self, subscript: str, superscript: str) -> IMathRightSubSuperscriptElement:
        '''Creates subscript and superscript on the right
        :param subscript: Subscript (lower index on the right)
        :param superscript: Superscript (upper index on the right)
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathRightSubSuperscriptElement`'''
        ...

    @overload
    def set_sub_superscript_on_the_left(self, subscript: IMathElement, superscript: IMathElement) -> IMathLeftSubSuperscriptElement:
        '''Creates subscript and superscript on the left
        :param subscript: Subscript (lower index on the left)
        :param superscript: Superscript (upper index on the left)
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathLeftSubSuperscriptElement`'''
        ...

    @overload
    def set_sub_superscript_on_the_left(self, subscript: str, superscript: str) -> IMathLeftSubSuperscriptElement:
        '''Creates subscript and superscript on the left
        :param subscript: Subscript (lower index on the left)
        :param superscript: Superscript (upper index on the left)
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathLeftSubSuperscriptElement`'''
        ...

    @overload
    def radical(self, degree: IMathElement) -> IMathRadical:
        '''Specifies the mathematical root of the given degree from the specified argument.
        :param degree: Argument of Radical
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathRadical`'''
        ...

    @overload
    def radical(self, degree: str) -> IMathRadical:
        '''Specifies the mathematical root of the given degree from the specified argument.
        :param degree: Argument of Radical
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathRadical`'''
        ...

    @overload
    def set_upper_limit(self, limit: IMathElement) -> IMathLimit:
        '''Takes upper limit
        :param limit: limit
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathLimit`'''
        ...

    @overload
    def set_upper_limit(self, limit: str) -> IMathLimit:
        '''Takes upper limit
        :param limit: limit
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathLimit`'''
        ...

    @overload
    def set_lower_limit(self, limit: IMathElement) -> IMathLimit:
        '''Takes lower limit
        :param limit: limit
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathLimit`'''
        ...

    @overload
    def set_lower_limit(self, limit: str) -> IMathLimit:
        '''Takes lower limit
        :param limit: limit
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathLimit`'''
        ...

    @overload
    def nary(self, type: MathNaryOperatorTypes, lower_limit: IMathElement, upper_limit: IMathElement) -> IMathNaryOperator:
        '''Creates a N-ary operator
        :param type: The N-ary operator type
        :param lower_limit: The lower limit
        :param upper_limit: The upper limit
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathNaryOperator`'''
        ...

    @overload
    def nary(self, type: MathNaryOperatorTypes, lower_limit: str, upper_limit: str) -> IMathNaryOperator:
        '''Creates a N-ary operator
        :param type: The N-ary operator type
        :param lower_limit: The lower limit
        :param upper_limit: The upper limit
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathNaryOperator`'''
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes, lower_limit: IMathElement, upper_limit: IMathElement, limit_locations: MathLimitLocations) -> IMathNaryOperator:
        '''Takes the integral
        :param integral_type: Integral type
        :param lower_limit: Lower limit of integral
        :param upper_limit: Upper limit of integral
        :param limit_locations: location of limits
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathNaryOperator`'''
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes, lower_limit: IMathElement, upper_limit: IMathElement) -> IMathNaryOperator:
        '''Takes the integral
        :param integral_type: Integral type
        :param lower_limit: Lower limit of integral
        :param upper_limit: Upper limit of integral
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathNaryOperator`'''
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes) -> IMathNaryOperator:
        '''Takes the integral without limits
        :param integral_type: Integral type
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathNaryOperator`'''
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes, lower_limit: str, upper_limit: str, limit_locations: MathLimitLocations) -> IMathNaryOperator:
        '''Takes the integral
        :param integral_type: Integral type
        :param lower_limit: Lower limit of integral
        :param upper_limit: Upper limit of integral
        :param limit_locations: location of limits
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathNaryOperator`'''
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes, lower_limit: str, upper_limit: str) -> IMathNaryOperator:
        '''Takes the integral
        :param integral_type: Integral type
        :param lower_limit: Lower limit of integral
        :param upper_limit: Upper limit of integral
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathNaryOperator`'''
        ...

    @overload
    def group(self) -> IMathGroupingCharacter:
        '''Places this element in a group using a bottom curly bracket
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathGroupingCharacter`'''
        ...

    @overload
    def group(self, character: char, position: MathTopBotPositions, vertical_justification: MathTopBotPositions) -> IMathGroupingCharacter:
        '''Places this element in a group using a grouping character such as bottom curly bracket or another
        :param character: Grouping Character such as BOTTOM CURLY BRACKET (U+23DF) or any other
        :param position: Position of grouping character
        :param vertical_justification: Vertical justification of group character.
                    Specifies the alignment of the object with respect to the baseline.
                    For example, when the group character is above the object, 
                    VerticalJustification of Top signifies that the top of the object falls on the baseline;
                    when VerticalJustification is set to Bottom, the bottom of the object is on the baseline
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathGroupingCharacter`'''
        ...

    @overload
    def to_border_box(self) -> IMathBorderBox:
        '''Places this element in a border-box
        :returns: Border-box with this element placed inside'''
        ...

    @overload
    def to_border_box(self, hide_top: bool, hide_bottom: bool, hide_left: bool, hide_right: bool, strikethrough_horizontal: bool, strikethrough_vertical: bool, strikethrough_bottom_left_to_top_right: bool, strikethrough_top_left_to_bottom_right: bool) -> IMathBorderBox:
        '''Places this element in a border-box
        :param hide_top: Hide Top Edge
        :param hide_bottom: Hide Bottom Edge
        :param hide_left: Hide Left Edge
        :param hide_right: Hide Right Edge
        :param strikethrough_horizontal: Border Box Strikethrough Horizontal
        :param strikethrough_vertical: Border Box Strikethrough Vertical
        :param strikethrough_bottom_left_to_top_right: Border Box Strikethrough Bottom-Left to Top-Right
        :param strikethrough_top_left_to_bottom_right: Border Box Strikethrough Top-Left to Bottom-Right
        :returns: Border-box with this element placed inside'''
        ...

    def to_math_array(self) -> IMathArray:
        '''Puts in a vertical array
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathArray`'''
        ...

    def accent(self, accent_character: char) -> IMathAccent:
        '''Sets an accent mark (a character on the top of this element)
        :param accent_character: Accent character. The value should be within the range of (U+0300–U+036F) or (U+20D0–U+20EF)
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathAccent`'''
        ...

    def overbar(self) -> IMathBar:
        '''Sets a bar on the top of this element
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathBar`'''
        ...

    def underbar(self) -> IMathBar:
        '''Sets a bar on the bottom of this element
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathBar`'''
        ...

    def to_box(self) -> IMathBox:
        '''Places this element in a non-visual box (logical grouping) 
                    which is used to group components of an equation or other instance of mathematical text.
                    A boxed object can (for example) serve as an operator emulator with or without an alignment point, 
                    serve as a line break point, or be grouped such as not to allow line breaks within.
        :returns: Logical box with this element placed inside'''
        ...

    def get_children(self) -> List[IMathElement]:
        '''Get children elements'''
        ...

    @property
    def base(self) -> IMathElement:
        '''Base argument'''
        ...

    @property
    def limit(self) -> IMathElement:
        '''Limit argument'''
        ...

    @property
    def upper_limit(self) -> bool:
        ...

    @upper_limit.setter
    def upper_limit(self, value: bool):
        ...

    @property
    def as_i_math_element(self) -> IMathElement:
        ...

    ...

class MathLimitFactory:
    '''Allows to create IMathLimit'''
    def __init__(self):
        ...

    @overload
    def create_math_limit(self, base_arg: IMathElement, limit: IMathElement, upper_limit: bool) -> IMathLimit:
        '''Creates IMathLimit
        :param base_arg: Base argument to apply the limit
        :param limit: Limit element
        :param upper_limit: Sets the placement of the limit on top
        :returns: new math limit'''
        ...

    @overload
    def create_math_limit(self, base_arg: IMathElement, limit: IMathElement) -> IMathLimit:
        '''Creates IMathLimit with limit at the bottom
        :param base_arg: Base argument to apply the limit
        :param limit: Limit element
        :returns: new math limit'''
        ...

    ...

class MathMatrix(MathElementBase):
    '''Specifies the Matrix object, consisting of child elements laid out in one or more rows and columns. 
                It is important to note that matrices do not have built in delimiters. 
                To place the matrix in the brackets you should use the delimiter object (IMathDelimiter).
                Null arguments can be used to create gaps in matrices.'''
    def __init__(self, row_count: int, column_count: int):
        '''Initializes a new instance of the MathMatrix class.
        :param row_count: row count
        :param column_count: column count'''
        ...

    @overload
    def join(self, math_element: IMathElement) -> IMathBlock:
        '''Joins a mathematical element and forms a mathematical block
        :param math_element: The element to be joined
        :returns: A new IMathBlock containing this instance and specified argument'''
        ...

    @overload
    def join(self, math_text: str) -> IMathBlock:
        '''Joins a mathematical text and forms a mathematical block
        :param math_text: Mathematical text to be joined
        :returns: A new IMathBlock containing this instance and specified argument'''
        ...

    @overload
    def divide(self, denominator: IMathElement) -> IMathFraction:
        '''Creates a fraction with this numerator and specified denominator
        :param denominator: Denominator
        :returns: new fraction'''
        ...

    @overload
    def divide(self, denominator: str) -> IMathFraction:
        '''Creates a fraction with this numerator and specified denominator
        :param denominator: Denominator
        :returns: new fraction'''
        ...

    @overload
    def divide(self, denominator: IMathElement, fraction_type: MathFractionTypes) -> IMathFraction:
        '''Creates a fraction of the specified type with this numerator and specified denominator
        :param denominator: Denominator
        :param fraction_type: Fraction type: Bar, NoBar, Skewed, Linear
        :returns: new fraction'''
        ...

    @overload
    def divide(self, denominator: str, fraction_type: MathFractionTypes) -> IMathFraction:
        '''Creates a fraction of the specified type with this numerator and specified denominator
        :param denominator: Denominator
        :param fraction_type: Fraction type: Bar, NoBar, Skewed, Linear
        :returns: new fraction'''
        ...

    @overload
    def enclose(self) -> IMathDelimiter:
        '''Encloses a math element in parenthesis
        :returns: The math element of type :py:class:`aspose.slides.mathtext.IMathDelimiter` which includes the parenthesis'''
        ...

    @overload
    def enclose(self, beginning_character: char, ending_character: char) -> IMathDelimiter:
        '''Encloses a math element in specified characters such as parenthesis or another characters as framing
        :param beginning_character: Beginning character (usually left bracket)
        :param ending_character: Ending character (usually right bracket)
        :returns: The math element of type :py:class:`aspose.slides.mathtext.IMathDelimiter` which includes specified characters as framing'''
        ...

    @overload
    def function(self, function_argument: IMathElement) -> IMathFunction:
        '''Takes a function of an argument using this instance as the function name
        :param function_argument: An argument of the function
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathFunction`'''
        ...

    @overload
    def function(self, function_argument: str) -> IMathFunction:
        '''Takes a function of an argument using this instance as the function name
        :param function_argument: An argument of the function
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathFunction`'''
        ...

    @overload
    def as_argument_of_function(self, function_name: IMathElement) -> IMathFunction:
        '''Takes specified function using this instance as the argument
        :param function_name: Function name
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathFunction`'''
        ...

    @overload
    def as_argument_of_function(self, function_name: str) -> IMathFunction:
        '''Takes specified function using this instance as the argument
        :param function_name: Function name
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathFunction`'''
        ...

    @overload
    def as_argument_of_function(self, function_type: MathFunctionsOfOneArgument) -> IMathFunction:
        '''Takes specified function using this instance as the argument
        :param function_type: One of the common function type of one argument
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathFunction`'''
        ...

    @overload
    def as_argument_of_function(self, function_type: MathFunctionsOfTwoArguments, additional_argument: IMathElement) -> IMathFunction:
        '''Takes specified function using this instance as the argument and specified additional argument
        :param function_type: One of the common function type of two arguments: Log, Lim, Min, Max
        :param additional_argument: Additional argument depending on the type of function
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathFunction`'''
        ...

    @overload
    def as_argument_of_function(self, function_type: MathFunctionsOfTwoArguments, additional_argument: str) -> IMathFunction:
        '''Takes specified function using this instance as the argument and specified additional argument
        :param function_type: One of the common function type of two arguments: Log, Lim, Min, Max
        :param additional_argument: Additional argument depending on the type of function
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathFunction`'''
        ...

    @overload
    def set_subscript(self, subscript: IMathElement) -> IMathSubscriptElement:
        '''Creates subscript
        :param subscript: Subscript (lower index on the right)
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathSubscriptElement`'''
        ...

    @overload
    def set_subscript(self, subscript: str) -> IMathSubscriptElement:
        '''Creates subscript
        :param subscript: Subscript (lower index on the right)
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathSubscriptElement`'''
        ...

    @overload
    def set_superscript(self, superscript: IMathElement) -> IMathSuperscriptElement:
        '''Creates superscript
        :param superscript: Superscript (upper index on the right)
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathSuperscriptElement`'''
        ...

    @overload
    def set_superscript(self, superscript: str) -> IMathSuperscriptElement:
        '''Creates superscript
        :param superscript: Superscript (upper index on the right)
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathSuperscriptElement`'''
        ...

    @overload
    def set_sub_superscript_on_the_right(self, subscript: IMathElement, superscript: IMathElement) -> IMathRightSubSuperscriptElement:
        '''Creates subscript and superscript on the right
        :param subscript: Subscript (lower index on the right)
        :param superscript: Superscript (upper index on the right)
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathRightSubSuperscriptElement`'''
        ...

    @overload
    def set_sub_superscript_on_the_right(self, subscript: str, superscript: str) -> IMathRightSubSuperscriptElement:
        '''Creates subscript and superscript on the right
        :param subscript: Subscript (lower index on the right)
        :param superscript: Superscript (upper index on the right)
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathRightSubSuperscriptElement`'''
        ...

    @overload
    def set_sub_superscript_on_the_left(self, subscript: IMathElement, superscript: IMathElement) -> IMathLeftSubSuperscriptElement:
        '''Creates subscript and superscript on the left
        :param subscript: Subscript (lower index on the left)
        :param superscript: Superscript (upper index on the left)
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathLeftSubSuperscriptElement`'''
        ...

    @overload
    def set_sub_superscript_on_the_left(self, subscript: str, superscript: str) -> IMathLeftSubSuperscriptElement:
        '''Creates subscript and superscript on the left
        :param subscript: Subscript (lower index on the left)
        :param superscript: Superscript (upper index on the left)
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathLeftSubSuperscriptElement`'''
        ...

    @overload
    def radical(self, degree: IMathElement) -> IMathRadical:
        '''Specifies the mathematical root of the given degree from the specified argument.
        :param degree: Argument of Radical
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathRadical`'''
        ...

    @overload
    def radical(self, degree: str) -> IMathRadical:
        '''Specifies the mathematical root of the given degree from the specified argument.
        :param degree: Argument of Radical
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathRadical`'''
        ...

    @overload
    def set_upper_limit(self, limit: IMathElement) -> IMathLimit:
        '''Takes upper limit
        :param limit: limit
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathLimit`'''
        ...

    @overload
    def set_upper_limit(self, limit: str) -> IMathLimit:
        '''Takes upper limit
        :param limit: limit
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathLimit`'''
        ...

    @overload
    def set_lower_limit(self, limit: IMathElement) -> IMathLimit:
        '''Takes lower limit
        :param limit: limit
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathLimit`'''
        ...

    @overload
    def set_lower_limit(self, limit: str) -> IMathLimit:
        '''Takes lower limit
        :param limit: limit
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathLimit`'''
        ...

    @overload
    def nary(self, type: MathNaryOperatorTypes, lower_limit: IMathElement, upper_limit: IMathElement) -> IMathNaryOperator:
        '''Creates a N-ary operator
        :param type: The N-ary operator type
        :param lower_limit: The lower limit
        :param upper_limit: The upper limit
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathNaryOperator`'''
        ...

    @overload
    def nary(self, type: MathNaryOperatorTypes, lower_limit: str, upper_limit: str) -> IMathNaryOperator:
        '''Creates a N-ary operator
        :param type: The N-ary operator type
        :param lower_limit: The lower limit
        :param upper_limit: The upper limit
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathNaryOperator`'''
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes, lower_limit: IMathElement, upper_limit: IMathElement, limit_locations: MathLimitLocations) -> IMathNaryOperator:
        '''Takes the integral
        :param integral_type: Integral type
        :param lower_limit: Lower limit of integral
        :param upper_limit: Upper limit of integral
        :param limit_locations: location of limits
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathNaryOperator`'''
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes, lower_limit: IMathElement, upper_limit: IMathElement) -> IMathNaryOperator:
        '''Takes the integral
        :param integral_type: Integral type
        :param lower_limit: Lower limit of integral
        :param upper_limit: Upper limit of integral
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathNaryOperator`'''
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes) -> IMathNaryOperator:
        '''Takes the integral without limits
        :param integral_type: Integral type
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathNaryOperator`'''
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes, lower_limit: str, upper_limit: str, limit_locations: MathLimitLocations) -> IMathNaryOperator:
        '''Takes the integral
        :param integral_type: Integral type
        :param lower_limit: Lower limit of integral
        :param upper_limit: Upper limit of integral
        :param limit_locations: location of limits
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathNaryOperator`'''
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes, lower_limit: str, upper_limit: str) -> IMathNaryOperator:
        '''Takes the integral
        :param integral_type: Integral type
        :param lower_limit: Lower limit of integral
        :param upper_limit: Upper limit of integral
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathNaryOperator`'''
        ...

    @overload
    def group(self) -> IMathGroupingCharacter:
        '''Places this element in a group using a bottom curly bracket
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathGroupingCharacter`'''
        ...

    @overload
    def group(self, character: char, position: MathTopBotPositions, vertical_justification: MathTopBotPositions) -> IMathGroupingCharacter:
        '''Places this element in a group using a grouping character such as bottom curly bracket or another
        :param character: Grouping Character such as BOTTOM CURLY BRACKET (U+23DF) or any other
        :param position: Position of grouping character
        :param vertical_justification: Vertical justification of group character.
                    Specifies the alignment of the object with respect to the baseline.
                    For example, when the group character is above the object, 
                    VerticalJustification of Top signifies that the top of the object falls on the baseline;
                    when VerticalJustification is set to Bottom, the bottom of the object is on the baseline
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathGroupingCharacter`'''
        ...

    @overload
    def to_border_box(self) -> IMathBorderBox:
        '''Places this element in a border-box
        :returns: Border-box with this element placed inside'''
        ...

    @overload
    def to_border_box(self, hide_top: bool, hide_bottom: bool, hide_left: bool, hide_right: bool, strikethrough_horizontal: bool, strikethrough_vertical: bool, strikethrough_bottom_left_to_top_right: bool, strikethrough_top_left_to_bottom_right: bool) -> IMathBorderBox:
        '''Places this element in a border-box
        :param hide_top: Hide Top Edge
        :param hide_bottom: Hide Bottom Edge
        :param hide_left: Hide Left Edge
        :param hide_right: Hide Right Edge
        :param strikethrough_horizontal: Border Box Strikethrough Horizontal
        :param strikethrough_vertical: Border Box Strikethrough Vertical
        :param strikethrough_bottom_left_to_top_right: Border Box Strikethrough Bottom-Left to Top-Right
        :param strikethrough_top_left_to_bottom_right: Border Box Strikethrough Top-Left to Bottom-Right
        :returns: Border-box with this element placed inside'''
        ...

    def to_math_array(self) -> IMathArray:
        '''Puts in a vertical array
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathArray`'''
        ...

    def accent(self, accent_character: char) -> IMathAccent:
        '''Sets an accent mark (a character on the top of this element)
        :param accent_character: Accent character. The value should be within the range of (U+0300–U+036F) or (U+20D0–U+20EF)
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathAccent`'''
        ...

    def overbar(self) -> IMathBar:
        '''Sets a bar on the top of this element
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathBar`'''
        ...

    def underbar(self) -> IMathBar:
        '''Sets a bar on the bottom of this element
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathBar`'''
        ...

    def to_box(self) -> IMathBox:
        '''Places this element in a non-visual box (logical grouping) 
                    which is used to group components of an equation or other instance of mathematical text.
                    A boxed object can (for example) serve as an operator emulator with or without an alignment point, 
                    serve as a line break point, or be grouped such as not to allow line breaks within.
        :returns: Logical box with this element placed inside'''
        ...

    def get_column_alignment(self, column_index: int) -> MathHorizontalAlignment:
        '''Get the horizontal alignment of the specified column
        :param column_index: Zero-based column index
        :returns: Horizontal Alignment of specified column'''
        ...

    def set_column_alignment(self, column_index: int, val: MathHorizontalAlignment) -> None:
        '''Set the horizontal alignment of the specified column
        :param column_index: Zero-based column index
        :param val: New value of horizontal alignment of specified column'''
        ...

    def set_columns_alignment(self, column_index: int, columns_count: int, val: MathHorizontalAlignment) -> None:
        '''Set the horizontal alignment of the specified columns
        :param column_index: Zero-based index of the first column to set alignment
        :param columns_count: The number of columns to specify the alignment
        :param val: New value of horizontal alignment of specified column'''
        ...

    def insert_row_before(self, row_index: int) -> None:
        '''Insert a new row before the specified one
                    Initially all elements in the new row are None.
        :param row_index: Index of the row before which to insert a new one'''
        ...

    def insert_row_after(self, row_index: int) -> None:
        '''Insert a new row after the specified one
                    Initially all elements in the new row are None.
        :param row_index: Index of the row after which to insert a new one'''
        ...

    def delete_row(self, row_index: int) -> None:
        '''Deletes the specified row
        :param row_index: The zero-based index of the row to delete.'''
        ...

    def insert_column_before(self, column_index: int) -> None:
        '''Insert a new column before the specified one
                    Initially all elements in the new column are None.
        :param column_index: Index of the column before which to insert a new one'''
        ...

    def insert_column_after(self, column_index: int) -> None:
        '''Insert a new column after the specified one
                    Initially all elements in the new column are None.
        :param column_index: Index of the column after which to insert a new one'''
        ...

    def delete_column(self, column_index: int) -> None:
        '''Deletes the specified column
        :param column_index: The zero-based index of the column to delete.'''
        ...

    def get_children(self) -> List[IMathElement]:
        '''Get children elements'''
        ...

    @property
    def row_count(self) -> int:
        ...

    @property
    def column_count(self) -> int:
        ...

    @property
    def hide_placeholders(self) -> bool:
        ...

    @hide_placeholders.setter
    def hide_placeholders(self, value: bool):
        ...

    @property
    def base_justification(self) -> MathVerticalAlignment:
        ...

    @base_justification.setter
    def base_justification(self, value: MathVerticalAlignment):
        ...

    @property
    def min_column_width(self) -> int:
        ...

    @min_column_width.setter
    def min_column_width(self, value: int):
        ...

    @property
    def column_gap_rule(self) -> MathSpacingRules:
        ...

    @column_gap_rule.setter
    def column_gap_rule(self, value: MathSpacingRules):
        ...

    @property
    def column_gap(self) -> int:
        ...

    @column_gap.setter
    def column_gap(self, value: int):
        ...

    @property
    def row_gap_rule(self) -> MathSpacingRules:
        ...

    @row_gap_rule.setter
    def row_gap_rule(self, value: MathSpacingRules):
        ...

    @property
    def row_gap(self) -> int:
        ...

    @row_gap.setter
    def row_gap(self, value: int):
        ...

    @property
    def as_i_math_element(self) -> IMathElement:
        ...

    ...

class MathMatrixFactory:
    '''Allows to create a math matrix'''
    def __init__(self):
        ...

    def create_math_matrix(self, row_count: int, column_count: int) -> IMathMatrix:
        '''Creates a math matrix
        :param row_count: row count
        :param column_count: column count
        :returns: new math matrix'''
        ...

    ...

class MathNaryOperator(MathElementBase):
    '''Specifies an N-ary mathematical object, such as Summation and Integral.
                It consists of an operator, a base (or operand), and optional upper and lower limits. 
                Examples of N-ary operators are: Summation, Union, Intersection, Integral'''
    def __init__(self, operator_symbol: char, base_argument: IMathElement, lower_limit: IMathElement, upper_limit: IMathElement):
        '''Initializes a new instance of the MathNaryOperator class.
        :param operator_symbol: Nary operator symbol
        :param base_argument: Base argument
        :param lower_limit: Lower limit
        :param upper_limit: Upper limit'''
        ...

    def __init__(self, operator_symbol: char, base_argument: IMathElement, lower_limit: IMathElement):
        '''Initializes a new instance of the MathNaryOperator class.
        :param operator_symbol: Nary operator symbol
        :param base_argument: Base argument
        :param lower_limit: Lower limit'''
        ...

    def __init__(self, operator_symbol: char, base_argument: IMathElement):
        '''Initializes a new instance of the MathNaryOperator class.
        :param operator_symbol: Nary operator symbol
        :param base_argument: Base argument'''
        ...

    @overload
    def join(self, math_element: IMathElement) -> IMathBlock:
        '''Joins a mathematical element and forms a mathematical block
        :param math_element: The element to be joined
        :returns: A new IMathBlock containing this instance and specified argument'''
        ...

    @overload
    def join(self, math_text: str) -> IMathBlock:
        '''Joins a mathematical text and forms a mathematical block
        :param math_text: Mathematical text to be joined
        :returns: A new IMathBlock containing this instance and specified argument'''
        ...

    @overload
    def divide(self, denominator: IMathElement) -> IMathFraction:
        '''Creates a fraction with this numerator and specified denominator
        :param denominator: Denominator
        :returns: new fraction'''
        ...

    @overload
    def divide(self, denominator: str) -> IMathFraction:
        '''Creates a fraction with this numerator and specified denominator
        :param denominator: Denominator
        :returns: new fraction'''
        ...

    @overload
    def divide(self, denominator: IMathElement, fraction_type: MathFractionTypes) -> IMathFraction:
        '''Creates a fraction of the specified type with this numerator and specified denominator
        :param denominator: Denominator
        :param fraction_type: Fraction type: Bar, NoBar, Skewed, Linear
        :returns: new fraction'''
        ...

    @overload
    def divide(self, denominator: str, fraction_type: MathFractionTypes) -> IMathFraction:
        '''Creates a fraction of the specified type with this numerator and specified denominator
        :param denominator: Denominator
        :param fraction_type: Fraction type: Bar, NoBar, Skewed, Linear
        :returns: new fraction'''
        ...

    @overload
    def enclose(self) -> IMathDelimiter:
        '''Encloses a math element in parenthesis
        :returns: The math element of type :py:class:`aspose.slides.mathtext.IMathDelimiter` which includes the parenthesis'''
        ...

    @overload
    def enclose(self, beginning_character: char, ending_character: char) -> IMathDelimiter:
        '''Encloses a math element in specified characters such as parenthesis or another characters as framing
        :param beginning_character: Beginning character (usually left bracket)
        :param ending_character: Ending character (usually right bracket)
        :returns: The math element of type :py:class:`aspose.slides.mathtext.IMathDelimiter` which includes specified characters as framing'''
        ...

    @overload
    def function(self, function_argument: IMathElement) -> IMathFunction:
        '''Takes a function of an argument using this instance as the function name
        :param function_argument: An argument of the function
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathFunction`'''
        ...

    @overload
    def function(self, function_argument: str) -> IMathFunction:
        '''Takes a function of an argument using this instance as the function name
        :param function_argument: An argument of the function
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathFunction`'''
        ...

    @overload
    def as_argument_of_function(self, function_name: IMathElement) -> IMathFunction:
        '''Takes specified function using this instance as the argument
        :param function_name: Function name
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathFunction`'''
        ...

    @overload
    def as_argument_of_function(self, function_name: str) -> IMathFunction:
        '''Takes specified function using this instance as the argument
        :param function_name: Function name
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathFunction`'''
        ...

    @overload
    def as_argument_of_function(self, function_type: MathFunctionsOfOneArgument) -> IMathFunction:
        '''Takes specified function using this instance as the argument
        :param function_type: One of the common function type of one argument
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathFunction`'''
        ...

    @overload
    def as_argument_of_function(self, function_type: MathFunctionsOfTwoArguments, additional_argument: IMathElement) -> IMathFunction:
        '''Takes specified function using this instance as the argument and specified additional argument
        :param function_type: One of the common function type of two arguments: Log, Lim, Min, Max
        :param additional_argument: Additional argument depending on the type of function
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathFunction`'''
        ...

    @overload
    def as_argument_of_function(self, function_type: MathFunctionsOfTwoArguments, additional_argument: str) -> IMathFunction:
        '''Takes specified function using this instance as the argument and specified additional argument
        :param function_type: One of the common function type of two arguments: Log, Lim, Min, Max
        :param additional_argument: Additional argument depending on the type of function
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathFunction`'''
        ...

    @overload
    def set_subscript(self, subscript: IMathElement) -> IMathSubscriptElement:
        '''Creates subscript
        :param subscript: Subscript (lower index on the right)
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathSubscriptElement`'''
        ...

    @overload
    def set_subscript(self, subscript: str) -> IMathSubscriptElement:
        '''Creates subscript
        :param subscript: Subscript (lower index on the right)
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathSubscriptElement`'''
        ...

    @overload
    def set_superscript(self, superscript: IMathElement) -> IMathSuperscriptElement:
        '''Creates superscript
        :param superscript: Superscript (upper index on the right)
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathSuperscriptElement`'''
        ...

    @overload
    def set_superscript(self, superscript: str) -> IMathSuperscriptElement:
        '''Creates superscript
        :param superscript: Superscript (upper index on the right)
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathSuperscriptElement`'''
        ...

    @overload
    def set_sub_superscript_on_the_right(self, subscript: IMathElement, superscript: IMathElement) -> IMathRightSubSuperscriptElement:
        '''Creates subscript and superscript on the right
        :param subscript: Subscript (lower index on the right)
        :param superscript: Superscript (upper index on the right)
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathRightSubSuperscriptElement`'''
        ...

    @overload
    def set_sub_superscript_on_the_right(self, subscript: str, superscript: str) -> IMathRightSubSuperscriptElement:
        '''Creates subscript and superscript on the right
        :param subscript: Subscript (lower index on the right)
        :param superscript: Superscript (upper index on the right)
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathRightSubSuperscriptElement`'''
        ...

    @overload
    def set_sub_superscript_on_the_left(self, subscript: IMathElement, superscript: IMathElement) -> IMathLeftSubSuperscriptElement:
        '''Creates subscript and superscript on the left
        :param subscript: Subscript (lower index on the left)
        :param superscript: Superscript (upper index on the left)
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathLeftSubSuperscriptElement`'''
        ...

    @overload
    def set_sub_superscript_on_the_left(self, subscript: str, superscript: str) -> IMathLeftSubSuperscriptElement:
        '''Creates subscript and superscript on the left
        :param subscript: Subscript (lower index on the left)
        :param superscript: Superscript (upper index on the left)
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathLeftSubSuperscriptElement`'''
        ...

    @overload
    def radical(self, degree: IMathElement) -> IMathRadical:
        '''Specifies the mathematical root of the given degree from the specified argument.
        :param degree: Argument of Radical
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathRadical`'''
        ...

    @overload
    def radical(self, degree: str) -> IMathRadical:
        '''Specifies the mathematical root of the given degree from the specified argument.
        :param degree: Argument of Radical
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathRadical`'''
        ...

    @overload
    def set_upper_limit(self, limit: IMathElement) -> IMathLimit:
        '''Takes upper limit
        :param limit: limit
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathLimit`'''
        ...

    @overload
    def set_upper_limit(self, limit: str) -> IMathLimit:
        '''Takes upper limit
        :param limit: limit
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathLimit`'''
        ...

    @overload
    def set_lower_limit(self, limit: IMathElement) -> IMathLimit:
        '''Takes lower limit
        :param limit: limit
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathLimit`'''
        ...

    @overload
    def set_lower_limit(self, limit: str) -> IMathLimit:
        '''Takes lower limit
        :param limit: limit
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathLimit`'''
        ...

    @overload
    def nary(self, type: MathNaryOperatorTypes, lower_limit: IMathElement, upper_limit: IMathElement) -> IMathNaryOperator:
        '''Creates a N-ary operator
        :param type: The N-ary operator type
        :param lower_limit: The lower limit
        :param upper_limit: The upper limit
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathNaryOperator`'''
        ...

    @overload
    def nary(self, type: MathNaryOperatorTypes, lower_limit: str, upper_limit: str) -> IMathNaryOperator:
        '''Creates a N-ary operator
        :param type: The N-ary operator type
        :param lower_limit: The lower limit
        :param upper_limit: The upper limit
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathNaryOperator`'''
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes, lower_limit: IMathElement, upper_limit: IMathElement, limit_locations: MathLimitLocations) -> IMathNaryOperator:
        '''Takes the integral
        :param integral_type: Integral type
        :param lower_limit: Lower limit of integral
        :param upper_limit: Upper limit of integral
        :param limit_locations: location of limits
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathNaryOperator`'''
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes, lower_limit: IMathElement, upper_limit: IMathElement) -> IMathNaryOperator:
        '''Takes the integral
        :param integral_type: Integral type
        :param lower_limit: Lower limit of integral
        :param upper_limit: Upper limit of integral
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathNaryOperator`'''
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes) -> IMathNaryOperator:
        '''Takes the integral without limits
        :param integral_type: Integral type
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathNaryOperator`'''
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes, lower_limit: str, upper_limit: str, limit_locations: MathLimitLocations) -> IMathNaryOperator:
        '''Takes the integral
        :param integral_type: Integral type
        :param lower_limit: Lower limit of integral
        :param upper_limit: Upper limit of integral
        :param limit_locations: location of limits
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathNaryOperator`'''
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes, lower_limit: str, upper_limit: str) -> IMathNaryOperator:
        '''Takes the integral
        :param integral_type: Integral type
        :param lower_limit: Lower limit of integral
        :param upper_limit: Upper limit of integral
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathNaryOperator`'''
        ...

    @overload
    def group(self) -> IMathGroupingCharacter:
        '''Places this element in a group using a bottom curly bracket
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathGroupingCharacter`'''
        ...

    @overload
    def group(self, character: char, position: MathTopBotPositions, vertical_justification: MathTopBotPositions) -> IMathGroupingCharacter:
        '''Places this element in a group using a grouping character such as bottom curly bracket or another
        :param character: Grouping Character such as BOTTOM CURLY BRACKET (U+23DF) or any other
        :param position: Position of grouping character
        :param vertical_justification: Vertical justification of group character.
                    Specifies the alignment of the object with respect to the baseline.
                    For example, when the group character is above the object, 
                    VerticalJustification of Top signifies that the top of the object falls on the baseline;
                    when VerticalJustification is set to Bottom, the bottom of the object is on the baseline
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathGroupingCharacter`'''
        ...

    @overload
    def to_border_box(self) -> IMathBorderBox:
        '''Places this element in a border-box
        :returns: Border-box with this element placed inside'''
        ...

    @overload
    def to_border_box(self, hide_top: bool, hide_bottom: bool, hide_left: bool, hide_right: bool, strikethrough_horizontal: bool, strikethrough_vertical: bool, strikethrough_bottom_left_to_top_right: bool, strikethrough_top_left_to_bottom_right: bool) -> IMathBorderBox:
        '''Places this element in a border-box
        :param hide_top: Hide Top Edge
        :param hide_bottom: Hide Bottom Edge
        :param hide_left: Hide Left Edge
        :param hide_right: Hide Right Edge
        :param strikethrough_horizontal: Border Box Strikethrough Horizontal
        :param strikethrough_vertical: Border Box Strikethrough Vertical
        :param strikethrough_bottom_left_to_top_right: Border Box Strikethrough Bottom-Left to Top-Right
        :param strikethrough_top_left_to_bottom_right: Border Box Strikethrough Top-Left to Bottom-Right
        :returns: Border-box with this element placed inside'''
        ...

    def to_math_array(self) -> IMathArray:
        '''Puts in a vertical array
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathArray`'''
        ...

    def accent(self, accent_character: char) -> IMathAccent:
        '''Sets an accent mark (a character on the top of this element)
        :param accent_character: Accent character. The value should be within the range of (U+0300–U+036F) or (U+20D0–U+20EF)
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathAccent`'''
        ...

    def overbar(self) -> IMathBar:
        '''Sets a bar on the top of this element
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathBar`'''
        ...

    def underbar(self) -> IMathBar:
        '''Sets a bar on the bottom of this element
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathBar`'''
        ...

    def to_box(self) -> IMathBox:
        '''Places this element in a non-visual box (logical grouping) 
                    which is used to group components of an equation or other instance of mathematical text.
                    A boxed object can (for example) serve as an operator emulator with or without an alignment point, 
                    serve as a line break point, or be grouped such as not to allow line breaks within.
        :returns: Logical box with this element placed inside'''
        ...

    def get_children(self) -> List[IMathElement]:
        '''Get children elements'''
        ...

    @property
    def base(self) -> IMathElement:
        '''Base argument'''
        ...

    @property
    def subscript(self) -> IMathElement:
        '''Specifies a subscript argument that, for example, in the case of an integral, sets the lower limit'''
        ...

    @property
    def superscript(self) -> IMathElement:
        '''Specifies a supersript argument that, for example, in the case of an integral, sets the upper limit'''
        ...

    @property
    def operator(self) -> char:
        '''Nary Operator Character
                    For example: '∑', '∫''''
        ...

    @operator.setter
    def operator(self, value: char):
        '''Nary Operator Character
                    For example: '∑', '∫''''
        ...

    @property
    def limit_location(self) -> MathLimitLocations:
        ...

    @limit_location.setter
    def limit_location(self, value: MathLimitLocations):
        ...

    @property
    def grow_to_match_operand_height(self) -> bool:
        ...

    @grow_to_match_operand_height.setter
    def grow_to_match_operand_height(self, value: bool):
        ...

    @property
    def hide_subscript(self) -> bool:
        ...

    @hide_subscript.setter
    def hide_subscript(self, value: bool):
        ...

    @property
    def hide_superscript(self) -> bool:
        ...

    @hide_superscript.setter
    def hide_superscript(self, value: bool):
        ...

    @property
    def as_i_math_element(self) -> IMathElement:
        ...

    @property
    def as_i_math_nary_operator_properties(self) -> IMathNaryOperatorProperties:
        ...

    ...

class MathNaryOperatorFactory:
    '''Allows to create IMathNaryOperator'''
    def __init__(self):
        ...

    @overload
    def create_math_nary_operator(self, operator_symbol: char, base_argument: IMathElement, lower_limit: IMathElement, upper_limit: IMathElement) -> IMathNaryOperator:
        '''Creates IMathNaryOperator
        :param operator_symbol: The operator sign
        :param base_argument: Base argument to apply operator
        :param lower_limit: Lower limit
        :param upper_limit: Upper limit
        :returns: new IMathNaryOperator'''
        ...

    @overload
    def create_math_nary_operator(self, operator_symbol: char, base_argument: IMathElement, lower_limit: IMathElement) -> IMathNaryOperator:
        '''Creates IMathNaryOperator
        :param operator_symbol: The operator sign
        :param base_argument: Base argument to apply operator
        :param lower_limit: Lower limit
        :returns: new IMathNaryOperator'''
        ...

    @overload
    def create_math_nary_operator(self, operator_symbol: char, base_argument: IMathElement) -> IMathNaryOperator:
        '''Creates IMathNaryOperator
        :param operator_symbol: The operator sign
        :param base_argument: Base argument to apply operator
        :returns: new IMathNaryOperator'''
        ...

    ...

class MathParagraph:
    '''Mathematical paragraph that is a container for mathematical blocks (IMathBlock)'''
    def __init__(self):
        '''Initializes a new instance of the MathParagraph class.'''
        ...

    def __init__(self, math_block: IMathBlock):
        '''Initializes a new instance of the MathParagraph class.'''
        ...

    def clear(self) -> None:
        '''Removes all elements from the collection.'''
        ...

    def add(self, math_block: IMathBlock) -> None:
        '''Adds IMathBlock to the end of collection.
        :param math_block: A mathematical block that will be added to the end of the collection'''
        ...

    def remove(self, math_block: IMathBlock) -> bool:
        '''Removes the first occurrence of a specific object from the collection/\>.
        :param math_block: The object to remove from the collection.
        :returns: true if ``mathBlock`` was successfully removed from the collection; otherwise, false. 
                    This method also returns false if ``mathBlock`` is not found in the original collection/\>.'''
        ...

    def contains(self, math_block: IMathBlock) -> bool:
        '''Determines whether the collection contains a specific value.
        :param math_block: The object to locate in the collection.
        :returns: true if ``mathBlock`` is found in the collection; otherwise, false.'''
        ...

    def index_of(self, math_block: IMathBlock) -> int:
        '''Determines the index of a specific IMathBlock in collection.
        :param math_block: The item to locate in the collection.
        :returns: The index of ``mathBlock`` if found in the collection; otherwise, -1.'''
        ...

    def insert(self, index: int, math_block: IMathBlock) -> None:
        '''Inserts IMathBlock into the collection at the specified index.
        :param index: The zero-based index at which an item should be inserted.
        :param math_block: The IMathBlock to insert.'''
        ...

    def remove_at(self, index: int) -> None:
        '''Removes an item at the specified index of the collection.
        :param index: The zero-based index of the item to remove.'''
        ...

    def write_as_math_ml(self, stream: io.RawIOBase) -> None:
        '''Saves content of this :py:class:`aspose.slides.mathtext.MathParagraph` as MathML
        :param stream: Target stream'''
        ...

    def to_latex(self) -> str:
        '''Gets mathematical equation in LaTeX format'''
        ...

    @property
    def justification(self) -> MathJustification:
        '''Paragraph Justification 
                    Default value: CenteredAsGroup'''
        ...

    @justification.setter
    def justification(self, value: MathJustification):
        '''Paragraph Justification 
                    Default value: CenteredAsGroup'''
        ...

    @property
    def count(self) -> int:
        '''Gets the number of elements actually contained in the collection.
                    Read-only :py:class:`int`.'''
        ...

    @property
    def as_i_math_block_collection(self) -> IMathBlockCollection:
        ...

    @property
    def as_i_enumerable(self) -> collections.abc.Iterable:
        ...

    def __getitem__(self, key: int) -> IMathBlock
        ...

    def __setitem__(self, key: int, value: IMathBlock
        ...

    ...

class MathParagraphFactory:
    '''Allows to create a math paragraph'''
    def __init__(self):
        ...

    @overload
    def create_math_paragraph(self) -> IMathParagraph:
        '''Create empty math paragraph
        :returns: new math paragraph'''
        ...

    @overload
    def create_math_paragraph(self, math_block: IMathBlock) -> IMathParagraph:
        '''Creates a math paragraph and places the specified math block in it
        :param math_block: math block to place in the paragraph
        :returns: new math paragraph'''
        ...

    ...

class MathPortion(aspose.slides.Portion):
    '''Represents a portion with mathematical context inside.'''
    def __init__(self):
        '''Initializes a new instance of the MathPortion class.'''
        ...

    @overload
    def add_field(self, field_type: IFieldType) -> None:
        '''Converts this portion to the automaticaly updated field.'''
        ...

    @overload
    def add_field(self, internal_string: str) -> None:
        '''Converts this portion to the automaticaly updated field.
        :param internal_string: Internal name of FieldType.'''
        ...

    def remove_field(self) -> None:
        '''Converts this field portion to the simple portion.'''
        ...

    def get_rect(self) -> aspose.pydrawing.RectangleF:
        '''Get coordinates of rect that bounds portion. The rect includes all the lines of
                     text in portion, including empty ones.'''
        ...

    def get_coordinates(self) -> aspose.pydrawing.PointF:
        '''Get coordinates of the beginning of the portion. The X coordinate of point represents the 
                    portion beginning from the first character including left side bearing. The Y coordinate 
                    includes top side bearing.'''
        ...

    @property
    def portion_format(self) -> IPortionFormat:
        ...

    @property
    def text(self) -> str:
        '''Gets or sets the plain text of a portion.
                    Read/write :py:class:`str`.'''
        ...

    @text.setter
    def text(self, value: str):
        '''Gets or sets the plain text of a portion.
                    Read/write :py:class:`str`.'''
        ...

    @property
    def field(self) -> IField:
        '''Returns a field of this portion.
                    Read-only :py:class:`aspose.slides.IField`.'''
        ...

    @property
    def math_paragraph(self) -> IMathParagraph:
        ...

    @property
    def as_i_slide_component(self) -> ISlideComponent:
        ...

    @property
    def slide(self) -> IBaseSlide:
        ...

    @property
    def as_i_presentation_component(self) -> IPresentationComponent:
        ...

    @property
    def presentation(self) -> IPresentation:
        ...

    ...

class MathRadical(MathElementBase):
    '''Specifies the radical function, consisting of a base, and an optional degree.
                Example of radical object is √𝑥.'''
    def __init__(self, base_argument: IMathElement, degree_argument: IMathElement):
        '''Initializes a new instance of the MathRadical class.
        :param base_argument: Base
        :param degree_argument: Degree'''
        ...

    @overload
    def join(self, math_element: IMathElement) -> IMathBlock:
        '''Joins a mathematical element and forms a mathematical block
        :param math_element: The element to be joined
        :returns: A new IMathBlock containing this instance and specified argument'''
        ...

    @overload
    def join(self, math_text: str) -> IMathBlock:
        '''Joins a mathematical text and forms a mathematical block
        :param math_text: Mathematical text to be joined
        :returns: A new IMathBlock containing this instance and specified argument'''
        ...

    @overload
    def divide(self, denominator: IMathElement) -> IMathFraction:
        '''Creates a fraction with this numerator and specified denominator
        :param denominator: Denominator
        :returns: new fraction'''
        ...

    @overload
    def divide(self, denominator: str) -> IMathFraction:
        '''Creates a fraction with this numerator and specified denominator
        :param denominator: Denominator
        :returns: new fraction'''
        ...

    @overload
    def divide(self, denominator: IMathElement, fraction_type: MathFractionTypes) -> IMathFraction:
        '''Creates a fraction of the specified type with this numerator and specified denominator
        :param denominator: Denominator
        :param fraction_type: Fraction type: Bar, NoBar, Skewed, Linear
        :returns: new fraction'''
        ...

    @overload
    def divide(self, denominator: str, fraction_type: MathFractionTypes) -> IMathFraction:
        '''Creates a fraction of the specified type with this numerator and specified denominator
        :param denominator: Denominator
        :param fraction_type: Fraction type: Bar, NoBar, Skewed, Linear
        :returns: new fraction'''
        ...

    @overload
    def enclose(self) -> IMathDelimiter:
        '''Encloses a math element in parenthesis
        :returns: The math element of type :py:class:`aspose.slides.mathtext.IMathDelimiter` which includes the parenthesis'''
        ...

    @overload
    def enclose(self, beginning_character: char, ending_character: char) -> IMathDelimiter:
        '''Encloses a math element in specified characters such as parenthesis or another characters as framing
        :param beginning_character: Beginning character (usually left bracket)
        :param ending_character: Ending character (usually right bracket)
        :returns: The math element of type :py:class:`aspose.slides.mathtext.IMathDelimiter` which includes specified characters as framing'''
        ...

    @overload
    def function(self, function_argument: IMathElement) -> IMathFunction:
        '''Takes a function of an argument using this instance as the function name
        :param function_argument: An argument of the function
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathFunction`'''
        ...

    @overload
    def function(self, function_argument: str) -> IMathFunction:
        '''Takes a function of an argument using this instance as the function name
        :param function_argument: An argument of the function
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathFunction`'''
        ...

    @overload
    def as_argument_of_function(self, function_name: IMathElement) -> IMathFunction:
        '''Takes specified function using this instance as the argument
        :param function_name: Function name
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathFunction`'''
        ...

    @overload
    def as_argument_of_function(self, function_name: str) -> IMathFunction:
        '''Takes specified function using this instance as the argument
        :param function_name: Function name
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathFunction`'''
        ...

    @overload
    def as_argument_of_function(self, function_type: MathFunctionsOfOneArgument) -> IMathFunction:
        '''Takes specified function using this instance as the argument
        :param function_type: One of the common function type of one argument
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathFunction`'''
        ...

    @overload
    def as_argument_of_function(self, function_type: MathFunctionsOfTwoArguments, additional_argument: IMathElement) -> IMathFunction:
        '''Takes specified function using this instance as the argument and specified additional argument
        :param function_type: One of the common function type of two arguments: Log, Lim, Min, Max
        :param additional_argument: Additional argument depending on the type of function
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathFunction`'''
        ...

    @overload
    def as_argument_of_function(self, function_type: MathFunctionsOfTwoArguments, additional_argument: str) -> IMathFunction:
        '''Takes specified function using this instance as the argument and specified additional argument
        :param function_type: One of the common function type of two arguments: Log, Lim, Min, Max
        :param additional_argument: Additional argument depending on the type of function
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathFunction`'''
        ...

    @overload
    def set_subscript(self, subscript: IMathElement) -> IMathSubscriptElement:
        '''Creates subscript
        :param subscript: Subscript (lower index on the right)
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathSubscriptElement`'''
        ...

    @overload
    def set_subscript(self, subscript: str) -> IMathSubscriptElement:
        '''Creates subscript
        :param subscript: Subscript (lower index on the right)
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathSubscriptElement`'''
        ...

    @overload
    def set_superscript(self, superscript: IMathElement) -> IMathSuperscriptElement:
        '''Creates superscript
        :param superscript: Superscript (upper index on the right)
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathSuperscriptElement`'''
        ...

    @overload
    def set_superscript(self, superscript: str) -> IMathSuperscriptElement:
        '''Creates superscript
        :param superscript: Superscript (upper index on the right)
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathSuperscriptElement`'''
        ...

    @overload
    def set_sub_superscript_on_the_right(self, subscript: IMathElement, superscript: IMathElement) -> IMathRightSubSuperscriptElement:
        '''Creates subscript and superscript on the right
        :param subscript: Subscript (lower index on the right)
        :param superscript: Superscript (upper index on the right)
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathRightSubSuperscriptElement`'''
        ...

    @overload
    def set_sub_superscript_on_the_right(self, subscript: str, superscript: str) -> IMathRightSubSuperscriptElement:
        '''Creates subscript and superscript on the right
        :param subscript: Subscript (lower index on the right)
        :param superscript: Superscript (upper index on the right)
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathRightSubSuperscriptElement`'''
        ...

    @overload
    def set_sub_superscript_on_the_left(self, subscript: IMathElement, superscript: IMathElement) -> IMathLeftSubSuperscriptElement:
        '''Creates subscript and superscript on the left
        :param subscript: Subscript (lower index on the left)
        :param superscript: Superscript (upper index on the left)
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathLeftSubSuperscriptElement`'''
        ...

    @overload
    def set_sub_superscript_on_the_left(self, subscript: str, superscript: str) -> IMathLeftSubSuperscriptElement:
        '''Creates subscript and superscript on the left
        :param subscript: Subscript (lower index on the left)
        :param superscript: Superscript (upper index on the left)
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathLeftSubSuperscriptElement`'''
        ...

    @overload
    def radical(self, degree: IMathElement) -> IMathRadical:
        '''Specifies the mathematical root of the given degree from the specified argument.
        :param degree: Argument of Radical
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathRadical`'''
        ...

    @overload
    def radical(self, degree: str) -> IMathRadical:
        '''Specifies the mathematical root of the given degree from the specified argument.
        :param degree: Argument of Radical
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathRadical`'''
        ...

    @overload
    def set_upper_limit(self, limit: IMathElement) -> IMathLimit:
        '''Takes upper limit
        :param limit: limit
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathLimit`'''
        ...

    @overload
    def set_upper_limit(self, limit: str) -> IMathLimit:
        '''Takes upper limit
        :param limit: limit
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathLimit`'''
        ...

    @overload
    def set_lower_limit(self, limit: IMathElement) -> IMathLimit:
        '''Takes lower limit
        :param limit: limit
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathLimit`'''
        ...

    @overload
    def set_lower_limit(self, limit: str) -> IMathLimit:
        '''Takes lower limit
        :param limit: limit
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathLimit`'''
        ...

    @overload
    def nary(self, type: MathNaryOperatorTypes, lower_limit: IMathElement, upper_limit: IMathElement) -> IMathNaryOperator:
        '''Creates a N-ary operator
        :param type: The N-ary operator type
        :param lower_limit: The lower limit
        :param upper_limit: The upper limit
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathNaryOperator`'''
        ...

    @overload
    def nary(self, type: MathNaryOperatorTypes, lower_limit: str, upper_limit: str) -> IMathNaryOperator:
        '''Creates a N-ary operator
        :param type: The N-ary operator type
        :param lower_limit: The lower limit
        :param upper_limit: The upper limit
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathNaryOperator`'''
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes, lower_limit: IMathElement, upper_limit: IMathElement, limit_locations: MathLimitLocations) -> IMathNaryOperator:
        '''Takes the integral
        :param integral_type: Integral type
        :param lower_limit: Lower limit of integral
        :param upper_limit: Upper limit of integral
        :param limit_locations: location of limits
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathNaryOperator`'''
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes, lower_limit: IMathElement, upper_limit: IMathElement) -> IMathNaryOperator:
        '''Takes the integral
        :param integral_type: Integral type
        :param lower_limit: Lower limit of integral
        :param upper_limit: Upper limit of integral
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathNaryOperator`'''
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes) -> IMathNaryOperator:
        '''Takes the integral without limits
        :param integral_type: Integral type
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathNaryOperator`'''
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes, lower_limit: str, upper_limit: str, limit_locations: MathLimitLocations) -> IMathNaryOperator:
        '''Takes the integral
        :param integral_type: Integral type
        :param lower_limit: Lower limit of integral
        :param upper_limit: Upper limit of integral
        :param limit_locations: location of limits
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathNaryOperator`'''
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes, lower_limit: str, upper_limit: str) -> IMathNaryOperator:
        '''Takes the integral
        :param integral_type: Integral type
        :param lower_limit: Lower limit of integral
        :param upper_limit: Upper limit of integral
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathNaryOperator`'''
        ...

    @overload
    def group(self) -> IMathGroupingCharacter:
        '''Places this element in a group using a bottom curly bracket
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathGroupingCharacter`'''
        ...

    @overload
    def group(self, character: char, position: MathTopBotPositions, vertical_justification: MathTopBotPositions) -> IMathGroupingCharacter:
        '''Places this element in a group using a grouping character such as bottom curly bracket or another
        :param character: Grouping Character such as BOTTOM CURLY BRACKET (U+23DF) or any other
        :param position: Position of grouping character
        :param vertical_justification: Vertical justification of group character.
                    Specifies the alignment of the object with respect to the baseline.
                    For example, when the group character is above the object, 
                    VerticalJustification of Top signifies that the top of the object falls on the baseline;
                    when VerticalJustification is set to Bottom, the bottom of the object is on the baseline
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathGroupingCharacter`'''
        ...

    @overload
    def to_border_box(self) -> IMathBorderBox:
        '''Places this element in a border-box
        :returns: Border-box with this element placed inside'''
        ...

    @overload
    def to_border_box(self, hide_top: bool, hide_bottom: bool, hide_left: bool, hide_right: bool, strikethrough_horizontal: bool, strikethrough_vertical: bool, strikethrough_bottom_left_to_top_right: bool, strikethrough_top_left_to_bottom_right: bool) -> IMathBorderBox:
        '''Places this element in a border-box
        :param hide_top: Hide Top Edge
        :param hide_bottom: Hide Bottom Edge
        :param hide_left: Hide Left Edge
        :param hide_right: Hide Right Edge
        :param strikethrough_horizontal: Border Box Strikethrough Horizontal
        :param strikethrough_vertical: Border Box Strikethrough Vertical
        :param strikethrough_bottom_left_to_top_right: Border Box Strikethrough Bottom-Left to Top-Right
        :param strikethrough_top_left_to_bottom_right: Border Box Strikethrough Top-Left to Bottom-Right
        :returns: Border-box with this element placed inside'''
        ...

    def to_math_array(self) -> IMathArray:
        '''Puts in a vertical array
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathArray`'''
        ...

    def accent(self, accent_character: char) -> IMathAccent:
        '''Sets an accent mark (a character on the top of this element)
        :param accent_character: Accent character. The value should be within the range of (U+0300–U+036F) or (U+20D0–U+20EF)
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathAccent`'''
        ...

    def overbar(self) -> IMathBar:
        '''Sets a bar on the top of this element
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathBar`'''
        ...

    def underbar(self) -> IMathBar:
        '''Sets a bar on the bottom of this element
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathBar`'''
        ...

    def to_box(self) -> IMathBox:
        '''Places this element in a non-visual box (logical grouping) 
                    which is used to group components of an equation or other instance of mathematical text.
                    A boxed object can (for example) serve as an operator emulator with or without an alignment point, 
                    serve as a line break point, or be grouped such as not to allow line breaks within.
        :returns: Logical box with this element placed inside'''
        ...

    def get_children(self) -> List[IMathElement]:
        '''Get children elements'''
        ...

    @property
    def base(self) -> IMathElement:
        '''Base argument'''
        ...

    @property
    def degree(self) -> IMathElement:
        '''Degree argument'''
        ...

    @property
    def hide_degree(self) -> bool:
        ...

    @hide_degree.setter
    def hide_degree(self, value: bool):
        ...

    @property
    def as_i_math_element(self) -> IMathElement:
        ...

    ...

class MathRadicalFactory:
    '''Allows to create math radical'''
    def __init__(self):
        ...

    def create_math_radical(self, base_argument: IMathElement, degree_argument: IMathElement) -> IMathRadical:
        '''Creates a math radical
        :param base_argument: Base argument to apply radical
        :param degree_argument: Degree value
        :returns: new radical element'''
        ...

    ...

class MathRightSubSuperscriptElement(BaseScript):
    '''Specifies the Sub-Superscript object, which consists of a base 
                and a subscript and superscript placed to the right of the base.'''
    def __init__(self, base_arg: IMathElement, sub_script: IMathElement, super_script: IMathElement):
        '''Initializes a new instance of the MathRightSubSuperscriptElement class.'''
        ...

    @overload
    def join(self, math_element: IMathElement) -> IMathBlock:
        '''Joins a mathematical element and forms a mathematical block
        :param math_element: The element to be joined
        :returns: A new IMathBlock containing this instance and specified argument'''
        ...

    @overload
    def join(self, math_text: str) -> IMathBlock:
        '''Joins a mathematical text and forms a mathematical block
        :param math_text: Mathematical text to be joined
        :returns: A new IMathBlock containing this instance and specified argument'''
        ...

    @overload
    def divide(self, denominator: IMathElement) -> IMathFraction:
        '''Creates a fraction with this numerator and specified denominator
        :param denominator: Denominator
        :returns: new fraction'''
        ...

    @overload
    def divide(self, denominator: str) -> IMathFraction:
        '''Creates a fraction with this numerator and specified denominator
        :param denominator: Denominator
        :returns: new fraction'''
        ...

    @overload
    def divide(self, denominator: IMathElement, fraction_type: MathFractionTypes) -> IMathFraction:
        '''Creates a fraction of the specified type with this numerator and specified denominator
        :param denominator: Denominator
        :param fraction_type: Fraction type: Bar, NoBar, Skewed, Linear
        :returns: new fraction'''
        ...

    @overload
    def divide(self, denominator: str, fraction_type: MathFractionTypes) -> IMathFraction:
        '''Creates a fraction of the specified type with this numerator and specified denominator
        :param denominator: Denominator
        :param fraction_type: Fraction type: Bar, NoBar, Skewed, Linear
        :returns: new fraction'''
        ...

    @overload
    def enclose(self) -> IMathDelimiter:
        '''Encloses a math element in parenthesis
        :returns: The math element of type :py:class:`aspose.slides.mathtext.IMathDelimiter` which includes the parenthesis'''
        ...

    @overload
    def enclose(self, beginning_character: char, ending_character: char) -> IMathDelimiter:
        '''Encloses a math element in specified characters such as parenthesis or another characters as framing
        :param beginning_character: Beginning character (usually left bracket)
        :param ending_character: Ending character (usually right bracket)
        :returns: The math element of type :py:class:`aspose.slides.mathtext.IMathDelimiter` which includes specified characters as framing'''
        ...

    @overload
    def function(self, function_argument: IMathElement) -> IMathFunction:
        '''Takes a function of an argument using this instance as the function name
        :param function_argument: An argument of the function
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathFunction`'''
        ...

    @overload
    def function(self, function_argument: str) -> IMathFunction:
        '''Takes a function of an argument using this instance as the function name
        :param function_argument: An argument of the function
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathFunction`'''
        ...

    @overload
    def as_argument_of_function(self, function_name: IMathElement) -> IMathFunction:
        '''Takes specified function using this instance as the argument
        :param function_name: Function name
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathFunction`'''
        ...

    @overload
    def as_argument_of_function(self, function_name: str) -> IMathFunction:
        '''Takes specified function using this instance as the argument
        :param function_name: Function name
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathFunction`'''
        ...

    @overload
    def as_argument_of_function(self, function_type: MathFunctionsOfOneArgument) -> IMathFunction:
        '''Takes specified function using this instance as the argument
        :param function_type: One of the common function type of one argument
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathFunction`'''
        ...

    @overload
    def as_argument_of_function(self, function_type: MathFunctionsOfTwoArguments, additional_argument: IMathElement) -> IMathFunction:
        '''Takes specified function using this instance as the argument and specified additional argument
        :param function_type: One of the common function type of two arguments: Log, Lim, Min, Max
        :param additional_argument: Additional argument depending on the type of function
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathFunction`'''
        ...

    @overload
    def as_argument_of_function(self, function_type: MathFunctionsOfTwoArguments, additional_argument: str) -> IMathFunction:
        '''Takes specified function using this instance as the argument and specified additional argument
        :param function_type: One of the common function type of two arguments: Log, Lim, Min, Max
        :param additional_argument: Additional argument depending on the type of function
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathFunction`'''
        ...

    @overload
    def set_subscript(self, subscript: IMathElement) -> IMathSubscriptElement:
        '''Creates subscript
        :param subscript: Subscript (lower index on the right)
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathSubscriptElement`'''
        ...

    @overload
    def set_subscript(self, subscript: str) -> IMathSubscriptElement:
        '''Creates subscript
        :param subscript: Subscript (lower index on the right)
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathSubscriptElement`'''
        ...

    @overload
    def set_superscript(self, superscript: IMathElement) -> IMathSuperscriptElement:
        '''Creates superscript
        :param superscript: Superscript (upper index on the right)
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathSuperscriptElement`'''
        ...

    @overload
    def set_superscript(self, superscript: str) -> IMathSuperscriptElement:
        '''Creates superscript
        :param superscript: Superscript (upper index on the right)
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathSuperscriptElement`'''
        ...

    @overload
    def set_sub_superscript_on_the_right(self, subscript: IMathElement, superscript: IMathElement) -> IMathRightSubSuperscriptElement:
        '''Creates subscript and superscript on the right
        :param subscript: Subscript (lower index on the right)
        :param superscript: Superscript (upper index on the right)
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathRightSubSuperscriptElement`'''
        ...

    @overload
    def set_sub_superscript_on_the_right(self, subscript: str, superscript: str) -> IMathRightSubSuperscriptElement:
        '''Creates subscript and superscript on the right
        :param subscript: Subscript (lower index on the right)
        :param superscript: Superscript (upper index on the right)
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathRightSubSuperscriptElement`'''
        ...

    @overload
    def set_sub_superscript_on_the_left(self, subscript: IMathElement, superscript: IMathElement) -> IMathLeftSubSuperscriptElement:
        '''Creates subscript and superscript on the left
        :param subscript: Subscript (lower index on the left)
        :param superscript: Superscript (upper index on the left)
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathLeftSubSuperscriptElement`'''
        ...

    @overload
    def set_sub_superscript_on_the_left(self, subscript: str, superscript: str) -> IMathLeftSubSuperscriptElement:
        '''Creates subscript and superscript on the left
        :param subscript: Subscript (lower index on the left)
        :param superscript: Superscript (upper index on the left)
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathLeftSubSuperscriptElement`'''
        ...

    @overload
    def radical(self, degree: IMathElement) -> IMathRadical:
        '''Specifies the mathematical root of the given degree from the specified argument.
        :param degree: Argument of Radical
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathRadical`'''
        ...

    @overload
    def radical(self, degree: str) -> IMathRadical:
        '''Specifies the mathematical root of the given degree from the specified argument.
        :param degree: Argument of Radical
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathRadical`'''
        ...

    @overload
    def set_upper_limit(self, limit: IMathElement) -> IMathLimit:
        '''Takes upper limit
        :param limit: limit
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathLimit`'''
        ...

    @overload
    def set_upper_limit(self, limit: str) -> IMathLimit:
        '''Takes upper limit
        :param limit: limit
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathLimit`'''
        ...

    @overload
    def set_lower_limit(self, limit: IMathElement) -> IMathLimit:
        '''Takes lower limit
        :param limit: limit
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathLimit`'''
        ...

    @overload
    def set_lower_limit(self, limit: str) -> IMathLimit:
        '''Takes lower limit
        :param limit: limit
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathLimit`'''
        ...

    @overload
    def nary(self, type: MathNaryOperatorTypes, lower_limit: IMathElement, upper_limit: IMathElement) -> IMathNaryOperator:
        '''Creates a N-ary operator
        :param type: The N-ary operator type
        :param lower_limit: The lower limit
        :param upper_limit: The upper limit
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathNaryOperator`'''
        ...

    @overload
    def nary(self, type: MathNaryOperatorTypes, lower_limit: str, upper_limit: str) -> IMathNaryOperator:
        '''Creates a N-ary operator
        :param type: The N-ary operator type
        :param lower_limit: The lower limit
        :param upper_limit: The upper limit
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathNaryOperator`'''
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes, lower_limit: IMathElement, upper_limit: IMathElement, limit_locations: MathLimitLocations) -> IMathNaryOperator:
        '''Takes the integral
        :param integral_type: Integral type
        :param lower_limit: Lower limit of integral
        :param upper_limit: Upper limit of integral
        :param limit_locations: location of limits
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathNaryOperator`'''
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes, lower_limit: IMathElement, upper_limit: IMathElement) -> IMathNaryOperator:
        '''Takes the integral
        :param integral_type: Integral type
        :param lower_limit: Lower limit of integral
        :param upper_limit: Upper limit of integral
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathNaryOperator`'''
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes) -> IMathNaryOperator:
        '''Takes the integral without limits
        :param integral_type: Integral type
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathNaryOperator`'''
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes, lower_limit: str, upper_limit: str, limit_locations: MathLimitLocations) -> IMathNaryOperator:
        '''Takes the integral
        :param integral_type: Integral type
        :param lower_limit: Lower limit of integral
        :param upper_limit: Upper limit of integral
        :param limit_locations: location of limits
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathNaryOperator`'''
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes, lower_limit: str, upper_limit: str) -> IMathNaryOperator:
        '''Takes the integral
        :param integral_type: Integral type
        :param lower_limit: Lower limit of integral
        :param upper_limit: Upper limit of integral
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathNaryOperator`'''
        ...

    @overload
    def group(self) -> IMathGroupingCharacter:
        '''Places this element in a group using a bottom curly bracket
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathGroupingCharacter`'''
        ...

    @overload
    def group(self, character: char, position: MathTopBotPositions, vertical_justification: MathTopBotPositions) -> IMathGroupingCharacter:
        '''Places this element in a group using a grouping character such as bottom curly bracket or another
        :param character: Grouping Character such as BOTTOM CURLY BRACKET (U+23DF) or any other
        :param position: Position of grouping character
        :param vertical_justification: Vertical justification of group character.
                    Specifies the alignment of the object with respect to the baseline.
                    For example, when the group character is above the object, 
                    VerticalJustification of Top signifies that the top of the object falls on the baseline;
                    when VerticalJustification is set to Bottom, the bottom of the object is on the baseline
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathGroupingCharacter`'''
        ...

    @overload
    def to_border_box(self) -> IMathBorderBox:
        '''Places this element in a border-box
        :returns: Border-box with this element placed inside'''
        ...

    @overload
    def to_border_box(self, hide_top: bool, hide_bottom: bool, hide_left: bool, hide_right: bool, strikethrough_horizontal: bool, strikethrough_vertical: bool, strikethrough_bottom_left_to_top_right: bool, strikethrough_top_left_to_bottom_right: bool) -> IMathBorderBox:
        '''Places this element in a border-box
        :param hide_top: Hide Top Edge
        :param hide_bottom: Hide Bottom Edge
        :param hide_left: Hide Left Edge
        :param hide_right: Hide Right Edge
        :param strikethrough_horizontal: Border Box Strikethrough Horizontal
        :param strikethrough_vertical: Border Box Strikethrough Vertical
        :param strikethrough_bottom_left_to_top_right: Border Box Strikethrough Bottom-Left to Top-Right
        :param strikethrough_top_left_to_bottom_right: Border Box Strikethrough Top-Left to Bottom-Right
        :returns: Border-box with this element placed inside'''
        ...

    def to_math_array(self) -> IMathArray:
        '''Puts in a vertical array
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathArray`'''
        ...

    def accent(self, accent_character: char) -> IMathAccent:
        '''Sets an accent mark (a character on the top of this element)
        :param accent_character: Accent character. The value should be within the range of (U+0300–U+036F) or (U+20D0–U+20EF)
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathAccent`'''
        ...

    def overbar(self) -> IMathBar:
        '''Sets a bar on the top of this element
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathBar`'''
        ...

    def underbar(self) -> IMathBar:
        '''Sets a bar on the bottom of this element
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathBar`'''
        ...

    def to_box(self) -> IMathBox:
        '''Places this element in a non-visual box (logical grouping) 
                    which is used to group components of an equation or other instance of mathematical text.
                    A boxed object can (for example) serve as an operator emulator with or without an alignment point, 
                    serve as a line break point, or be grouped such as not to allow line breaks within.
        :returns: Logical box with this element placed inside'''
        ...

    def get_children(self) -> List[IMathElement]:
        '''Get children elements'''
        ...

    @property
    def base(self) -> IMathElement:
        '''Base argument'''
        ...

    @property
    def subscript(self) -> IMathElement:
        '''Subscript argument'''
        ...

    @property
    def superscript(self) -> IMathElement:
        '''Superscript argument'''
        ...

    @property
    def align_scripts(self) -> bool:
        ...

    @align_scripts.setter
    def align_scripts(self, value: bool):
        ...

    @property
    def as_i_math_element(self) -> IMathElement:
        ...

    ...

class MathRightSubSuperscriptElementFactory:
    '''Allows to create IMathRightSubSuperscriptElementFactory'''
    def __init__(self):
        ...

    def create_math_right_sub_superscript_element(self, base_arg: IMathElement, sub_script: IMathElement, super_script: IMathElement) -> IMathRightSubSuperscriptElement:
        '''Creates an instance of IMathRightSubSuperscriptElementFactory
        :param base_arg: Base argument to apply indexes
        :param sub_script: lower right index
        :param super_script: upper right index
        :returns: new IMathLeftSubSuperscriptElement'''
        ...

    ...

class MathSubscriptElement(BaseScript):
    '''Specifies the subscript object, which consists of a base 
                and a reduced-size subscript placed below and to the right.'''
    def __init__(self, base_arg: IMathElement, sub_script: IMathElement):
        '''Initializes a new instance of the MathSubscriptElement class.'''
        ...

    @overload
    def join(self, math_element: IMathElement) -> IMathBlock:
        '''Joins a mathematical element and forms a mathematical block
        :param math_element: The element to be joined
        :returns: A new IMathBlock containing this instance and specified argument'''
        ...

    @overload
    def join(self, math_text: str) -> IMathBlock:
        '''Joins a mathematical text and forms a mathematical block
        :param math_text: Mathematical text to be joined
        :returns: A new IMathBlock containing this instance and specified argument'''
        ...

    @overload
    def divide(self, denominator: IMathElement) -> IMathFraction:
        '''Creates a fraction with this numerator and specified denominator
        :param denominator: Denominator
        :returns: new fraction'''
        ...

    @overload
    def divide(self, denominator: str) -> IMathFraction:
        '''Creates a fraction with this numerator and specified denominator
        :param denominator: Denominator
        :returns: new fraction'''
        ...

    @overload
    def divide(self, denominator: IMathElement, fraction_type: MathFractionTypes) -> IMathFraction:
        '''Creates a fraction of the specified type with this numerator and specified denominator
        :param denominator: Denominator
        :param fraction_type: Fraction type: Bar, NoBar, Skewed, Linear
        :returns: new fraction'''
        ...

    @overload
    def divide(self, denominator: str, fraction_type: MathFractionTypes) -> IMathFraction:
        '''Creates a fraction of the specified type with this numerator and specified denominator
        :param denominator: Denominator
        :param fraction_type: Fraction type: Bar, NoBar, Skewed, Linear
        :returns: new fraction'''
        ...

    @overload
    def enclose(self) -> IMathDelimiter:
        '''Encloses a math element in parenthesis
        :returns: The math element of type :py:class:`aspose.slides.mathtext.IMathDelimiter` which includes the parenthesis'''
        ...

    @overload
    def enclose(self, beginning_character: char, ending_character: char) -> IMathDelimiter:
        '''Encloses a math element in specified characters such as parenthesis or another characters as framing
        :param beginning_character: Beginning character (usually left bracket)
        :param ending_character: Ending character (usually right bracket)
        :returns: The math element of type :py:class:`aspose.slides.mathtext.IMathDelimiter` which includes specified characters as framing'''
        ...

    @overload
    def function(self, function_argument: IMathElement) -> IMathFunction:
        '''Takes a function of an argument using this instance as the function name
        :param function_argument: An argument of the function
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathFunction`'''
        ...

    @overload
    def function(self, function_argument: str) -> IMathFunction:
        '''Takes a function of an argument using this instance as the function name
        :param function_argument: An argument of the function
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathFunction`'''
        ...

    @overload
    def as_argument_of_function(self, function_name: IMathElement) -> IMathFunction:
        '''Takes specified function using this instance as the argument
        :param function_name: Function name
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathFunction`'''
        ...

    @overload
    def as_argument_of_function(self, function_name: str) -> IMathFunction:
        '''Takes specified function using this instance as the argument
        :param function_name: Function name
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathFunction`'''
        ...

    @overload
    def as_argument_of_function(self, function_type: MathFunctionsOfOneArgument) -> IMathFunction:
        '''Takes specified function using this instance as the argument
        :param function_type: One of the common function type of one argument
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathFunction`'''
        ...

    @overload
    def as_argument_of_function(self, function_type: MathFunctionsOfTwoArguments, additional_argument: IMathElement) -> IMathFunction:
        '''Takes specified function using this instance as the argument and specified additional argument
        :param function_type: One of the common function type of two arguments: Log, Lim, Min, Max
        :param additional_argument: Additional argument depending on the type of function
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathFunction`'''
        ...

    @overload
    def as_argument_of_function(self, function_type: MathFunctionsOfTwoArguments, additional_argument: str) -> IMathFunction:
        '''Takes specified function using this instance as the argument and specified additional argument
        :param function_type: One of the common function type of two arguments: Log, Lim, Min, Max
        :param additional_argument: Additional argument depending on the type of function
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathFunction`'''
        ...

    @overload
    def set_subscript(self, subscript: IMathElement) -> IMathSubscriptElement:
        '''Creates subscript
        :param subscript: Subscript (lower index on the right)
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathSubscriptElement`'''
        ...

    @overload
    def set_subscript(self, subscript: str) -> IMathSubscriptElement:
        '''Creates subscript
        :param subscript: Subscript (lower index on the right)
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathSubscriptElement`'''
        ...

    @overload
    def set_superscript(self, superscript: IMathElement) -> IMathSuperscriptElement:
        '''Creates superscript
        :param superscript: Superscript (upper index on the right)
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathSuperscriptElement`'''
        ...

    @overload
    def set_superscript(self, superscript: str) -> IMathSuperscriptElement:
        '''Creates superscript
        :param superscript: Superscript (upper index on the right)
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathSuperscriptElement`'''
        ...

    @overload
    def set_sub_superscript_on_the_right(self, subscript: IMathElement, superscript: IMathElement) -> IMathRightSubSuperscriptElement:
        '''Creates subscript and superscript on the right
        :param subscript: Subscript (lower index on the right)
        :param superscript: Superscript (upper index on the right)
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathRightSubSuperscriptElement`'''
        ...

    @overload
    def set_sub_superscript_on_the_right(self, subscript: str, superscript: str) -> IMathRightSubSuperscriptElement:
        '''Creates subscript and superscript on the right
        :param subscript: Subscript (lower index on the right)
        :param superscript: Superscript (upper index on the right)
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathRightSubSuperscriptElement`'''
        ...

    @overload
    def set_sub_superscript_on_the_left(self, subscript: IMathElement, superscript: IMathElement) -> IMathLeftSubSuperscriptElement:
        '''Creates subscript and superscript on the left
        :param subscript: Subscript (lower index on the left)
        :param superscript: Superscript (upper index on the left)
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathLeftSubSuperscriptElement`'''
        ...

    @overload
    def set_sub_superscript_on_the_left(self, subscript: str, superscript: str) -> IMathLeftSubSuperscriptElement:
        '''Creates subscript and superscript on the left
        :param subscript: Subscript (lower index on the left)
        :param superscript: Superscript (upper index on the left)
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathLeftSubSuperscriptElement`'''
        ...

    @overload
    def radical(self, degree: IMathElement) -> IMathRadical:
        '''Specifies the mathematical root of the given degree from the specified argument.
        :param degree: Argument of Radical
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathRadical`'''
        ...

    @overload
    def radical(self, degree: str) -> IMathRadical:
        '''Specifies the mathematical root of the given degree from the specified argument.
        :param degree: Argument of Radical
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathRadical`'''
        ...

    @overload
    def set_upper_limit(self, limit: IMathElement) -> IMathLimit:
        '''Takes upper limit
        :param limit: limit
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathLimit`'''
        ...

    @overload
    def set_upper_limit(self, limit: str) -> IMathLimit:
        '''Takes upper limit
        :param limit: limit
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathLimit`'''
        ...

    @overload
    def set_lower_limit(self, limit: IMathElement) -> IMathLimit:
        '''Takes lower limit
        :param limit: limit
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathLimit`'''
        ...

    @overload
    def set_lower_limit(self, limit: str) -> IMathLimit:
        '''Takes lower limit
        :param limit: limit
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathLimit`'''
        ...

    @overload
    def nary(self, type: MathNaryOperatorTypes, lower_limit: IMathElement, upper_limit: IMathElement) -> IMathNaryOperator:
        '''Creates a N-ary operator
        :param type: The N-ary operator type
        :param lower_limit: The lower limit
        :param upper_limit: The upper limit
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathNaryOperator`'''
        ...

    @overload
    def nary(self, type: MathNaryOperatorTypes, lower_limit: str, upper_limit: str) -> IMathNaryOperator:
        '''Creates a N-ary operator
        :param type: The N-ary operator type
        :param lower_limit: The lower limit
        :param upper_limit: The upper limit
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathNaryOperator`'''
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes, lower_limit: IMathElement, upper_limit: IMathElement, limit_locations: MathLimitLocations) -> IMathNaryOperator:
        '''Takes the integral
        :param integral_type: Integral type
        :param lower_limit: Lower limit of integral
        :param upper_limit: Upper limit of integral
        :param limit_locations: location of limits
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathNaryOperator`'''
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes, lower_limit: IMathElement, upper_limit: IMathElement) -> IMathNaryOperator:
        '''Takes the integral
        :param integral_type: Integral type
        :param lower_limit: Lower limit of integral
        :param upper_limit: Upper limit of integral
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathNaryOperator`'''
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes) -> IMathNaryOperator:
        '''Takes the integral without limits
        :param integral_type: Integral type
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathNaryOperator`'''
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes, lower_limit: str, upper_limit: str, limit_locations: MathLimitLocations) -> IMathNaryOperator:
        '''Takes the integral
        :param integral_type: Integral type
        :param lower_limit: Lower limit of integral
        :param upper_limit: Upper limit of integral
        :param limit_locations: location of limits
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathNaryOperator`'''
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes, lower_limit: str, upper_limit: str) -> IMathNaryOperator:
        '''Takes the integral
        :param integral_type: Integral type
        :param lower_limit: Lower limit of integral
        :param upper_limit: Upper limit of integral
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathNaryOperator`'''
        ...

    @overload
    def group(self) -> IMathGroupingCharacter:
        '''Places this element in a group using a bottom curly bracket
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathGroupingCharacter`'''
        ...

    @overload
    def group(self, character: char, position: MathTopBotPositions, vertical_justification: MathTopBotPositions) -> IMathGroupingCharacter:
        '''Places this element in a group using a grouping character such as bottom curly bracket or another
        :param character: Grouping Character such as BOTTOM CURLY BRACKET (U+23DF) or any other
        :param position: Position of grouping character
        :param vertical_justification: Vertical justification of group character.
                    Specifies the alignment of the object with respect to the baseline.
                    For example, when the group character is above the object, 
                    VerticalJustification of Top signifies that the top of the object falls on the baseline;
                    when VerticalJustification is set to Bottom, the bottom of the object is on the baseline
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathGroupingCharacter`'''
        ...

    @overload
    def to_border_box(self) -> IMathBorderBox:
        '''Places this element in a border-box
        :returns: Border-box with this element placed inside'''
        ...

    @overload
    def to_border_box(self, hide_top: bool, hide_bottom: bool, hide_left: bool, hide_right: bool, strikethrough_horizontal: bool, strikethrough_vertical: bool, strikethrough_bottom_left_to_top_right: bool, strikethrough_top_left_to_bottom_right: bool) -> IMathBorderBox:
        '''Places this element in a border-box
        :param hide_top: Hide Top Edge
        :param hide_bottom: Hide Bottom Edge
        :param hide_left: Hide Left Edge
        :param hide_right: Hide Right Edge
        :param strikethrough_horizontal: Border Box Strikethrough Horizontal
        :param strikethrough_vertical: Border Box Strikethrough Vertical
        :param strikethrough_bottom_left_to_top_right: Border Box Strikethrough Bottom-Left to Top-Right
        :param strikethrough_top_left_to_bottom_right: Border Box Strikethrough Top-Left to Bottom-Right
        :returns: Border-box with this element placed inside'''
        ...

    def to_math_array(self) -> IMathArray:
        '''Puts in a vertical array
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathArray`'''
        ...

    def accent(self, accent_character: char) -> IMathAccent:
        '''Sets an accent mark (a character on the top of this element)
        :param accent_character: Accent character. The value should be within the range of (U+0300–U+036F) or (U+20D0–U+20EF)
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathAccent`'''
        ...

    def overbar(self) -> IMathBar:
        '''Sets a bar on the top of this element
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathBar`'''
        ...

    def underbar(self) -> IMathBar:
        '''Sets a bar on the bottom of this element
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathBar`'''
        ...

    def to_box(self) -> IMathBox:
        '''Places this element in a non-visual box (logical grouping) 
                    which is used to group components of an equation or other instance of mathematical text.
                    A boxed object can (for example) serve as an operator emulator with or without an alignment point, 
                    serve as a line break point, or be grouped such as not to allow line breaks within.
        :returns: Logical box with this element placed inside'''
        ...

    def get_children(self) -> List[IMathElement]:
        '''Get children elements'''
        ...

    @property
    def base(self) -> IMathElement:
        '''Base argument'''
        ...

    @property
    def subscript(self) -> IMathElement:
        '''Subscript'''
        ...

    @property
    def as_i_math_element(self) -> IMathElement:
        ...

    ...

class MathSubscriptElementFactory:
    '''Allows to create IMathSubscriptElement'''
    def __init__(self):
        ...

    def create_math_subscript_element(self, base_arg: IMathElement, sub_script: IMathElement) -> IMathSubscriptElement:
        '''Creates IMathSubscriptElement
        :param base_arg: Base argument to apply indexe
        :param sub_script: lower right index
        :returns: new IMathSubscriptElement'''
        ...

    ...

class MathSuperscriptElement(BaseScript):
    '''Specifies the superscript object, which consists of a base 
                and a reduced-size superscript placed above and to the right'''
    def __init__(self, base_arg: IMathElement, super_script: IMathElement):
        '''Initializes a new instance of the MathSuperscriptElement class.'''
        ...

    @overload
    def join(self, math_element: IMathElement) -> IMathBlock:
        '''Joins a mathematical element and forms a mathematical block
        :param math_element: The element to be joined
        :returns: A new IMathBlock containing this instance and specified argument'''
        ...

    @overload
    def join(self, math_text: str) -> IMathBlock:
        '''Joins a mathematical text and forms a mathematical block
        :param math_text: Mathematical text to be joined
        :returns: A new IMathBlock containing this instance and specified argument'''
        ...

    @overload
    def divide(self, denominator: IMathElement) -> IMathFraction:
        '''Creates a fraction with this numerator and specified denominator
        :param denominator: Denominator
        :returns: new fraction'''
        ...

    @overload
    def divide(self, denominator: str) -> IMathFraction:
        '''Creates a fraction with this numerator and specified denominator
        :param denominator: Denominator
        :returns: new fraction'''
        ...

    @overload
    def divide(self, denominator: IMathElement, fraction_type: MathFractionTypes) -> IMathFraction:
        '''Creates a fraction of the specified type with this numerator and specified denominator
        :param denominator: Denominator
        :param fraction_type: Fraction type: Bar, NoBar, Skewed, Linear
        :returns: new fraction'''
        ...

    @overload
    def divide(self, denominator: str, fraction_type: MathFractionTypes) -> IMathFraction:
        '''Creates a fraction of the specified type with this numerator and specified denominator
        :param denominator: Denominator
        :param fraction_type: Fraction type: Bar, NoBar, Skewed, Linear
        :returns: new fraction'''
        ...

    @overload
    def enclose(self) -> IMathDelimiter:
        '''Encloses a math element in parenthesis
        :returns: The math element of type :py:class:`aspose.slides.mathtext.IMathDelimiter` which includes the parenthesis'''
        ...

    @overload
    def enclose(self, beginning_character: char, ending_character: char) -> IMathDelimiter:
        '''Encloses a math element in specified characters such as parenthesis or another characters as framing
        :param beginning_character: Beginning character (usually left bracket)
        :param ending_character: Ending character (usually right bracket)
        :returns: The math element of type :py:class:`aspose.slides.mathtext.IMathDelimiter` which includes specified characters as framing'''
        ...

    @overload
    def function(self, function_argument: IMathElement) -> IMathFunction:
        '''Takes a function of an argument using this instance as the function name
        :param function_argument: An argument of the function
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathFunction`'''
        ...

    @overload
    def function(self, function_argument: str) -> IMathFunction:
        '''Takes a function of an argument using this instance as the function name
        :param function_argument: An argument of the function
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathFunction`'''
        ...

    @overload
    def as_argument_of_function(self, function_name: IMathElement) -> IMathFunction:
        '''Takes specified function using this instance as the argument
        :param function_name: Function name
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathFunction`'''
        ...

    @overload
    def as_argument_of_function(self, function_name: str) -> IMathFunction:
        '''Takes specified function using this instance as the argument
        :param function_name: Function name
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathFunction`'''
        ...

    @overload
    def as_argument_of_function(self, function_type: MathFunctionsOfOneArgument) -> IMathFunction:
        '''Takes specified function using this instance as the argument
        :param function_type: One of the common function type of one argument
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathFunction`'''
        ...

    @overload
    def as_argument_of_function(self, function_type: MathFunctionsOfTwoArguments, additional_argument: IMathElement) -> IMathFunction:
        '''Takes specified function using this instance as the argument and specified additional argument
        :param function_type: One of the common function type of two arguments: Log, Lim, Min, Max
        :param additional_argument: Additional argument depending on the type of function
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathFunction`'''
        ...

    @overload
    def as_argument_of_function(self, function_type: MathFunctionsOfTwoArguments, additional_argument: str) -> IMathFunction:
        '''Takes specified function using this instance as the argument and specified additional argument
        :param function_type: One of the common function type of two arguments: Log, Lim, Min, Max
        :param additional_argument: Additional argument depending on the type of function
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathFunction`'''
        ...

    @overload
    def set_subscript(self, subscript: IMathElement) -> IMathSubscriptElement:
        '''Creates subscript
        :param subscript: Subscript (lower index on the right)
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathSubscriptElement`'''
        ...

    @overload
    def set_subscript(self, subscript: str) -> IMathSubscriptElement:
        '''Creates subscript
        :param subscript: Subscript (lower index on the right)
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathSubscriptElement`'''
        ...

    @overload
    def set_superscript(self, superscript: IMathElement) -> IMathSuperscriptElement:
        '''Creates superscript
        :param superscript: Superscript (upper index on the right)
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathSuperscriptElement`'''
        ...

    @overload
    def set_superscript(self, superscript: str) -> IMathSuperscriptElement:
        '''Creates superscript
        :param superscript: Superscript (upper index on the right)
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathSuperscriptElement`'''
        ...

    @overload
    def set_sub_superscript_on_the_right(self, subscript: IMathElement, superscript: IMathElement) -> IMathRightSubSuperscriptElement:
        '''Creates subscript and superscript on the right
        :param subscript: Subscript (lower index on the right)
        :param superscript: Superscript (upper index on the right)
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathRightSubSuperscriptElement`'''
        ...

    @overload
    def set_sub_superscript_on_the_right(self, subscript: str, superscript: str) -> IMathRightSubSuperscriptElement:
        '''Creates subscript and superscript on the right
        :param subscript: Subscript (lower index on the right)
        :param superscript: Superscript (upper index on the right)
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathRightSubSuperscriptElement`'''
        ...

    @overload
    def set_sub_superscript_on_the_left(self, subscript: IMathElement, superscript: IMathElement) -> IMathLeftSubSuperscriptElement:
        '''Creates subscript and superscript on the left
        :param subscript: Subscript (lower index on the left)
        :param superscript: Superscript (upper index on the left)
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathLeftSubSuperscriptElement`'''
        ...

    @overload
    def set_sub_superscript_on_the_left(self, subscript: str, superscript: str) -> IMathLeftSubSuperscriptElement:
        '''Creates subscript and superscript on the left
        :param subscript: Subscript (lower index on the left)
        :param superscript: Superscript (upper index on the left)
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathLeftSubSuperscriptElement`'''
        ...

    @overload
    def radical(self, degree: IMathElement) -> IMathRadical:
        '''Specifies the mathematical root of the given degree from the specified argument.
        :param degree: Argument of Radical
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathRadical`'''
        ...

    @overload
    def radical(self, degree: str) -> IMathRadical:
        '''Specifies the mathematical root of the given degree from the specified argument.
        :param degree: Argument of Radical
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathRadical`'''
        ...

    @overload
    def set_upper_limit(self, limit: IMathElement) -> IMathLimit:
        '''Takes upper limit
        :param limit: limit
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathLimit`'''
        ...

    @overload
    def set_upper_limit(self, limit: str) -> IMathLimit:
        '''Takes upper limit
        :param limit: limit
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathLimit`'''
        ...

    @overload
    def set_lower_limit(self, limit: IMathElement) -> IMathLimit:
        '''Takes lower limit
        :param limit: limit
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathLimit`'''
        ...

    @overload
    def set_lower_limit(self, limit: str) -> IMathLimit:
        '''Takes lower limit
        :param limit: limit
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathLimit`'''
        ...

    @overload
    def nary(self, type: MathNaryOperatorTypes, lower_limit: IMathElement, upper_limit: IMathElement) -> IMathNaryOperator:
        '''Creates a N-ary operator
        :param type: The N-ary operator type
        :param lower_limit: The lower limit
        :param upper_limit: The upper limit
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathNaryOperator`'''
        ...

    @overload
    def nary(self, type: MathNaryOperatorTypes, lower_limit: str, upper_limit: str) -> IMathNaryOperator:
        '''Creates a N-ary operator
        :param type: The N-ary operator type
        :param lower_limit: The lower limit
        :param upper_limit: The upper limit
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathNaryOperator`'''
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes, lower_limit: IMathElement, upper_limit: IMathElement, limit_locations: MathLimitLocations) -> IMathNaryOperator:
        '''Takes the integral
        :param integral_type: Integral type
        :param lower_limit: Lower limit of integral
        :param upper_limit: Upper limit of integral
        :param limit_locations: location of limits
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathNaryOperator`'''
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes, lower_limit: IMathElement, upper_limit: IMathElement) -> IMathNaryOperator:
        '''Takes the integral
        :param integral_type: Integral type
        :param lower_limit: Lower limit of integral
        :param upper_limit: Upper limit of integral
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathNaryOperator`'''
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes) -> IMathNaryOperator:
        '''Takes the integral without limits
        :param integral_type: Integral type
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathNaryOperator`'''
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes, lower_limit: str, upper_limit: str, limit_locations: MathLimitLocations) -> IMathNaryOperator:
        '''Takes the integral
        :param integral_type: Integral type
        :param lower_limit: Lower limit of integral
        :param upper_limit: Upper limit of integral
        :param limit_locations: location of limits
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathNaryOperator`'''
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes, lower_limit: str, upper_limit: str) -> IMathNaryOperator:
        '''Takes the integral
        :param integral_type: Integral type
        :param lower_limit: Lower limit of integral
        :param upper_limit: Upper limit of integral
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathNaryOperator`'''
        ...

    @overload
    def group(self) -> IMathGroupingCharacter:
        '''Places this element in a group using a bottom curly bracket
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathGroupingCharacter`'''
        ...

    @overload
    def group(self, character: char, position: MathTopBotPositions, vertical_justification: MathTopBotPositions) -> IMathGroupingCharacter:
        '''Places this element in a group using a grouping character such as bottom curly bracket or another
        :param character: Grouping Character such as BOTTOM CURLY BRACKET (U+23DF) or any other
        :param position: Position of grouping character
        :param vertical_justification: Vertical justification of group character.
                    Specifies the alignment of the object with respect to the baseline.
                    For example, when the group character is above the object, 
                    VerticalJustification of Top signifies that the top of the object falls on the baseline;
                    when VerticalJustification is set to Bottom, the bottom of the object is on the baseline
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathGroupingCharacter`'''
        ...

    @overload
    def to_border_box(self) -> IMathBorderBox:
        '''Places this element in a border-box
        :returns: Border-box with this element placed inside'''
        ...

    @overload
    def to_border_box(self, hide_top: bool, hide_bottom: bool, hide_left: bool, hide_right: bool, strikethrough_horizontal: bool, strikethrough_vertical: bool, strikethrough_bottom_left_to_top_right: bool, strikethrough_top_left_to_bottom_right: bool) -> IMathBorderBox:
        '''Places this element in a border-box
        :param hide_top: Hide Top Edge
        :param hide_bottom: Hide Bottom Edge
        :param hide_left: Hide Left Edge
        :param hide_right: Hide Right Edge
        :param strikethrough_horizontal: Border Box Strikethrough Horizontal
        :param strikethrough_vertical: Border Box Strikethrough Vertical
        :param strikethrough_bottom_left_to_top_right: Border Box Strikethrough Bottom-Left to Top-Right
        :param strikethrough_top_left_to_bottom_right: Border Box Strikethrough Top-Left to Bottom-Right
        :returns: Border-box with this element placed inside'''
        ...

    def to_math_array(self) -> IMathArray:
        '''Puts in a vertical array
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathArray`'''
        ...

    def accent(self, accent_character: char) -> IMathAccent:
        '''Sets an accent mark (a character on the top of this element)
        :param accent_character: Accent character. The value should be within the range of (U+0300–U+036F) or (U+20D0–U+20EF)
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathAccent`'''
        ...

    def overbar(self) -> IMathBar:
        '''Sets a bar on the top of this element
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathBar`'''
        ...

    def underbar(self) -> IMathBar:
        '''Sets a bar on the bottom of this element
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathBar`'''
        ...

    def to_box(self) -> IMathBox:
        '''Places this element in a non-visual box (logical grouping) 
                    which is used to group components of an equation or other instance of mathematical text.
                    A boxed object can (for example) serve as an operator emulator with or without an alignment point, 
                    serve as a line break point, or be grouped such as not to allow line breaks within.
        :returns: Logical box with this element placed inside'''
        ...

    def get_children(self) -> List[IMathElement]:
        '''Get children elements'''
        ...

    @property
    def base(self) -> IMathElement:
        '''Base argument'''
        ...

    @property
    def superscript(self) -> IMathElement:
        '''Superscript'''
        ...

    @property
    def as_i_math_element(self) -> IMathElement:
        ...

    ...

class MathSuperscriptElementFactory:
    '''Allows to create IMathSuperscriptElement'''
    def __init__(self):
        ...

    def create_math_superscript_element(self, base_arg: IMathElement, super_script: IMathElement) -> IMathSuperscriptElement:
        '''Creates IMathSuperscriptElement
        :param base_arg: Base argument to apply superscript
        :param super_script: upper right index
        :returns: new IMathSuperscriptElement'''
        ...

    ...

class MathematicalText(MathElementBase):
    '''Mathematical text'''
    def __init__(self):
        '''Default constructor (create String.Empty Value)'''
        ...

    def __init__(self, math_symbol: char):
        '''Create MathText with single symbol
        :param math_symbol: single symbol'''
        ...

    def __init__(self, math_text: str):
        '''Create MathematicalText from text
        :param math_text: text value'''
        ...

    def __init__(self, math_text: str, portion_format: IPortionFormat):
        '''Create MathematicalText from text and format settings
        :param math_text: text value
        :param portion_format: text format settings'''
        ...

    @overload
    def join(self, math_element: IMathElement) -> IMathBlock:
        '''Joins a mathematical element and forms a mathematical block
        :param math_element: The element to be joined
        :returns: A new IMathBlock containing this instance and specified argument'''
        ...

    @overload
    def join(self, math_text: str) -> IMathBlock:
        '''Joins a mathematical text and forms a mathematical block
        :param math_text: Mathematical text to be joined
        :returns: A new IMathBlock containing this instance and specified argument'''
        ...

    @overload
    def divide(self, denominator: IMathElement) -> IMathFraction:
        '''Creates a fraction with this numerator and specified denominator
        :param denominator: Denominator
        :returns: new fraction'''
        ...

    @overload
    def divide(self, denominator: str) -> IMathFraction:
        '''Creates a fraction with this numerator and specified denominator
        :param denominator: Denominator
        :returns: new fraction'''
        ...

    @overload
    def divide(self, denominator: IMathElement, fraction_type: MathFractionTypes) -> IMathFraction:
        '''Creates a fraction of the specified type with this numerator and specified denominator
        :param denominator: Denominator
        :param fraction_type: Fraction type: Bar, NoBar, Skewed, Linear
        :returns: new fraction'''
        ...

    @overload
    def divide(self, denominator: str, fraction_type: MathFractionTypes) -> IMathFraction:
        '''Creates a fraction of the specified type with this numerator and specified denominator
        :param denominator: Denominator
        :param fraction_type: Fraction type: Bar, NoBar, Skewed, Linear
        :returns: new fraction'''
        ...

    @overload
    def enclose(self) -> IMathDelimiter:
        '''Encloses a math element in parenthesis
        :returns: The math element of type :py:class:`aspose.slides.mathtext.IMathDelimiter` which includes the parenthesis'''
        ...

    @overload
    def enclose(self, beginning_character: char, ending_character: char) -> IMathDelimiter:
        '''Encloses a math element in specified characters such as parenthesis or another characters as framing
        :param beginning_character: Beginning character (usually left bracket)
        :param ending_character: Ending character (usually right bracket)
        :returns: The math element of type :py:class:`aspose.slides.mathtext.IMathDelimiter` which includes specified characters as framing'''
        ...

    @overload
    def function(self, function_argument: IMathElement) -> IMathFunction:
        '''Takes a function of an argument using this instance as the function name
        :param function_argument: An argument of the function
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathFunction`'''
        ...

    @overload
    def function(self, function_argument: str) -> IMathFunction:
        '''Takes a function of an argument using this instance as the function name
        :param function_argument: An argument of the function
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathFunction`'''
        ...

    @overload
    def as_argument_of_function(self, function_name: IMathElement) -> IMathFunction:
        '''Takes specified function using this instance as the argument
        :param function_name: Function name
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathFunction`'''
        ...

    @overload
    def as_argument_of_function(self, function_name: str) -> IMathFunction:
        '''Takes specified function using this instance as the argument
        :param function_name: Function name
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathFunction`'''
        ...

    @overload
    def as_argument_of_function(self, function_type: MathFunctionsOfOneArgument) -> IMathFunction:
        '''Takes specified function using this instance as the argument
        :param function_type: One of the common function type of one argument
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathFunction`'''
        ...

    @overload
    def as_argument_of_function(self, function_type: MathFunctionsOfTwoArguments, additional_argument: IMathElement) -> IMathFunction:
        '''Takes specified function using this instance as the argument and specified additional argument
        :param function_type: One of the common function type of two arguments: Log, Lim, Min, Max
        :param additional_argument: Additional argument depending on the type of function
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathFunction`'''
        ...

    @overload
    def as_argument_of_function(self, function_type: MathFunctionsOfTwoArguments, additional_argument: str) -> IMathFunction:
        '''Takes specified function using this instance as the argument and specified additional argument
        :param function_type: One of the common function type of two arguments: Log, Lim, Min, Max
        :param additional_argument: Additional argument depending on the type of function
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathFunction`'''
        ...

    @overload
    def set_subscript(self, subscript: IMathElement) -> IMathSubscriptElement:
        '''Creates subscript
        :param subscript: Subscript (lower index on the right)
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathSubscriptElement`'''
        ...

    @overload
    def set_subscript(self, subscript: str) -> IMathSubscriptElement:
        '''Creates subscript
        :param subscript: Subscript (lower index on the right)
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathSubscriptElement`'''
        ...

    @overload
    def set_superscript(self, superscript: IMathElement) -> IMathSuperscriptElement:
        '''Creates superscript
        :param superscript: Superscript (upper index on the right)
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathSuperscriptElement`'''
        ...

    @overload
    def set_superscript(self, superscript: str) -> IMathSuperscriptElement:
        '''Creates superscript
        :param superscript: Superscript (upper index on the right)
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathSuperscriptElement`'''
        ...

    @overload
    def set_sub_superscript_on_the_right(self, subscript: IMathElement, superscript: IMathElement) -> IMathRightSubSuperscriptElement:
        '''Creates subscript and superscript on the right
        :param subscript: Subscript (lower index on the right)
        :param superscript: Superscript (upper index on the right)
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathRightSubSuperscriptElement`'''
        ...

    @overload
    def set_sub_superscript_on_the_right(self, subscript: str, superscript: str) -> IMathRightSubSuperscriptElement:
        '''Creates subscript and superscript on the right
        :param subscript: Subscript (lower index on the right)
        :param superscript: Superscript (upper index on the right)
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathRightSubSuperscriptElement`'''
        ...

    @overload
    def set_sub_superscript_on_the_left(self, subscript: IMathElement, superscript: IMathElement) -> IMathLeftSubSuperscriptElement:
        '''Creates subscript and superscript on the left
        :param subscript: Subscript (lower index on the left)
        :param superscript: Superscript (upper index on the left)
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathLeftSubSuperscriptElement`'''
        ...

    @overload
    def set_sub_superscript_on_the_left(self, subscript: str, superscript: str) -> IMathLeftSubSuperscriptElement:
        '''Creates subscript and superscript on the left
        :param subscript: Subscript (lower index on the left)
        :param superscript: Superscript (upper index on the left)
        :returns: New math element of type :py:class:`aspose.slides.mathtext.IMathLeftSubSuperscriptElement`'''
        ...

    @overload
    def radical(self, degree: IMathElement) -> IMathRadical:
        '''Specifies the mathematical root of the given degree from the specified argument.
        :param degree: Argument of Radical
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathRadical`'''
        ...

    @overload
    def radical(self, degree: str) -> IMathRadical:
        '''Specifies the mathematical root of the given degree from the specified argument.
        :param degree: Argument of Radical
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathRadical`'''
        ...

    @overload
    def set_upper_limit(self, limit: IMathElement) -> IMathLimit:
        '''Takes upper limit
        :param limit: limit
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathLimit`'''
        ...

    @overload
    def set_upper_limit(self, limit: str) -> IMathLimit:
        '''Takes upper limit
        :param limit: limit
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathLimit`'''
        ...

    @overload
    def set_lower_limit(self, limit: IMathElement) -> IMathLimit:
        '''Takes lower limit
        :param limit: limit
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathLimit`'''
        ...

    @overload
    def set_lower_limit(self, limit: str) -> IMathLimit:
        '''Takes lower limit
        :param limit: limit
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathLimit`'''
        ...

    @overload
    def nary(self, type: MathNaryOperatorTypes, lower_limit: IMathElement, upper_limit: IMathElement) -> IMathNaryOperator:
        '''Creates a N-ary operator
        :param type: The N-ary operator type
        :param lower_limit: The lower limit
        :param upper_limit: The upper limit
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathNaryOperator`'''
        ...

    @overload
    def nary(self, type: MathNaryOperatorTypes, lower_limit: str, upper_limit: str) -> IMathNaryOperator:
        '''Creates a N-ary operator
        :param type: The N-ary operator type
        :param lower_limit: The lower limit
        :param upper_limit: The upper limit
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathNaryOperator`'''
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes, lower_limit: IMathElement, upper_limit: IMathElement, limit_locations: MathLimitLocations) -> IMathNaryOperator:
        '''Takes the integral
        :param integral_type: Integral type
        :param lower_limit: Lower limit of integral
        :param upper_limit: Upper limit of integral
        :param limit_locations: location of limits
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathNaryOperator`'''
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes, lower_limit: IMathElement, upper_limit: IMathElement) -> IMathNaryOperator:
        '''Takes the integral
        :param integral_type: Integral type
        :param lower_limit: Lower limit of integral
        :param upper_limit: Upper limit of integral
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathNaryOperator`'''
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes) -> IMathNaryOperator:
        '''Takes the integral without limits
        :param integral_type: Integral type
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathNaryOperator`'''
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes, lower_limit: str, upper_limit: str, limit_locations: MathLimitLocations) -> IMathNaryOperator:
        '''Takes the integral
        :param integral_type: Integral type
        :param lower_limit: Lower limit of integral
        :param upper_limit: Upper limit of integral
        :param limit_locations: location of limits
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathNaryOperator`'''
        ...

    @overload
    def integral(self, integral_type: MathIntegralTypes, lower_limit: str, upper_limit: str) -> IMathNaryOperator:
        '''Takes the integral
        :param integral_type: Integral type
        :param lower_limit: Lower limit of integral
        :param upper_limit: Upper limit of integral
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathNaryOperator`'''
        ...

    @overload
    def group(self) -> IMathGroupingCharacter:
        '''Places this element in a group using a bottom curly bracket
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathGroupingCharacter`'''
        ...

    @overload
    def group(self, character: char, position: MathTopBotPositions, vertical_justification: MathTopBotPositions) -> IMathGroupingCharacter:
        '''Places this element in a group using a grouping character such as bottom curly bracket or another
        :param character: Grouping Character such as BOTTOM CURLY BRACKET (U+23DF) or any other
        :param position: Position of grouping character
        :param vertical_justification: Vertical justification of group character.
                    Specifies the alignment of the object with respect to the baseline.
                    For example, when the group character is above the object, 
                    VerticalJustification of Top signifies that the top of the object falls on the baseline;
                    when VerticalJustification is set to Bottom, the bottom of the object is on the baseline
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathGroupingCharacter`'''
        ...

    @overload
    def to_border_box(self) -> IMathBorderBox:
        '''Places this element in a border-box
        :returns: Border-box with this element placed inside'''
        ...

    @overload
    def to_border_box(self, hide_top: bool, hide_bottom: bool, hide_left: bool, hide_right: bool, strikethrough_horizontal: bool, strikethrough_vertical: bool, strikethrough_bottom_left_to_top_right: bool, strikethrough_top_left_to_bottom_right: bool) -> IMathBorderBox:
        '''Places this element in a border-box
        :param hide_top: Hide Top Edge
        :param hide_bottom: Hide Bottom Edge
        :param hide_left: Hide Left Edge
        :param hide_right: Hide Right Edge
        :param strikethrough_horizontal: Border Box Strikethrough Horizontal
        :param strikethrough_vertical: Border Box Strikethrough Vertical
        :param strikethrough_bottom_left_to_top_right: Border Box Strikethrough Bottom-Left to Top-Right
        :param strikethrough_top_left_to_bottom_right: Border Box Strikethrough Top-Left to Bottom-Right
        :returns: Border-box with this element placed inside'''
        ...

    def to_math_array(self) -> IMathArray:
        '''Puts in a vertical array
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathArray`'''
        ...

    def accent(self, accent_character: char) -> IMathAccent:
        '''Sets an accent mark (a character on the top of this element)
        :param accent_character: Accent character. The value should be within the range of (U+0300–U+036F) or (U+20D0–U+20EF)
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathAccent`'''
        ...

    def overbar(self) -> IMathBar:
        '''Sets a bar on the top of this element
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathBar`'''
        ...

    def underbar(self) -> IMathBar:
        '''Sets a bar on the bottom of this element
        :returns: New instance of type :py:class:`aspose.slides.mathtext.IMathBar`'''
        ...

    def to_box(self) -> IMathBox:
        '''Places this element in a non-visual box (logical grouping) 
                    which is used to group components of an equation or other instance of mathematical text.
                    A boxed object can (for example) serve as an operator emulator with or without an alignment point, 
                    serve as a line break point, or be grouped such as not to allow line breaks within.
        :returns: Logical box with this element placed inside'''
        ...

    def get_children(self) -> List[IMathElement]:
        ...

    @property
    def value(self) -> str:
        '''Text value'''
        ...

    @value.setter
    def value(self, value: str):
        '''Text value'''
        ...

    @property
    def format(self) -> IPortionFormat:
        '''Text formatting properties'''
        ...

    @property
    def as_i_math_element(self) -> IMathElement:
        ...

    ...

class MathematicalTextFactory:
    '''Allows to create a MathematicalText element'''
    def __init__(self):
        ...

    @overload
    def create_mathematical_text(self) -> IMathematicalText:
        '''Create empty mathematical text element
        :returns: new Mathematical Text'''
        ...

    @overload
    def create_mathematical_text(self, math_symbol: char) -> IMathematicalText:
        '''Create mathematical text element with the specified value
        :param math_symbol: single symbol to use as text value
        :returns: new Mathematical Text'''
        ...

    @overload
    def create_mathematical_text(self, math_text: str) -> IMathematicalText:
        '''Create empty mathematical text element with the specified value
        :param math_text: text value
        :returns: new Mathematical Text'''
        ...

    @overload
    def create_mathematical_text(self, math_text: str, portion_format: IPortionFormat) -> IMathematicalText:
        '''Create empty mathematical text element with the specified value and formatting properties
        :param math_text: text value
        :param portion_format: text format settings
        :returns: new Mathematical Text'''
        ...

    ...

class MathDelimiterShape:
    '''The location and size of the delimiters relative to the content of the operands'''
    @classmethod
    @property
    def CENTERED(cls) -> MathDelimiterShape:
        '''Centered to math axis'''
        ...

    @classmethod
    @property
    def MATCH(cls) -> MathDelimiterShape:
        '''Match to content'''
        ...

    ...

class MathFractionTypes:
    '''Fraction Types'''
    @classmethod
    @property
    def BAR(cls) -> MathFractionTypes:
        '''Bar Fraction'''
        ...

    @classmethod
    @property
    def SKEWED(cls) -> MathFractionTypes:
        '''Skewed'''
        ...

    @classmethod
    @property
    def LINEAR(cls) -> MathFractionTypes:
        '''Linear Fraction'''
        ...

    @classmethod
    @property
    def NO_BAR(cls) -> MathFractionTypes:
        '''No-Bar Fraction (Stack)'''
        ...

    ...

class MathFunctionsOfOneArgument:
    '''Common mathematical functions of one argument'''
    @classmethod
    @property
    def SIN(cls) -> MathFunctionsOfOneArgument:
        '''Sine'''
        ...

    @classmethod
    @property
    def COS(cls) -> MathFunctionsOfOneArgument:
        '''Cosine'''
        ...

    @classmethod
    @property
    def TAN(cls) -> MathFunctionsOfOneArgument:
        '''Tangent'''
        ...

    @classmethod
    @property
    def CSC(cls) -> MathFunctionsOfOneArgument:
        '''Сosecant'''
        ...

    @classmethod
    @property
    def SEC(cls) -> MathFunctionsOfOneArgument:
        '''Secant'''
        ...

    @classmethod
    @property
    def COT(cls) -> MathFunctionsOfOneArgument:
        '''Cotangent'''
        ...

    @classmethod
    @property
    def HYPERBOLIC_SIN(cls) -> MathFunctionsOfOneArgument:
        '''Hyperbolic sine'''
        ...

    @classmethod
    @property
    def HYPERBOLIC_COS(cls) -> MathFunctionsOfOneArgument:
        '''Hyperbolic Cosine'''
        ...

    @classmethod
    @property
    def HYPERBOLIC_TAN(cls) -> MathFunctionsOfOneArgument:
        '''Hyperbolic Tangent'''
        ...

    @classmethod
    @property
    def HYPERBOLIC_CSC(cls) -> MathFunctionsOfOneArgument:
        '''Hyperbolic Сosecant'''
        ...

    @classmethod
    @property
    def HYPERBOLIC_SEC(cls) -> MathFunctionsOfOneArgument:
        '''Hyperbolic Secant'''
        ...

    @classmethod
    @property
    def HYPERBOLIC_COT(cls) -> MathFunctionsOfOneArgument:
        '''Hyperbolic Cotangent'''
        ...

    @classmethod
    @property
    def LG(cls) -> MathFunctionsOfOneArgument:
        '''Decimal logarithm'''
        ...

    @classmethod
    @property
    def LN(cls) -> MathFunctionsOfOneArgument:
        '''Natural logarithm'''
        ...

    @classmethod
    @property
    def ARC_SIN(cls) -> MathFunctionsOfOneArgument:
        '''Arcsine'''
        ...

    @classmethod
    @property
    def ARC_COS(cls) -> MathFunctionsOfOneArgument:
        '''Arccosine'''
        ...

    @classmethod
    @property
    def ARC_TAN(cls) -> MathFunctionsOfOneArgument:
        '''Arctangent'''
        ...

    @classmethod
    @property
    def ARC_CSC(cls) -> MathFunctionsOfOneArgument:
        '''Arccosecant'''
        ...

    @classmethod
    @property
    def ARC_SEC(cls) -> MathFunctionsOfOneArgument:
        '''Arcsecant'''
        ...

    @classmethod
    @property
    def ARC_COT(cls) -> MathFunctionsOfOneArgument:
        '''Arccotangent'''
        ...

    @classmethod
    @property
    def HYPERBOLIC_ARC_SIN(cls) -> MathFunctionsOfOneArgument:
        '''Hyperbolic arcsine'''
        ...

    @classmethod
    @property
    def HYPERBOLIC_ARC_COS(cls) -> MathFunctionsOfOneArgument:
        '''Hyperbolic arccosine'''
        ...

    @classmethod
    @property
    def HYPERBOLIC_ARC_TAN(cls) -> MathFunctionsOfOneArgument:
        '''Hyperbolic arctangent'''
        ...

    @classmethod
    @property
    def HYPERBOLIC_ARC_CSC(cls) -> MathFunctionsOfOneArgument:
        '''Hyperbolic arccosecant'''
        ...

    @classmethod
    @property
    def HYPERBOLIC_ARC_SEC(cls) -> MathFunctionsOfOneArgument:
        '''Hyperbolic arcsecant'''
        ...

    @classmethod
    @property
    def HYPERBOLIC_ARC_COT(cls) -> MathFunctionsOfOneArgument:
        '''Hyperbolic arccotangent'''
        ...

    ...

class MathFunctionsOfTwoArguments:
    '''Common mathematical functions of two arguments'''
    @classmethod
    @property
    def LOG(cls) -> MathFunctionsOfTwoArguments:
        '''Log'''
        ...

    @classmethod
    @property
    def LIM(cls) -> MathFunctionsOfTwoArguments:
        '''Limit'''
        ...

    @classmethod
    @property
    def MIN(cls) -> MathFunctionsOfTwoArguments:
        '''Minimum'''
        ...

    @classmethod
    @property
    def MAX(cls) -> MathFunctionsOfTwoArguments:
        '''Maximum'''
        ...

    ...

class MathHorizontalAlignment:
    '''Horizontal Alignment'''
    @classmethod
    @property
    def NOT_DEFINED(cls) -> MathHorizontalAlignment:
        '''Value is not defined'''
        ...

    @classmethod
    @property
    def LEFT(cls) -> MathHorizontalAlignment:
        '''Left Justification'''
        ...

    @classmethod
    @property
    def CENTER(cls) -> MathHorizontalAlignment:
        '''Center'''
        ...

    @classmethod
    @property
    def RIGHT(cls) -> MathHorizontalAlignment:
        '''Right'''
        ...

    ...

class MathIntegralTypes:
    '''Mathematical integral types'''
    @classmethod
    @property
    def SIMPLE(cls) -> MathIntegralTypes:
        '''Integral: '∫''''
        ...

    @classmethod
    @property
    def DOUBLE(cls) -> MathIntegralTypes:
        '''Double Integral: '∬''''
        ...

    @classmethod
    @property
    def TRIPLE(cls) -> MathIntegralTypes:
        '''Triple Integral: '∭''''
        ...

    @classmethod
    @property
    def CONTOUR(cls) -> MathIntegralTypes:
        '''Contour Integral: '∮''''
        ...

    @classmethod
    @property
    def SURFACE(cls) -> MathIntegralTypes:
        '''Surface Integral: '∯''''
        ...

    @classmethod
    @property
    def VOLUME(cls) -> MathIntegralTypes:
        '''VolumeIntegral: '∰''''
        ...

    ...

class MathJustification:
    '''Specifies justification of the math paragraph (a series of adjacent instances of mathematical text within the same paragraph)'''
    @classmethod
    @property
    def LEFT_JUSTIFIED(cls) -> MathJustification:
        '''Align mathematical text to the left'''
        ...

    @classmethod
    @property
    def RIGHT_JUSTIFIED(cls) -> MathJustification:
        '''Align mathematical text to the right'''
        ...

    @classmethod
    @property
    def CENTERED(cls) -> MathJustification:
        '''Align mathematical text to the center'''
        ...

    @classmethod
    @property
    def CENTERED_AS_GROUP(cls) -> MathJustification:
        '''Center on the page the entire group of math blocks as a single unit.
                    This means that the instances of mathematical text can be aligned with respect to each other, 
                    but the entire group of mathematical text is centered as a whole.'''
        ...

    ...

class MathLimitLocations:
    '''Location of limits (subscript/superscript) in n-ary operators.'''
    @classmethod
    @property
    def NOT_DEFINED(cls) -> MathLimitLocations:
        '''Not defined'''
        ...

    @classmethod
    @property
    def UNDER_OVER(cls) -> MathLimitLocations:
        '''Limits draw at top and bottom of the operator symbol'''
        ...

    @classmethod
    @property
    def SUBSCRIPT_SUPERSCRIPT(cls) -> MathLimitLocations:
        '''Limits draw as subscript and superscript'''
        ...

    ...

class MathNaryOperatorTypes:
    '''Nary operator IMathNaryOperator types (excluding integrals)
                For integrals :py:enum:`aspose.slides.mathtext.MathIntegralTypes`'''
    @classmethod
    @property
    def SUMMATION(cls) -> MathNaryOperatorTypes:
        '''Summation: '∑''''
        ...

    @classmethod
    @property
    def PRODUCT(cls) -> MathNaryOperatorTypes:
        '''Product: '∏''''
        ...

    @classmethod
    @property
    def CO_PRODUCT(cls) -> MathNaryOperatorTypes:
        '''Coproduct: '∐''''
        ...

    @classmethod
    @property
    def INTERSECTION(cls) -> MathNaryOperatorTypes:
        '''Intersection: '∩''''
        ...

    @classmethod
    @property
    def UNION(cls) -> MathNaryOperatorTypes:
        '''Union: '∪''''
        ...

    @classmethod
    @property
    def LOGICAL_AND(cls) -> MathNaryOperatorTypes:
        '''Logical And: '∧''''
        ...

    @classmethod
    @property
    def LOGICAL_OR(cls) -> MathNaryOperatorTypes:
        '''Logical Or: '∨''''
        ...

    ...

class MathRowSpacingRule:
    '''The type of vertical spacing between columns in a matrix or array'''
    @classmethod
    @property
    def SINGLE_LINE_GAP(cls) -> MathRowSpacingRule:
        '''single line gap'''
        ...

    @classmethod
    @property
    def ONE_AND_A_HALF_LINE_GAP(cls) -> MathRowSpacingRule:
        '''One and a half line gap'''
        ...

    @classmethod
    @property
    def TWO_LINE_GAP(cls) -> MathRowSpacingRule:
        '''Two lines gap'''
        ...

    @classmethod
    @property
    def EXACTLY(cls) -> MathRowSpacingRule:
        '''Exactly (rely on value of the RowSpacing property, measured in points)'''
        ...

    @classmethod
    @property
    def MULTIPLE(cls) -> MathRowSpacingRule:
        '''Multiple (rely on value of the RowSpacing property, measured in lines)'''
        ...

    ...

class MathSpacingRules:
    '''Types of gap (horizontal spacing) between columns of a matrix'''
    @classmethod
    @property
    def SINGLE_SPACING_GAP(cls) -> MathSpacingRules:
        '''Single (1 em for columns or 1 line for rows)'''
        ...

    @classmethod
    @property
    def ONE_AND_HALF_SPACING_GAP(cls) -> MathSpacingRules:
        '''One and a half (1.5 ems for columns or 1.5 lines for rows)'''
        ...

    @classmethod
    @property
    def DOUBLE_SPACING_GAP(cls) -> MathSpacingRules:
        '''Double spacing (2 ems for columns or 2 lines for rows)'''
        ...

    @classmethod
    @property
    def EXACTLY(cls) -> MathSpacingRules:
        '''Exactly value
                    For columns, rely on value of ColumnGap, measured in twips
                    For rows, rely on value of RowGap, measured in twips'''
        ...

    @classmethod
    @property
    def MULTIPLE(cls) -> MathSpacingRules:
        '''Multiple
                    For columns, rely on value of ColumnGap, measured in 0.5 em increments
                    For rows, rely on value of RowGap, measured in lines'''
        ...

    ...

class MathTopBotPositions:
    '''Top/bottom positions enumeration'''
    @classmethod
    @property
    def NOT_DEFINED(cls) -> MathTopBotPositions:
        '''Not defined'''
        ...

    @classmethod
    @property
    def TOP(cls) -> MathTopBotPositions:
        '''Top'''
        ...

    @classmethod
    @property
    def BOTTOM(cls) -> MathTopBotPositions:
        '''Bottom'''
        ...

    ...

class MathVerticalAlignment:
    '''Vertical Alignment'''
    @classmethod
    @property
    def NOT_DEFINED(cls) -> MathVerticalAlignment:
        '''Value is not defined'''
        ...

    @classmethod
    @property
    def TOP(cls) -> MathVerticalAlignment:
        '''Top'''
        ...

    @classmethod
    @property
    def CENTER(cls) -> MathVerticalAlignment:
        '''Center'''
        ...

    @classmethod
    @property
    def BOTTOM(cls) -> MathVerticalAlignment:
        '''Bottom'''
        ...

    ...

